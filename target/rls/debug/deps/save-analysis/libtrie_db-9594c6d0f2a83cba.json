{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3","program":"/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","trie_db","--edition=2018","/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"rustc-hex\"","--cfg","feature=\"std\"","-C","metadata=9594c6d0f2a83cba","-C","extra-filename=-9594c6d0f2a83cba","--out-dir","/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","-L","dependency=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","--extern","hash_db=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libhash_db-d38c1365a7005e89.rmeta","--extern","hashbrown=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libhashbrown-5cae8a361a705c57.rmeta","--extern","log=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/liblog-5304c8458a68373a.rmeta","--extern","rustc_hex=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/librustc_hex-6bca7133b2843550.rmeta","--extern","smallvec=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsmallvec-8544fa198532a31d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libtrie_db-9594c6d0f2a83cba.rmeta"},"prelude":{"crate_id":{"name":"trie_db","disambiguator":[45886576227001508,916380512454680783]},"crate_root":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src","external_crates":[{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","num":18,"id":{"name":"hash_db","disambiguator":[16222527159578958881,15417756680510520186]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","num":19,"id":{"name":"hashbrown","disambiguator":[15858687212683710517,10679103842408037307]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","num":20,"id":{"name":"ahash","disambiguator":[11000207869931019655,11365772628104082715]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","num":21,"id":{"name":"log","disambiguator":[3545289885770114131,433247333334147900]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","num":22,"id":{"name":"cfg_if","disambiguator":[11748229077813686416,18120593503603249335]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","num":23,"id":{"name":"rustc_hex","disambiguator":[8252233264516824388,17670331916333253350]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","num":24,"id":{"name":"smallvec","disambiguator":[12123569432201045790,1609040209808900757]}}],"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":602,"byte_end":14140,"line_start":14,"line_end":452,"column_start":1,"column_end":69}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":23769,"byte_end":23783,"line_start":33,"line_end":33,"column_start":25,"column_end":39},"alias_span":null,"name":"generate_proof","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":0,"index":1537},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":23808,"byte_end":23813,"line_start":34,"line_end":34,"column_start":24,"column_end":29},"alias_span":null,"name":"VerifyError","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":23830,"byte_end":23842,"line_start":34,"line_end":34,"column_start":46,"column_end":58},"alias_span":null,"name":"verify_proof","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":18,"index":40},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1553,"byte_end":1559,"line_start":60,"line_end":60,"column_start":19,"column_end":25},"alias_span":null,"name":"HashDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":48},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1561,"byte_end":1570,"line_start":60,"line_end":60,"column_start":27,"column_end":36},"alias_span":null,"name":"HashDBRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":11},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1572,"byte_end":1578,"line_start":60,"line_end":60,"column_start":38,"column_end":44},"alias_span":null,"name":"Hasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":266},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1604,"byte_end":1610,"line_start":61,"line_end":61,"column_start":24,"column_end":30},"alias_span":null,"name":"TrieDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":315},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1612,"byte_end":1626,"line_start":61,"line_end":61,"column_start":32,"column_end":46},"alias_span":null,"name":"TrieDBIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":491},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1655,"byte_end":1664,"line_start":62,"line_end":62,"column_start":27,"column_end":36},"alias_span":null,"name":"TrieDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1600},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1666,"byte_end":1680,"line_start":62,"line_end":62,"column_start":38,"column_end":52},"alias_span":null,"name":"ChildReference","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":598},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1711,"byte_end":1723,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"alias_span":null,"name":"SecTrieDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":565},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1750,"byte_end":1759,"line_start":64,"line_end":64,"column_start":26,"column_end":35},"alias_span":null,"name":"SecTrieDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":648},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1783,"byte_end":1788,"line_start":65,"line_end":65,"column_start":23,"column_end":28},"alias_span":null,"name":"FatDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":669},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1790,"byte_end":1803,"line_start":65,"line_end":65,"column_start":30,"column_end":43},"alias_span":null,"name":"FatDBIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":702},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1830,"byte_end":1838,"line_start":66,"line_end":66,"column_start":25,"column_end":33},"alias_span":null,"name":"FatDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1659},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1865,"byte_end":1873,"line_start":67,"line_end":67,"column_start":26,"column_end":34},"alias_span":null,"name":"Recorder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1637},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1875,"byte_end":1881,"line_start":67,"line_end":67,"column_start":36,"column_end":42},"alias_span":null,"name":"Record","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":929},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1906,"byte_end":1912,"line_start":68,"line_end":68,"column_start":23,"column_end":29},"alias_span":null,"name":"Lookup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1721},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1937,"byte_end":1948,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"alias_span":null,"name":"NibbleSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1707},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1950,"byte_end":1959,"line_start":69,"line_end":69,"column_start":37,"column_end":46},"alias_span":null,"name":"NibbleVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1078},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1961,"byte_end":1971,"line_start":69,"line_end":69,"column_start":48,"column_end":58},"alias_span":null,"name":"nibble_ops","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1117},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2002,"byte_end":2011,"line_start":70,"line_end":70,"column_start":29,"column_end":38},"alias_span":null,"name":"NodeCodec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1115},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2013,"byte_end":2020,"line_start":70,"line_end":70,"column_start":40,"column_end":47},"alias_span":null,"name":"Partial","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":782},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2051,"byte_end":2061,"line_start":71,"line_end":71,"column_start":29,"column_end":39},"alias_span":null,"name":"trie_visit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":788},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2063,"byte_end":2081,"line_start":71,"line_end":71,"column_start":41,"column_end":59},"alias_span":null,"name":"ProcessEncodedNode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":791},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2085,"byte_end":2096,"line_start":72,"line_end":72,"column_start":3,"column_end":14},"alias_span":null,"name":"TrieBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":813},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2098,"byte_end":2106,"line_start":72,"line_end":72,"column_start":16,"column_end":24},"alias_span":null,"name":"TrieRoot","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":825},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2108,"byte_end":2124,"line_start":72,"line_end":72,"column_start":26,"column_end":42},"alias_span":null,"name":"TrieRootUnhashed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":874},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2152,"byte_end":2170,"line_start":73,"line_end":73,"column_start":26,"column_end":44},"alias_span":null,"name":"TrieDBNodeIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1201},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2200,"byte_end":2214,"line_start":74,"line_end":74,"column_start":29,"column_end":43},"alias_span":null,"name":"decode_compact","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1205},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2216,"byte_end":2240,"line_start":74,"line_end":74,"column_start":45,"column_end":69},"alias_span":null,"name":"decode_compact_from_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1183},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2242,"byte_end":2256,"line_start":74,"line_end":74,"column_start":71,"column_end":85},"alias_span":null,"name":"encode_compact","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":832},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2311,"byte_end":2324,"line_start":77,"line_end":77,"column_start":28,"column_end":41},"alias_span":null,"name":"TrieRootPrint","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":602,"byte_end":14140,"line_start":14,"line_end":452,"column_start":1,"column_end":69},"name":"","qualname":"::","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":67},{"krate":0,"index":237},{"krate":0,"index":333},{"krate":0,"index":549},{"krate":0,"index":586},{"krate":0,"index":620},{"krate":0,"index":631},{"krate":0,"index":689},{"krate":0,"index":724},{"krate":0,"index":847},{"krate":0,"index":912},{"krate":0,"index":944},{"krate":0,"index":1104},{"krate":0,"index":1135},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1730},{"krate":0,"index":1766},{"krate":0,"index":1769},{"krate":0,"index":1759},{"krate":0,"index":1762},{"krate":0,"index":1755},{"krate":0,"index":1751},{"krate":0,"index":1252},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1263},{"krate":0,"index":1267},{"krate":0,"index":1272},{"krate":0,"index":1278},{"krate":0,"index":1285},{"krate":0,"index":1293},{"krate":0,"index":1309},{"krate":0,"index":1320},{"krate":0,"index":1774},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1783},{"krate":0,"index":1781},{"krate":0,"index":1323},{"krate":0,"index":1788},{"krate":0,"index":1795},{"krate":0,"index":1792},{"krate":0,"index":1325},{"krate":0,"index":1338},{"krate":0,"index":1350},{"krate":0,"index":1358},{"krate":0,"index":1363},{"krate":0,"index":1382},{"krate":0,"index":1384}],"decl_id":null,"docs":" Trie interface and implementation.\n","sig":null,"attributes":[{"value":"/ Trie interface and implementation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":646,"byte_end":684,"line_start":16,"line_end":16,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"node","qualname":"::node","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":1386},{"krate":0,"index":1410},{"krate":0,"index":1407},{"krate":0,"index":1405},{"krate":0,"index":1399},{"krate":0,"index":1401},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":38},{"krate":0,"index":1413},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1442},{"krate":0,"index":1444},{"krate":0,"index":1439},{"krate":0,"index":1436},{"krate":0,"index":1455},{"krate":0,"index":1471},{"krate":0,"index":1469},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":40},{"krate":0,"index":1473},{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1478},{"krate":0,"index":1476},{"krate":0,"index":44},{"krate":0,"index":1487},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1507},{"krate":0,"index":1505},{"krate":0,"index":50},{"krate":0,"index":1518},{"krate":0,"index":1533},{"krate":0,"index":1527},{"krate":0,"index":1529},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":60}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15069,"byte_end":15076,"line_start":24,"line_end":24,"column_start":10,"column_end":17},"name":"NodeKey","qualname":"::node::NodeKey","value":"(usize, nibble::BackingByteVec)","parent":null,"children":[],"decl_id":null,"docs":" Partial node key type: offset and owned value of a nibbleslice.\n Offset is applied on first byte of array (bytes are right aligned).\n","sig":null,"attributes":[{"value":"/ Partial node key type: offset and owned value of a nibbleslice.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":14920,"byte_end":14987,"line_start":22,"line_end":22,"column_start":1,"column_end":68}},{"value":"/ Offset is applied on first byte of array (bytes are right aligned).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":14988,"byte_end":15059,"line_start":23,"line_end":23,"column_start":1,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1388},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15262,"byte_end":15266,"line_start":29,"line_end":29,"column_start":2,"column_end":6},"name":"Hash","qualname":"::node::NodeHandle::Hash","value":"NodeHandle::Hash(&'a [u8])","parent":{"krate":0,"index":1386},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1391},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15279,"byte_end":15285,"line_start":30,"line_end":30,"column_start":2,"column_end":8},"name":"Inline","qualname":"::node::NodeHandle::Inline","value":"NodeHandle::Inline(&'a [u8])","parent":{"krate":0,"index":1386},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1386},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15244,"byte_end":15254,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"NodeHandle","qualname":"::node::NodeHandle","value":"pub enum NodeHandle<'a> { Hash(&'a [u8]), Inline(&'a [u8]), }","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1391}],"decl_id":null,"docs":" A reference to a trie node which may be stored within another trie node.\n","sig":null,"attributes":[{"value":"/ A reference to a trie node which may be stored within another trie node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15113,"byte_end":15189,"line_start":26,"line_end":26,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15405,"byte_end":15416,"line_start":34,"line_end":34,"column_start":8,"column_end":19},"name":"decode_hash","qualname":"::node::decode_hash","value":"pub fn decode_hash<H: Hasher>(&[u8]) -> Option<H::Out>","parent":null,"children":[],"decl_id":null,"docs":" Read a hash from a slice into a Hasher output. Returns None if the slice is the wrong length.\n","sig":null,"attributes":[{"value":"/ Read a hash from a slice into a Hasher output. Returns None if the slice is the wrong length.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15300,"byte_end":15397,"line_start":33,"line_end":33,"column_start":1,"column_end":98}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1415},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15828,"byte_end":15833,"line_start":48,"line_end":48,"column_start":2,"column_end":7},"name":"Empty","qualname":"::node::Node::Empty","value":"Node::Empty","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" Null trie node; could be an empty root or an empty branch entry.\n","sig":null,"attributes":[{"value":"/ Null trie node; could be an empty root or an empty branch entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15758,"byte_end":15826,"line_start":47,"line_end":47,"column_start":2,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1417},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15901,"byte_end":15905,"line_start":50,"line_end":50,"column_start":2,"column_end":6},"name":"Leaf","qualname":"::node::Node::Leaf","value":"Node::Leaf(NibbleSlice, &'a [u8])","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" Leaf node; has key slice and value. Value may not be empty.\n","sig":null,"attributes":[{"value":"/ Leaf node; has key slice and value. Value may not be empty.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15836,"byte_end":15899,"line_start":49,"line_end":49,"column_start":2,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1421},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16007,"byte_end":16016,"line_start":52,"line_end":52,"column_start":2,"column_end":11},"name":"Extension","qualname":"::node::Node::Extension","value":"Node::Extension(NibbleSlice, NodeHandle)","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" Extension node; has key slice and node data. Data may not be null.\n","sig":null,"attributes":[{"value":"/ Extension node; has key slice and node data. Data may not be null.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15935,"byte_end":16005,"line_start":51,"line_end":51,"column_start":2,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1425},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16158,"byte_end":16164,"line_start":55,"line_end":55,"column_start":2,"column_end":8},"name":"Branch","qualname":"::node::Node::Branch","value":"Node::Branch([Option<NodeHandle>; ], Option<&'a [u8]>)","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" Branch node; has slice of child nodes (each possibly null)\n and an optional immediate node data.\n","sig":null,"attributes":[{"value":"/ Branch node; has slice of child nodes (each possibly null)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16052,"byte_end":16114,"line_start":53,"line_end":53,"column_start":2,"column_end":64}},{"value":"/ and an optional immediate node data.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16116,"byte_end":16156,"line_start":54,"line_end":54,"column_start":2,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1430},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16318,"byte_end":16331,"line_start":57,"line_end":57,"column_start":2,"column_end":15},"name":"NibbledBranch","qualname":"::node::Node::NibbledBranch","value":"Node::NibbledBranch(NibbleSlice, [Option<NodeHandle>; ], Option<&'a [u8]>)","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" Branch node with support for a nibble (when extension nodes are not used).\n","sig":null,"attributes":[{"value":"/ Branch node with support for a nibble (when extension nodes are not used).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16238,"byte_end":16316,"line_start":56,"line_end":56,"column_start":2,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":1413},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15746,"byte_end":15750,"line_start":46,"line_end":46,"column_start":10,"column_end":14},"name":"Node","qualname":"::node::Node","value":"pub enum Node<'a> {\n\n    /// Null trie node; could be an empty root or an empty branch entry.\n    Empty,\n\n    /// Leaf node; has key slice and value. Value may not be empty.\n    Leaf(NibbleSlice, &'a [u8]),\n\n    /// Extension node; has key slice and node data. Data may not be null.\n    Extension(NibbleSlice, NodeHandle),\n\n    /// Branch node; has slice of child nodes (each possibly null)\n    /// and an optional immediate node data.\n    Branch([Option<NodeHandle>; ], Option<&'a [u8]>),\n\n    /// Branch node with support for a nibble (when extension nodes are not used).\n    NibbledBranch(NibbleSlice, [Option<NodeHandle>; ], Option<&'a [u8]>),\n}","parent":null,"children":[{"krate":0,"index":1415},{"krate":0,"index":1417},{"krate":0,"index":1421},{"krate":0,"index":1425},{"krate":0,"index":1430}],"decl_id":null,"docs":" Type of node in the trie and essential information thereof.\n","sig":null,"attributes":[{"value":"/ Type of node in the trie and essential information thereof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":15597,"byte_end":15660,"line_start":43,"line_end":43,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1456},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16669,"byte_end":16673,"line_start":64,"line_end":64,"column_start":2,"column_end":6},"name":"Hash","qualname":"::node::NodeHandlePlan::Hash","value":"NodeHandlePlan::Hash(Range<usize>)","parent":{"krate":0,"index":1455},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1459},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16690,"byte_end":16696,"line_start":65,"line_end":65,"column_start":2,"column_end":8},"name":"Inline","qualname":"::node::NodeHandlePlan::Inline","value":"NodeHandlePlan::Inline(Range<usize>)","parent":{"krate":0,"index":1455},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1455},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16651,"byte_end":16665,"line_start":63,"line_end":63,"column_start":10,"column_end":24},"name":"NodeHandlePlan","qualname":"::node::NodeHandlePlan","value":"pub enum NodeHandlePlan { Hash(Range<usize>), Inline(Range<usize>), }","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1459}],"decl_id":null,"docs":" A `NodeHandlePlan` is a decoding plan for constructing a `NodeHandle` from an encoded trie\n node. This is used as a substructure of `NodePlan`. See `NodePlan` for details.\n","sig":null,"attributes":[{"value":"/ A `NodeHandlePlan` is a decoding plan for constructing a `NodeHandle` from an encoded trie","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16424,"byte_end":16518,"line_start":60,"line_end":60,"column_start":1,"column_end":95}},{"value":"/ node. This is used as a substructure of `NodePlan`. See `NodePlan` for details.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16519,"byte_end":16602,"line_start":61,"line_end":61,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16995,"byte_end":17000,"line_start":72,"line_end":72,"column_start":9,"column_end":14},"name":"build","qualname":"<NodeHandlePlan>::build","value":"pub fn build<'a, 'b>(&'a Self, &'b [u8]) -> NodeHandle","parent":null,"children":[],"decl_id":null,"docs":" Build a node handle by decoding a byte slice according to the node handle plan. It is the\n responsibility of the caller to ensure that the node plan was created for the argument\n data, otherwise the call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a node handle by decoding a byte slice according to the node handle plan. It is the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16738,"byte_end":16831,"line_start":69,"line_end":69,"column_start":2,"column_end":95}},{"value":"/ responsibility of the caller to ensure that the node plan was created for the argument","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16833,"byte_end":16923,"line_start":70,"line_end":70,"column_start":2,"column_end":92}},{"value":"/ data, otherwise the call may decode incorrectly or panic.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16925,"byte_end":16986,"line_start":71,"line_end":71,"column_start":2,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1473},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":17500,"byte_end":17515,"line_start":84,"line_end":84,"column_start":12,"column_end":27},"name":"NibbleSlicePlan","qualname":"::node::NibbleSlicePlan","value":"NibbleSlicePlan {  }","parent":null,"children":[{"krate":0,"index":1474},{"krate":0,"index":1475}],"decl_id":null,"docs":" A `NibbleSlicePlan` is a blueprint for decoding a nibble slice from a byte slice. The\n `NibbleSlicePlan` is created by parsing a byte slice and can be reused multiple times.\n","sig":null,"attributes":[{"value":"/ A `NibbleSlicePlan` is a blueprint for decoding a nibble slice from a byte slice. The","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":17232,"byte_end":17321,"line_start":80,"line_end":80,"column_start":1,"column_end":90}},{"value":"/ `NibbleSlicePlan` is created by parsing a byte slice and can be reused multiple times.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":17322,"byte_end":17412,"line_start":81,"line_end":81,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":17633,"byte_end":17636,"line_start":91,"line_end":91,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleSlicePlan>::new","value":"pub fn new(Range<usize>, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a nibble slice decode plan.\n","sig":null,"attributes":[{"value":"/ Construct a nibble slice decode plan.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":17583,"byte_end":17624,"line_start":90,"line_end":90,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":17784,"byte_end":17787,"line_start":99,"line_end":99,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleSlicePlan>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the nibble length of the slice.\n","sig":null,"attributes":[{"value":"/ Returns the nibble length of the slice.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":17732,"byte_end":17775,"line_start":98,"line_end":98,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18139,"byte_end":18144,"line_start":106,"line_end":106,"column_start":9,"column_end":14},"name":"build","qualname":"<NibbleSlicePlan>::build","value":"pub fn build<'a, 'b>(&'a Self, &'b [u8]) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Build a nibble slice by decoding a byte slice according to the plan. It is the\n responsibility of the caller to ensure that the node plan was created for the argument\n data, otherwise the call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a nibble slice by decoding a byte slice according to the plan. It is the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":17893,"byte_end":17975,"line_start":103,"line_end":103,"column_start":2,"column_end":84}},{"value":"/ responsibility of the caller to ensure that the node plan was created for the argument","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":17977,"byte_end":18067,"line_start":104,"line_end":104,"column_start":2,"column_end":92}},{"value":"/ data, otherwise the call may decode incorrectly or panic.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18069,"byte_end":18130,"line_start":105,"line_end":105,"column_start":2,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1488},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18848,"byte_end":18853,"line_start":121,"line_end":121,"column_start":2,"column_end":7},"name":"Empty","qualname":"::node::NodePlan::Empty","value":"NodePlan::Empty","parent":{"krate":0,"index":1487},"children":[],"decl_id":null,"docs":" Null trie node; could be an empty root or an empty branch entry.\n","sig":null,"attributes":[{"value":"/ Null trie node; could be an empty root or an empty branch entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18778,"byte_end":18846,"line_start":120,"line_end":120,"column_start":2,"column_end":70}}]},{"kind":"StructVariant","id":{"krate":0,"index":1490},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18906,"byte_end":18910,"line_start":123,"line_end":123,"column_start":2,"column_end":6},"name":"Leaf","qualname":"::node::NodePlan::Leaf","value":"NodePlan::Leaf { partial, value }","parent":{"krate":0,"index":1487},"children":[],"decl_id":null,"docs":" Leaf node; has a partial key plan and value.\n","sig":null,"attributes":[{"value":"/ Leaf node; has a partial key plan and value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18856,"byte_end":18904,"line_start":122,"line_end":122,"column_start":2,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":1493},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19029,"byte_end":19038,"line_start":128,"line_end":128,"column_start":2,"column_end":11},"name":"Extension","qualname":"::node::NodePlan::Extension","value":"NodePlan::Extension { partial, child }","parent":{"krate":0,"index":1487},"children":[],"decl_id":null,"docs":" Extension node; has a partial key plan and child data.\n","sig":null,"attributes":[{"value":"/ Extension node; has a partial key plan and child data.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18969,"byte_end":19027,"line_start":127,"line_end":127,"column_start":2,"column_end":60}}]},{"kind":"StructVariant","id":{"krate":0,"index":1496},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19205,"byte_end":19211,"line_start":134,"line_end":134,"column_start":2,"column_end":8},"name":"Branch","qualname":"::node::NodePlan::Branch","value":"NodePlan::Branch { value, children }","parent":{"krate":0,"index":1487},"children":[],"decl_id":null,"docs":" Branch node; has slice of child nodes (each possibly null)\n and an optional immediate node data.\n","sig":null,"attributes":[{"value":"/ Branch node; has slice of child nodes (each possibly null)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19099,"byte_end":19161,"line_start":132,"line_end":132,"column_start":2,"column_end":64}},{"value":"/ and an optional immediate node data.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19163,"byte_end":19203,"line_start":133,"line_end":133,"column_start":2,"column_end":42}}]},{"kind":"StructVariant","id":{"krate":0,"index":1500},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19395,"byte_end":19408,"line_start":139,"line_end":139,"column_start":2,"column_end":15},"name":"NibbledBranch","qualname":"::node::NodePlan::NibbledBranch","value":"NodePlan::NibbledBranch { partial, value, children }","parent":{"krate":0,"index":1487},"children":[],"decl_id":null,"docs":" Branch node with support for a nibble (when extension nodes are not used).\n","sig":null,"attributes":[{"value":"/ Branch node with support for a nibble (when extension nodes are not used).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19315,"byte_end":19393,"line_start":138,"line_end":138,"column_start":2,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":1487},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18766,"byte_end":18774,"line_start":119,"line_end":119,"column_start":10,"column_end":18},"name":"NodePlan","qualname":"::node::NodePlan","value":"pub enum NodePlan {\n\n    /// Null trie node; could be an empty root or an empty branch entry.\n    Empty,\n\n    /// Leaf node; has a partial key plan and value.\n    Leaf {\n        partial: NibbleSlicePlan,\n        value: Range<usize>,\n    },\n\n    /// Extension node; has a partial key plan and child data.\n    Extension {\n        partial: NibbleSlicePlan,\n        child: NodeHandlePlan,\n    },\n\n    /// Branch node; has slice of child nodes (each possibly null)\n    /// and an optional immediate node data.\n    Branch {\n        value: Option<Range<usize>>,\n        children: [Option<NodeHandlePlan>; ],\n    },\n\n    /// Branch node with support for a nibble (when extension nodes are not used).\n    NibbledBranch {\n        partial: NibbleSlicePlan,\n        value: Option<Range<usize>>,\n        children: [Option<NodeHandlePlan>; ],\n    },\n}","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1493},{"krate":0,"index":1496},{"krate":0,"index":1500}],"decl_id":null,"docs":" A `NodePlan` is a blueprint for decoding a node from a byte slice. The `NodePlan` is created\n by parsing an encoded node and can be reused multiple times. This is useful as a `Node` borrows\n from a byte slice and this struct does not.","sig":null,"attributes":[{"value":"/ A `NodePlan` is a blueprint for decoding a node from a byte slice. The `NodePlan` is created","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18272,"byte_end":18368,"line_start":111,"line_end":111,"column_start":1,"column_end":97}},{"value":"/ by parsing an encoded node and can be reused multiple times. This is useful as a `Node` borrows","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18369,"byte_end":18468,"line_start":112,"line_end":112,"column_start":1,"column_end":100}},{"value":"/ from a byte slice and this struct does not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18469,"byte_end":18516,"line_start":113,"line_end":113,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18517,"byte_end":18520,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ The enum values mirror those of `Node` except that instead of byte slices, this struct stores","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18521,"byte_end":18618,"line_start":115,"line_end":115,"column_start":1,"column_end":98}},{"value":"/ ranges that can be used to index into a large byte slice.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":18619,"byte_end":18680,"line_start":116,"line_end":116,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19802,"byte_end":19807,"line_start":150,"line_end":150,"column_start":9,"column_end":14},"name":"build","qualname":"<NodePlan>::build","value":"pub fn build<'a, 'b>(&'a Self, &'b [u8]) -> Node","parent":null,"children":[],"decl_id":null,"docs":" Build a node by decoding a byte slice according to the node plan. It is the responsibility\n of the caller to ensure that the node plan was created for the argument data, otherwise the\n call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a node by decoding a byte slice according to the node plan. It is the responsibility","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19559,"byte_end":19653,"line_start":147,"line_end":147,"column_start":2,"column_end":96}},{"value":"/ of the caller to ensure that the node plan was created for the argument data, otherwise the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19655,"byte_end":19750,"line_start":148,"line_end":148,"column_start":2,"column_end":97}},{"value":"/ call may decode incorrectly or panic.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19752,"byte_end":19793,"line_start":149,"line_end":149,"column_start":2,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1518},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":21092,"byte_end":21101,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"OwnedNode","qualname":"::node::OwnedNode","value":"OwnedNode {  }","parent":null,"children":[{"krate":0,"index":1520},{"krate":0,"index":1521}],"decl_id":null,"docs":" An `OwnedNode` is an owned type from which a `Node` can be constructed which borrows data from\n the `OwnedNode`. This is useful for trie iterators.\n","sig":null,"attributes":[{"value":"/ An `OwnedNode` is an owned type from which a `Node` can be constructed which borrows data from","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":20857,"byte_end":20955,"line_start":177,"line_end":177,"column_start":1,"column_end":99}},{"value":"/ the `OwnedNode`. This is useful for trie iterators.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":20956,"byte_end":21011,"line_start":178,"line_end":178,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":21284,"byte_end":21287,"line_start":188,"line_end":188,"column_start":9,"column_end":12},"name":"new","qualname":"<OwnedNode<D>>::new","value":"pub fn new<C: NodeCodec>(D) -> Result<Self, C::Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct an `OwnedNode` by decoding an owned data source according to some codec.\n","sig":null,"attributes":[{"value":"/ Construct an `OwnedNode` by decoding an owned data source according to some codec.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":21189,"byte_end":21275,"line_start":187,"line_end":187,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":21473,"byte_end":21477,"line_start":194,"line_end":194,"column_start":9,"column_end":13},"name":"data","qualname":"<OwnedNode<D>>::data","value":"pub fn data(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the backing data.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the backing data.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":21420,"byte_end":21464,"line_start":193,"line_end":193,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":21579,"byte_end":21588,"line_start":199,"line_end":199,"column_start":9,"column_end":18},"name":"node_plan","qualname":"<OwnedNode<D>>::node_plan","value":"pub fn node_plan(&Self) -> &NodePlan","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the node decode plan.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the node decode plan.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":21522,"byte_end":21570,"line_start":198,"line_end":198,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":21696,"byte_end":21700,"line_start":204,"line_end":204,"column_start":9,"column_end":13},"name":"node","qualname":"<OwnedNode<D>>::node","value":"pub fn node(&Self) -> Node","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Node` by borrowing data from this struct.\n","sig":null,"attributes":[{"value":"/ Construct a `Node` by borrowing data from this struct.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":21629,"byte_end":21687,"line_start":203,"line_end":203,"column_start":2,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"proof","qualname":"::proof","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":154}],"decl_id":null,"docs":" Generation and verification of compact proofs for Merkle-Patricia tries.","sig":null,"attributes":[{"value":"/ Generation and verification of compact proofs for Merkle-Patricia tries.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":22365,"byte_end":22441,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":22442,"byte_end":22445,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Using this module, it is possible to generate a logarithmic-space proof of inclusion or","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":22446,"byte_end":22537,"line_start":17,"line_end":17,"column_start":1,"column_end":92}},{"value":"/ non-inclusion of certain key-value pairs in a trie with a known root. The proof contains","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":22538,"byte_end":22630,"line_start":18,"line_end":18,"column_start":1,"column_end":93}},{"value":"/ information so that the verifier can reconstruct the subset of nodes in the trie required to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":22631,"byte_end":22727,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ lookup the keys. The trie nodes are not included in their entirety as data which the verifier","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":22728,"byte_end":22825,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ can compute for themself is omitted. In particular, the values of included keys and and hashes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":22826,"byte_end":22924,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ of other trie nodes in the proof are omitted.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":22925,"byte_end":22974,"line_start":22,"line_end":22,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":22975,"byte_end":22978,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The proof is a sequence of the subset of nodes in the trie traversed while performing lookups","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":22979,"byte_end":23076,"line_start":24,"line_end":24,"column_start":1,"column_end":98}},{"value":"/ on all keys. The trie nodes are listed in pre-order traversal order with some values and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":23077,"byte_end":23169,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ internal hashes omitted. In particular, values on leaf nodes, child references on extension","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":23170,"byte_end":23265,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ nodes, values on branch nodes corresponding to a key in the statement, and child references on","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":23266,"byte_end":23364,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ branch nodes corresponding to another node in the proof are all omitted. The proof is verified","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":23365,"byte_end":23463,"line_start":28,"line_end":28,"column_start":1,"column_end":99}},{"value":"/ by iteratively reconstructing the trie nodes using the values proving as part of the statement","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":23464,"byte_end":23562,"line_start":29,"line_end":29,"column_start":1,"column_end":99}},{"value":"/ and the hashes of other reconstructed nodes. Since the nodes in the proof are arranged in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":23563,"byte_end":23656,"line_start":30,"line_end":30,"column_start":1,"column_end":94}},{"value":"/ pre-order traversal order, the construction can be done efficiently using a stack.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/mod.rs","byte_start":23657,"byte_end":23743,"line_start":31,"line_end":31,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/generate.rs","byte_start":31443,"byte_end":31457,"line_start":221,"line_end":221,"column_start":8,"column_end":22},"name":"generate_proof","qualname":"::proof::generate::generate_proof","value":"pub fn generate_proof<'a, T, L, I, K>(&T, I)\n-> TrieResult<Vec<Vec<u8>>, TrieHash<L>, CError<L>> where T: Trie<L>,\nL: TrieLayout, I: IntoIterator<Item = &'a K>, K: 'a + AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Generate a compact proof for key-value pairs in a trie given a set of keys.","sig":null,"attributes":[{"value":"/ Generate a compact proof for key-value pairs in a trie given a set of keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/generate.rs","byte_start":31300,"byte_end":31379,"line_start":218,"line_end":218,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/generate.rs","byte_start":31380,"byte_end":31383,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Assumes inline nodes have only inline children.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/generate.rs","byte_start":31384,"byte_end":31435,"line_start":220,"line_end":220,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1540},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41491,"byte_end":41503,"line_start":33,"line_end":33,"column_start":2,"column_end":14},"name":"DuplicateKey","qualname":"::proof::verify::Error::DuplicateKey","value":"Error::DuplicateKey(Vec<u8>)","parent":{"krate":0,"index":1537},"children":[],"decl_id":null,"docs":" The statement being verified contains multiple key-value pairs with the same key. The\n parameter is the duplicated key.\n","sig":null,"attributes":[{"value":"/ The statement being verified contains multiple key-value pairs with the same key. The","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41362,"byte_end":41451,"line_start":31,"line_end":31,"column_start":2,"column_end":91}},{"value":"/ parameter is the duplicated key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41453,"byte_end":41489,"line_start":32,"line_end":32,"column_start":2,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1543},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41569,"byte_end":41583,"line_start":35,"line_end":35,"column_start":2,"column_end":16},"name":"ExtraneousNode","qualname":"::proof::verify::Error::ExtraneousNode","value":"Error::ExtraneousNode","parent":{"krate":0,"index":1537},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous node.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41515,"byte_end":41567,"line_start":34,"line_end":34,"column_start":2,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1545},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41692,"byte_end":41707,"line_start":38,"line_end":38,"column_start":2,"column_end":17},"name":"ExtraneousValue","qualname":"::proof::verify::Error::ExtraneousValue","value":"Error::ExtraneousValue(Vec<u8>)","parent":{"krate":0,"index":1537},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous value which should have been omitted from the\n proof.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous value which should have been omitted from the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41586,"byte_end":41678,"line_start":36,"line_end":36,"column_start":2,"column_end":94}},{"value":"/ proof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41680,"byte_end":41690,"line_start":37,"line_end":37,"column_start":2,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1548},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41812,"byte_end":41835,"line_start":40,"line_end":40,"column_start":2,"column_end":25},"name":"ExtraneousHashReference","qualname":"::proof::verify::Error::ExtraneousHashReference","value":"Error::ExtraneousHashReference(HO)","parent":{"krate":0,"index":1537},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous hash reference the should have been omitted.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous hash reference the should have been omitted.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41719,"byte_end":41810,"line_start":39,"line_end":39,"column_start":2,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1551},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41923,"byte_end":41944,"line_start":42,"line_end":42,"column_start":2,"column_end":23},"name":"InvalidChildReference","qualname":"::proof::verify::Error::InvalidChildReference","value":"Error::InvalidChildReference(Vec<u8>)","parent":{"krate":0,"index":1537},"children":[],"decl_id":null,"docs":" The proof contains an invalid child reference that exceeds the hash length.\n","sig":null,"attributes":[{"value":"/ The proof contains an invalid child reference that exceeds the hash length.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41842,"byte_end":41921,"line_start":41,"line_end":41,"column_start":2,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1554},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":42031,"byte_end":42044,"line_start":44,"line_end":44,"column_start":2,"column_end":15},"name":"ValueMismatch","qualname":"::proof::verify::Error::ValueMismatch","value":"Error::ValueMismatch(Vec<u8>)","parent":{"krate":0,"index":1537},"children":[],"decl_id":null,"docs":" The proof indicates that an expected value was not found in the trie.\n","sig":null,"attributes":[{"value":"/ The proof indicates that an expected value was not found in the trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41956,"byte_end":42029,"line_start":43,"line_end":43,"column_start":2,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1557},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":42113,"byte_end":42128,"line_start":46,"line_end":46,"column_start":2,"column_end":17},"name":"IncompleteProof","qualname":"::proof::verify::Error::IncompleteProof","value":"Error::IncompleteProof","parent":{"krate":0,"index":1537},"children":[],"decl_id":null,"docs":" The proof is missing trie nodes required to verify.\n","sig":null,"attributes":[{"value":"/ The proof is missing trie nodes required to verify.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":42056,"byte_end":42111,"line_start":45,"line_end":45,"column_start":2,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1559},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":42188,"byte_end":42200,"line_start":48,"line_end":48,"column_start":2,"column_end":14},"name":"RootMismatch","qualname":"::proof::verify::Error::RootMismatch","value":"Error::RootMismatch(HO)","parent":{"krate":0,"index":1537},"children":[],"decl_id":null,"docs":" The root hash computed from the proof is incorrect.\n","sig":null,"attributes":[{"value":"/ The root hash computed from the proof is incorrect.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":42131,"byte_end":42186,"line_start":47,"line_end":47,"column_start":2,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1562},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":42257,"byte_end":42268,"line_start":50,"line_end":50,"column_start":2,"column_end":13},"name":"DecodeError","qualname":"::proof::verify::Error::DecodeError","value":"Error::DecodeError(CE)","parent":{"krate":0,"index":1537},"children":[],"decl_id":null,"docs":" One of the proof nodes could not be decoded.\n","sig":null,"attributes":[{"value":"/ One of the proof nodes could not be decoded.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":42207,"byte_end":42255,"line_start":49,"line_end":49,"column_start":2,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":1537},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41345,"byte_end":41350,"line_start":30,"line_end":30,"column_start":10,"column_end":15},"name":"Error","qualname":"::proof::verify::Error","value":"pub enum Error<HO, CE> {\n\n    /// The statement being verified contains multiple key-value pairs with the same key. The\n    /// parameter is the duplicated key.\n    DuplicateKey(Vec<u8>),\n\n    /// The proof contains at least one extraneous node.\n    ExtraneousNode,\n\n    /// The proof contains at least one extraneous value which should have been omitted from the\n    /// proof.\n    ExtraneousValue(Vec<u8>),\n\n    /// The proof contains at least one extraneous hash reference the should have been omitted.\n    ExtraneousHashReference(HO),\n\n    /// The proof contains an invalid child reference that exceeds the hash length.\n    InvalidChildReference(Vec<u8>),\n\n    /// The proof indicates that an expected value was not found in the trie.\n    ValueMismatch(Vec<u8>),\n\n    /// The proof is missing trie nodes required to verify.\n    IncompleteProof,\n\n    /// The root hash computed from the proof is incorrect.\n    RootMismatch(HO),\n\n    /// One of the proof nodes could not be decoded.\n    DecodeError(CE),\n}","parent":null,"children":[{"krate":0,"index":1540},{"krate":0,"index":1543},{"krate":0,"index":1545},{"krate":0,"index":1548},{"krate":0,"index":1551},{"krate":0,"index":1554},{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1562}],"decl_id":null,"docs":" Errors that may occur during proof verification. Most of the errors types simply indicate that\n the proof is invalid with respect to the statement being verified, and the exact error type can\n be used for debugging.\n","sig":null,"attributes":[{"value":"/ Errors that may occur during proof verification. Most of the errors types simply indicate that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41041,"byte_end":41139,"line_start":25,"line_end":25,"column_start":1,"column_end":99}},{"value":"/ the proof is invalid with respect to the statement being verified, and the exact error type can","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41140,"byte_end":41239,"line_start":26,"line_end":26,"column_start":1,"column_end":100}},{"value":"/ be used for debugging.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":41240,"byte_end":41266,"line_start":27,"line_end":27,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":52557,"byte_end":52569,"line_start":391,"line_end":391,"column_start":8,"column_end":20},"name":"verify_proof","qualname":"::proof::verify::verify_proof","value":"pub fn verify_proof<'a, L, I, K, V>(&<L::Hash as Hasher>::Out, &[Vec<u8>], I)\n-> Result<(), Error<TrieHash<L>, CError<L>>> where L: TrieLayout,\nI: IntoIterator<Item = &'a (K, Option<V>)>, K: 'a + AsRef<[u8]>, V: 'a +\nAsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Verify a compact proof for key-value pairs in a trie given a root hash.\n","sig":null,"attributes":[{"value":"/ Verify a compact proof for key-value pairs in a trie given a root hash.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":52474,"byte_end":52549,"line_start":390,"line_end":390,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":237},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"triedb","qualname":"::triedb","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":281},{"krate":0,"index":292},{"krate":0,"index":300},{"krate":0,"index":311},{"krate":0,"index":315},{"krate":0,"index":319},{"krate":0,"index":324},{"krate":0,"index":328}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":266},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57182,"byte_end":57188,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"TrieDB","qualname":"::triedb::TrieDB","value":"TrieDB {  }","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"decl_id":null,"docs":" A `Trie` implementation using a generic `HashDB` backing database, a `Hasher`\n implementation to generate keys and a `NodeCodec` implementation to encode/decode\n the nodes.","sig":null,"attributes":[{"value":"/ A `Trie` implementation using a generic `HashDB` backing database, a `Hasher`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56244,"byte_end":56325,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ implementation to generate keys and a `NodeCodec` implementation to encode/decode","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56326,"byte_end":56411,"line_start":29,"line_end":29,"column_start":1,"column_end":86}},{"value":"/ the nodes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56412,"byte_end":56426,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56427,"byte_end":56430,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` trait object. You can use `db()` to get the backing database object.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56431,"byte_end":56522,"line_start":32,"line_end":32,"column_start":1,"column_end":92}},{"value":"/ Use `get` and `contains` to query values associated with keys in the trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56523,"byte_end":56601,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56602,"byte_end":56605,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56606,"byte_end":56619,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/ ```ignore","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56620,"byte_end":56633,"line_start":36,"line_end":36,"column_start":1,"column_end":14}},{"value":"/ use hash_db::Hasher;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56634,"byte_end":56658,"line_start":37,"line_end":37,"column_start":1,"column_end":25}},{"value":"/ use reference_trie::{RefTrieDBMut, RefTrieDB, Trie, TrieMut};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56659,"byte_end":56724,"line_start":38,"line_end":38,"column_start":1,"column_end":66}},{"value":"/ use trie_db::DBValue;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56725,"byte_end":56750,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ use keccak_hasher::KeccakHasher;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56751,"byte_end":56787,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/ use memory_db::*;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56788,"byte_end":56809,"line_start":41,"line_end":41,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56810,"byte_end":56813,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let mut memdb = MemoryDB::<KeccakHasher, HashKey<_>, _>::default();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56814,"byte_end":56885,"line_start":43,"line_end":43,"column_start":1,"column_end":72}},{"value":"/ let mut root = Default::default();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56886,"byte_end":56924,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ RefTrieDBMut::new(&mut memdb, &mut root).insert(b\"foo\", b\"bar\").unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":56925,"byte_end":57002,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ let t = RefTrieDB::new(&memdb, &root).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57003,"byte_end":57054,"line_start":46,"line_end":46,"column_start":1,"column_end":52}},{"value":"/ assert!(t.contains(b\"foo\").unwrap());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57055,"byte_end":57096,"line_start":47,"line_end":47,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(t.get(b\"foo\").unwrap().unwrap(), b\"bar\".to_vec());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57097,"byte_end":57162,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57163,"byte_end":57170,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57555,"byte_end":57558,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDB>::new","value":"pub fn new(&'db HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`\n Returns an error if `root` does not exist\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57436,"byte_end":57499,"line_start":64,"line_end":64,"column_start":2,"column_end":65}},{"value":"/ Returns an error if `root` does not exist","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57501,"byte_end":57546,"line_start":65,"line_end":65,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57865,"byte_end":57867,"line_start":78,"line_end":78,"column_start":9,"column_end":11},"name":"db","qualname":"<TrieDB>::db","value":"pub fn db(&'db Self) -> &'db HashDBRef<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57827,"byte_end":57856,"line_start":77,"line_end":77,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":315},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":63306,"byte_end":63320,"line_start":265,"line_end":265,"column_start":12,"column_end":26},"name":"TrieDBIterator","qualname":"::triedb::TrieDBIterator","value":"TrieDBIterator {  }","parent":null,"children":[{"krate":0,"index":318}],"decl_id":null,"docs":" Iterator for going through all values in the trie in pre-order traversal order.\n","sig":null,"attributes":[{"value":"/ Iterator for going through all values in the trie in pre-order traversal order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":63211,"byte_end":63294,"line_start":264,"line_end":264,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":63464,"byte_end":63467,"line_start":271,"line_end":271,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBIterator>::new","value":"pub fn new(&'a TrieDB<, L>) -> Result<TrieDBIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator.\n","sig":null,"attributes":[{"value":"/ Create a new iterator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":63429,"byte_end":63455,"line_start":270,"line_end":270,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":63692,"byte_end":63704,"line_start":277,"line_end":277,"column_start":9,"column_end":21},"name":"new_prefixed","qualname":"<TrieDBIterator>::new_prefixed","value":"pub fn new_prefixed(&'a TrieDB<, L>, &[u8])\n-> Result<TrieDBIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator, but limited to a given prefix.\n","sig":null,"attributes":[{"value":"/ Create a new iterator, but limited to a given prefix.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":63626,"byte_end":63683,"line_start":276,"line_end":276,"column_start":2,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":333},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"triedbmut","qualname":"::triedbmut","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":2032},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":2048},{"krate":0,"index":1584},{"krate":0,"index":1587},{"krate":0,"index":1589},{"krate":0,"index":1597},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":405},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":441},{"krate":0,"index":451},{"krate":0,"index":459},{"krate":0,"index":463},{"krate":0,"index":1600},{"krate":0,"index":1614},{"krate":0,"index":1612},{"krate":0,"index":1609},{"krate":0,"index":472},{"krate":0,"index":477},{"krate":0,"index":481},{"krate":0,"index":486},{"krate":0,"index":491},{"krate":0,"index":500},{"krate":0,"index":533},{"krate":0,"index":543},{"krate":0,"index":547}],"decl_id":null,"docs":" In-memory trie representation.\n","sig":null,"attributes":[{"value":"/ In-memory trie representation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":65792,"byte_end":65826,"line_start":15,"line_end":15,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1602},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":74571,"byte_end":74575,"line_start":310,"line_end":310,"column_start":2,"column_end":6},"name":"Hash","qualname":"::triedbmut::ChildReference::Hash","value":"ChildReference::Hash(HO)","parent":{"krate":0,"index":1600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1605},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":74582,"byte_end":74588,"line_start":311,"line_end":311,"column_start":2,"column_end":8},"name":"Inline","qualname":"::triedbmut::ChildReference::Inline","value":"ChildReference::Inline(HO, usize)","parent":{"krate":0,"index":1600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1600},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":74495,"byte_end":74509,"line_start":309,"line_end":309,"column_start":10,"column_end":24},"name":"ChildReference","qualname":"::triedbmut::ChildReference","value":"pub enum ChildReference<HO> { Hash(HO), Inline(HO, usize), }","parent":null,"children":[{"krate":0,"index":1602},{"krate":0,"index":1605}],"decl_id":null,"docs":" Used to build a collection of child nodes from a collection of `NodeHandle`s\n","sig":null,"attributes":[{"value":"/ Used to build a collection of child nodes from a collection of `NodeHandle`s","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":74338,"byte_end":74418,"line_start":306,"line_end":306,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":491},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77567,"byte_end":77576,"line_start":414,"line_end":414,"column_start":12,"column_end":21},"name":"TrieDBMut","qualname":"::triedbmut::TrieDBMut","value":"TrieDBMut {  }","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499}],"decl_id":null,"docs":" A `Trie` implementation using a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A `Trie` implementation using a generic `HashDB` backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76541,"byte_end":76611,"line_start":387,"line_end":387,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76612,"byte_end":76615,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ Use it as a `TrieMut` trait object. You can use `db()` to get the backing database object.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76616,"byte_end":76710,"line_start":389,"line_end":389,"column_start":1,"column_end":95}},{"value":"/ Note that changes are not committed to the database until `commit` is called.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76711,"byte_end":76792,"line_start":390,"line_end":390,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76793,"byte_end":76796,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ Querying the root or dropping the trie will commit automatically.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76797,"byte_end":76866,"line_start":392,"line_end":392,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76867,"byte_end":76870,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76871,"byte_end":76874,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76875,"byte_end":76888,"line_start":395,"line_end":395,"column_start":1,"column_end":14}},{"value":"/ ```ignore","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76889,"byte_end":76902,"line_start":396,"line_end":396,"column_start":1,"column_end":14}},{"value":"/ use hash_db::Hasher;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76903,"byte_end":76927,"line_start":397,"line_end":397,"column_start":1,"column_end":25}},{"value":"/ use reference_trie::{RefTrieDBMut, TrieMut};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76928,"byte_end":76976,"line_start":398,"line_end":398,"column_start":1,"column_end":49}},{"value":"/ use trie_db::DBValue;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76977,"byte_end":77002,"line_start":399,"line_end":399,"column_start":1,"column_end":26}},{"value":"/ use keccak_hasher::KeccakHasher;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77003,"byte_end":77039,"line_start":400,"line_end":400,"column_start":1,"column_end":37}},{"value":"/ use memory_db::*;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77040,"byte_end":77061,"line_start":401,"line_end":401,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77062,"byte_end":77065,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/ let mut memdb = MemoryDB::<KeccakHasher, HashKey<_>, DBValue>::default();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77066,"byte_end":77143,"line_start":403,"line_end":403,"column_start":1,"column_end":78}},{"value":"/ let mut root = Default::default();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77144,"byte_end":77182,"line_start":404,"line_end":404,"column_start":1,"column_end":39}},{"value":"/ let mut t = RefTrieDBMut::new(&mut memdb, &mut root);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77183,"byte_end":77240,"line_start":405,"line_end":405,"column_start":1,"column_end":58}},{"value":"/ assert!(t.is_empty());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77241,"byte_end":77267,"line_start":406,"line_end":406,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(*t.root(), KeccakHasher::hash(&[0u8][..]));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77268,"byte_end":77326,"line_start":407,"line_end":407,"column_start":1,"column_end":59}},{"value":"/ t.insert(b\"foo\", b\"bar\").unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77327,"byte_end":77365,"line_start":408,"line_end":408,"column_start":1,"column_end":39}},{"value":"/ assert!(t.contains(b\"foo\").unwrap());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77366,"byte_end":77407,"line_start":409,"line_end":409,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(t.get(b\"foo\").unwrap().unwrap(), b\"bar\".to_vec());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77408,"byte_end":77473,"line_start":410,"line_end":410,"column_start":1,"column_end":66}},{"value":"/ t.remove(b\"foo\").unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77474,"byte_end":77504,"line_start":411,"line_end":411,"column_start":1,"column_end":31}},{"value":"/ assert!(!t.contains(b\"foo\").unwrap());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77505,"byte_end":77547,"line_start":412,"line_end":412,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77548,"byte_end":77555,"line_start":413,"line_end":413,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":78095,"byte_end":78098,"line_start":433,"line_end":433,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBMut>::new","value":"pub fn new(&'a mut HashDB<L::Hash, DBValue>, &'a mut TrieHash<L>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with backing database `db` and empty `root`.\n","sig":null,"attributes":[{"value":"/ Create a new trie with backing database `db` and empty `root`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":78020,"byte_end":78086,"line_start":432,"line_end":432,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":78544,"byte_end":78557,"line_start":449,"line_end":449,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<TrieDBMut>::from_existing","value":"pub fn from_existing(&'a mut HashDB<L::Hash, DBValue>, &'a mut TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root.\n Returns an error if `root` does not exist.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":78424,"byte_end":78487,"line_start":447,"line_end":447,"column_start":2,"column_end":65}},{"value":"/ Returns an error if `root` does not exist.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":78489,"byte_end":78535,"line_start":448,"line_end":448,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":79006,"byte_end":79008,"line_start":468,"line_end":468,"column_start":9,"column_end":11},"name":"db","qualname":"<TrieDBMut>::db","value":"pub fn db(&Self) -> &HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":78968,"byte_end":78997,"line_start":467,"line_end":467,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":79112,"byte_end":79118,"line_start":473,"line_end":473,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<TrieDBMut>::db_mut","value":"pub fn db_mut(&mut Self) -> &mut HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database mutably.\n","sig":null,"attributes":[{"value":"/ Get the backing database mutably.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":79066,"byte_end":79103,"line_start":472,"line_end":472,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":109419,"byte_end":109425,"line_start":1406,"line_end":1406,"column_start":9,"column_end":15},"name":"commit","qualname":"<TrieDBMut>::commit","value":"pub fn commit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Commit the in-memory changes to disk, freeing their storage and\n updating the state root.\n","sig":null,"attributes":[{"value":"/ Commit the in-memory changes to disk, freeing their storage and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":109313,"byte_end":109380,"line_start":1404,"line_end":1404,"column_start":2,"column_end":69}},{"value":"/ updating the state root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":109382,"byte_end":109410,"line_start":1405,"line_end":1405,"column_start":2,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":549},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sectriedb","qualname":"::sectriedb","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":569},{"krate":0,"index":575}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":565},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117045,"byte_end":117054,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"SecTrieDB","qualname":"::sectriedb::SecTrieDB","value":"SecTrieDB {  }","parent":null,"children":[{"krate":0,"index":568}],"decl_id":null,"docs":" A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":116845,"byte_end":116936,"line_start":20,"line_end":20,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":116937,"byte_end":116940,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` trait object. You can use `raw()` to get the backing `TrieDB` object.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":116941,"byte_end":117033,"line_start":22,"line_end":22,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117406,"byte_end":117409,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"name":"new","qualname":"<SecTrieDB>::new","value":"pub fn new(&'db HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117167,"byte_end":117236,"line_start":34,"line_end":34,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117238,"byte_end":117241,"line_start":35,"line_end":35,"column_start":2,"column_end":5}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117243,"byte_end":117301,"line_start":36,"line_end":36,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117303,"byte_end":117351,"line_start":37,"line_end":37,"column_start":2,"column_end":50}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117353,"byte_end":117397,"line_start":38,"line_end":38,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117646,"byte_end":117649,"line_start":47,"line_end":47,"column_start":9,"column_end":12},"name":"raw","qualname":"<SecTrieDB>::raw","value":"pub fn raw(&Self) -> &TrieDB<, L>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the underlying raw `TrieDB` struct.\n","sig":null,"attributes":[{"value":"/ Get a reference to the underlying raw `TrieDB` struct.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117579,"byte_end":117637,"line_start":46,"line_end":46,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117765,"byte_end":117772,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"raw_mut","qualname":"<SecTrieDB>::raw_mut","value":"pub fn raw_mut(&mut Self) -> &mut TrieDB","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the underlying raw `TrieDB` struct.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the underlying raw `TrieDB` struct.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117690,"byte_end":117756,"line_start":51,"line_end":51,"column_start":2,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":586},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sectriedbmut","qualname":"::sectriedbmut","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":602},{"krate":0,"index":609}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":598},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119413,"byte_end":119425,"line_start":22,"line_end":22,"column_start":12,"column_end":24},"name":"SecTrieDBMut","qualname":"::sectriedbmut::SecTrieDBMut","value":"SecTrieDBMut {  }","parent":null,"children":[{"krate":0,"index":601}],"decl_id":null,"docs":" A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119185,"byte_end":119284,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119285,"byte_end":119288,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object. You can use `raw()` to get the backing `TrieDBMut`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119289,"byte_end":119389,"line_start":20,"line_end":20,"column_start":1,"column_end":101}},{"value":"/ object.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119390,"byte_end":119401,"line_start":21,"line_end":21,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119730,"byte_end":119733,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<SecTrieDBMut>::new","value":"pub fn new(&'db mut HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119542,"byte_end":119611,"line_start":33,"line_end":33,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119613,"byte_end":119671,"line_start":34,"line_end":34,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119673,"byte_end":119721,"line_start":35,"line_end":35,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119993,"byte_end":120006,"line_start":43,"line_end":43,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<SecTrieDBMut>::from_existing","value":"pub fn from_existing(&'db mut HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`.","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119869,"byte_end":119933,"line_start":40,"line_end":40,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119935,"byte_end":119938,"line_start":41,"line_end":41,"column_start":2,"column_end":5}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119940,"byte_end":119984,"line_start":42,"line_end":42,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":120235,"byte_end":120237,"line_start":51,"line_end":51,"column_start":9,"column_end":11},"name":"db","qualname":"<SecTrieDBMut>::db","value":"pub fn db(&Self) -> &HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":120197,"byte_end":120226,"line_start":50,"line_end":50,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":120336,"byte_end":120342,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<SecTrieDBMut>::db_mut","value":"pub fn db_mut(&mut Self) -> &mut HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":120298,"byte_end":120327,"line_start":53,"line_end":53,"column_start":2,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":620},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"recorder","qualname":"::recorder","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":1637},{"krate":0,"index":1656},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1645},{"krate":0,"index":1647},{"krate":0,"index":1642},{"krate":0,"index":1659},{"krate":0,"index":1663},{"krate":0,"index":622},{"krate":0,"index":625}],"decl_id":null,"docs":" Trie query recorder.\n","sig":null,"attributes":[{"value":"/ Trie query recorder.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":121811,"byte_end":121835,"line_start":15,"line_end":15,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1637},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":121984,"byte_end":121990,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"name":"Record","qualname":"::recorder::Record","value":"Record { depth, data, hash }","parent":null,"children":[{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1641}],"decl_id":null,"docs":" A record of a visited node.\n","sig":null,"attributes":[{"value":"/ A record of a visited node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":121865,"byte_end":121896,"line_start":19,"line_end":19,"column_start":1,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1639},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122031,"byte_end":122036,"line_start":24,"line_end":24,"column_start":6,"column_end":11},"name":"depth","qualname":"::recorder::Record::depth","value":"u32","parent":{"krate":0,"index":1637},"children":[],"decl_id":null,"docs":" The depth of this node.\n","sig":null,"attributes":[{"value":"/ The depth of this node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":121998,"byte_end":122025,"line_start":23,"line_end":23,"column_start":2,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1640},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122080,"byte_end":122084,"line_start":27,"line_end":27,"column_start":6,"column_end":10},"name":"data","qualname":"::recorder::Record::data","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1637},"children":[],"decl_id":null,"docs":" The raw data of the node.\n","sig":null,"attributes":[{"value":"/ The raw data of the node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122045,"byte_end":122074,"line_start":26,"line_end":26,"column_start":2,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1641},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122128,"byte_end":122132,"line_start":30,"line_end":30,"column_start":6,"column_end":10},"name":"hash","qualname":"::recorder::Record::hash","value":"HO","parent":{"krate":0,"index":1637},"children":[],"decl_id":null,"docs":" The hash of the data.\n","sig":null,"attributes":[{"value":"/ The hash of the data.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122097,"byte_end":122122,"line_start":29,"line_end":29,"column_start":2,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1659},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122236,"byte_end":122244,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"Recorder","qualname":"::recorder::Recorder","value":"Recorder {  }","parent":null,"children":[{"krate":0,"index":1661},{"krate":0,"index":1662}],"decl_id":null,"docs":" Records trie nodes as they pass it.\n","sig":null,"attributes":[{"value":"/ Records trie nodes as they pass it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122141,"byte_end":122180,"line_start":33,"line_end":33,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122495,"byte_end":122498,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"new","qualname":"<Recorder<HO>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Recorder` which records all given nodes.\n","sig":null,"attributes":[{"value":"/ Create a new `Recorder` which records all given nodes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122417,"byte_end":122475,"line_start":47,"line_end":47,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122477,"byte_end":122486,"line_start":48,"line_end":48,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122621,"byte_end":122631,"line_start":54,"line_end":54,"column_start":9,"column_end":19},"name":"with_depth","qualname":"<Recorder<HO>>::with_depth","value":"pub fn with_depth(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Recorder` which only records nodes beyond a given depth.\n","sig":null,"attributes":[{"value":"/ Create a `Recorder` which only records nodes beyond a given depth.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122542,"byte_end":122612,"line_start":53,"line_end":53,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122787,"byte_end":122793,"line_start":62,"line_end":62,"column_start":9,"column_end":15},"name":"record","qualname":"<Recorder<HO>>::record","value":"pub fn record(&mut Self, &HO, &[u8], u32)","parent":null,"children":[],"decl_id":null,"docs":" Record a visited node, given its hash, data, and depth.\n","sig":null,"attributes":[{"value":"/ Record a visited node, given its hash, data, and depth.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122719,"byte_end":122778,"line_start":61,"line_end":61,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":123007,"byte_end":123012,"line_start":73,"line_end":73,"column_start":9,"column_end":14},"name":"drain","qualname":"<Recorder<HO>>::drain","value":"pub fn drain(&mut Self) -> Vec<Record<HO>>","parent":null,"children":[],"decl_id":null,"docs":" Drain all visited records.\n","sig":null,"attributes":[{"value":"/ Drain all visited records.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122968,"byte_end":122998,"line_start":72,"line_end":72,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":648},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124129,"byte_end":124134,"line_start":25,"line_end":25,"column_start":12,"column_end":17},"name":"FatDB","qualname":"::fatdb::FatDB","value":"FatDB {  }","parent":null,"children":[{"krate":0,"index":651}],"decl_id":null,"docs":" A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.\n Additionaly it stores inserted hash-key mappings for later retrieval.","sig":null,"attributes":[{"value":"/ A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":123898,"byte_end":123989,"line_start":21,"line_end":21,"column_start":1,"column_end":92}},{"value":"/ Additionaly it stores inserted hash-key mappings for later retrieval.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":123990,"byte_end":124063,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124064,"byte_end":124067,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124068,"byte_end":124117,"line_start":24,"line_end":24,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124432,"byte_end":124435,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDB>::new","value":"pub fn new(&'db HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124244,"byte_end":124313,"line_start":36,"line_end":36,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124315,"byte_end":124373,"line_start":37,"line_end":37,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124375,"byte_end":124423,"line_start":38,"line_end":38,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124639,"byte_end":124641,"line_start":47,"line_end":47,"column_start":9,"column_end":11},"name":"db","qualname":"<FatDB>::db","value":"pub fn db(&Self) -> &HashDBRef<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124601,"byte_end":124630,"line_start":46,"line_end":46,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":669},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":125441,"byte_end":125454,"line_start":77,"line_end":77,"column_start":12,"column_end":25},"name":"FatDBIterator","qualname":"::fatdb::FatDBIterator","value":"FatDBIterator {  }","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673}],"decl_id":null,"docs":" Itarator over inserted pairs of key values.\n","sig":null,"attributes":[{"value":"/ Itarator over inserted pairs of key values.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":125382,"byte_end":125429,"line_start":76,"line_end":76,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":125652,"byte_end":125655,"line_start":90,"line_end":90,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDBIterator>::new","value":"pub fn new(&'db TrieDB<, L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Creates new iterator.\n","sig":null,"attributes":[{"value":"/ Creates new iterator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":125618,"byte_end":125643,"line_start":89,"line_end":89,"column_start":2,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":702},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127443,"byte_end":127451,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"FatDBMut","qualname":"::fatdbmut::FatDBMut","value":"FatDBMut {  }","parent":null,"children":[{"krate":0,"index":705}],"decl_id":null,"docs":" A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.\n Additionaly it stores inserted hash-key mappings for later retrieval.","sig":null,"attributes":[{"value":"/ A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127204,"byte_end":127303,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/ Additionaly it stores inserted hash-key mappings for later retrieval.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127304,"byte_end":127377,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127378,"byte_end":127381,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127382,"byte_end":127431,"line_start":21,"line_end":21,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127755,"byte_end":127758,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDBMut>::new","value":"pub fn new(&'db mut HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127567,"byte_end":127636,"line_start":33,"line_end":33,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127638,"byte_end":127696,"line_start":34,"line_end":34,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127698,"byte_end":127746,"line_start":35,"line_end":35,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":128014,"byte_end":128027,"line_start":43,"line_end":43,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<FatDBMut>::from_existing","value":"pub fn from_existing(&'db mut HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`.","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127890,"byte_end":127954,"line_start":40,"line_end":40,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127956,"byte_end":127959,"line_start":41,"line_end":41,"column_start":2,"column_end":5}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127961,"byte_end":128005,"line_start":42,"line_end":42,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":128251,"byte_end":128253,"line_start":51,"line_end":51,"column_start":9,"column_end":11},"name":"db","qualname":"<FatDBMut>::db","value":"pub fn db(&Self) -> &HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":128213,"byte_end":128242,"line_start":50,"line_end":50,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":128355,"byte_end":128361,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<FatDBMut>::db_mut","value":"pub fn db_mut(&mut Self) -> &mut HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":128317,"byte_end":128346,"line_start":55,"line_end":55,"column_start":2,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":137027,"byte_end":137037,"line_start":250,"line_end":250,"column_start":8,"column_end":18},"name":"trie_visit","qualname":"::iter_build::trie_visit","value":"pub fn trie_visit<T, I, A, B, F>(I, &mut F) where T: TrieLayout,\nI: IntoIterator<Item = (A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>,\nF: ProcessEncodedNode<TrieHash<T>>","parent":null,"children":[],"decl_id":null,"docs":" Function visiting trie from key value inputs with a `ProccessEncodedNode` callback.\n This is the main entry point of this module.\n Calls to each node occurs ordered by byte key value but with longest keys first (from node to\n branch to root), this differs from standard byte array ordering a bit.\n","sig":null,"attributes":[{"value":"/ Function visiting trie from key value inputs with a `ProccessEncodedNode` callback.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":136710,"byte_end":136797,"line_start":246,"line_end":246,"column_start":1,"column_end":88}},{"value":"/ This is the main entry point of this module.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":136798,"byte_end":136846,"line_start":247,"line_end":247,"column_start":1,"column_end":49}},{"value":"/ Calls to each node occurs ordered by byte key value but with longest keys first (from node to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":136847,"byte_end":136944,"line_start":248,"line_end":248,"column_start":1,"column_end":98}},{"value":"/ branch to root), this differs from standard byte array ordering a bit.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":136945,"byte_end":137019,"line_start":249,"line_end":249,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":788},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139358,"byte_end":139376,"line_start":312,"line_end":312,"column_start":11,"column_end":29},"name":"ProcessEncodedNode","qualname":"::iter_build::ProcessEncodedNode","value":"ProcessEncodedNode<HO>","parent":null,"children":[{"krate":0,"index":790}],"decl_id":null,"docs":" Visitor trait to implement when using `trie_visit`.\n","sig":null,"attributes":[{"value":"/ Visitor trait to implement when using `trie_visit`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139292,"byte_end":139347,"line_start":311,"line_end":311,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139788,"byte_end":139795,"line_start":320,"line_end":320,"column_start":5,"column_end":12},"name":"process","qualname":"::iter_build::ProcessEncodedNode::process","value":"pub fn process(&mut Self, Prefix, Vec<u8>, bool) -> ChildReference<HO>","parent":{"krate":0,"index":788},"children":[],"decl_id":null,"docs":" Function call with prefix, encoded value and a boolean indicating if the\n node is the root for each node of the trie.","sig":null,"attributes":[{"value":"/ Function call with prefix, encoded value and a boolean indicating if the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139384,"byte_end":139460,"line_start":313,"line_end":313,"column_start":2,"column_end":78}},{"value":"/ node is the root for each node of the trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139462,"byte_end":139509,"line_start":314,"line_end":314,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139511,"byte_end":139514,"line_start":315,"line_end":315,"column_start":2,"column_end":5}},{"value":"/ Note that the returned value can change depending on implementation,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139516,"byte_end":139588,"line_start":316,"line_end":316,"column_start":2,"column_end":74}},{"value":"/ but usually it should be the Hash of encoded node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139590,"byte_end":139644,"line_start":317,"line_end":317,"column_start":2,"column_end":56}},{"value":"/ This is not something direcly related to encoding but is here for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139646,"byte_end":139715,"line_start":318,"line_end":318,"column_start":2,"column_end":71}},{"value":"/ optimisation purpose (builder hash_db does return this value).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139717,"byte_end":139783,"line_start":319,"line_end":319,"column_start":2,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":791},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":140064,"byte_end":140075,"line_start":326,"line_end":326,"column_start":12,"column_end":23},"name":"TrieBuilder","qualname":"::iter_build::TrieBuilder","value":"TrieBuilder { root }","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799}],"decl_id":null,"docs":" Get trie root and insert visited node in a hash_db.\n As for all `ProcessEncodedNode` implementation, it\n is only for full trie parsing (not existing trie).\n","sig":null,"attributes":[{"value":"/ Get trie root and insert visited node in a hash_db.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139887,"byte_end":139942,"line_start":323,"line_end":323,"column_start":1,"column_end":56}},{"value":"/ As for all `ProcessEncodedNode` implementation, it","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139943,"byte_end":139997,"line_start":324,"line_end":324,"column_start":1,"column_end":55}},{"value":"/ is only for full trie parsing (not existing trie).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":139998,"byte_end":140052,"line_start":325,"line_end":325,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":798},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":140118,"byte_end":140122,"line_start":328,"line_end":328,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieBuilder::root","value":"std::option::Option<HO>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":140229,"byte_end":140232,"line_start":333,"line_end":333,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieBuilder>::new","value":"pub fn new(&'a mut DB) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":813},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141013,"byte_end":141021,"line_start":362,"line_end":362,"column_start":12,"column_end":20},"name":"TrieRoot","qualname":"::iter_build::TrieRoot","value":"TrieRoot { root }","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":817}],"decl_id":null,"docs":" Calculate the trie root of the trie.\n","sig":null,"attributes":[{"value":"/ Calculate the trie root of the trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":140961,"byte_end":141001,"line_start":361,"line_end":361,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":816},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141061,"byte_end":141065,"line_start":364,"line_end":364,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRoot::root","value":"std::option::Option<HO>","parent":{"krate":0,"index":813},"children":[],"decl_id":null,"docs":" The resulting root.\n","sig":null,"attributes":[{"value":"/ The resulting root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141032,"byte_end":141055,"line_start":363,"line_end":363,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":825},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141865,"byte_end":141881,"line_start":397,"line_end":397,"column_start":12,"column_end":28},"name":"TrieRootUnhashed","qualname":"::iter_build::TrieRootUnhashed","value":"TrieRootUnhashed { root }","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828}],"decl_id":null,"docs":" Get the trie root node encoding.\n","sig":null,"attributes":[{"value":"/ Get the trie root node encoding.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141817,"byte_end":141853,"line_start":396,"line_end":396,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":827},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141925,"byte_end":141929,"line_start":399,"line_end":399,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRootUnhashed::root","value":"std::option::Option<std::vec::Vec<u8>>","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" The resulting encoded root.\n","sig":null,"attributes":[{"value":"/ The resulting encoded root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141888,"byte_end":141919,"line_start":398,"line_end":398,"column_start":2,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":832},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":142198,"byte_end":142211,"line_start":412,"line_end":412,"column_start":12,"column_end":25},"name":"TrieRootPrint","qualname":"::iter_build::TrieRootPrint","value":"TrieRootPrint { root }","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836}],"decl_id":null,"docs":" Calculate the trie root of the trie.\n Print a debug trace.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":142097,"byte_end":142120,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ Calculate the trie root of the trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":142121,"byte_end":142161,"line_start":410,"line_end":410,"column_start":1,"column_end":41}},{"value":"/ Print a debug trace.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":142162,"byte_end":142186,"line_start":411,"line_end":411,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":835},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":142251,"byte_end":142255,"line_start":414,"line_end":414,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRootPrint::root","value":"std::option::Option<HO>","parent":{"krate":0,"index":832},"children":[],"decl_id":null,"docs":" The resulting root.\n","sig":null,"attributes":[{"value":"/ The resulting root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":142222,"byte_end":142245,"line_start":413,"line_end":413,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":874},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":145810,"byte_end":145828,"line_start":58,"line_end":58,"column_start":12,"column_end":30},"name":"TrieDBNodeIterator","qualname":"::iterator::TrieDBNodeIterator","value":"TrieDBNodeIterator {  }","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879}],"decl_id":null,"docs":" Iterator for going through all nodes in the trie in pre-order traversal order.\n","sig":null,"attributes":[{"value":"/ Iterator for going through all nodes in the trie in pre-order traversal order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":145716,"byte_end":145798,"line_start":57,"line_end":57,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":146019,"byte_end":146022,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBNodeIterator>::new","value":"pub fn new(&'a TrieDB<, L>)\n-> Result<TrieDBNodeIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator.\n","sig":null,"attributes":[{"value":"/ Create a new iterator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":145984,"byte_end":146010,"line_start":65,"line_end":65,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":150775,"byte_end":150781,"line_start":234,"line_end":234,"column_start":9,"column_end":15},"name":"prefix","qualname":"<TrieDBNodeIterator>::prefix","value":"pub fn prefix(&mut Self, &[u8]) -> Result<(), TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator into a prefix, no value out of the prefix will be accessed\n or returned after this operation.\n","sig":null,"attributes":[{"value":"/ Advance the iterator into a prefix, no value out of the prefix will be accessed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":150644,"byte_end":150727,"line_start":232,"line_end":232,"column_start":2,"column_end":85}},{"value":"/ or returned after this operation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":150729,"byte_end":150766,"line_start":233,"line_end":233,"column_start":2,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":929},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156153,"byte_end":156159,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"Lookup","qualname":"::lookup::Lookup","value":"Lookup { db, query, hash }","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935}],"decl_id":null,"docs":" Trie lookup helper object.\n","sig":null,"attributes":[{"value":"/ Trie lookup helper object.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156111,"byte_end":156141,"line_start":24,"line_end":24,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":933},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156234,"byte_end":156236,"line_start":27,"line_end":27,"column_start":6,"column_end":8},"name":"db","qualname":"::lookup::Lookup::db","value":"&'a (dyn hash_db::HashDBRef<<L as TrieLayout>::Hash, std::vec::Vec<u8>> + 'a)","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" database to query from.\n","sig":null,"attributes":[{"value":"/ database to query from.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156201,"byte_end":156228,"line_start":26,"line_end":26,"column_start":2,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":934},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156334,"byte_end":156339,"line_start":29,"line_end":29,"column_start":6,"column_end":11},"name":"query","qualname":"::lookup::Lookup::query","value":"Q","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Query object to record nodes and transform data.\n","sig":null,"attributes":[{"value":"/ Query object to record nodes and transform data.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156276,"byte_end":156328,"line_start":28,"line_end":28,"column_start":2,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":935},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156371,"byte_end":156375,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"name":"hash","qualname":"::lookup::Lookup::hash","value":"<<L as TrieLayout>::Hash as hash_db::Hasher>::Out","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Hash to start at\n","sig":null,"attributes":[{"value":"/ Hash to start at","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156345,"byte_end":156365,"line_start":30,"line_end":30,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156592,"byte_end":156599,"line_start":41,"line_end":41,"column_start":9,"column_end":16},"name":"look_up","qualname":"<Lookup>::look_up","value":"pub fn look_up(Self, NibbleSlice)\n-> Result<Option<Q::Item>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Look up the given key. If the value is found, it will be passed to the given\n function to decode or copy.\n","sig":null,"attributes":[{"value":"/ Look up the given key. If the value is found, it will be passed to the given","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156470,"byte_end":156550,"line_start":39,"line_end":39,"column_start":2,"column_end":82}},{"value":"/ function to decode or copy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156552,"byte_end":156583,"line_start":40,"line_end":40,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165487,"byte_end":165490,"line_start":31,"line_end":31,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleVec>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a new `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Make a new `NibbleVec`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165451,"byte_end":165478,"line_start":30,"line_end":30,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165628,"byte_end":165631,"line_start":40,"line_end":40,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleVec>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Length of the `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Length of the `NibbleVec`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165570,"byte_end":165600,"line_start":38,"line_end":38,"column_start":2,"column_end":32}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165602,"byte_end":165619,"line_start":39,"line_end":39,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165721,"byte_end":165729,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<NibbleVec>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retrurns true if `NibbleVec` has zero length.\n","sig":null,"attributes":[{"value":"/ Retrurns true if `NibbleVec` has zero length.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165663,"byte_end":165712,"line_start":42,"line_end":42,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165831,"byte_end":165833,"line_start":47,"line_end":47,"column_start":9,"column_end":11},"name":"at","qualname":"<NibbleVec>::at","value":"pub fn at(&Self, usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Try to get the nibble at the given offset.\n","sig":null,"attributes":[{"value":"/ Try to get the nibble at the given offset.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165765,"byte_end":165811,"line_start":45,"line_end":45,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165813,"byte_end":165822,"line_start":46,"line_end":46,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":166081,"byte_end":166085,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"name":"push","qualname":"<NibbleVec>::push","value":"pub fn push(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Push a nibble onto the `NibbleVec`. Ignores the high 4 bits.\n","sig":null,"attributes":[{"value":"/ Push a nibble onto the `NibbleVec`. Ignores the high 4 bits.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":166008,"byte_end":166072,"line_start":53,"line_end":53,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":166523,"byte_end":166526,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"name":"pop","qualname":"<NibbleVec>::pop","value":"pub fn pop(&mut Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Try to pop a nibble off the `NibbleVec`. Fails if len == 0.\n","sig":null,"attributes":[{"value":"/ Try to pop a nibble off the `NibbleVec`. Fails if len == 0.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":166451,"byte_end":166514,"line_start":67,"line_end":67,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":166943,"byte_end":166953,"line_start":82,"line_end":82,"column_start":9,"column_end":19},"name":"drop_lasts","qualname":"<NibbleVec>::drop_lasts","value":"pub fn drop_lasts(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Remove then n last nibbles in a faster way than popping n times.\n","sig":null,"attributes":[{"value":"/ Remove then n last nibbles in a faster way than popping n times.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":166866,"byte_end":166934,"line_start":81,"line_end":81,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":167514,"byte_end":167523,"line_start":101,"line_end":101,"column_start":9,"column_end":18},"name":"as_prefix","qualname":"<NibbleVec>::as_prefix","value":"pub fn as_prefix(&Self) -> Prefix","parent":null,"children":[],"decl_id":null,"docs":" Get `Prefix` representation of this `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Get `Prefix` representation of this `NibbleVec`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":167453,"byte_end":167505,"line_start":100,"line_end":100,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":167878,"byte_end":167884,"line_start":112,"line_end":112,"column_start":9,"column_end":15},"name":"append","qualname":"<NibbleVec>::append","value":"pub fn append(&mut Self, &NibbleVec)","parent":null,"children":[],"decl_id":null,"docs":" Append another `NibbleVec`. Can be slow (alignement of second vec).\n","sig":null,"attributes":[{"value":"/ Append another `NibbleVec`. Can be slow (alignement of second vec).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":167798,"byte_end":167869,"line_start":111,"line_end":111,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":168676,"byte_end":168690,"line_start":135,"line_end":135,"column_start":9,"column_end":23},"name":"append_partial","qualname":"<NibbleVec>::append_partial","value":"pub fn append_partial(&mut Self, Partial)","parent":null,"children":[],"decl_id":null,"docs":" Append a `Partial`. Can be slow (alignement of partial).\n","sig":null,"attributes":[{"value":"/ Append a `Partial`. Can be slow (alignement of partial).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":168607,"byte_end":168667,"line_start":134,"line_end":134,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":170149,"byte_end":170154,"line_start":188,"line_end":188,"column_start":9,"column_end":14},"name":"inner","qualname":"<NibbleVec>::inner","value":"pub fn inner(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying byte slice.\n","sig":null,"attributes":[{"value":"/ Get the underlying byte slice.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":170106,"byte_end":170140,"line_start":187,"line_end":187,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":170214,"byte_end":170219,"line_start":193,"line_end":193,"column_start":9,"column_end":14},"name":"clear","qualname":"<NibbleVec>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" clear\n","sig":null,"attributes":[{"value":"/ clear","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":170196,"byte_end":170205,"line_start":192,"line_end":192,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":170373,"byte_end":170387,"line_start":199,"line_end":199,"column_start":9,"column_end":23},"name":"as_nibbleslice","qualname":"<NibbleVec>::as_nibbleslice","value":"pub fn as_nibbleslice(&Self) -> Option<NibbleSlice>","parent":null,"children":[],"decl_id":null,"docs":" Try to treat this `NibbleVec` as a `NibbleSlice`. Works only if there is no padding.\n","sig":null,"attributes":[{"value":"/ Try to treat this `NibbleVec` as a `NibbleSlice`. Works only if there is no padding.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":170276,"byte_end":170364,"line_start":198,"line_end":198,"column_start":2,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":170609,"byte_end":170620,"line_start":208,"line_end":208,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<NibbleVec>::starts_with","value":"pub fn starts_with(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Do we start with the same nibbles as the whole of `them`?\n","sig":null,"attributes":[{"value":"/ Do we start with the same nibbles as the whole of `them`?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":170539,"byte_end":170600,"line_start":207,"line_end":207,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174271,"byte_end":174274,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleSlice>::new","value":"pub fn new(&'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new nibble slice with the given byte-slice.\n","sig":null,"attributes":[{"value":"/ Create a new nibble slice with the given byte-slice.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174206,"byte_end":174262,"line_start":35,"line_end":35,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174423,"byte_end":174433,"line_start":39,"line_end":39,"column_start":9,"column_end":19},"name":"new_offset","qualname":"<NibbleSlice>::new_offset","value":"pub fn new_offset(&'a [u8], usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new nibble slice with the given byte-slice with a nibble offset.\n","sig":null,"attributes":[{"value":"/ Create a new nibble slice with the given byte-slice with a nibble offset.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174337,"byte_end":174414,"line_start":38,"line_end":38,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174666,"byte_end":174670,"line_start":51,"line_end":51,"column_start":9,"column_end":13},"name":"iter","qualname":"<NibbleSlice>::iter","value":"pub fn iter(&'a Self) -> NibbleSliceIterator","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator for the series of nibbles.\n","sig":null,"attributes":[{"value":"/ Get an iterator for the series of nibbles.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174611,"byte_end":174657,"line_start":50,"line_end":50,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174802,"byte_end":174813,"line_start":56,"line_end":56,"column_start":9,"column_end":20},"name":"from_stored","qualname":"<NibbleSlice>::from_stored","value":"pub fn from_stored(&NodeKey) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Get nibble slice from a `NodeKey`.\n","sig":null,"attributes":[{"value":"/ Get nibble slice from a `NodeKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174755,"byte_end":174793,"line_start":55,"line_end":55,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174971,"byte_end":174980,"line_start":61,"line_end":61,"column_start":9,"column_end":18},"name":"to_stored","qualname":"<NibbleSlice>::to_stored","value":"pub fn to_stored(&Self) -> NodeKey","parent":null,"children":[],"decl_id":null,"docs":" Helper function to create a owned `NodeKey` from this `NibbleSlice`.\n","sig":null,"attributes":[{"value":"/ Helper function to create a owned `NodeKey` from this `NibbleSlice`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174890,"byte_end":174962,"line_start":60,"line_end":60,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":175377,"byte_end":175392,"line_start":71,"line_end":71,"column_start":9,"column_end":24},"name":"to_stored_range","qualname":"<NibbleSlice>::to_stored_range","value":"pub fn to_stored_range(&Self, usize) -> NodeKey","parent":null,"children":[],"decl_id":null,"docs":" Helper function to create a owned `NodeKey` from this `NibbleSlice`,\n and for a given number of nibble.\n Warning this method can be slow (number of nibble does not align the\n original padding).\n","sig":null,"attributes":[{"value":"/ Helper function to create a owned `NodeKey` from this `NibbleSlice`,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":175159,"byte_end":175231,"line_start":67,"line_end":67,"column_start":2,"column_end":74}},{"value":"/ and for a given number of nibble.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":175233,"byte_end":175270,"line_start":68,"line_end":68,"column_start":2,"column_end":39}},{"value":"/ Warning this method can be slow (number of nibble does not align the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":175272,"byte_end":175344,"line_start":69,"line_end":69,"column_start":2,"column_end":74}},{"value":"/ original padding).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":175346,"byte_end":175368,"line_start":70,"line_end":70,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176290,"byte_end":176298,"line_start":96,"line_end":96,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<NibbleSlice>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the slice contains no nibbles.\n","sig":null,"attributes":[{"value":"/ Return true if the slice contains no nibbles.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176232,"byte_end":176281,"line_start":95,"line_end":95,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176413,"byte_end":176416,"line_start":100,"line_end":100,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleSlice>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length (in nibbles, naturally) of this slice.\n","sig":null,"attributes":[{"value":"/ Get the length (in nibbles, naturally) of this slice.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176336,"byte_end":176393,"line_start":98,"line_end":98,"column_start":2,"column_end":59}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176395,"byte_end":176404,"line_start":99,"line_end":99,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176562,"byte_end":176564,"line_start":104,"line_end":104,"column_start":9,"column_end":11},"name":"at","qualname":"<NibbleSlice>::at","value":"pub fn at(&Self, usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the nibble at position `i`.\n","sig":null,"attributes":[{"value":"/ Get the nibble at position `i`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176499,"byte_end":176534,"line_start":102,"line_end":102,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176536,"byte_end":176553,"line_start":103,"line_end":103,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176722,"byte_end":176725,"line_start":109,"line_end":109,"column_start":9,"column_end":12},"name":"mid","qualname":"<NibbleSlice>::mid","value":"pub fn mid(&Self, usize) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Return object which represents a view on to this slice (further) offset by `i` nibbles.\n","sig":null,"attributes":[{"value":"/ Return object which represents a view on to this slice (further) offset by `i` nibbles.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176622,"byte_end":176713,"line_start":108,"line_end":108,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176895,"byte_end":176902,"line_start":117,"line_end":117,"column_start":9,"column_end":16},"name":"advance","qualname":"<NibbleSlice>::advance","value":"pub fn advance(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Advance the view on the slice by `i` nibbles.\n","sig":null,"attributes":[{"value":"/ Advance the view on the slice by `i` nibbles.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176837,"byte_end":176886,"line_start":116,"line_end":116,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":177050,"byte_end":177054,"line_start":123,"line_end":123,"column_start":9,"column_end":13},"name":"back","qualname":"<NibbleSlice>::back","value":"pub fn back(&Self, usize) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Move back to a previously valid fix offset position.\n","sig":null,"attributes":[{"value":"/ Move back to a previously valid fix offset position.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":176985,"byte_end":177041,"line_start":122,"line_end":122,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":177222,"byte_end":177233,"line_start":131,"line_end":131,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<NibbleSlice>::starts_with","value":"pub fn starts_with(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Do we start with the same nibbles as the whole of `them`?\n","sig":null,"attributes":[{"value":"/ Do we start with the same nibbles as the whole of `them`?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":177152,"byte_end":177213,"line_start":130,"line_end":130,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":177390,"byte_end":177403,"line_start":134,"line_end":134,"column_start":9,"column_end":22},"name":"common_prefix","qualname":"<NibbleSlice>::common_prefix","value":"pub fn common_prefix(&Self, &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" How many of the same nibbles at the beginning do we match with `them`?\n","sig":null,"attributes":[{"value":"/ How many of the same nibbles at the beginning do we match with `them`?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":177307,"byte_end":177381,"line_start":133,"line_end":133,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":177682,"byte_end":177687,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"name":"right","qualname":"<NibbleSlice>::right","value":"pub fn right(&'a Self) -> Partial","parent":null,"children":[],"decl_id":null,"docs":" Return `Partial` representation of this slice:\n first encoded byte and following slice.\n","sig":null,"attributes":[{"value":"/ Return `Partial` representation of this slice:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":177578,"byte_end":177628,"line_start":144,"line_end":144,"column_start":2,"column_end":52}},{"value":"/ first encoded byte and following slice.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":177630,"byte_end":177673,"line_start":145,"line_end":145,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":178041,"byte_end":178051,"line_start":157,"line_end":157,"column_start":9,"column_end":19},"name":"right_iter","qualname":"<NibbleSlice>::right_iter","value":"pub fn right_iter(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over `Partial` bytes representation.\n","sig":null,"attributes":[{"value":"/ Return an iterator over `Partial` bytes representation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":177973,"byte_end":178032,"line_start":156,"line_end":156,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":178508,"byte_end":178524,"line_start":175,"line_end":175,"column_start":9,"column_end":25},"name":"right_range_iter","qualname":"<NibbleSlice>::right_range_iter","value":"pub fn right_range_iter(&'a Self, usize) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return `Partial` bytes iterator over a range of byte..\n Warning can be slow when unaligned (similar to `to_stored_range`).\n","sig":null,"attributes":[{"value":"/ Return `Partial` bytes iterator over a range of byte..","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":178369,"byte_end":178427,"line_start":173,"line_end":173,"column_start":2,"column_end":60}},{"value":"/ Warning can be slow when unaligned (similar to `to_stored_range`).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":178429,"byte_end":178499,"line_start":174,"line_end":174,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":179646,"byte_end":179650,"line_start":217,"line_end":217,"column_start":9,"column_end":13},"name":"left","qualname":"<NibbleSlice>::left","value":"pub fn left(&'a Self) -> Prefix","parent":null,"children":[],"decl_id":null,"docs":" Return left portion of `NibbleSlice`, if the slice\n originates from a full key it will be the `Prefix of\n the node`.\n","sig":null,"attributes":[{"value":"/ Return left portion of `NibbleSlice`, if the slice","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":179509,"byte_end":179563,"line_start":214,"line_end":214,"column_start":2,"column_end":56}},{"value":"/ originates from a full key it will be the `Prefix of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":179565,"byte_end":179621,"line_start":215,"line_end":215,"column_start":2,"column_end":58}},{"value":"/ the node`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":179623,"byte_end":179637,"line_start":216,"line_end":216,"column_start":2,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":179996,"byte_end":180006,"line_start":228,"line_end":228,"column_start":9,"column_end":19},"name":"left_owned","qualname":"<NibbleSlice>::left_owned","value":"pub fn left_owned(&'a Self) -> (BackingByteVec, Option<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Owned version of a `Prefix` from a `left` method call.\n","sig":null,"attributes":[{"value":"/ Owned version of a `Prefix` from a `left` method call.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":179929,"byte_end":179987,"line_start":227,"line_end":227,"column_start":2,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":1078},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":159948,"byte_end":159958,"line_start":27,"line_end":27,"column_start":9,"column_end":19},"name":"nibble_ops","qualname":"::nibble::nibble_ops","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","parent":null,"children":[{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095}],"decl_id":null,"docs":" Utility methods to work on radix 16 nibble.\n","sig":null,"attributes":[{"value":"/ Utility methods to work on radix 16 nibble.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":159892,"byte_end":159939,"line_start":26,"line_end":26,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1080},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160022,"byte_end":160036,"line_start":31,"line_end":31,"column_start":12,"column_end":26},"name":"BIT_PER_NIBBLE","qualname":"::nibble::nibble_ops::BIT_PER_NIBBLE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Single nibble length in bit.\n","sig":null,"attributes":[{"value":"/ Single nibble length in bit.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":159978,"byte_end":160010,"line_start":30,"line_end":30,"column_start":2,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":1081},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160093,"byte_end":160108,"line_start":33,"line_end":33,"column_start":12,"column_end":27},"name":"NIBBLE_PER_BYTE","qualname":"::nibble::nibble_ops::NIBBLE_PER_BYTE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of nibble per byte.\n","sig":null,"attributes":[{"value":"/ Number of nibble per byte.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160051,"byte_end":160081,"line_start":32,"line_end":32,"column_start":2,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":1082},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160181,"byte_end":160194,"line_start":35,"line_end":35,"column_start":12,"column_end":25},"name":"NIBBLE_LENGTH","qualname":"::nibble::nibble_ops::NIBBLE_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of child for a branch (trie radix).\n","sig":null,"attributes":[{"value":"/ Number of child for a branch (trie radix).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160123,"byte_end":160169,"line_start":34,"line_end":34,"column_start":2,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1083},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160247,"byte_end":160262,"line_start":37,"line_end":37,"column_start":12,"column_end":27},"name":"PADDING_BITMASK","qualname":"::nibble::nibble_ops::PADDING_BITMASK","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Nibble (half a byte).\n","sig":null,"attributes":[{"value":"/ Nibble (half a byte).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160210,"byte_end":160235,"line_start":36,"line_end":36,"column_start":2,"column_end":27}}]},{"kind":"Const","id":{"krate":0,"index":1084},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160307,"byte_end":160326,"line_start":39,"line_end":39,"column_start":12,"column_end":31},"name":"CONTENT_HEADER_SIZE","qualname":"::nibble::nibble_ops::CONTENT_HEADER_SIZE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Size of header.\n","sig":null,"attributes":[{"value":"/ Size of header.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160276,"byte_end":160295,"line_start":38,"line_end":38,"column_start":2,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":1085},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160403,"byte_end":160411,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"pad_left","qualname":"::nibble::nibble_ops::pad_left","value":"pub fn pad_left(u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Mask a byte, keeping left nibble.\n","sig":null,"attributes":[{"value":"/ Mask a byte, keeping left nibble.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160338,"byte_end":160375,"line_start":41,"line_end":41,"column_start":2,"column_end":39}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160377,"byte_end":160394,"line_start":42,"line_end":42,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1086},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160519,"byte_end":160528,"line_start":49,"line_end":49,"column_start":9,"column_end":18},"name":"pad_right","qualname":"::nibble::nibble_ops::pad_right","value":"pub fn pad_right(u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Mask a byte, keeping right byte.\n","sig":null,"attributes":[{"value":"/ Mask a byte, keeping right byte.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160455,"byte_end":160491,"line_start":47,"line_end":47,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160493,"byte_end":160510,"line_start":48,"line_end":48,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1087},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160650,"byte_end":160657,"line_start":55,"line_end":55,"column_start":9,"column_end":16},"name":"at_left","qualname":"::nibble::nibble_ops::at_left","value":"pub fn at_left(u8, u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index of a byte.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index of a byte.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160571,"byte_end":160622,"line_start":53,"line_end":53,"column_start":2,"column_end":53}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160624,"byte_end":160641,"line_start":54,"line_end":54,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1088},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160855,"byte_end":160869,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"name":"left_nibble_at","qualname":"::nibble::nibble_ops::left_nibble_at","value":"pub fn left_nibble_at(&[u8], usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index in a left aligned array.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index in a left aligned array.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160762,"byte_end":160827,"line_start":63,"line_end":63,"column_start":2,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160829,"byte_end":160846,"line_start":64,"line_end":64,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1089},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161069,"byte_end":161071,"line_start":74,"line_end":74,"column_start":9,"column_end":11},"name":"at","qualname":"::nibble::nibble_ops::at","value":"pub fn at(&NibbleSlice, usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index in a `NibbleSlice`.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index in a `NibbleSlice`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":160981,"byte_end":161041,"line_start":72,"line_end":72,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161043,"byte_end":161060,"line_start":73,"line_end":73,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1090},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161328,"byte_end":161340,"line_start":82,"line_end":82,"column_start":9,"column_end":21},"name":"push_at_left","qualname":"::nibble::nibble_ops::push_at_left","value":"pub fn push_at_left(u8, u8, u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Push u8 nibble value at a given index into an existing byte.\n","sig":null,"attributes":[{"value":"/ Push u8 nibble value at a given index into an existing byte.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161236,"byte_end":161300,"line_start":80,"line_end":80,"column_start":2,"column_end":66}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161302,"byte_end":161319,"line_start":81,"line_end":81,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1091},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161536,"byte_end":161550,"line_start":92,"line_end":92,"column_start":9,"column_end":23},"name":"number_padding","qualname":"::nibble::nibble_ops::number_padding","value":"pub fn number_padding(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the number of needed padding a array of nibble length `i`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161444,"byte_end":161453,"line_start":90,"line_end":90,"column_start":2,"column_end":11}},{"value":"/ Calculate the number of needed padding a array of nibble length `i`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161455,"byte_end":161527,"line_start":91,"line_end":91,"column_start":2,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":1092},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161729,"byte_end":161741,"line_start":99,"line_end":99,"column_start":12,"column_end":24},"name":"SPLIT_SHIFTS","qualname":"::nibble::nibble_ops::SPLIT_SHIFTS","value":"(usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" The nibble shifts needed to align.\n We use two value, one is a left shift and\n the other is a right shift.\n","sig":null,"attributes":[{"value":"/ The nibble shifts needed to align.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161599,"byte_end":161637,"line_start":96,"line_end":96,"column_start":2,"column_end":40}},{"value":"/ We use two value, one is a left shift and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161639,"byte_end":161684,"line_start":97,"line_end":97,"column_start":2,"column_end":47}},{"value":"/ the other is a right shift.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161686,"byte_end":161717,"line_start":98,"line_end":98,"column_start":2,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":1093},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161859,"byte_end":161872,"line_start":102,"line_end":102,"column_start":9,"column_end":22},"name":"biggest_depth","qualname":"::nibble::nibble_ops::biggest_depth","value":"pub fn biggest_depth(&[u8], &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Count the biggest common depth between two left aligned packed nibble slice.\n","sig":null,"attributes":[{"value":"/ Count the biggest common depth between two left aligned packed nibble slice.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":161770,"byte_end":161850,"line_start":101,"line_end":101,"column_start":2,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":1094},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":162216,"byte_end":162227,"line_start":114,"line_end":114,"column_start":9,"column_end":20},"name":"left_common","qualname":"::nibble::nibble_ops::left_common","value":"pub fn left_common(u8, u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the number of common nibble between two left aligned bytes.\n","sig":null,"attributes":[{"value":"/ Calculate the number of common nibble between two left aligned bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":162115,"byte_end":162188,"line_start":112,"line_end":112,"column_start":2,"column_end":75}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":162190,"byte_end":162207,"line_start":113,"line_end":113,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1095},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":162512,"byte_end":162521,"line_start":127,"line_end":127,"column_start":9,"column_end":18},"name":"shift_key","qualname":"::nibble::nibble_ops::shift_key","value":"pub fn shift_key(&mut NodeKey, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Shifts right aligned key to add a given left offset.\n Resulting in possibly padding at both left and right\n (example usage when combining two keys).\n","sig":null,"attributes":[{"value":"/ Shifts right aligned key to add a given left offset.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":162343,"byte_end":162399,"line_start":124,"line_end":124,"column_start":2,"column_end":58}},{"value":"/ Resulting in possibly padding at both left and right","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":162401,"byte_end":162457,"line_start":125,"line_end":125,"column_start":2,"column_end":58}},{"value":"/ (example usage when combining two keys).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":162459,"byte_end":162503,"line_start":126,"line_end":126,"column_start":2,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1707},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163478,"byte_end":163487,"line_start":159,"line_end":159,"column_start":12,"column_end":21},"name":"NibbleVec","qualname":"::nibble::NibbleVec","value":"NibbleVec {  }","parent":null,"children":[{"krate":0,"index":1708},{"krate":0,"index":1709}],"decl_id":null,"docs":" Owning, nibble-oriented byte vector. Counterpart to `NibbleSlice`.\n Nibbles are always left aligned, so making a `NibbleVec` from\n a `NibbleSlice` can get costy.\n","sig":null,"attributes":[{"value":"/ Owning, nibble-oriented byte vector. Counterpart to `NibbleSlice`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163219,"byte_end":163289,"line_start":154,"line_end":154,"column_start":1,"column_end":71}},{"value":"/ Nibbles are always left aligned, so making a `NibbleVec` from","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163290,"byte_end":163355,"line_start":155,"line_end":155,"column_start":1,"column_end":66}},{"value":"/ a `NibbleSlice` can get costy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163356,"byte_end":163390,"line_start":156,"line_end":156,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1721},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":164381,"byte_end":164392,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"NibbleSlice","qualname":"::nibble::NibbleSlice","value":"NibbleSlice {  }","parent":null,"children":[{"krate":0,"index":1723},{"krate":0,"index":1724}],"decl_id":null,"docs":" Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.","sig":null,"attributes":[{"value":"/ Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163530,"byte_end":163608,"line_start":164,"line_end":164,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163609,"byte_end":163612,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ This is an immutable struct. No operations actually change it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163613,"byte_end":163679,"line_start":166,"line_end":166,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163680,"byte_end":163683,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163684,"byte_end":163697,"line_start":168,"line_end":168,"column_start":1,"column_end":14}},{"value":"/ ```snippet","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163698,"byte_end":163712,"line_start":169,"line_end":169,"column_start":1,"column_end":15}},{"value":"/ use patricia_trie::nibbleslice::NibbleSlice;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163713,"byte_end":163761,"line_start":170,"line_end":170,"column_start":1,"column_end":49}},{"value":"/ fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163762,"byte_end":163777,"line_start":171,"line_end":171,"column_start":1,"column_end":16}},{"value":"/   let d1 = &[0x01u8, 0x23, 0x45];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163778,"byte_end":163815,"line_start":172,"line_end":172,"column_start":1,"column_end":38}},{"value":"/   let d2 = &[0x34u8, 0x50, 0x12];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163816,"byte_end":163853,"line_start":173,"line_end":173,"column_start":1,"column_end":38}},{"value":"/   let d3 = &[0x00u8, 0x12];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163854,"byte_end":163885,"line_start":174,"line_end":174,"column_start":1,"column_end":32}},{"value":"/   let n1 = NibbleSlice::new(d1);\t\t\t// 0,1,2,3,4,5","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163886,"byte_end":163939,"line_start":175,"line_end":175,"column_start":1,"column_end":54}},{"value":"/   let n2 = NibbleSlice::new(d2);\t\t\t// 3,4,5,0,1,2","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163940,"byte_end":163993,"line_start":176,"line_end":176,"column_start":1,"column_end":54}},{"value":"/   let n3 = NibbleSlice::new_offset(d3, 1);\t// 0,1,2","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":163994,"byte_end":164049,"line_start":177,"line_end":177,"column_start":1,"column_end":56}},{"value":"/   assert!(n1 > n3);\t\t\t\t\t\t\t// 0,1,2,... > 0,1,2","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":164050,"byte_end":164100,"line_start":178,"line_end":178,"column_start":1,"column_end":51}},{"value":"/   assert!(n1 < n2);\t\t\t\t\t\t\t// 0,... < 3,...","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":164101,"byte_end":164147,"line_start":179,"line_end":179,"column_start":1,"column_end":47}},{"value":"/   assert!(n2.mid(3) == n3);\t\t\t\t\t// 0,1,2 == 0,1,2","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":164148,"byte_end":164201,"line_start":180,"line_end":180,"column_start":1,"column_end":54}},{"value":"/   assert!(n1.starts_with(&n3));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":164202,"byte_end":164237,"line_start":181,"line_end":181,"column_start":1,"column_end":36}},{"value":"/   assert_eq!(n1.common_prefix(&n3), 3);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":164238,"byte_end":164281,"line_start":182,"line_end":182,"column_start":1,"column_end":44}},{"value":"/   assert_eq!(n2.mid(3).common_prefix(&n1), 3);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":164282,"byte_end":164332,"line_start":183,"line_end":183,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":164333,"byte_end":164338,"line_start":184,"line_end":184,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":164339,"byte_end":164346,"line_start":185,"line_end":185,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1100},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":164484,"byte_end":164503,"line_start":193,"line_end":193,"column_start":12,"column_end":31},"name":"NibbleSliceIterator","qualname":"::nibble::NibbleSliceIterator","value":"NibbleSliceIterator {  }","parent":null,"children":[{"krate":0,"index":1102},{"krate":0,"index":1103}],"decl_id":null,"docs":" Iterator type for a nibble slice.\n","sig":null,"attributes":[{"value":"/ Iterator type for a nibble slice.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/mod.rs","byte_start":164435,"byte_end":164472,"line_start":192,"line_end":192,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1115},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192052,"byte_end":192059,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"Partial","qualname":"::node_codec::Partial","value":"((u8, u8), &'a [u8])","parent":null,"children":[],"decl_id":null,"docs":" Representation of a nible slice (right aligned).\n It contains a right aligned padded first byte (first pair element is the number of nibbles\n (0 to max nb nibble - 1), second pair element is the padded nibble), and a slice over\n the remaining bytes.\n","sig":null,"attributes":[{"value":"/ Representation of a nible slice (right aligned).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":191780,"byte_end":191832,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/ It contains a right aligned padded first byte (first pair element is the number of nibbles","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":191833,"byte_end":191927,"line_start":26,"line_end":26,"column_start":1,"column_end":95}},{"value":"/ (0 to max nb nibble - 1), second pair element is the padded nibble), and a slice over","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":191928,"byte_end":192017,"line_start":27,"line_end":27,"column_start":1,"column_end":90}},{"value":"/ the remaining bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192018,"byte_end":192042,"line_start":28,"line_end":28,"column_start":1,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":1117},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192141,"byte_end":192150,"line_start":32,"line_end":32,"column_start":11,"column_end":20},"name":"NodeCodec","qualname":"::node_codec::NodeCodec","value":"NodeCodec: Sized","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1131}],"decl_id":null,"docs":" Trait for trie node encoding/decoding.\n","sig":null,"attributes":[{"value":"/ Trait for trie node encoding/decoding.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192088,"byte_end":192130,"line_start":31,"line_end":31,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":1118},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192189,"byte_end":192194,"line_start":34,"line_end":34,"column_start":7,"column_end":12},"name":"Error","qualname":"::node_codec::NodeCodec::Error","value":"type Error: Error;","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Codec error type.\n","sig":null,"attributes":[{"value":"/ Codec error type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192161,"byte_end":192182,"line_start":33,"line_end":33,"column_start":2,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1119},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192251,"byte_end":192258,"line_start":37,"line_end":37,"column_start":7,"column_end":14},"name":"HashOut","qualname":"::node_codec::NodeCodec::HashOut","value":"type HashOut: AsRef<[u8]> + AsMut<[u8]> + Default + MaybeDebug + PartialEq + Eq\n\t\t+ hash::Hash + Send + Sync + Clone + Copy;","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Output type of encoded node hasher.\n","sig":null,"attributes":[{"value":"/ Output type of encoded node hasher.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192205,"byte_end":192244,"line_start":36,"line_end":36,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192407,"byte_end":192423,"line_start":41,"line_end":41,"column_start":5,"column_end":21},"name":"hashed_null_node","qualname":"::node_codec::NodeCodec::hashed_null_node","value":"pub fn hashed_null_node() -> Self::HashOut","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Get the hashed null node.\n","sig":null,"attributes":[{"value":"/ Get the hashed null node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192373,"byte_end":192402,"line_start":40,"line_end":40,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192514,"byte_end":192525,"line_start":44,"line_end":44,"column_start":5,"column_end":16},"name":"decode_plan","qualname":"::node_codec::NodeCodec::decode_plan","value":"pub fn decode_plan(&[u8]) -> Result<NodePlan, Self::Error>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Decode bytes to a `NodePlan`. Returns `Self::E` on failure.\n","sig":null,"attributes":[{"value":"/ Decode bytes to a `NodePlan`. Returns `Self::E` on failure.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192446,"byte_end":192509,"line_start":43,"line_end":43,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192639,"byte_end":192645,"line_start":47,"line_end":47,"column_start":5,"column_end":11},"name":"decode","qualname":"::node_codec::NodeCodec::decode","value":"pub fn decode(&[u8]) -> Result<Node, Self::Error>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Decode bytes to a `Node`. Returns `Self::E` on failure.\n","sig":null,"attributes":[{"value":"/ Decode bytes to a `Node`. Returns `Self::E` on failure.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192575,"byte_end":192634,"line_start":46,"line_end":46,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192813,"byte_end":192826,"line_start":52,"line_end":52,"column_start":5,"column_end":18},"name":"is_empty_node","qualname":"::node_codec::NodeCodec::is_empty_node","value":"pub fn is_empty_node(&[u8]) -> bool","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Check if the provided bytes correspond to the codecs \"empty\" node.\n","sig":null,"attributes":[{"value":"/ Check if the provided bytes correspond to the codecs \"empty\" node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192738,"byte_end":192808,"line_start":51,"line_end":51,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192890,"byte_end":192900,"line_start":55,"line_end":55,"column_start":5,"column_end":15},"name":"empty_node","qualname":"::node_codec::NodeCodec::empty_node","value":"pub fn empty_node() -> &'static [u8]","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded empty node.\n","sig":null,"attributes":[{"value":"/ Returns an encoded empty node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192851,"byte_end":192885,"line_start":54,"line_end":54,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192960,"byte_end":192969,"line_start":58,"line_end":58,"column_start":5,"column_end":14},"name":"leaf_node","qualname":"::node_codec::NodeCodec::leaf_node","value":"pub fn leaf_node(Partial, &[u8]) -> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded leaf node\n","sig":null,"attributes":[{"value":"/ Returns an encoded leaf node","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192923,"byte_end":192955,"line_start":57,"line_end":57,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":193246,"byte_end":193260,"line_start":64,"line_end":64,"column_start":5,"column_end":19},"name":"extension_node","qualname":"::node_codec::NodeCodec::extension_node","value":"pub fn extension_node<impl Iterator<Item = u8>: Iterator<Item =\n                      u8>>(impl Iterator<Item = u8>, usize,\n                           ChildReference<Self::HashOut>) -> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded extension node\n Note that number_nibble is the number of element of the iterator\n it can possibly be obtain by `Iterator` `size_hint`, but\n for simplicity it is used directly as a parameter.\n","sig":null,"attributes":[{"value":"/ Returns an encoded extension node","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":193016,"byte_end":193053,"line_start":60,"line_end":60,"column_start":2,"column_end":39}},{"value":"/ Note that number_nibble is the number of element of the iterator","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":193055,"byte_end":193123,"line_start":61,"line_end":61,"column_start":2,"column_end":70}},{"value":"/ it can possibly be obtain by `Iterator` `size_hint`, but","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":193125,"byte_end":193185,"line_start":62,"line_end":62,"column_start":2,"column_end":62}},{"value":"/ for simplicity it is used directly as a parameter.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":193187,"byte_end":193241,"line_start":63,"line_end":63,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":193511,"byte_end":193522,"line_start":72,"line_end":72,"column_start":5,"column_end":16},"name":"branch_node","qualname":"::node_codec::NodeCodec::branch_node","value":"pub fn branch_node<impl Borrow<Option<ChildReference<Self::HashOut>>>: Borrow<Option<ChildReference<Self::HashOut>>>,\n                   impl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>: Iterator<Item\n                   =\n                   impl Borrow<Option<ChildReference<Self::HashOut>>>>>(impl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>,\n                                                                        Option<&[u8]>)\n-> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded branch node.\n Takes an iterator yielding `ChildReference<Self::HashOut>` and an optional value.\n","sig":null,"attributes":[{"value":"/ Returns an encoded branch node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":193384,"byte_end":193419,"line_start":70,"line_end":70,"column_start":2,"column_end":37}},{"value":"/ Takes an iterator yielding `ChildReference<Self::HashOut>` and an optional value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":193421,"byte_end":193506,"line_start":71,"line_end":71,"column_start":2,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":193792,"byte_end":193811,"line_start":79,"line_end":79,"column_start":5,"column_end":24},"name":"branch_node_nibbled","qualname":"::node_codec::NodeCodec::branch_node_nibbled","value":"pub fn branch_node_nibbled<impl Iterator<Item = u8>: Iterator<Item = u8>,\n                           impl Borrow<Option<ChildReference<Self::HashOut>>>: Borrow<Option<ChildReference<Self::HashOut>>>,\n                           impl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>: Iterator<Item\n                           =\n                           impl Borrow<Option<ChildReference<Self::HashOut>>>>>(impl Iterator<Item = u8>,\n                                                                                usize,\n                                                                                impl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>,\n                                                                                Option<&[u8]>)\n-> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded branch node with a possible partial path.\n `number_nibble` is the partial path length as in `extension_node`.\n","sig":null,"attributes":[{"value":"/ Returns an encoded branch node with a possible partial path.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":193651,"byte_end":193715,"line_start":77,"line_end":77,"column_start":2,"column_end":66}},{"value":"/ `number_nibble` is the partial path length as in `extension_node`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":193717,"byte_end":193787,"line_start":78,"line_end":78,"column_start":2,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1183},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":200801,"byte_end":200815,"line_start":168,"line_end":168,"column_start":8,"column_end":22},"name":"encode_compact","qualname":"::trie_codec::encode_compact","value":"pub fn encode_compact<L>(&TrieDB<, L>)\n-> Result<Vec<Vec<u8>>, TrieHash<L>, CError<L>> where L: TrieLayout","parent":null,"children":[],"decl_id":null,"docs":" Generates a compact representation of the partial trie stored in the given DB. The encoding\n is a vector of mutated trie nodes with those child references omitted. The mutated trie nodes\n are listed in pre-order traversal order so that the full nodes can be efficiently\n reconstructed recursively.","sig":null,"attributes":[{"value":"/ Generates a compact representation of the partial trie stored in the given DB. The encoding","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":200364,"byte_end":200459,"line_start":161,"line_end":161,"column_start":1,"column_end":96}},{"value":"/ is a vector of mutated trie nodes with those child references omitted. The mutated trie nodes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":200460,"byte_end":200557,"line_start":162,"line_end":162,"column_start":1,"column_end":98}},{"value":"/ are listed in pre-order traversal order so that the full nodes can be efficiently","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":200558,"byte_end":200643,"line_start":163,"line_end":163,"column_start":1,"column_end":86}},{"value":"/ reconstructed recursively.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":200644,"byte_end":200674,"line_start":164,"line_end":164,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":200675,"byte_end":200678,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ This function makes the assumption that all child references in an inline trie node are inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":200679,"byte_end":200777,"line_start":166,"line_end":166,"column_start":1,"column_end":99}},{"value":"/ references.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":200778,"byte_end":200793,"line_start":167,"line_end":167,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1201},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":208556,"byte_end":208570,"line_start":388,"line_end":388,"column_start":8,"column_end":22},"name":"decode_compact","qualname":"::trie_codec::decode_compact","value":"pub fn decode_compact<L, DB, T>(&mut DB, &[Vec<u8>])\n-> Result<(TrieHash<L>, usize), TrieHash<L>, CError<L>> where L: TrieLayout,\nDB: HashDB<L::Hash, T>","parent":null,"children":[],"decl_id":null,"docs":" Reconstructs a partial trie DB from a compact representation. The encoding is a vector of\n mutated trie nodes with those child references omitted. The decode function reads them in order\n from the given slice, reconstructing the full nodes and inserting them into the given `HashDB`.\n It stops after fully constructing one partial trie and returns the root hash and the number of\n nodes read. If an error occurs during decoding, there are no guarantees about which entries\n were or were not added to the DB.","sig":null,"attributes":[{"value":"/ Reconstructs a partial trie DB from a compact representation. The encoding is a vector of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":207710,"byte_end":207803,"line_start":376,"line_end":376,"column_start":1,"column_end":94}},{"value":"/ mutated trie nodes with those child references omitted. The decode function reads them in order","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":207804,"byte_end":207903,"line_start":377,"line_end":377,"column_start":1,"column_end":100}},{"value":"/ from the given slice, reconstructing the full nodes and inserting them into the given `HashDB`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":207904,"byte_end":208003,"line_start":378,"line_end":378,"column_start":1,"column_end":100}},{"value":"/ It stops after fully constructing one partial trie and returns the root hash and the number of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":208004,"byte_end":208102,"line_start":379,"line_end":379,"column_start":1,"column_end":99}},{"value":"/ nodes read. If an error occurs during decoding, there are no guarantees about which entries","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":208103,"byte_end":208198,"line_start":380,"line_end":380,"column_start":1,"column_end":96}},{"value":"/ were or were not added to the DB.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":208199,"byte_end":208236,"line_start":381,"line_end":381,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":208237,"byte_end":208240,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ The number of nodes read may be fewer than the total number of items in `encoded`. This allows","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":208241,"byte_end":208339,"line_start":383,"line_end":383,"column_start":1,"column_end":99}},{"value":"/ one to concatenate multiple compact encodings together and still reconstruct them all.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":208340,"byte_end":208430,"line_start":384,"line_end":384,"column_start":1,"column_end":91}},{"value":"/ This function makes the assumption that all child references in an inline trie node are inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":208434,"byte_end":208532,"line_start":386,"line_end":386,"column_start":1,"column_end":99}},{"value":"/ references.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":208533,"byte_end":208548,"line_start":387,"line_end":387,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1205},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":208897,"byte_end":208921,"line_start":398,"line_end":398,"column_start":8,"column_end":32},"name":"decode_compact_from_iter","qualname":"::trie_codec::decode_compact_from_iter","value":"pub fn decode_compact_from_iter<'a, L, DB, T, I>(&mut DB, I)\n-> Result<(TrieHash<L>, usize), TrieHash<L>, CError<L>> where L: TrieLayout,\nDB: HashDB<L::Hash, T>, I: IntoIterator<Item = &'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Variant of 'decode_compact' that accept an iterator of encoded nodes as input.\n","sig":null,"attributes":[{"value":"/ Variant of 'decode_compact' that accept an iterator of encoded nodes as input.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":208807,"byte_end":208889,"line_start":397,"line_end":397,"column_start":1,"column_end":83}}]},{"kind":"Type","id":{"krate":0,"index":1251},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2355,"byte_end":2362,"line_start":80,"line_end":80,"column_start":10,"column_end":17},"name":"DBValue","qualname":"::DBValue","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Database value\n","sig":null,"attributes":[{"value":"/ Database value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2327,"byte_end":2345,"line_start":79,"line_end":79,"column_start":1,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1733},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2622,"byte_end":2638,"line_start":89,"line_end":89,"column_start":2,"column_end":18},"name":"InvalidStateRoot","qualname":"::TrieError::InvalidStateRoot","value":"TrieError::InvalidStateRoot(T)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" Attempted to create a trie with a state root not in the DB.\n","sig":null,"attributes":[{"value":"/ Attempted to create a trie with a state root not in the DB.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2557,"byte_end":2620,"line_start":88,"line_end":88,"column_start":2,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1736},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2686,"byte_end":2704,"line_start":91,"line_end":91,"column_start":2,"column_end":20},"name":"IncompleteDatabase","qualname":"::TrieError::IncompleteDatabase","value":"TrieError::IncompleteDatabase(T)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" Trie item not found in the database,\n","sig":null,"attributes":[{"value":"/ Trie item not found in the database,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2644,"byte_end":2684,"line_start":90,"line_end":90,"column_start":2,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1739},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2909,"byte_end":2929,"line_start":95,"line_end":95,"column_start":2,"column_end":22},"name":"ValueAtIncompleteKey","qualname":"::TrieError::ValueAtIncompleteKey","value":"TrieError::ValueAtIncompleteKey(Vec<u8>, u8)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" A value was found in the trie with a nibble key that was not byte-aligned.\n The first parameter is the byte-aligned part of the prefix and the second parameter is the\n remaining nibble.\n","sig":null,"attributes":[{"value":"/ A value was found in the trie with a nibble key that was not byte-aligned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2710,"byte_end":2788,"line_start":92,"line_end":92,"column_start":2,"column_end":80}},{"value":"/ The first parameter is the byte-aligned part of the prefix and the second parameter is the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2790,"byte_end":2884,"line_start":93,"line_end":93,"column_start":2,"column_end":96}},{"value":"/ remaining nibble.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2886,"byte_end":2907,"line_start":94,"line_end":94,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1743},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2968,"byte_end":2980,"line_start":97,"line_end":97,"column_start":2,"column_end":14},"name":"DecoderError","qualname":"::TrieError::DecoderError","value":"TrieError::DecoderError(T, E)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" Corrupt Trie item\n","sig":null,"attributes":[{"value":"/ Corrupt Trie item","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2945,"byte_end":2966,"line_start":96,"line_end":96,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1747},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2989,"byte_end":3000,"line_start":98,"line_end":98,"column_start":2,"column_end":13},"name":"InvalidHash","qualname":"::TrieError::InvalidHash","value":"TrieError::InvalidHash(T, Vec<u8>)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1730},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2538,"byte_end":2547,"line_start":87,"line_end":87,"column_start":10,"column_end":19},"name":"TrieError","qualname":"::TrieError","value":"pub enum TrieError<T, E> {\n\n    /// Attempted to create a trie with a state root not in the DB.\n    InvalidStateRoot(T),\n\n    /// Trie item not found in the database,\n    IncompleteDatabase(T),\n\n    /// A value was found in the trie with a nibble key that was not byte-aligned.\n    /// The first parameter is the byte-aligned part of the prefix and the second parameter is the\n    /// remaining nibble.\n    ValueAtIncompleteKey(Vec<u8>, u8),\n\n    /// Corrupt Trie item\n    DecoderError(T, E),\n    InvalidHash(T, Vec<u8>),\n}","parent":null,"children":[{"krate":0,"index":1733},{"krate":0,"index":1736},{"krate":0,"index":1739},{"krate":0,"index":1743},{"krate":0,"index":1747}],"decl_id":null,"docs":" Trie Errors.","sig":null,"attributes":[{"value":"/ Trie Errors.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2375,"byte_end":2391,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2392,"byte_end":2395,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ These borrow the data within them to avoid excessive copying on every","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2396,"byte_end":2469,"line_start":84,"line_end":84,"column_start":1,"column_end":74}},{"value":"/ trie operation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":2470,"byte_end":2489,"line_start":85,"line_end":85,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":1259},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4083,"byte_end":4089,"line_start":129,"line_end":129,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"crate::rstd::result::Result<T, Box<TrieError<H, E>>>","parent":null,"children":[],"decl_id":null,"docs":" Trie result type.\n Boxed to avoid copying around extra space for the `Hasher`s `Out` on successful queries.\n","sig":null,"attributes":[{"value":"/ Trie result type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":3959,"byte_end":3980,"line_start":127,"line_end":127,"column_start":1,"column_end":22}},{"value":"/ Boxed to avoid copying around extra space for the `Hasher`s `Out` on successful queries.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":3981,"byte_end":4073,"line_start":128,"line_end":128,"column_start":1,"column_end":93}}]},{"kind":"Type","id":{"krate":0,"index":1263},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4220,"byte_end":4228,"line_start":133,"line_end":133,"column_start":10,"column_end":18},"name":"TrieItem","qualname":"::TrieItem","value":"Result<(Vec<u8>, DBValue), U, E>","parent":null,"children":[],"decl_id":null,"docs":" Trie-Item type used for iterators over trie data.\n","sig":null,"attributes":[{"value":"/ Trie-Item type used for iterators over trie data.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4157,"byte_end":4210,"line_start":132,"line_end":132,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":1267},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4561,"byte_end":4566,"line_start":140,"line_end":140,"column_start":11,"column_end":16},"name":"Query","qualname":"::Query","value":"Query<H: Hasher>","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271}],"decl_id":null,"docs":" Description of what kind of query will be made to the trie.","sig":null,"attributes":[{"value":"/ Description of what kind of query will be made to the trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4276,"byte_end":4339,"line_start":135,"line_end":135,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4340,"byte_end":4343,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is implemented for any &mut recorder (where the query will return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4344,"byte_end":4418,"line_start":137,"line_end":137,"column_start":1,"column_end":75}},{"value":"/ a DBValue), any function taking raw bytes (where no recording will be made),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4419,"byte_end":4499,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/ or any tuple of (&mut Recorder, FnOnce(&[u8]))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4500,"byte_end":4550,"line_start":139,"line_end":139,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1269},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4604,"byte_end":4608,"line_start":142,"line_end":142,"column_start":7,"column_end":11},"name":"Item","qualname":"::Query::Item","value":"type Item;","parent":{"krate":0,"index":1267},"children":[],"decl_id":null,"docs":" Output item.\n","sig":null,"attributes":[{"value":"/ Output item.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4581,"byte_end":4597,"line_start":141,"line_end":141,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4663,"byte_end":4669,"line_start":145,"line_end":145,"column_start":5,"column_end":11},"name":"decode","qualname":"::Query::decode","value":"pub fn decode(Self, &[u8]) -> Self::Item","parent":{"krate":0,"index":1267},"children":[],"decl_id":null,"docs":" Decode a byte-slice into the desired item.\n","sig":null,"attributes":[{"value":"/ Decode a byte-slice into the desired item.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4612,"byte_end":4658,"line_start":144,"line_end":144,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4758,"byte_end":4764,"line_start":148,"line_end":148,"column_start":5,"column_end":11},"name":"record","qualname":"::Query::record","value":"pub fn record(&mut Self, &H::Out, &[u8], u32)","parent":{"krate":0,"index":1267},"children":[],"decl_id":null,"docs":" Record that a node has been passed through.\n","sig":null,"attributes":[{"value":"/ Record that a node has been passed through.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":4706,"byte_end":4753,"line_start":147,"line_end":147,"column_start":2,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":1293},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":5599,"byte_end":5603,"line_start":173,"line_end":173,"column_start":11,"column_end":15},"name":"Trie","qualname":"::Trie","value":"Trie<L: TrieLayout>","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1303},{"krate":0,"index":1307}],"decl_id":null,"docs":" A key-value datastore implemented as a database-backed modified Merkle tree.\n","sig":null,"attributes":[{"value":"/ A key-value datastore implemented as a database-backed modified Merkle tree.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":5508,"byte_end":5588,"line_start":172,"line_end":172,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":5659,"byte_end":5663,"line_start":175,"line_end":175,"column_start":5,"column_end":9},"name":"root","qualname":"::Trie::root","value":"pub fn root(&Self) -> &TrieHash<L>","parent":{"krate":0,"index":1293},"children":[],"decl_id":null,"docs":" Return the root of the trie.\n","sig":null,"attributes":[{"value":"/ Return the root of the trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":5622,"byte_end":5654,"line_start":174,"line_end":174,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":5717,"byte_end":5725,"line_start":178,"line_end":178,"column_start":5,"column_end":13},"name":"is_empty","qualname":"::Trie::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":1293},"children":[],"decl_id":null,"docs":" Is the trie empty?\n","sig":null,"attributes":[{"value":"/ Is the trie empty?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":5690,"byte_end":5712,"line_start":177,"line_end":177,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":5835,"byte_end":5843,"line_start":181,"line_end":181,"column_start":5,"column_end":13},"name":"contains","qualname":"::Trie::contains","value":"pub fn contains(&Self, &[u8]) -> Result<bool, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1293},"children":[],"decl_id":null,"docs":" Does the trie contain a given key?\n","sig":null,"attributes":[{"value":"/ Does the trie contain a given key?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":5792,"byte_end":5830,"line_start":180,"line_end":180,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6005,"byte_end":6008,"line_start":186,"line_end":186,"column_start":5,"column_end":8},"name":"get","qualname":"::Trie::get","value":"pub fn get<'a, 'key>(&'a Self, &'key [u8])\n-> Result<Option<DBValue>, TrieHash<L>, CError<L>> where 'a:'key","parent":{"krate":0,"index":1293},"children":[],"decl_id":null,"docs":" What is the value of the given key in this trie?\n","sig":null,"attributes":[{"value":"/ What is the value of the given key in this trie?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":5948,"byte_end":6000,"line_start":185,"line_end":185,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6288,"byte_end":6296,"line_start":195,"line_end":195,"column_start":5,"column_end":13},"name":"get_with","qualname":"::Trie::get_with","value":"pub fn get_with<'a, 'key, Q: Query<L::Hash>>(&'a Self, &'key [u8], Q)\n-> Result<Option<Q::Item>, TrieHash<L>, CError<L>> where 'a:'key","parent":{"krate":0,"index":1293},"children":[],"decl_id":null,"docs":" Search for the key with the given query parameter. See the docs of the `Query`\n trait for more details.\n","sig":null,"attributes":[{"value":"/ Search for the key with the given query parameter. See the docs of the `Query`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6172,"byte_end":6254,"line_start":193,"line_end":193,"column_start":2,"column_end":84}},{"value":"/ trait for more details.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6256,"byte_end":6283,"line_start":194,"line_end":194,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6507,"byte_end":6511,"line_start":202,"line_end":202,"column_start":5,"column_end":9},"name":"iter","qualname":"::Trie::iter","value":"pub fn iter<'a>(&'a Self)\n->\n    Result<Box<TrieIterator<L, Item = TrieItem<, TrieHash<L>, CError<L>>> +\n               'a>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1293},"children":[],"decl_id":null,"docs":" Returns a depth-first iterator over the elements of trie.\n","sig":null,"attributes":[{"value":"/ Returns a depth-first iterator over the elements of trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6441,"byte_end":6502,"line_start":201,"line_end":201,"column_start":2,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":1309},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6737,"byte_end":6744,"line_start":210,"line_end":210,"column_start":11,"column_end":18},"name":"TrieMut","qualname":"::TrieMut","value":"TrieMut<L: TrieLayout>","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1315},{"krate":0,"index":1318},{"krate":0,"index":1319}],"decl_id":null,"docs":" A key-value datastore implemented as a database-backed modified Merkle tree.\n","sig":null,"attributes":[{"value":"/ A key-value datastore implemented as a database-backed modified Merkle tree.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6646,"byte_end":6726,"line_start":209,"line_end":209,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6800,"byte_end":6804,"line_start":212,"line_end":212,"column_start":5,"column_end":9},"name":"root","qualname":"::TrieMut::root","value":"pub fn root(&mut Self) -> &TrieHash<L>","parent":{"krate":0,"index":1309},"children":[],"decl_id":null,"docs":" Return the root of the trie.\n","sig":null,"attributes":[{"value":"/ Return the root of the trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6763,"byte_end":6795,"line_start":211,"line_end":211,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6862,"byte_end":6870,"line_start":215,"line_end":215,"column_start":5,"column_end":13},"name":"is_empty","qualname":"::TrieMut::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":1309},"children":[],"decl_id":null,"docs":" Is the trie empty?\n","sig":null,"attributes":[{"value":"/ Is the trie empty?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6835,"byte_end":6857,"line_start":214,"line_end":214,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6932,"byte_end":6940,"line_start":218,"line_end":218,"column_start":5,"column_end":13},"name":"contains","qualname":"::TrieMut::contains","value":"pub fn contains(&Self, &[u8]) -> Result<bool, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1309},"children":[],"decl_id":null,"docs":" Does the trie contain a given key?\n","sig":null,"attributes":[{"value":"/ Does the trie contain a given key?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":6889,"byte_end":6927,"line_start":217,"line_end":217,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1315},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7101,"byte_end":7104,"line_start":223,"line_end":223,"column_start":5,"column_end":8},"name":"get","qualname":"::TrieMut::get","value":"pub fn get<'a, 'key>(&'a Self, &'key [u8])\n-> Result<Option<DBValue>, TrieHash<L>, CError<L>> where 'a:'key","parent":{"krate":0,"index":1309},"children":[],"decl_id":null,"docs":" What is the value of the given key in this trie?\n","sig":null,"attributes":[{"value":"/ What is the value of the given key in this trie?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7044,"byte_end":7096,"line_start":222,"line_end":222,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7400,"byte_end":7406,"line_start":230,"line_end":230,"column_start":5,"column_end":11},"name":"insert","qualname":"::TrieMut::insert","value":"pub fn insert(&mut Self, &[u8], &[u8])\n-> Result<Option<DBValue>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1309},"children":[],"decl_id":null,"docs":" Insert a `key`/`value` pair into the trie. An empty value is equivalent to removing\n `key` from the trie. Returns the old value associated with this key, if it existed.\n","sig":null,"attributes":[{"value":"/ Insert a `key`/`value` pair into the trie. An empty value is equivalent to removing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7219,"byte_end":7306,"line_start":228,"line_end":228,"column_start":2,"column_end":89}},{"value":"/ `key` from the trie. Returns the old value associated with this key, if it existed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7308,"byte_end":7395,"line_start":229,"line_end":229,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7664,"byte_end":7670,"line_start":238,"line_end":238,"column_start":5,"column_end":11},"name":"remove","qualname":"::TrieMut::remove","value":"pub fn remove(&mut Self, &[u8])\n-> Result<Option<DBValue>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1309},"children":[],"decl_id":null,"docs":" Remove a `key` from the trie. Equivalent to making it equal to the empty\n value. Returns the old value associated with this key, if it existed.\n","sig":null,"attributes":[{"value":"/ Remove a `key` from the trie. Equivalent to making it equal to the empty","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7508,"byte_end":7584,"line_start":236,"line_end":236,"column_start":2,"column_end":78}},{"value":"/ value. Returns the old value associated with this key, if it existed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7586,"byte_end":7659,"line_start":237,"line_end":237,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1320},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7824,"byte_end":7836,"line_start":242,"line_end":242,"column_start":11,"column_end":23},"name":"TrieIterator","qualname":"::TrieIterator","value":"TrieIterator<L: TrieLayout>: Iterator","parent":null,"children":[{"krate":0,"index":1322}],"decl_id":null,"docs":" A trie iterator that also supports random access (`seek()`).\n","sig":null,"attributes":[{"value":"/ A trie iterator that also supports random access (`seek()`).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7749,"byte_end":7813,"line_start":241,"line_end":241,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7934,"byte_end":7938,"line_start":244,"line_end":244,"column_start":5,"column_end":9},"name":"seek","qualname":"::TrieIterator::seek","value":"pub fn seek(&mut Self, &[u8]) -> Result<(), TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Position the iterator on the first element with key >= `key`\n","sig":null,"attributes":[{"value":"/ Position the iterator on the first element with key >= `key`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7865,"byte_end":7929,"line_start":243,"line_end":243,"column_start":2,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1775},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8131,"byte_end":8138,"line_start":252,"line_end":252,"column_start":2,"column_end":9},"name":"Generic","qualname":"::TrieSpec::Generic","value":"TrieSpec::Generic","parent":{"krate":0,"index":1774},"children":[],"decl_id":null,"docs":" Generic trie.\n","sig":null,"attributes":[{"value":"/ Generic trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8112,"byte_end":8129,"line_start":251,"line_end":251,"column_start":2,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1777},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8159,"byte_end":8165,"line_start":254,"line_end":254,"column_start":2,"column_end":8},"name":"Secure","qualname":"::TrieSpec::Secure","value":"TrieSpec::Secure","parent":{"krate":0,"index":1774},"children":[],"decl_id":null,"docs":" Secure trie.\n","sig":null,"attributes":[{"value":"/ Secure trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8141,"byte_end":8157,"line_start":253,"line_end":253,"column_start":2,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1779},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8204,"byte_end":8207,"line_start":256,"line_end":256,"column_start":2,"column_end":5},"name":"Fat","qualname":"::TrieSpec::Fat","value":"TrieSpec::Fat","parent":{"krate":0,"index":1774},"children":[],"decl_id":null,"docs":"\tSecure trie with fat database.\n","sig":null,"attributes":[{"value":"/\tSecure trie with fat database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8168,"byte_end":8202,"line_start":255,"line_end":255,"column_start":2,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1774},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8100,"byte_end":8108,"line_start":250,"line_end":250,"column_start":10,"column_end":18},"name":"TrieSpec","qualname":"::TrieSpec","value":"pub enum TrieSpec {\n\n    /// Generic trie.\n    Generic,\n\n    /// Secure trie.\n    Secure,\n\n    ///\tSecure trie with fat database.\n    Fat,\n}","parent":null,"children":[{"krate":0,"index":1775},{"krate":0,"index":1777},{"krate":0,"index":1779}],"decl_id":null,"docs":" Trie types\n","sig":null,"attributes":[{"value":"/ Trie types","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8004,"byte_end":8018,"line_start":247,"line_end":247,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":1788},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8348,"byte_end":8359,"line_start":267,"line_end":267,"column_start":12,"column_end":23},"name":"TrieFactory","qualname":"::TrieFactory","value":"TrieFactory {  }","parent":null,"children":[{"krate":0,"index":1790},{"krate":0,"index":1791}],"decl_id":null,"docs":" Trie factory.\n","sig":null,"attributes":[{"value":"/ Trie factory.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8293,"byte_end":8310,"line_start":265,"line_end":265,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1328},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8579,"byte_end":8586,"line_start":276,"line_end":276,"column_start":2,"column_end":9},"name":"Generic","qualname":"::TrieKinds::Generic","value":"TrieKinds::Generic(TrieDB)","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" A generic trie db.\n","sig":null,"attributes":[{"value":"/ A generic trie db.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8555,"byte_end":8577,"line_start":275,"line_end":275,"column_start":2,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1331},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8628,"byte_end":8634,"line_start":278,"line_end":278,"column_start":2,"column_end":8},"name":"Secure","qualname":"::TrieKinds::Secure","value":"TrieKinds::Secure(SecTrieDB)","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" A secure trie db.\n","sig":null,"attributes":[{"value":"/ A secure trie db.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8605,"byte_end":8626,"line_start":277,"line_end":277,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1334},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8676,"byte_end":8679,"line_start":280,"line_end":280,"column_start":2,"column_end":5},"name":"Fat","qualname":"::TrieKinds::Fat","value":"TrieKinds::Fat(FatDB)","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" A fat trie db.\n","sig":null,"attributes":[{"value":"/ A fat trie db.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8656,"byte_end":8674,"line_start":279,"line_end":279,"column_start":2,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":1325},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8522,"byte_end":8531,"line_start":274,"line_end":274,"column_start":10,"column_end":19},"name":"TrieKinds","qualname":"::TrieKinds","value":"pub enum TrieKinds<'db, L: TrieLayout> {\n\n    /// A generic trie db.\n    Generic(TrieDB),\n\n    /// A secure trie db.\n    Secure(SecTrieDB),\n\n    /// A fat trie db.\n    Fat(FatDB),\n}","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1331},{"krate":0,"index":1334}],"decl_id":null,"docs":" All different kinds of tries.\n This is used to prevent a heap allocation for every created trie.\n","sig":null,"attributes":[{"value":"/ All different kinds of tries.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8409,"byte_end":8442,"line_start":272,"line_end":272,"column_start":1,"column_end":34}},{"value":"/ This is used to prevent a heap allocation for every created trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8443,"byte_end":8512,"line_start":273,"line_end":273,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":9779,"byte_end":9782,"line_start":330,"line_end":330,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieFactory<L>>::new","value":"pub fn new(TrieSpec, L) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates new factory.\n","sig":null,"attributes":[{"value":"/ Creates new factory.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":9746,"byte_end":9770,"line_start":329,"line_end":329,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":9907,"byte_end":9915,"line_start":335,"line_end":335,"column_start":9,"column_end":17},"name":"readonly","qualname":"<TrieFactory<L>>::readonly","value":"pub fn readonly(&Self, &'db HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<TrieKinds, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create new immutable instance of Trie.\n","sig":null,"attributes":[{"value":"/ Create new immutable instance of Trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":9856,"byte_end":9898,"line_start":334,"line_end":334,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":10339,"byte_end":10345,"line_start":348,"line_end":348,"column_start":9,"column_end":15},"name":"create","qualname":"<TrieFactory<L>>::create","value":"pub fn create(&Self, &'db mut HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>)\n-> Box<TrieMut<L> + 'db>","parent":null,"children":[],"decl_id":null,"docs":" Create new mutable instance of Trie.\n","sig":null,"attributes":[{"value":"/ Create new mutable instance of Trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":10290,"byte_end":10330,"line_start":347,"line_end":347,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":10756,"byte_end":10769,"line_start":361,"line_end":361,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<TrieFactory<L>>::from_existing","value":"pub fn from_existing(&Self, &'db mut HashDB<L::Hash, DBValue>,\n                     &'db mut TrieHash<L>)\n-> Result<Box<TrieMut<L> + 'db>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create new mutable instance of trie and check for errors.\n","sig":null,"attributes":[{"value":"/ Create new mutable instance of trie and check for errors.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":10686,"byte_end":10747,"line_start":360,"line_end":360,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11270,"byte_end":11276,"line_start":374,"line_end":374,"column_start":9,"column_end":15},"name":"is_fat","qualname":"<TrieFactory<L>>::is_fat","value":"pub fn is_fat(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the trie DB is a fat DB (allows enumeration of keys).\n","sig":null,"attributes":[{"value":"/ Returns true iff the trie DB is a fat DB (allows enumeration of keys).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11187,"byte_end":11261,"line_start":373,"line_end":373,"column_start":2,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":1358},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11464,"byte_end":11474,"line_start":380,"line_end":380,"column_start":11,"column_end":21},"name":"TrieLayout","qualname":"::TrieLayout","value":"TrieLayout","parent":null,"children":[{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1362}],"decl_id":null,"docs":" Trait with definition of trie layout.\n Contains all associated trait needed for\n a trie definition or implementation.\n","sig":null,"attributes":[{"value":"/ Trait with definition of trie layout.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11326,"byte_end":11367,"line_start":377,"line_end":377,"column_start":1,"column_end":42}},{"value":"/ Contains all associated trait needed for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11368,"byte_end":11412,"line_start":378,"line_end":378,"column_start":1,"column_end":45}},{"value":"/ a trie definition or implementation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11413,"byte_end":11453,"line_start":379,"line_end":379,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":1359},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11639,"byte_end":11652,"line_start":384,"line_end":384,"column_start":8,"column_end":21},"name":"USE_EXTENSION","qualname":"::TrieLayout::USE_EXTENSION","value":"bool","parent":{"krate":0,"index":1358},"children":[],"decl_id":null,"docs":" If true, the trie will use extension nodes and\n no partial in branch, if false the trie will only\n use branch and node with partials in both.\n","sig":null,"attributes":[{"value":"/ If true, the trie will use extension nodes and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11478,"byte_end":11528,"line_start":381,"line_end":381,"column_start":2,"column_end":52}},{"value":"/ no partial in branch, if false the trie will only","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11530,"byte_end":11583,"line_start":382,"line_end":382,"column_start":2,"column_end":55}},{"value":"/ use branch and node with partials in both.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11585,"byte_end":11631,"line_start":383,"line_end":383,"column_start":2,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1360},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11731,"byte_end":11742,"line_start":386,"line_end":386,"column_start":8,"column_end":19},"name":"ALLOW_EMPTY","qualname":"::TrieLayout::ALLOW_EMPTY","value":"bool","parent":{"krate":0,"index":1358},"children":[],"decl_id":null,"docs":" If true, the trie will allow empty values into `TrieDBMut`\n","sig":null,"attributes":[{"value":"/ If true, the trie will allow empty values into `TrieDBMut`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11661,"byte_end":11723,"line_start":385,"line_end":385,"column_start":2,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":1361},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11798,"byte_end":11802,"line_start":388,"line_end":388,"column_start":7,"column_end":11},"name":"Hash","qualname":"::TrieLayout::Hash","value":"type Hash: Hasher;","parent":{"krate":0,"index":1358},"children":[],"decl_id":null,"docs":" Hasher to use for this trie.\n","sig":null,"attributes":[{"value":"/ Hasher to use for this trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11759,"byte_end":11791,"line_start":387,"line_end":387,"column_start":2,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":1362},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11876,"byte_end":11881,"line_start":390,"line_end":390,"column_start":7,"column_end":12},"name":"Codec","qualname":"::TrieLayout::Codec","value":"type Codec: NodeCodec<HashOut=<Self::Hash as Hasher>::Out>;","parent":{"krate":0,"index":1358},"children":[],"decl_id":null,"docs":" Codec to use (needs to match hasher and nibble ops).\n","sig":null,"attributes":[{"value":"/ Codec to use (needs to match hasher and nibble ops).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11813,"byte_end":11869,"line_start":389,"line_end":389,"column_start":2,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":1363},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":12116,"byte_end":12133,"line_start":396,"line_end":396,"column_start":11,"column_end":28},"name":"TrieConfiguration","qualname":"::TrieConfiguration","value":"TrieConfiguration: Sized + TrieLayout","parent":null,"children":[{"krate":0,"index":1364},{"krate":0,"index":1369},{"krate":0,"index":1373},{"krate":0,"index":1377},{"krate":0,"index":1378}],"decl_id":null,"docs":" This trait associates a trie definition with preferred methods.\n It also contains own default implementations and can be\n used to allow switching implementation.\n","sig":null,"attributes":[{"value":"/ This trait associates a trie definition with preferred methods.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":11934,"byte_end":12001,"line_start":393,"line_end":393,"column_start":1,"column_end":68}},{"value":"/ It also contains own default implementations and can be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":12002,"byte_end":12061,"line_start":394,"line_end":394,"column_start":1,"column_end":60}},{"value":"/ used to allow switching implementation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":12062,"byte_end":12105,"line_start":395,"line_end":395,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":12241,"byte_end":12251,"line_start":398,"line_end":398,"column_start":5,"column_end":15},"name":"trie_build","qualname":"::TrieConfiguration::trie_build","value":"pub fn trie_build<DB, I, A, B>(&mut DB, I) -> <Self::Hash as Hasher>::Out\nwhere DB: HashDB<Self::Hash, usize>, I: IntoIterator<Item = (A, B)>,\nA: AsRef<[u8]> + Ord, B: AsRef<[u8]>","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Operation to build a trie db from its ordered iterator over its key/values.\n","sig":null,"attributes":[{"value":"/ Operation to build a trie db from its ordered iterator over its key/values.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":12157,"byte_end":12236,"line_start":397,"line_end":397,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":12638,"byte_end":12647,"line_start":409,"line_end":409,"column_start":5,"column_end":14},"name":"trie_root","qualname":"::TrieConfiguration::trie_root","value":"pub fn trie_root<I, A, B>(I) -> <Self::Hash as Hasher>::Out where\nI: IntoIterator<Item = (A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Determines a trie root given its ordered contents, closed form.\n","sig":null,"attributes":[{"value":"/ Determines a trie root given its ordered contents, closed form.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":12566,"byte_end":12633,"line_start":408,"line_end":408,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":13013,"byte_end":13031,"line_start":419,"line_end":419,"column_start":5,"column_end":23},"name":"trie_root_unhashed","qualname":"::TrieConfiguration::trie_root_unhashed","value":"pub fn trie_root_unhashed<I, A, B>(I) -> Vec<u8> where I: IntoIterator<Item =\n(A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Determines a trie root node's data given its ordered contents, closed form.\n","sig":null,"attributes":[{"value":"/ Determines a trie root node's data given its ordered contents, closed form.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":12929,"byte_end":13008,"line_start":418,"line_end":418,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":13384,"byte_end":13396,"line_start":430,"line_end":430,"column_start":5,"column_end":17},"name":"encode_index","qualname":"::TrieConfiguration::encode_index","value":"pub fn encode_index(u32) -> Vec<u8>","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Encoding of index as a key (when reusing general trie for\n indexed trie).\n","sig":null,"attributes":[{"value":"/ Encoding of index as a key (when reusing general trie for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":13298,"byte_end":13359,"line_start":428,"line_end":428,"column_start":2,"column_end":63}},{"value":"/ indexed trie).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":13361,"byte_end":13379,"line_start":429,"line_end":429,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":13621,"byte_end":13638,"line_start":436,"line_end":436,"column_start":5,"column_end":22},"name":"ordered_trie_root","qualname":"::TrieConfiguration::ordered_trie_root","value":"pub fn ordered_trie_root<I, A>(I) -> <Self::Hash as Hasher>::Out where\nI: IntoIterator<Item = A>, A: AsRef<[u8]>","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" A trie root formed from the items, with keys attached according to their\n compact-encoded index (using `parity-codec` crate).\n","sig":null,"attributes":[{"value":"/ A trie root formed from the items, with keys attached according to their","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":13483,"byte_end":13559,"line_start":434,"line_end":434,"column_start":2,"column_end":78}},{"value":"/ compact-encoded index (using `parity-codec` crate).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":13561,"byte_end":13616,"line_start":435,"line_end":435,"column_start":2,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":1382},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":13937,"byte_end":13945,"line_start":450,"line_end":450,"column_start":10,"column_end":18},"name":"TrieHash","qualname":"::TrieHash","value":"<<L as TrieLayout>::Hash as Hasher>::Out","parent":null,"children":[],"decl_id":null,"docs":" Alias accessor to hasher hash output type from a `TrieLayout`.\n","sig":null,"attributes":[{"value":"/ Alias accessor to hasher hash output type from a `TrieLayout`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":13861,"byte_end":13927,"line_start":449,"line_end":449,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":1384},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":14081,"byte_end":14087,"line_start":452,"line_end":452,"column_start":10,"column_end":16},"name":"CError","qualname":"::CError","value":"<<L as TrieLayout>::Codec as NodeCodec>::Error","parent":null,"children":[],"decl_id":null,"docs":" Alias accessor to `NodeCodec` associated `Error` type from a `TrieLayout`.\n","sig":null,"attributes":[{"value":"/ Alias accessor to `NodeCodec` associated `Error` type from a `TrieLayout`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":13993,"byte_end":14071,"line_start":451,"line_end":451,"column_start":1,"column_end":79}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16720,"byte_end":16734,"line_start":68,"line_end":68,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":17564,"byte_end":17579,"line_start":89,"line_end":89,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19547,"byte_end":19555,"line_start":146,"line_end":146,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":21173,"byte_end":21182,"line_start":186,"line_end":186,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/generate.rs","byte_start":25736,"byte_end":25746,"line_start":47,"line_end":47,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":120},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":42372,"byte_end":42377,"line_start":54,"line_end":54,"column_start":72,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":43575,"byte_end":43580,"line_start":88,"line_end":88,"column_start":82,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":44354,"byte_end":44364,"line_start":112,"line_end":112,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57396,"byte_end":57402,"line_start":60,"line_end":60,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":59360,"byte_end":59366,"line_start":118,"line_end":118,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":60203,"byte_end":60221,"line_start":161,"line_end":161,"column_start":33,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":62860,"byte_end":62866,"line_start":247,"line_end":247,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":63404,"byte_end":63418,"line_start":269,"line_end":269,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":63960,"byte_end":63974,"line_start":288,"line_end":288,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":64208,"byte_end":64222,"line_start":295,"line_end":295,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":66838,"byte_end":66848,"line_start":52,"line_end":52,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":68144,"byte_end":68149,"line_start":91,"line_end":91,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":68379,"byte_end":68383,"line_start":102,"line_end":102,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":69020,"byte_end":69024,"line_start":118,"line_end":118,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":421},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":73829,"byte_end":73841,"line_start":282,"line_end":282,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":74717,"byte_end":74731,"line_start":314,"line_end":314,"column_start":49,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":75578,"byte_end":75589,"line_start":347,"line_end":347,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76326,"byte_end":76337,"line_start":376,"line_end":376,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77978,"byte_end":77987,"line_start":428,"line_end":428,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":112689,"byte_end":112698,"line_start":1507,"line_end":1507,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":114648,"byte_end":114657,"line_start":1585,"line_end":1585,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117124,"byte_end":117133,"line_start":30,"line_end":30,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117856,"byte_end":117865,"line_start":57,"line_end":57,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119497,"byte_end":119509,"line_start":29,"line_end":29,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":120444,"byte_end":120456,"line_start":57,"line_end":57,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122323,"byte_end":122331,"line_start":40,"line_end":40,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122401,"byte_end":122409,"line_start":46,"line_end":46,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124205,"byte_end":124210,"line_start":32,"line_end":32,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124731,"byte_end":124736,"line_start":50,"line_end":50,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":125571,"byte_end":125584,"line_start":85,"line_end":85,"column_start":14,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":125840,"byte_end":125853,"line_start":98,"line_end":98,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":126076,"byte_end":126089,"line_start":108,"line_end":108,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127525,"byte_end":127533,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":128466,"byte_end":128474,"line_start":61,"line_end":61,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":131683,"byte_end":131693,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":140189,"byte_end":140200,"line_start":332,"line_end":332,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":140401,"byte_end":140412,"line_start":339,"line_end":339,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141128,"byte_end":141136,"line_start":368,"line_end":368,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141279,"byte_end":141287,"line_start":374,"line_end":374,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141993,"byte_end":142009,"line_start":403,"line_end":403,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":142342,"byte_end":142355,"line_start":419,"line_end":419,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":142527,"byte_end":142540,"line_start":426,"line_end":426,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":143301,"byte_end":143317,"line_start":452,"line_end":452,"column_start":60,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":145057,"byte_end":145062,"line_start":40,"line_end":40,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":145955,"byte_end":145973,"line_start":64,"line_end":64,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":146644,"byte_end":146662,"line_start":91,"line_end":91,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":151072,"byte_end":151090,"line_start":249,"line_end":249,"column_start":45,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":151263,"byte_end":151281,"line_start":259,"line_end":259,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156408,"byte_end":156414,"line_start":34,"line_end":34,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165372,"byte_end":165381,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165438,"byte_end":165447,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":971},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":171181,"byte_end":171190,"line_start":227,"line_end":227,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":173983,"byte_end":174002,"line_start":23,"line_end":23,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174187,"byte_end":174198,"line_start":34,"line_end":34,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180128,"byte_end":180139,"line_start":234,"line_end":234,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180237,"byte_end":180248,"line_start":240,"line_end":240,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180367,"byte_end":180378,"line_start":246,"line_end":246,"column_start":17,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180412,"byte_end":180423,"line_start":248,"line_end":248,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180534,"byte_end":180545,"line_start":254,"line_end":254,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180933,"byte_end":180944,"line_start":270,"line_end":270,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":185440,"byte_end":185455,"line_start":28,"line_end":28,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":187590,"byte_end":187605,"line_start":97,"line_end":97,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":188237,"byte_end":188252,"line_start":123,"line_end":123,"column_start":17,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":188285,"byte_end":188300,"line_start":125,"line_end":125,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":188413,"byte_end":188428,"line_start":131,"line_end":131,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":188555,"byte_end":188570,"line_start":138,"line_end":138,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":196553,"byte_end":196570,"line_start":53,"line_end":53,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":204269,"byte_end":204286,"line_start":263,"line_end":263,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":3069,"byte_end":3078,"line_start":102,"line_end":102,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":3909,"byte_end":3918,"line_start":125,"line_end":125,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":5116,"byte_end":5117,"line_start":159,"line_end":159,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1283},{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8229,"byte_end":8237,"line_start":259,"line_end":259,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":9061,"byte_end":9070,"line_start":294,"line_end":294,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1348}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":9700,"byte_end":9711,"line_start":325,"line_end":325,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1307,"byte_end":1311,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":27}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1321,"byte_end":1326,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1336,"byte_end":1342,"line_start":45,"line_end":45,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":237}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1352,"byte_end":1361,"line_start":46,"line_end":46,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":333}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1371,"byte_end":1380,"line_start":47,"line_end":47,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":549}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1390,"byte_end":1402,"line_start":48,"line_end":48,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":586}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":1412,"byte_end":1420,"line_start":49,"line_end":49,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":620}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":16720,"byte_end":16734,"line_start":68,"line_end":68,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1455},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":17564,"byte_end":17579,"line_start":89,"line_end":89,"column_start":6,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1473},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":19547,"byte_end":19555,"line_start":146,"line_end":146,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1487},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node.rs","byte_start":21173,"byte_end":21182,"line_start":186,"line_end":186,"column_start":23,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1518},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/generate.rs","byte_start":25736,"byte_end":25746,"line_start":47,"line_end":47,"column_start":24,"column_end":34},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":99},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":42372,"byte_end":42377,"line_start":54,"line_end":54,"column_start":72,"column_end":77},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1537},"to":{"krate":2,"index":6836}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":43575,"byte_end":43580,"line_start":88,"line_end":88,"column_start":82,"column_end":87},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1537},"to":{"krate":1,"index":1724}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/proof/verify.rs","byte_start":44354,"byte_end":44364,"line_start":112,"line_end":112,"column_start":24,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":57396,"byte_end":57402,"line_start":60,"line_end":60,"column_start":14,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":59360,"byte_end":59366,"line_start":118,"line_end":118,"column_start":26,"column_end":32},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":266},"to":{"krate":0,"index":1293}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":60203,"byte_end":60221,"line_start":161,"line_end":161,"column_start":33,"column_end":51},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":292},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":62860,"byte_end":62866,"line_start":247,"line_end":247,"column_start":29,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":266},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":63404,"byte_end":63418,"line_start":269,"line_end":269,"column_start":25,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":63960,"byte_end":63974,"line_start":288,"line_end":288,"column_start":45,"column_end":59},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":315},"to":{"krate":0,"index":1320}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedb.rs","byte_start":64208,"byte_end":64222,"line_start":295,"line_end":295,"column_start":38,"column_end":52},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":315},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":66838,"byte_end":66848,"line_start":52,"line_end":52,"column_start":33,"column_end":43},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1589},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":68144,"byte_end":68149,"line_start":91,"line_end":91,"column_start":20,"column_end":25},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":68379,"byte_end":68383,"line_start":102,"line_end":102,"column_start":26,"column_end":30},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":69020,"byte_end":69024,"line_start":118,"line_end":118,"column_start":9,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":73829,"byte_end":73841,"line_start":282,"line_end":282,"column_start":9,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":74717,"byte_end":74731,"line_start":314,"line_end":314,"column_start":49,"column_end":63},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":1996}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":75578,"byte_end":75589,"line_start":347,"line_end":347,"column_start":9,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":76326,"byte_end":76337,"line_start":376,"line_end":376,"column_start":42,"column_end":53},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":477},"to":{"krate":2,"index":2352}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":77978,"byte_end":77987,"line_start":428,"line_end":428,"column_start":13,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":112689,"byte_end":112698,"line_start":1507,"line_end":1507,"column_start":28,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":491},"to":{"krate":0,"index":1309}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/triedbmut.rs","byte_start":114648,"byte_end":114657,"line_start":1585,"line_end":1585,"column_start":22,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":491},"to":{"krate":2,"index":2295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117124,"byte_end":117133,"line_start":30,"line_end":30,"column_start":14,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":565},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedb.rs","byte_start":117856,"byte_end":117865,"line_start":57,"line_end":57,"column_start":26,"column_end":35},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":565},"to":{"krate":0,"index":1293}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":119497,"byte_end":119509,"line_start":29,"line_end":29,"column_start":14,"column_end":26},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/sectriedbmut.rs","byte_start":120444,"byte_end":120456,"line_start":57,"line_end":57,"column_start":29,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":598},"to":{"krate":0,"index":1309}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122323,"byte_end":122331,"line_start":40,"line_end":40,"column_start":28,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/recorder.rs","byte_start":122401,"byte_end":122409,"line_start":46,"line_end":46,"column_start":16,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124205,"byte_end":124210,"line_start":32,"line_end":32,"column_start":14,"column_end":19},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":124731,"byte_end":124736,"line_start":50,"line_end":50,"column_start":26,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":648},"to":{"krate":0,"index":1293}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":125571,"byte_end":125584,"line_start":85,"line_end":85,"column_start":14,"column_end":27},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":125840,"byte_end":125853,"line_start":98,"line_end":98,"column_start":34,"column_end":47},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":669},"to":{"krate":0,"index":1320}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdb.rs","byte_start":126076,"byte_end":126089,"line_start":108,"line_end":108,"column_start":27,"column_end":40},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":669},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":127525,"byte_end":127533,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/fatdbmut.rs","byte_start":128466,"byte_end":128474,"line_start":61,"line_end":61,"column_start":29,"column_end":37},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":702},"to":{"krate":0,"index":1309}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":131683,"byte_end":131693,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":140189,"byte_end":140200,"line_start":332,"line_end":332,"column_start":24,"column_end":35},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":140401,"byte_end":140412,"line_start":339,"line_end":339,"column_start":6,"column_end":17},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":791},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141128,"byte_end":141136,"line_start":368,"line_end":368,"column_start":25,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":813},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141279,"byte_end":141287,"line_start":374,"line_end":374,"column_start":60,"column_end":68},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":813},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":141993,"byte_end":142009,"line_start":403,"line_end":403,"column_start":21,"column_end":37},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":825},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":142342,"byte_end":142355,"line_start":419,"line_end":419,"column_start":25,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":832},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":142527,"byte_end":142540,"line_start":426,"line_end":426,"column_start":60,"column_end":73},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":832},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iter_build.rs","byte_start":143301,"byte_end":143317,"line_start":452,"line_end":452,"column_start":60,"column_end":76},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":825},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":145057,"byte_end":145062,"line_start":40,"line_end":40,"column_start":17,"column_end":22},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":145955,"byte_end":145973,"line_start":64,"line_end":64,"column_start":25,"column_end":43},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":146644,"byte_end":146662,"line_start":91,"line_end":91,"column_start":25,"column_end":43},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":151072,"byte_end":151090,"line_start":249,"line_end":249,"column_start":45,"column_end":63},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":874},"to":{"krate":0,"index":1320}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/iterator.rs","byte_start":151263,"byte_end":151281,"line_start":259,"line_end":259,"column_start":38,"column_end":56},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lookup.rs","byte_start":156408,"byte_end":156414,"line_start":34,"line_end":34,"column_start":16,"column_end":22},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165372,"byte_end":165381,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1707},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":165438,"byte_end":165447,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibblevec.rs","byte_start":171181,"byte_end":171190,"line_start":227,"line_end":227,"column_start":36,"column_end":45},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1707},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":173983,"byte_end":174002,"line_start":23,"line_end":23,"column_start":23,"column_end":42},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1100},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":174187,"byte_end":174198,"line_start":34,"line_end":34,"column_start":10,"column_end":21},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1721},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180128,"byte_end":180139,"line_start":234,"line_end":234,"column_start":28,"column_end":39},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1721},"to":{"krate":2,"index":1986}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180237,"byte_end":180248,"line_start":240,"line_end":240,"column_start":24,"column_end":35},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1721},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180367,"byte_end":180378,"line_start":246,"line_end":246,"column_start":17,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1721},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180412,"byte_end":180423,"line_start":248,"line_end":248,"column_start":25,"column_end":36},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1721},"to":{"krate":2,"index":1833}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180534,"byte_end":180545,"line_start":254,"line_end":254,"column_start":18,"column_end":29},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1721},"to":{"krate":2,"index":1822}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/nibbleslice.rs","byte_start":180933,"byte_end":180944,"line_start":270,"line_end":270,"column_start":25,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1721},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":185440,"byte_end":185455,"line_start":28,"line_end":28,"column_start":10,"column_end":25},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":187590,"byte_end":187605,"line_start":97,"line_end":97,"column_start":24,"column_end":39},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":188237,"byte_end":188252,"line_start":123,"line_end":123,"column_start":17,"column_end":32},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":188285,"byte_end":188300,"line_start":125,"line_end":125,"column_start":25,"column_end":40},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1833}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":188413,"byte_end":188428,"line_start":131,"line_end":131,"column_start":18,"column_end":33},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1822}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/nibble/leftnibbleslice.rs","byte_start":188555,"byte_end":188570,"line_start":138,"line_end":138,"column_start":30,"column_end":45},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/node_codec.rs","byte_start":192152,"byte_end":192157,"line_start":32,"line_end":32,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":196553,"byte_end":196570,"line_start":53,"line_end":53,"column_start":20,"column_end":37},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/trie_codec.rs","byte_start":204269,"byte_end":204286,"line_start":263,"line_end":263,"column_start":24,"column_end":41},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":3069,"byte_end":3078,"line_start":102,"line_end":102,"column_start":29,"column_end":38},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1730},"to":{"krate":2,"index":6836}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":3909,"byte_end":3918,"line_start":125,"line_end":125,"column_start":22,"column_end":31},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1730},"to":{"krate":1,"index":1724}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":5116,"byte_end":5117,"line_start":159,"line_end":159,"column_start":36,"column_end":37},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1279},"to":{"krate":0,"index":1267}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":7853,"byte_end":7861,"line_start":242,"line_end":242,"column_start":40,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":5536},"to":{"krate":0,"index":1320}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":8229,"byte_end":8237,"line_start":259,"line_end":259,"column_start":18,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1774},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":9061,"byte_end":9070,"line_start":294,"line_end":294,"column_start":38,"column_end":47},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1325},"to":{"krate":0,"index":1293}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":9700,"byte_end":9711,"line_start":325,"line_end":325,"column_start":14,"column_end":25},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1788},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":12135,"byte_end":12140,"line_start":396,"line_end":396,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":1363}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.22.3/src/lib.rs","byte_start":12143,"byte_end":12153,"line_start":396,"line_end":396,"column_start":38,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":1358},"to":{"krate":0,"index":1363}}]}