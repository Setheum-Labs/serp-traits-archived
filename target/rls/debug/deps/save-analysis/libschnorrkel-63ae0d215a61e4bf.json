{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1","program":"/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","schnorrkel","--edition=2018","/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"preaudit_deprecated\"","--cfg","feature=\"rand\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","--cfg","feature=\"u64_backend\"","-C","metadata=63ae0d215a61e4bf","-C","extra-filename=-63ae0d215a61e4bf","--out-dir","/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","-L","dependency=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","--extern","arrayref=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libarrayref-1efc1fb86f924f0c.rmeta","--extern","arrayvec=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libarrayvec-0a86aa7ed79a15ca.rmeta","--extern","curve25519_dalek=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libcurve25519_dalek-b8e70e1fb2af0b1e.rmeta","--extern","getrandom=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libgetrandom-d37fc8dc70c83e4d.rmeta","--extern","merlin=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libmerlin-87791d9c5df53057.rmeta","--extern","rand=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/librand-fa7aeccaab79dc34.rmeta","--extern","rand_core=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/librand_core-c04ac87af6436ddd.rmeta","--extern","serde=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libserde-c1d0451fd273a165.rmeta","--extern","sha2=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsha2-d71ab63394ebec72.rmeta","--extern","subtle=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsubtle-b5f2544d904068bf.rmeta","--extern","zeroize=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libzeroize-2f2ed6073510d743.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libschnorrkel-63ae0d215a61e4bf.rmeta"},"prelude":{"crate_id":{"name":"schnorrkel","disambiguator":[1001073668430333559,14191689993495040953]},"crate_root":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src","external_crates":[{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":18,"id":{"name":"arrayref","disambiguator":[16818885780591367818,9624370045344091841]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":19,"id":{"name":"rand_core","disambiguator":[3238620688790230140,13462498439867285351]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":20,"id":{"name":"getrandom","disambiguator":[16958247650847020380,5385242026854871367]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":21,"id":{"name":"cfg_if","disambiguator":[11748229077813686416,18120593503603249335]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":22,"id":{"name":"libc","disambiguator":[7953600248772063458,1989307123664392873]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","num":23,"id":{"name":"curve25519_dalek","disambiguator":[11182327997470844279,2917915551897756157]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","num":24,"id":{"name":"byteorder","disambiguator":[16743341458239395833,5344541827637086529]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","num":25,"id":{"name":"digest","disambiguator":[18028793442622875312,8404934643691058449]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","num":26,"id":{"name":"generic_array","disambiguator":[8154424454435046820,8305875546402162267]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","num":27,"id":{"name":"typenum","disambiguator":[8726524992263171078,2989859816024006970]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","num":28,"id":{"name":"zeroize","disambiguator":[10556093639355727955,15809428849932923722]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","num":29,"id":{"name":"zeroize_derive","disambiguator":[5655268509516224944,6725263168993598751]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","num":30,"id":{"name":"subtle","disambiguator":[17934521912222352306,18444245334094816619]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","num":31,"id":{"name":"sha2","disambiguator":[6031437354618425809,1156418039787797982]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","num":32,"id":{"name":"block_buffer","disambiguator":[17013019169273939082,8694242993449314512]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","num":33,"id":{"name":"block_padding","disambiguator":[12027653930546257504,11934247384914869959]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","num":34,"id":{"name":"byte_tools","disambiguator":[11700157176403723246,15042745078268532608]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","num":35,"id":{"name":"fake_simd","disambiguator":[14036491710765223056,16121027988084704970]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","num":36,"id":{"name":"opaque_debug","disambiguator":[15355801993192592970,15368723170800198628]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","num":37,"id":{"name":"merlin","disambiguator":[10995490140485953775,3078541580170789468]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","num":38,"id":{"name":"keccak","disambiguator":[8402286363173856787,11033165844963027687]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","num":39,"id":{"name":"arrayvec","disambiguator":[1943503948824698767,8928204549588057885]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":40,"id":{"name":"rand","disambiguator":[746826575780793851,4471793012143423394]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":41,"id":{"name":"rand_chacha","disambiguator":[441716931807972491,17272912142872802949]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":42,"id":{"name":"ppv_lite86","disambiguator":[5486910781073359264,15253540615556416119]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","num":43,"id":{"name":"rand_pcg","disambiguator":[3160627028304066158,11293307244701815743]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/serdey.rs","num":44,"id":{"name":"serde","disambiguator":[9329802083187344169,15516913349122290357]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/serdey.rs","num":45,"id":{"name":"serde_derive","disambiguator":[9132577773600900999,13098957011468639310]}}],"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":282,"byte_end":10717,"line_start":11,"line_end":285,"column_start":1,"column_end":82}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10324,"byte_end":10325,"line_start":279,"line_end":279,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"PublicKey, Keypair, SecretKey, MiniSecretKey, PUBLIC_KEY_LENGTH, MINI_SECRET_KEY_LENGTH, ExpansionMode","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10425,"byte_end":10440,"line_start":280,"line_end":280,"column_start":26,"column_end":41},"alias_span":null,"name":"signing_context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1004},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10501,"byte_end":10510,"line_start":281,"line_end":281,"column_start":23,"column_end":32},"alias_span":null,"name":"Signature","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":298},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10511,"byte_end":10527,"line_start":281,"line_end":281,"column_start":33,"column_end":49},"alias_span":null,"name":"SIGNATURE_LENGTH","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1271},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10554,"byte_end":10568,"line_start":282,"line_end":282,"column_start":25,"column_end":39},"alias_span":null,"name":"SignatureError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":606},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10569,"byte_end":10584,"line_start":282,"line_end":282,"column_start":40,"column_end":55},"alias_span":null,"name":"SignatureResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":625},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10659,"byte_end":10671,"line_start":285,"line_end":285,"column_start":24,"column_end":36},"alias_span":null,"name":"verify_batch","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":639},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10672,"byte_end":10688,"line_start":285,"line_end":285,"column_start":37,"column_end":53},"alias_span":null,"name":"verify_batch_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":636},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10689,"byte_end":10715,"line_start":285,"line_end":285,"column_start":54,"column_end":80},"alias_span":null,"name":"verify_batch_deterministic","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":282,"byte_end":10717,"line_start":11,"line_end":285,"column_start":1,"column_end":82},"name":"","qualname":"::","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":47},{"krate":0,"index":52},{"krate":0,"index":194},{"krate":0,"index":286},{"krate":0,"index":343},{"krate":0,"index":521},{"krate":0,"index":572},{"krate":0,"index":603},{"krate":0,"index":617},{"krate":0,"index":657},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853}],"decl_id":null,"docs":" Schnorr signature variants using Ristretto point compression.","sig":null,"attributes":[{"value":"/ Schnorr signature variants using Ristretto point compression.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":282,"byte_end":347,"line_start":11,"line_end":11,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":348,"byte_end":351,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":352,"byte_end":365,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":366,"byte_end":369,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Creating a signature on a message is simple.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":370,"byte_end":418,"line_start":15,"line_end":15,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":419,"byte_end":422,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ First, we need to generate a `Keypair`, which includes both public and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":423,"byte_end":497,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ secret halves of an asymmetric key.  To do so, we need a cryptographically","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":498,"byte_end":576,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ secure pseudorandom number generator (CSPRNG).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":577,"byte_end":627,"line_start":19,"line_end":19,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":628,"byte_end":631,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":632,"byte_end":639,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"std\"))]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":640,"byte_end":674,"line_start":22,"line_end":22,"column_start":1,"column_end":35}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":675,"byte_end":692,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/ use rand::{Rng, rngs::OsRng};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":693,"byte_end":726,"line_start":24,"line_end":24,"column_start":1,"column_end":34}},{"value":"/ use schnorrkel::{Keypair,Signature};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":727,"byte_end":767,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":768,"byte_end":771,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ let keypair: Keypair = Keypair::generate_with(OsRng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":772,"byte_end":829,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":830,"byte_end":837,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":838,"byte_end":843,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ # #[cfg(any(not(feature = \"std\")))]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":844,"byte_end":883,"line_start":30,"line_end":30,"column_start":1,"column_end":40}},{"value":"/ # fn main() { }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":884,"byte_end":903,"line_start":31,"line_end":31,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":904,"byte_end":911,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":912,"byte_end":915,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ We can now use this `keypair` to sign a message:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":916,"byte_end":968,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":969,"byte_end":972,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":973,"byte_end":980,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":981,"byte_end":998,"line_start":37,"line_end":37,"column_start":1,"column_end":18}},{"value":"/ # use rand::{SeedableRng}; // Rng","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":999,"byte_end":1036,"line_start":38,"line_end":38,"column_start":1,"column_end":38}},{"value":"/ # use rand_chacha::ChaChaRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1037,"byte_end":1070,"line_start":39,"line_end":39,"column_start":1,"column_end":34}},{"value":"/ # use schnorrkel::{Keypair,Signature,signing_context};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1071,"byte_end":1129,"line_start":40,"line_end":40,"column_start":1,"column_end":59}},{"value":"/ # let mut csprng: ChaChaRng = ChaChaRng::from_seed([0u8; 32]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1130,"byte_end":1196,"line_start":41,"line_end":41,"column_start":1,"column_end":67}},{"value":"/ # let keypair: Keypair = Keypair::generate_with(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1197,"byte_end":1262,"line_start":42,"line_end":42,"column_start":1,"column_end":66}},{"value":"/ let context = signing_context(b\"this signature does this thing\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1263,"byte_end":1332,"line_start":43,"line_end":43,"column_start":1,"column_end":70}},{"value":"/ let message: &[u8] = \"This is a test of the tsunami alert system.\".as_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1333,"byte_end":1415,"line_start":44,"line_end":44,"column_start":1,"column_end":83}},{"value":"/ let signature: Signature = keypair.sign(context.bytes(message));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1416,"byte_end":1484,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1485,"byte_end":1492,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1493,"byte_end":1500,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1501,"byte_end":1504,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ As well as to verify that this is, indeed, a valid signature on","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1505,"byte_end":1572,"line_start":49,"line_end":49,"column_start":1,"column_end":68}},{"value":"/ that `message`:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1573,"byte_end":1592,"line_start":50,"line_end":50,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1593,"byte_end":1596,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1597,"byte_end":1604,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1605,"byte_end":1622,"line_start":53,"line_end":53,"column_start":1,"column_end":18}},{"value":"/ # use rand::{SeedableRng}; // Rng","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1623,"byte_end":1660,"line_start":54,"line_end":54,"column_start":1,"column_end":38}},{"value":"/ # use rand_chacha::ChaChaRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1661,"byte_end":1694,"line_start":55,"line_end":55,"column_start":1,"column_end":34}},{"value":"/ # use schnorrkel::{Keypair,Signature,signing_context};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1695,"byte_end":1753,"line_start":56,"line_end":56,"column_start":1,"column_end":59}},{"value":"/ # let mut csprng: ChaChaRng = ChaChaRng::from_seed([0u8; 32]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1754,"byte_end":1820,"line_start":57,"line_end":57,"column_start":1,"column_end":67}},{"value":"/ # let keypair: Keypair = Keypair::generate_with(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1821,"byte_end":1886,"line_start":58,"line_end":58,"column_start":1,"column_end":66}},{"value":"/ # let context = signing_context(b\"this signature does this thing\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1887,"byte_end":1958,"line_start":59,"line_end":59,"column_start":1,"column_end":72}},{"value":"/ # let message: &[u8] = \"This is a test of the tsunami alert system.\".as_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":1959,"byte_end":2043,"line_start":60,"line_end":60,"column_start":1,"column_end":85}},{"value":"/ # let signature: Signature = keypair.sign(context.bytes(message));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2044,"byte_end":2114,"line_start":61,"line_end":61,"column_start":1,"column_end":71}},{"value":"/ assert!(keypair.verify(context.bytes(message), &signature).is_ok());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2115,"byte_end":2187,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2188,"byte_end":2195,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2196,"byte_end":2203,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2204,"byte_end":2207,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Anyone else, given the `public` half of the `keypair` can also easily","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2208,"byte_end":2281,"line_start":66,"line_end":66,"column_start":1,"column_end":74}},{"value":"/ verify this signature:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2282,"byte_end":2308,"line_start":67,"line_end":67,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2309,"byte_end":2312,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2313,"byte_end":2320,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2321,"byte_end":2338,"line_start":70,"line_end":70,"column_start":1,"column_end":18}},{"value":"/ # use rand::{SeedableRng}; // Rng","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2339,"byte_end":2376,"line_start":71,"line_end":71,"column_start":1,"column_end":38}},{"value":"/ # use rand_chacha::ChaChaRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2377,"byte_end":2410,"line_start":72,"line_end":72,"column_start":1,"column_end":34}},{"value":"/ # use schnorrkel::{Keypair,Signature,signing_context};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2411,"byte_end":2469,"line_start":73,"line_end":73,"column_start":1,"column_end":59}},{"value":"/ use schnorrkel::PublicKey;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2470,"byte_end":2500,"line_start":74,"line_end":74,"column_start":1,"column_end":31}},{"value":"/ # let mut csprng: ChaChaRng = ChaChaRng::from_seed([0u8; 32]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2501,"byte_end":2567,"line_start":75,"line_end":75,"column_start":1,"column_end":67}},{"value":"/ # let keypair: Keypair = Keypair::generate_with(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2568,"byte_end":2633,"line_start":76,"line_end":76,"column_start":1,"column_end":66}},{"value":"/ # let context = signing_context(b\"this signature does this thing\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2634,"byte_end":2705,"line_start":77,"line_end":77,"column_start":1,"column_end":72}},{"value":"/ # let message: &[u8] = \"This is a test of the tsunami alert system.\".as_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2706,"byte_end":2790,"line_start":78,"line_end":78,"column_start":1,"column_end":85}},{"value":"/ # let signature: Signature = keypair.sign(context.bytes(message));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2791,"byte_end":2861,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ let public_key: PublicKey = keypair.public;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2862,"byte_end":2909,"line_start":80,"line_end":80,"column_start":1,"column_end":48}},{"value":"/ assert!(public_key.verify(context.bytes(message), &signature).is_ok());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2910,"byte_end":2985,"line_start":81,"line_end":81,"column_start":1,"column_end":76}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2986,"byte_end":2993,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":2994,"byte_end":3001,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3002,"byte_end":3005,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ ## Serialisation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3006,"byte_end":3026,"line_start":85,"line_end":85,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3027,"byte_end":3030,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ `PublicKey`s, `MiniSecretKey`s, `Keypair`s, and `Signature`s can be serialised","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3031,"byte_end":3113,"line_start":87,"line_end":87,"column_start":1,"column_end":83}},{"value":"/ into byte-arrays by calling `.to_bytes()`.  It's perfectly acceptible and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3114,"byte_end":3191,"line_start":88,"line_end":88,"column_start":1,"column_end":78}},{"value":"/ safe to transfer and/or store those bytes.  (Of course, never transfer your","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3192,"byte_end":3271,"line_start":89,"line_end":89,"column_start":1,"column_end":80}},{"value":"/ secret key to anyone else, since they will only need the public key to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3272,"byte_end":3346,"line_start":90,"line_end":90,"column_start":1,"column_end":75}},{"value":"/ verify your signatures!)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3347,"byte_end":3375,"line_start":91,"line_end":91,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3376,"byte_end":3379,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3380,"byte_end":3387,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3388,"byte_end":3405,"line_start":94,"line_end":94,"column_start":1,"column_end":18}},{"value":"/ # use rand::{Rng, SeedableRng};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3406,"byte_end":3441,"line_start":95,"line_end":95,"column_start":1,"column_end":36}},{"value":"/ # use rand_chacha::ChaChaRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3442,"byte_end":3475,"line_start":96,"line_end":96,"column_start":1,"column_end":34}},{"value":"/ # use schnorrkel::{Keypair, Signature, PublicKey, signing_context};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3476,"byte_end":3547,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/ use schnorrkel::{PUBLIC_KEY_LENGTH, SECRET_KEY_LENGTH, KEYPAIR_LENGTH, SIGNATURE_LENGTH};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3548,"byte_end":3641,"line_start":98,"line_end":98,"column_start":1,"column_end":94}},{"value":"/ # let mut csprng: ChaChaRng = ChaChaRng::from_seed([0u8; 32]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3642,"byte_end":3708,"line_start":99,"line_end":99,"column_start":1,"column_end":67}},{"value":"/ # let keypair: Keypair = Keypair::generate_with(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3709,"byte_end":3774,"line_start":100,"line_end":100,"column_start":1,"column_end":66}},{"value":"/ # let context = signing_context(b\"this signature does this thing\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3775,"byte_end":3846,"line_start":101,"line_end":101,"column_start":1,"column_end":72}},{"value":"/ # let message: &[u8] = \"This is a test of the tsunami alert system.\".as_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3847,"byte_end":3931,"line_start":102,"line_end":102,"column_start":1,"column_end":85}},{"value":"/ # let signature: Signature = keypair.sign(context.bytes(message));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":3932,"byte_end":4002,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ # let public_key: PublicKey = keypair.public;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4003,"byte_end":4052,"line_start":104,"line_end":104,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4053,"byte_end":4056,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ let public_key_bytes: [u8; PUBLIC_KEY_LENGTH] = public_key.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4057,"byte_end":4131,"line_start":106,"line_end":106,"column_start":1,"column_end":75}},{"value":"/ let secret_key_bytes: [u8; SECRET_KEY_LENGTH] = keypair.secret.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4132,"byte_end":4210,"line_start":107,"line_end":107,"column_start":1,"column_end":79}},{"value":"/ let keypair_bytes:    [u8; KEYPAIR_LENGTH]    = keypair.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4211,"byte_end":4282,"line_start":108,"line_end":108,"column_start":1,"column_end":72}},{"value":"/ let signature_bytes:  [u8; SIGNATURE_LENGTH]  = signature.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4283,"byte_end":4356,"line_start":109,"line_end":109,"column_start":1,"column_end":74}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4357,"byte_end":4364,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4365,"byte_end":4372,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4373,"byte_end":4376,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ And similarly, decoded from bytes with `::from_bytes()`:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4377,"byte_end":4437,"line_start":113,"line_end":113,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4438,"byte_end":4441,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4442,"byte_end":4449,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ # use rand::{Rng, SeedableRng};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4450,"byte_end":4485,"line_start":116,"line_end":116,"column_start":1,"column_end":36}},{"value":"/ # use rand_chacha::ChaChaRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4486,"byte_end":4519,"line_start":117,"line_end":117,"column_start":1,"column_end":34}},{"value":"/ # use schnorrkel::{SecretKey, Keypair, Signature, PublicKey, SignatureError, signing_context};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4520,"byte_end":4618,"line_start":118,"line_end":118,"column_start":1,"column_end":99}},{"value":"/ # use schnorrkel::{PUBLIC_KEY_LENGTH, SECRET_KEY_LENGTH, KEYPAIR_LENGTH, SIGNATURE_LENGTH};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4619,"byte_end":4714,"line_start":119,"line_end":119,"column_start":1,"column_end":96}},{"value":"/ # fn do_test() -> Result<(SecretKey, PublicKey, Keypair, Signature), SignatureError> {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4715,"byte_end":4805,"line_start":120,"line_end":120,"column_start":1,"column_end":91}},{"value":"/ # let mut csprng: ChaChaRng = ChaChaRng::from_seed([0u8; 32]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4806,"byte_end":4872,"line_start":121,"line_end":121,"column_start":1,"column_end":67}},{"value":"/ # let keypair_orig: Keypair = Keypair::generate_with(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4873,"byte_end":4943,"line_start":122,"line_end":122,"column_start":1,"column_end":71}},{"value":"/ # let context = signing_context(b\"this signature does this thing\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":4944,"byte_end":5015,"line_start":123,"line_end":123,"column_start":1,"column_end":72}},{"value":"/ # let message: &[u8] = \"This is a test of the tsunami alert system.\".as_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5016,"byte_end":5100,"line_start":124,"line_end":124,"column_start":1,"column_end":85}},{"value":"/ # let signature_orig: Signature = keypair_orig.sign(context.bytes(message));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5101,"byte_end":5181,"line_start":125,"line_end":125,"column_start":1,"column_end":81}},{"value":"/ # let public_key_bytes: [u8; PUBLIC_KEY_LENGTH] = keypair_orig.public.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5182,"byte_end":5267,"line_start":126,"line_end":126,"column_start":1,"column_end":86}},{"value":"/ # let secret_key_bytes: [u8; SECRET_KEY_LENGTH] = keypair_orig.secret.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5268,"byte_end":5353,"line_start":127,"line_end":127,"column_start":1,"column_end":86}},{"value":"/ # let keypair_bytes:    [u8; KEYPAIR_LENGTH]    = keypair_orig.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5354,"byte_end":5432,"line_start":128,"line_end":128,"column_start":1,"column_end":79}},{"value":"/ # let signature_bytes:  [u8; SIGNATURE_LENGTH]  = signature_orig.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5433,"byte_end":5513,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5514,"byte_end":5519,"line_start":130,"line_end":130,"column_start":1,"column_end":6}},{"value":"/ let public_key: PublicKey = PublicKey::from_bytes(&public_key_bytes)?;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5520,"byte_end":5594,"line_start":131,"line_end":131,"column_start":1,"column_end":75}},{"value":"/ let secret_key: SecretKey = SecretKey::from_bytes(&secret_key_bytes)?;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5595,"byte_end":5669,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ let keypair:    Keypair   = Keypair::from_bytes(&keypair_bytes)?;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5670,"byte_end":5739,"line_start":133,"line_end":133,"column_start":1,"column_end":70}},{"value":"/ let signature:  Signature = Signature::from_bytes(&signature_bytes)?;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5740,"byte_end":5813,"line_start":134,"line_end":134,"column_start":1,"column_end":74}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5814,"byte_end":5819,"line_start":135,"line_end":135,"column_start":1,"column_end":6}},{"value":"/ # Ok((secret_key, public_key, keypair, signature))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5820,"byte_end":5874,"line_start":136,"line_end":136,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5875,"byte_end":5882,"line_start":137,"line_end":137,"column_start":1,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5883,"byte_end":5900,"line_start":138,"line_end":138,"column_start":1,"column_end":18}},{"value":"/ #     do_test();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5901,"byte_end":5921,"line_start":139,"line_end":139,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5922,"byte_end":5929,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5930,"byte_end":5937,"line_start":141,"line_end":141,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5938,"byte_end":5941,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ ### Using Serde","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5942,"byte_end":5961,"line_start":143,"line_end":143,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5962,"byte_end":5965,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ If you prefer the bytes to be wrapped in another serialisation format, all","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":5966,"byte_end":6044,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/ types additionally come with built-in [serde](https://serde.rs) support by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6045,"byte_end":6123,"line_start":146,"line_end":146,"column_start":1,"column_end":79}},{"value":"/ building `schnorrkell` via:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6124,"byte_end":6155,"line_start":147,"line_end":147,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6156,"byte_end":6159,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ```bash","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6160,"byte_end":6171,"line_start":149,"line_end":149,"column_start":1,"column_end":12}},{"value":"/ $ cargo build --features=\"serde\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6172,"byte_end":6208,"line_start":150,"line_end":150,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6209,"byte_end":6216,"line_start":151,"line_end":151,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6217,"byte_end":6220,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ They can be then serialised into any of the wire formats which serde supports.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6221,"byte_end":6303,"line_start":153,"line_end":153,"column_start":1,"column_end":83}},{"value":"/ For example, using [bincode](https://github.com/TyOverby/bincode):","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6304,"byte_end":6374,"line_start":154,"line_end":154,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6375,"byte_end":6378,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6379,"byte_end":6386,"line_start":156,"line_end":156,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"serde\")]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6387,"byte_end":6418,"line_start":157,"line_end":157,"column_start":1,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6419,"byte_end":6436,"line_start":158,"line_end":158,"column_start":1,"column_end":18}},{"value":"/ # use rand::{Rng, SeedableRng};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6437,"byte_end":6472,"line_start":159,"line_end":159,"column_start":1,"column_end":36}},{"value":"/ # use rand_chacha::ChaChaRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6473,"byte_end":6506,"line_start":160,"line_end":160,"column_start":1,"column_end":34}},{"value":"/ # use schnorrkel::{Keypair, Signature, PublicKey, signing_context};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6507,"byte_end":6578,"line_start":161,"line_end":161,"column_start":1,"column_end":72}},{"value":"/ use bincode::{serialize};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6579,"byte_end":6608,"line_start":162,"line_end":162,"column_start":1,"column_end":30}},{"value":"/ # let mut csprng: ChaChaRng = ChaChaRng::from_seed([0u8; 32]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6609,"byte_end":6675,"line_start":163,"line_end":163,"column_start":1,"column_end":67}},{"value":"/ # let keypair: Keypair = Keypair::generate_with(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6676,"byte_end":6741,"line_start":164,"line_end":164,"column_start":1,"column_end":66}},{"value":"/ # let context = signing_context(b\"this signature does this thing\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6742,"byte_end":6813,"line_start":165,"line_end":165,"column_start":1,"column_end":72}},{"value":"/ # let message: &[u8] = \"This is a test of the tsunami alert system.\".as_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6814,"byte_end":6898,"line_start":166,"line_end":166,"column_start":1,"column_end":85}},{"value":"/ # let signature: Signature = keypair.sign(context.bytes(message));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6899,"byte_end":6969,"line_start":167,"line_end":167,"column_start":1,"column_end":71}},{"value":"/ # let public_key: PublicKey = keypair.public;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":6970,"byte_end":7019,"line_start":168,"line_end":168,"column_start":1,"column_end":50}},{"value":"/ # assert!( public_key.verify(context.bytes(message), &signature).is_ok() );","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7020,"byte_end":7099,"line_start":169,"line_end":169,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7100,"byte_end":7103,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ let encoded_public_key: Vec<u8> = serialize(&public_key).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7104,"byte_end":7174,"line_start":171,"line_end":171,"column_start":1,"column_end":71}},{"value":"/ let encoded_signature: Vec<u8> = serialize(&signature).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7175,"byte_end":7243,"line_start":172,"line_end":172,"column_start":1,"column_end":69}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7244,"byte_end":7251,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"serde\"))]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7252,"byte_end":7288,"line_start":174,"line_end":174,"column_start":1,"column_end":37}},{"value":"/ # fn main() {}","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7289,"byte_end":7307,"line_start":175,"line_end":175,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7308,"byte_end":7315,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7316,"byte_end":7319,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ After sending the `encoded_public_key` and `encoded_signature`, the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7320,"byte_end":7391,"line_start":178,"line_end":178,"column_start":1,"column_end":72}},{"value":"/ recipient may deserialise them and verify:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7392,"byte_end":7438,"line_start":179,"line_end":179,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7439,"byte_end":7442,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7443,"byte_end":7450,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"serde\")]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7451,"byte_end":7482,"line_start":182,"line_end":182,"column_start":1,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7483,"byte_end":7500,"line_start":183,"line_end":183,"column_start":1,"column_end":18}},{"value":"/ # use rand::{Rng, SeedableRng};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7501,"byte_end":7536,"line_start":184,"line_end":184,"column_start":1,"column_end":36}},{"value":"/ # use rand_chacha::ChaChaRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7537,"byte_end":7570,"line_start":185,"line_end":185,"column_start":1,"column_end":34}},{"value":"/ # use schnorrkel::{Keypair, Signature, PublicKey, signing_context};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7571,"byte_end":7642,"line_start":186,"line_end":186,"column_start":1,"column_end":72}},{"value":"/ # use bincode::{serialize};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7643,"byte_end":7674,"line_start":187,"line_end":187,"column_start":1,"column_end":32}},{"value":"/ use bincode::{deserialize};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7675,"byte_end":7706,"line_start":188,"line_end":188,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7707,"byte_end":7710,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ # let mut csprng: ChaChaRng = ChaChaRng::from_seed([0u8; 32]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7711,"byte_end":7777,"line_start":190,"line_end":190,"column_start":1,"column_end":67}},{"value":"/ # let keypair: Keypair = Keypair::generate_with(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7778,"byte_end":7843,"line_start":191,"line_end":191,"column_start":1,"column_end":66}},{"value":"/ let message: &[u8] = \"This is a test of the tsunami alert system.\".as_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7844,"byte_end":7926,"line_start":192,"line_end":192,"column_start":1,"column_end":83}},{"value":"/ # let context = signing_context(b\"this signature does this thing\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7927,"byte_end":7998,"line_start":193,"line_end":193,"column_start":1,"column_end":72}},{"value":"/ # let signature: Signature = keypair.sign(context.bytes(message));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":7999,"byte_end":8069,"line_start":194,"line_end":194,"column_start":1,"column_end":71}},{"value":"/ # let public_key: PublicKey = keypair.public;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8070,"byte_end":8119,"line_start":195,"line_end":195,"column_start":1,"column_end":50}},{"value":"/ # let encoded_public_key: Vec<u8> = serialize(&public_key).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8120,"byte_end":8192,"line_start":196,"line_end":196,"column_start":1,"column_end":73}},{"value":"/ # let encoded_signature: Vec<u8> = serialize(&signature).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8193,"byte_end":8263,"line_start":197,"line_end":197,"column_start":1,"column_end":71}},{"value":"/ let decoded_public_key: PublicKey = deserialize(&encoded_public_key).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8264,"byte_end":8346,"line_start":198,"line_end":198,"column_start":1,"column_end":83}},{"value":"/ let decoded_signature: Signature = deserialize(&encoded_signature).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8347,"byte_end":8427,"line_start":199,"line_end":199,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8428,"byte_end":8431,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ # assert_eq!(public_key, decoded_public_key);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8432,"byte_end":8481,"line_start":201,"line_end":201,"column_start":1,"column_end":50}},{"value":"/ # assert_eq!(signature, decoded_signature);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8482,"byte_end":8529,"line_start":202,"line_end":202,"column_start":1,"column_end":48}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8530,"byte_end":8535,"line_start":203,"line_end":203,"column_start":1,"column_end":6}},{"value":"/ assert!( public_key.verify(context.bytes(message), &signature).is_ok() );","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8536,"byte_end":8613,"line_start":204,"line_end":204,"column_start":1,"column_end":78}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8614,"byte_end":8621,"line_start":205,"line_end":205,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"serde\"))]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8622,"byte_end":8658,"line_start":206,"line_end":206,"column_start":1,"column_end":37}},{"value":"/ # fn main() {}","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8659,"byte_end":8677,"line_start":207,"line_end":207,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8678,"byte_end":8685,"line_start":208,"line_end":208,"column_start":1,"column_end":8}},{"value":"no_std","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8687,"byte_end":8697,"line_start":210,"line_end":210,"column_start":1,"column_end":11}},{"value":"warn(future_incompatible)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8698,"byte_end":8727,"line_start":211,"line_end":211,"column_start":1,"column_end":30}},{"value":"warn(rust_2018_compatibility)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8728,"byte_end":8761,"line_start":212,"line_end":212,"column_start":1,"column_end":34}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8762,"byte_end":8788,"line_start":213,"line_end":213,"column_start":1,"column_end":27}},{"value":"deny(missing_docs)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":8789,"byte_end":8811,"line_start":214,"line_end":214,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":13},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"points","qualname":"::points","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":1387},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":1389},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":854},{"krate":0,"index":864},{"krate":0,"index":862},{"krate":0,"index":860},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44}],"decl_id":null,"docs":" ### Ristretto point tooling\n \n We provide a `RistrettoBoth` type that contains both an uncompressed\n `RistrettoPoint` along side its matching `CompressedRistretto`, \n which helps several protocols avoid duplicate ristretto compressions\n and/or decompressions.  \n","sig":null,"attributes":[{"value":"/ ### Ristretto point tooling","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":16622,"byte_end":16653,"line_start":10,"line_end":10,"column_start":1,"column_end":32}},{"value":"/ ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":16654,"byte_end":16658,"line_start":11,"line_end":11,"column_start":1,"column_end":5}},{"value":"/ We provide a `RistrettoBoth` type that contains both an uncompressed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":16659,"byte_end":16731,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ `RistrettoPoint` along side its matching `CompressedRistretto`, ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":16732,"byte_end":16800,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/ which helps several protocols avoid duplicate ristretto compressions","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":16801,"byte_end":16873,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"/ and/or decompressions.  ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":16874,"byte_end":16902,"line_start":15,"line_end":15,"column_start":1,"column_end":29}}]},{"kind":"Const","id":{"krate":0,"index":22},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":17289,"byte_end":17311,"line_start":30,"line_end":30,"column_start":11,"column_end":33},"name":"RISTRETTO_POINT_LENGTH","qualname":"::points::RISTRETTO_POINT_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Compressed Ristretto point length\n","sig":null,"attributes":[{"value":"/ Compressed Ristretto point length","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":17241,"byte_end":17278,"line_start":29,"line_end":29,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":854},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":17677,"byte_end":17690,"line_start":38,"line_end":38,"column_start":12,"column_end":25},"name":"RistrettoBoth","qualname":"::points::RistrettoBoth","value":"RistrettoBoth {  }","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"decl_id":null,"docs":" A `RistrettoBoth` contains both an uncompressed `RistrettoPoint`\n as well as the corresponding `CompressedRistretto`.  It provides\n a convenient middle ground for protocols that both hash compressed\n points to derive scalars for use with uncompressed points.\n","sig":null,"attributes":[{"value":"/ A `RistrettoBoth` contains both an uncompressed `RistrettoPoint`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":17327,"byte_end":17395,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ as well as the corresponding `CompressedRistretto`.  It provides","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":17396,"byte_end":17464,"line_start":34,"line_end":34,"column_start":1,"column_end":69}},{"value":"/ a convenient middle ground for protocols that both hash compressed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":17465,"byte_end":17535,"line_start":35,"line_end":35,"column_start":1,"column_end":71}},{"value":"/ points to derive scalars for use with uncompressed points.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":17536,"byte_end":17598,"line_start":36,"line_end":36,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":18673,"byte_end":18686,"line_start":73,"line_end":73,"column_start":12,"column_end":25},"name":"as_compressed","qualname":"<RistrettoBoth>::as_compressed","value":"pub fn as_compressed(&Self) -> &CompressedRistretto","parent":null,"children":[],"decl_id":null,"docs":" Access the compressed Ristretto form\n","sig":null,"attributes":[{"value":"/ Access the compressed Ristretto form","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":18621,"byte_end":18661,"line_start":72,"line_end":72,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":18797,"byte_end":18812,"line_start":76,"line_end":76,"column_start":12,"column_end":27},"name":"into_compressed","qualname":"<RistrettoBoth>::into_compressed","value":"pub fn into_compressed(Self) -> CompressedRistretto","parent":null,"children":[],"decl_id":null,"docs":" Extract the compressed Ristretto form\n","sig":null,"attributes":[{"value":"/ Extract the compressed Ristretto form","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":18744,"byte_end":18785,"line_start":75,"line_end":75,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":18904,"byte_end":18912,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"name":"as_point","qualname":"<RistrettoBoth>::as_point","value":"pub fn as_point(&Self) -> &RistrettoPoint","parent":null,"children":[],"decl_id":null,"docs":" Access the point form\n","sig":null,"attributes":[{"value":"/ Access the point form","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":18867,"byte_end":18892,"line_start":78,"line_end":78,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":18998,"byte_end":19008,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"into_point","qualname":"<RistrettoBoth>::into_point","value":"pub fn into_point(Self) -> RistrettoPoint","parent":null,"children":[],"decl_id":null,"docs":" Extract the point form\n","sig":null,"attributes":[{"value":"/ Extract the point form","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":18960,"byte_end":18986,"line_start":81,"line_end":81,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19158,"byte_end":19173,"line_start":86,"line_end":86,"column_start":12,"column_end":27},"name":"from_compressed","qualname":"<RistrettoBoth>::from_compressed","value":"pub fn from_compressed(CompressedRistretto) -> SignatureResult<RistrettoBoth>","parent":null,"children":[],"decl_id":null,"docs":" Decompress into the `RistrettoBoth` format that also retains the\n compressed form.\n","sig":null,"attributes":[{"value":"/ Decompress into the `RistrettoBoth` format that also retains the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19053,"byte_end":19121,"line_start":84,"line_end":84,"column_start":5,"column_end":73}},{"value":"/ compressed form.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19126,"byte_end":19146,"line_start":85,"line_end":85,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19514,"byte_end":19524,"line_start":95,"line_end":95,"column_start":12,"column_end":22},"name":"from_point","qualname":"<RistrettoBoth>::from_point","value":"pub fn from_point(RistrettoPoint) -> RistrettoBoth","parent":null,"children":[],"decl_id":null,"docs":" Compress into the `RistrettoBoth` format that also retains the\n uncompressed form.\n","sig":null,"attributes":[{"value":"/ Compress into the `RistrettoBoth` format that also retains the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19409,"byte_end":19475,"line_start":93,"line_end":93,"column_start":5,"column_end":71}},{"value":"/ uncompressed form.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19480,"byte_end":19502,"line_start":94,"line_end":94,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19743,"byte_end":19751,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<RistrettoBoth>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert this public key to a byte array.\n","sig":null,"attributes":[{"value":"/ Convert this public key to a byte array.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19673,"byte_end":19717,"line_start":102,"line_end":102,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19722,"byte_end":19731,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20804,"byte_end":20814,"line_start":137,"line_end":137,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<RistrettoBoth>::from_bytes","value":"pub fn from_bytes(&[u8]) -> SignatureResult<RistrettoBoth>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `RistrettoBoth` from a slice of bytes.","sig":null,"attributes":[{"value":"/ Construct a `RistrettoBoth` from a slice of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19839,"byte_end":19893,"line_start":108,"line_end":108,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19898,"byte_end":19901,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19906,"byte_end":19919,"line_start":110,"line_end":110,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19924,"byte_end":19927,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19932,"byte_end":19939,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::points::RistrettoBoth;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19944,"byte_end":19986,"line_start":113,"line_end":113,"column_start":5,"column_end":47}},{"value":"/ use schnorrkel::PUBLIC_KEY_LENGTH;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":19991,"byte_end":20029,"line_start":114,"line_end":114,"column_start":5,"column_end":43}},{"value":"/ use schnorrkel::SignatureError;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20034,"byte_end":20069,"line_start":115,"line_end":115,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20074,"byte_end":20077,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # fn doctest() -> Result<RistrettoBoth, SignatureError> {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20082,"byte_end":20143,"line_start":117,"line_end":117,"column_start":5,"column_end":66}},{"value":"/ let public_key_bytes: [u8; PUBLIC_KEY_LENGTH] = [","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20148,"byte_end":20201,"line_start":118,"line_end":118,"column_start":5,"column_end":58}},{"value":"/    215,  90, 152,   1, 130, 177,  10, 183, 213,  75, 254, 211, 201, 100,   7,  58,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20206,"byte_end":20292,"line_start":119,"line_end":119,"column_start":5,"column_end":91}},{"value":"/     14, 225, 114, 243, 218, 166,  35,  37, 175,   2,  26, 104, 247,   7,   81, 26];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20297,"byte_end":20384,"line_start":120,"line_end":120,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20389,"byte_end":20392,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ let public_key = RistrettoBoth::from_bytes(&public_key_bytes)?;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20397,"byte_end":20464,"line_start":122,"line_end":122,"column_start":5,"column_end":72}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20469,"byte_end":20474,"line_start":123,"line_end":123,"column_start":5,"column_end":10}},{"value":"/ # Ok(public_key)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20479,"byte_end":20499,"line_start":124,"line_end":124,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20504,"byte_end":20511,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20516,"byte_end":20521,"line_start":126,"line_end":126,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20526,"byte_end":20543,"line_start":127,"line_end":127,"column_start":5,"column_end":22}},{"value":"/ #     doctest();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20548,"byte_end":20568,"line_start":128,"line_end":128,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20573,"byte_end":20580,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20585,"byte_end":20592,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20597,"byte_end":20600,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20605,"byte_end":20618,"line_start":132,"line_end":132,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20623,"byte_end":20626,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ A `Result` whose okay value is an EdDSA `RistrettoBoth` or whose error value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20631,"byte_end":20711,"line_start":134,"line_end":134,"column_start":5,"column_end":85}},{"value":"/ is an `SignatureError` describing the error that occurred.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20716,"byte_end":20778,"line_start":135,"line_end":135,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20783,"byte_end":20792,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":21074,"byte_end":21088,"line_start":143,"line_end":143,"column_start":12,"column_end":26},"name":"from_bytes_ser","qualname":"<RistrettoBoth>::from_bytes_ser","value":"pub fn from_bytes_ser(&'static str, &'static str, &[u8])\n-> SignatureResult<RistrettoBoth>","parent":null,"children":[],"decl_id":null,"docs":" Variant of `RistrettoBoth::from_bytes` that propogates more informative errors.\n","sig":null,"attributes":[{"value":"/ Variant of `RistrettoBoth::from_bytes` that propogates more informative errors.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":20965,"byte_end":21048,"line_start":141,"line_end":141,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":21053,"byte_end":21062,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"keys","qualname":"::keys","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":1399},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":1407},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":1417},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":880},{"krate":0,"index":891},{"krate":0,"index":884},{"krate":0,"index":888},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":908},{"krate":0,"index":919},{"krate":0,"index":912},{"krate":0,"index":916},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":936},{"krate":0,"index":961},{"krate":0,"index":959},{"krate":0,"index":957},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":944},{"krate":0,"index":942},{"krate":0,"index":939},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":171},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":977},{"krate":0,"index":982},{"krate":0,"index":980},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":984},{"krate":0,"index":987}],"decl_id":null,"docs":" ### Schnorr signatures on the 2-torsion free subgroup of ed25519, as provided by the Ristretto point compression.\n","sig":null,"attributes":[{"value":"/ ### Schnorr signatures on the 2-torsion free subgroup of ed25519, as provided by the Ristretto point compression.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":25522,"byte_end":25639,"line_start":11,"line_end":11,"column_start":1,"column_end":118}}]},{"kind":"Const","id":{"krate":0,"index":73},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26116,"byte_end":26138,"line_start":31,"line_end":31,"column_start":11,"column_end":33},"name":"MINI_SECRET_KEY_LENGTH","qualname":"::keys::MINI_SECRET_KEY_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The length of a Ristretto Schnorr `MiniSecretKey`, in bytes.\n","sig":null,"attributes":[{"value":"/ The length of a Ristretto Schnorr `MiniSecretKey`, in bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26041,"byte_end":26105,"line_start":30,"line_end":30,"column_start":1,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":74},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26224,"byte_end":26241,"line_start":34,"line_end":34,"column_start":11,"column_end":28},"name":"PUBLIC_KEY_LENGTH","qualname":"::keys::PUBLIC_KEY_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The length of a Ristretto Schnorr `PublicKey`, in bytes.\n","sig":null,"attributes":[{"value":"/ The length of a Ristretto Schnorr `PublicKey`, in bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26153,"byte_end":26213,"line_start":33,"line_end":33,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":77},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26582,"byte_end":26599,"line_start":43,"line_end":43,"column_start":11,"column_end":28},"name":"SECRET_KEY_LENGTH","qualname":"::keys::SECRET_KEY_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The length of a Ristretto Schnorr key, `SecretKey`, in bytes.\n","sig":null,"attributes":[{"value":"/ The length of a Ristretto Schnorr key, `SecretKey`, in bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26506,"byte_end":26571,"line_start":42,"line_end":42,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":78},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26729,"byte_end":26743,"line_start":46,"line_end":46,"column_start":11,"column_end":25},"name":"KEYPAIR_LENGTH","qualname":"::keys::KEYPAIR_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The length of an Ristretto Schnorr `Keypair`, in bytes.\n","sig":null,"attributes":[{"value":"/ The length of an Ristretto Schnorr `Keypair`, in bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26659,"byte_end":26718,"line_start":45,"line_end":45,"column_start":1,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":80},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27784,"byte_end":27791,"line_start":68,"line_end":68,"column_start":5,"column_end":12},"name":"Uniform","qualname":"::keys::ExpansionMode::Uniform","value":"ExpansionMode::Uniform","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Expand the `MiniSecretKey` into a uniformly distributed\n `SecretKey`. ","sig":null,"attributes":[{"value":"/ Expand the `MiniSecretKey` into a uniformly distributed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27296,"byte_end":27355,"line_start":58,"line_end":58,"column_start":5,"column_end":64}},{"value":"/ `SecretKey`. ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27360,"byte_end":27377,"line_start":59,"line_end":59,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27382,"byte_end":27385,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ We preoduce the `SecretKey` using merlin and far more uniform","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27390,"byte_end":27455,"line_start":61,"line_end":61,"column_start":5,"column_end":70}},{"value":"/ sampling, which might benefits some future protocols, and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27460,"byte_end":27521,"line_start":62,"line_end":62,"column_start":5,"column_end":66}},{"value":"/ might reduce binary size if used throughout.  ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27526,"byte_end":27576,"line_start":63,"line_end":63,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27581,"byte_end":27584,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ We slightly prefer this method, but some existing code uses","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27589,"byte_end":27652,"line_start":65,"line_end":65,"column_start":5,"column_end":68}},{"value":"/ `Ed25519` mode, so users cannot necessarily use this mode","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27657,"byte_end":27718,"line_start":66,"line_end":66,"column_start":5,"column_end":66}},{"value":"/ if they require compatability with existing systems.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27723,"byte_end":27779,"line_start":67,"line_end":67,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":82},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28737,"byte_end":28744,"line_start":87,"line_end":87,"column_start":5,"column_end":12},"name":"Ed25519","qualname":"::keys::ExpansionMode::Ed25519","value":"ExpansionMode::Ed25519","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Expand this `MiniSecretKey` into a `SecretKey` using\n ed25519-style bit clamping.","sig":null,"attributes":[{"value":"/ Expand this `MiniSecretKey` into a `SecretKey` using","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27798,"byte_end":27854,"line_start":70,"line_end":70,"column_start":5,"column_end":61}},{"value":"/ ed25519-style bit clamping.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27859,"byte_end":27890,"line_start":71,"line_end":71,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27895,"byte_end":27898,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Ristretto points are represented by Ed25519 points internally","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27903,"byte_end":27968,"line_start":73,"line_end":73,"column_start":5,"column_end":70}},{"value":"/ so concievably some future standard might expose a mapping","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27973,"byte_end":28035,"line_start":74,"line_end":74,"column_start":5,"column_end":67}},{"value":"/ from Ristretto to Ed25519, which makes this mode useful.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28040,"byte_end":28100,"line_start":75,"line_end":75,"column_start":5,"column_end":65}},{"value":"/ At present, there is no such exposed mapping however because","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28105,"byte_end":28169,"line_start":76,"line_end":76,"column_start":5,"column_end":69}},{"value":"/ two such mappings actually exist, depending upon the branch of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28174,"byte_end":28240,"line_start":77,"line_end":77,"column_start":5,"column_end":71}},{"value":"/ the inverse square root chosen by a Ristretto implementation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28245,"byte_end":28310,"line_start":78,"line_end":78,"column_start":5,"column_end":70}},{"value":"/ There is however a concern that such a mapping would remain","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28315,"byte_end":28378,"line_start":79,"line_end":79,"column_start":5,"column_end":68}},{"value":"/ a second class citizen, meaning implementations differ and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28383,"byte_end":28445,"line_start":80,"line_end":80,"column_start":5,"column_end":67}},{"value":"/ create incompatability.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28450,"byte_end":28477,"line_start":81,"line_end":81,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28482,"byte_end":28485,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ We weakly recommend against emoloying this method.  We include","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28490,"byte_end":28556,"line_start":83,"line_end":83,"column_start":5,"column_end":71}},{"value":"/ it primarily because early Ristretto documentation touted the ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28561,"byte_end":28627,"line_start":84,"line_end":84,"column_start":5,"column_end":71}},{"value":"/ relationship with Ed25519, which led to some deployments adopting","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28632,"byte_end":28701,"line_start":85,"line_end":85,"column_start":5,"column_end":74}},{"value":"/ this expansion method.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28706,"byte_end":28732,"line_start":86,"line_end":86,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":79},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27276,"byte_end":27289,"line_start":57,"line_end":57,"column_start":10,"column_end":23},"name":"ExpansionMode","qualname":"::keys::ExpansionMode","value":"pub enum ExpansionMode {\n\n    /// Expand the `MiniSecretKey` into a uniformly distributed\n    /// `SecretKey`. \n    ///\n    /// We preoduce the `SecretKey` using merlin and far more uniform\n    /// sampling, which might benefits some future protocols, and\n    /// might reduce binary size if used throughout.  \n    ///\n    /// We slightly prefer this method, but some existing code uses\n    /// `Ed25519` mode, so users cannot necessarily use this mode\n    /// if they require compatability with existing systems.\n    Uniform,\n\n    /// Expand this `MiniSecretKey` into a `SecretKey` using\n    /// ed25519-style bit clamping.\n    ///\n    /// Ristretto points are represented by Ed25519 points internally\n    /// so concievably some future standard might expose a mapping\n    /// from Ristretto to Ed25519, which makes this mode useful.\n    /// At present, there is no such exposed mapping however because\n    /// two such mappings actually exist, depending upon the branch of\n    /// the inverse square root chosen by a Ristretto implementation.\n    /// There is however a concern that such a mapping would remain\n    /// a second class citizen, meaning implementations differ and\n    /// create incompatability.\n    ///\n    /// We weakly recommend against emoloying this method.  We include\n    /// it primarily because early Ristretto documentation touted the \n    /// relationship with Ed25519, which led to some deployments adopting\n    /// this expansion method.\n    Ed25519,\n}","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":82}],"decl_id":null,"docs":" Methods for expanding a `MiniSecretKey` into a `SecretKey`.","sig":null,"attributes":[{"value":"/ Methods for expanding a `MiniSecretKey` into a `SecretKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26794,"byte_end":26857,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26858,"byte_end":26861,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Our `SecretKey`s consist of a scalar and nonce seed, both 32 bytes,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26862,"byte_end":26933,"line_start":51,"line_end":51,"column_start":1,"column_end":72}},{"value":"/ what EdDSA/Ed25519 calls an extended secret key.  We normally create ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":26934,"byte_end":27007,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ `SecretKey`s by expanding a `MiniSecretKey`, what Esd25519 calls","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27008,"byte_end":27076,"line_start":53,"line_end":53,"column_start":1,"column_end":69}},{"value":"/ a `SecretKey`.  We provide two such methods, our suggested approach","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27077,"byte_end":27148,"line_start":54,"line_end":54,"column_start":1,"column_end":72}},{"value":"/ produces uniformly distribted secret key scalars, but another","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27149,"byte_end":27214,"line_start":55,"line_end":55,"column_start":1,"column_end":66}},{"value":"/ approach retains the bit clamping form Ed25519.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":27215,"byte_end":27266,"line_start":56,"line_end":56,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":880},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29135,"byte_end":29148,"line_start":99,"line_end":99,"column_start":12,"column_end":25},"name":"MiniSecretKey","qualname":"::keys::MiniSecretKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" An EdDSA-like \"secret\" key seed.","sig":null,"attributes":[{"value":"/ An EdDSA-like \"secret\" key seed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28749,"byte_end":28785,"line_start":90,"line_end":90,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28786,"byte_end":28789,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ These are seeds from which we produce a real `SecretKey`, which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28790,"byte_end":28857,"line_start":92,"line_end":92,"column_start":1,"column_end":68}},{"value":"/ EdDSA itself calls an extended secret key by hashing.  We require","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28858,"byte_end":28927,"line_start":93,"line_end":93,"column_start":1,"column_end":70}},{"value":"/ homomorphic properties unavailable from these seeds, so we renamed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28928,"byte_end":28998,"line_start":94,"line_end":94,"column_start":1,"column_end":71}},{"value":"/ these and reserve `SecretKey` for what EdDSA calls an extended","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":28999,"byte_end":29065,"line_start":95,"line_end":95,"column_start":1,"column_end":67}},{"value":"/ secret key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29066,"byte_end":29081,"line_start":96,"line_end":96,"column_start":1,"column_end":16}},{"value":"zeroize(drop)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29107,"byte_end":29123,"line_start":98,"line_end":98,"column_start":1,"column_end":17}}]},{"kind":"Const","id":{"krate":0,"index":93},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29827,"byte_end":29839,"line_start":123,"line_end":123,"column_start":15,"column_end":27},"name":"UNIFORM_MODE","qualname":"::keys::MiniSecretKey::UNIFORM_MODE","value":"ExpansionMode","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Avoids importing `ExpansionMode`\n","sig":null,"attributes":[{"value":"/ Avoids importing `ExpansionMode`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29776,"byte_end":29812,"line_start":122,"line_end":122,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":94},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29938,"byte_end":29950,"line_start":126,"line_end":126,"column_start":15,"column_end":27},"name":"ED25519_MODE","qualname":"::keys::MiniSecretKey::ED25519_MODE","value":"ExpansionMode","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Avoids importing `ExpansionMode`\n","sig":null,"attributes":[{"value":"/ Avoids importing `ExpansionMode`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29887,"byte_end":29923,"line_start":125,"line_end":125,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33567,"byte_end":33573,"line_start":224,"line_end":224,"column_start":12,"column_end":18},"name":"expand","qualname":"<MiniSecretKey>::expand","value":"pub fn expand(&Self, ExpansionMode) -> SecretKey","parent":null,"children":[],"decl_id":null,"docs":" Derive the `SecretKey` corresponding to this `MiniSecretKey`.","sig":null,"attributes":[{"value":"/ Derive the `SecretKey` corresponding to this `MiniSecretKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":32830,"byte_end":32895,"line_start":207,"line_end":207,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":32900,"byte_end":32903,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ We caution that `mode` must always be chosen consistently.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":32908,"byte_end":32970,"line_start":209,"line_end":209,"column_start":5,"column_end":67}},{"value":"/ We slightly prefer `ExpansionMode::Uniform` here, but both","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":32975,"byte_end":33037,"line_start":210,"line_end":210,"column_start":5,"column_end":67}},{"value":"/ remain secure under almost all situations.  There exists","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33042,"byte_end":33102,"line_start":211,"line_end":211,"column_start":5,"column_end":65}},{"value":"/ deployed code using `ExpansionMode::Ed25519`, so you might","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33107,"byte_end":33169,"line_start":212,"line_end":212,"column_start":5,"column_end":67}},{"value":"/ require that for compatability. ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33174,"byte_end":33210,"line_start":213,"line_end":213,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33215,"byte_end":33218,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33223,"byte_end":33230,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33235,"byte_end":33252,"line_start":216,"line_end":216,"column_start":5,"column_end":22}},{"value":"/ use rand::{Rng, rngs::OsRng};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33257,"byte_end":33290,"line_start":217,"line_end":217,"column_start":5,"column_end":38}},{"value":"/ use schnorrkel::{MiniSecretKey, SecretKey, ExpansionMode};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33295,"byte_end":33357,"line_start":218,"line_end":218,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33362,"byte_end":33365,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let mini_secret_key: MiniSecretKey = MiniSecretKey::generate_with(OsRng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33370,"byte_end":33447,"line_start":220,"line_end":220,"column_start":5,"column_end":82}},{"value":"/ let secret_key: SecretKey = mini_secret_key.expand(ExpansionMode::Uniform);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33452,"byte_end":33531,"line_start":221,"line_end":221,"column_start":5,"column_end":84}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33536,"byte_end":33543,"line_start":222,"line_end":222,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33548,"byte_end":33555,"line_start":223,"line_end":223,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33856,"byte_end":33873,"line_start":232,"line_end":232,"column_start":12,"column_end":29},"name":"expand_to_keypair","qualname":"<MiniSecretKey>::expand_to_keypair","value":"pub fn expand_to_keypair(&Self, ExpansionMode) -> Keypair","parent":null,"children":[],"decl_id":null,"docs":" Derive the `Keypair` corresponding to this `MiniSecretKey`.\n","sig":null,"attributes":[{"value":"/ Derive the `Keypair` corresponding to this `MiniSecretKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33781,"byte_end":33844,"line_start":231,"line_end":231,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34036,"byte_end":34052,"line_start":237,"line_end":237,"column_start":12,"column_end":28},"name":"expand_to_public","qualname":"<MiniSecretKey>::expand_to_public","value":"pub fn expand_to_public(&Self, ExpansionMode) -> PublicKey","parent":null,"children":[],"decl_id":null,"docs":" Derive the `PublicKey` corresponding to this `MiniSecretKey`.\n","sig":null,"attributes":[{"value":"/ Derive the `PublicKey` corresponding to this `MiniSecretKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":33959,"byte_end":34024,"line_start":236,"line_end":236,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34215,"byte_end":34223,"line_start":243,"line_end":243,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<MiniSecretKey>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert this secret key to a byte array.\n","sig":null,"attributes":[{"value":"/ Convert this secret key to a byte array.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34145,"byte_end":34189,"line_start":241,"line_end":241,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34194,"byte_end":34203,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34358,"byte_end":34366,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<MiniSecretKey>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" View this secret key as a byte array.\n","sig":null,"attributes":[{"value":"/ View this secret key as a byte array.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34291,"byte_end":34332,"line_start":247,"line_end":247,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34337,"byte_end":34346,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35213,"byte_end":35223,"line_start":274,"line_end":274,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<MiniSecretKey>::from_bytes","value":"pub fn from_bytes(&[u8]) -> SignatureResult<MiniSecretKey>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `MiniSecretKey` from a slice of bytes.","sig":null,"attributes":[{"value":"/ Construct a `MiniSecretKey` from a slice of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34436,"byte_end":34490,"line_start":253,"line_end":253,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34495,"byte_end":34498,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34503,"byte_end":34516,"line_start":255,"line_end":255,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34521,"byte_end":34524,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34529,"byte_end":34536,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{MiniSecretKey, MINI_SECRET_KEY_LENGTH};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34541,"byte_end":34601,"line_start":258,"line_end":258,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34606,"byte_end":34609,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let secret_key_bytes: [u8; MINI_SECRET_KEY_LENGTH] = [","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34614,"byte_end":34672,"line_start":260,"line_end":260,"column_start":5,"column_end":63}},{"value":"/    157, 097, 177, 157, 239, 253, 090, 096,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34677,"byte_end":34723,"line_start":261,"line_end":261,"column_start":5,"column_end":51}},{"value":"/    186, 132, 074, 244, 146, 236, 044, 196,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34728,"byte_end":34774,"line_start":262,"line_end":262,"column_start":5,"column_end":51}},{"value":"/    068, 073, 197, 105, 123, 050, 105, 025,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34779,"byte_end":34825,"line_start":263,"line_end":263,"column_start":5,"column_end":51}},{"value":"/    112, 059, 172, 003, 028, 174, 127, 096, ];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34830,"byte_end":34879,"line_start":264,"line_end":264,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34884,"byte_end":34887,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ let secret_key: MiniSecretKey = MiniSecretKey::from_bytes(&secret_key_bytes).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34892,"byte_end":34982,"line_start":266,"line_end":266,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34987,"byte_end":34994,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":34999,"byte_end":35002,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35007,"byte_end":35020,"line_start":269,"line_end":269,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35025,"byte_end":35028,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ A `Result` whose okay value is an EdDSA `MiniSecretKey` or whose error value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35033,"byte_end":35113,"line_start":271,"line_end":271,"column_start":5,"column_end":85}},{"value":"/ is an `SignatureError` wrapping the internal error that occurred.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35118,"byte_end":35187,"line_start":272,"line_end":272,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35192,"byte_end":35201,"line_start":273,"line_end":273,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36095,"byte_end":36108,"line_start":301,"line_end":301,"column_start":12,"column_end":25},"name":"generate_with","qualname":"<MiniSecretKey>::generate_with","value":"pub fn generate_with<R>(R) -> MiniSecretKey where R: CryptoRng + RngCore","parent":null,"children":[],"decl_id":null,"docs":" Generate a `MiniSecretKey` from a `csprng`.","sig":null,"attributes":[{"value":"/ Generate a `MiniSecretKey` from a `csprng`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35683,"byte_end":35730,"line_start":287,"line_end":287,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35735,"byte_end":35738,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35743,"byte_end":35756,"line_start":289,"line_end":289,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35761,"byte_end":35764,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35769,"byte_end":35776,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"/ use rand::{Rng, rngs::OsRng};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35781,"byte_end":35814,"line_start":292,"line_end":292,"column_start":5,"column_end":38}},{"value":"/ use schnorrkel::{PublicKey, MiniSecretKey, Signature};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35819,"byte_end":35877,"line_start":293,"line_end":293,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35882,"byte_end":35885,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let secret_key: MiniSecretKey = MiniSecretKey::generate_with(OsRng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35890,"byte_end":35962,"line_start":295,"line_end":295,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35967,"byte_end":35974,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35979,"byte_end":35982,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Input","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":35987,"byte_end":35998,"line_start":298,"line_end":298,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36003,"byte_end":36006,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ A CSPRNG with a `fill_bytes()` method, e.g. `rand_chacha::ChaChaRng`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36011,"byte_end":36083,"line_start":300,"line_end":300,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37132,"byte_end":37140,"line_start":332,"line_end":332,"column_start":12,"column_end":20},"name":"generate","qualname":"<MiniSecretKey>::generate","value":"pub fn generate() -> MiniSecretKey","parent":null,"children":[],"decl_id":null,"docs":" Generate a `MiniSecretKey` from rand's `thread_rng`.","sig":null,"attributes":[{"value":"/ Generate a `MiniSecretKey` from rand's `thread_rng`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36306,"byte_end":36362,"line_start":309,"line_end":309,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36367,"byte_end":36370,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36375,"byte_end":36388,"line_start":311,"line_end":311,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36393,"byte_end":36396,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36401,"byte_end":36408,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{PublicKey, MiniSecretKey, Signature};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36413,"byte_end":36471,"line_start":314,"line_end":314,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36476,"byte_end":36479,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ let secret_key: MiniSecretKey = MiniSecretKey::generate();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36484,"byte_end":36546,"line_start":316,"line_end":316,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36551,"byte_end":36558,"line_start":317,"line_end":317,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36563,"byte_end":36566,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ Afterwards, you can generate the corresponding public key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36571,"byte_end":36633,"line_start":319,"line_end":319,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36638,"byte_end":36641,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36646,"byte_end":36653,"line_start":321,"line_end":321,"column_start":5,"column_end":12}},{"value":"/ # use rand::{Rng, SeedableRng};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36658,"byte_end":36693,"line_start":322,"line_end":322,"column_start":5,"column_end":40}},{"value":"/ # use rand_chacha::ChaChaRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36698,"byte_end":36731,"line_start":323,"line_end":323,"column_start":5,"column_end":38}},{"value":"/ # use schnorrkel::{PublicKey, MiniSecretKey, ExpansionMode, Signature};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36736,"byte_end":36811,"line_start":324,"line_end":324,"column_start":5,"column_end":80}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36816,"byte_end":36821,"line_start":325,"line_end":325,"column_start":5,"column_end":10}},{"value":"/ # let mut csprng: ChaChaRng = ChaChaRng::from_seed([0u8; 32]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36826,"byte_end":36892,"line_start":326,"line_end":326,"column_start":5,"column_end":71}},{"value":"/ # let secret_key: MiniSecretKey = MiniSecretKey::generate_with(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36897,"byte_end":36977,"line_start":327,"line_end":327,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36982,"byte_end":36985,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ let public_key: PublicKey = secret_key.expand_to_public(ExpansionMode::Ed25519);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":36990,"byte_end":37074,"line_start":329,"line_end":329,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37079,"byte_end":37086,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"getrandom\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37091,"byte_end":37120,"line_start":331,"line_end":331,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":908},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":38067,"byte_end":38076,"line_start":355,"line_end":355,"column_start":12,"column_end":21},"name":"SecretKey","qualname":"::keys::SecretKey","value":"SecretKey {  }","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":910}],"decl_id":null,"docs":" A seceret key for use with Ristretto Schnorr signatures.","sig":null,"attributes":[{"value":"/ A seceret key for use with Ristretto Schnorr signatures.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37256,"byte_end":37316,"line_start":340,"line_end":340,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37317,"byte_end":37320,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ Internally, these consist of a scalar mod l along with a seed for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37321,"byte_end":37390,"line_start":342,"line_end":342,"column_start":1,"column_end":70}},{"value":"/ nonce generation.  In this way, we ensure all scalar arithmatic","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37391,"byte_end":37458,"line_start":343,"line_end":343,"column_start":1,"column_end":68}},{"value":"/ works smoothly in operations like threshold or multi-signatures,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37459,"byte_end":37527,"line_start":344,"line_end":344,"column_start":1,"column_end":69}},{"value":"/ or hierarchical deterministic key derivations.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37528,"byte_end":37578,"line_start":345,"line_end":345,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37579,"byte_end":37582,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ We keep our secret key serializaion \"almost\" compatable with EdDSA","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37583,"byte_end":37653,"line_start":347,"line_end":347,"column_start":1,"column_end":71}},{"value":"/ \"expanded\" secret key serializaion by multiplying the scalar by the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37654,"byte_end":37725,"line_start":348,"line_end":348,"column_start":1,"column_end":72}},{"value":"/ cofactor 8, as integers, and dividing on deserializaion.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37726,"byte_end":37786,"line_start":349,"line_end":349,"column_start":1,"column_end":61}},{"value":"/ We do not however attempt to keep the scalar's high bit set, especially","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37787,"byte_end":37862,"line_start":350,"line_end":350,"column_start":1,"column_end":76}},{"value":"/ not during hierarchical deterministic key derivations, so some Ed25519","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37863,"byte_end":37937,"line_start":351,"line_end":351,"column_start":1,"column_end":75}},{"value":"/ libraries might compute the public key incorrectly from our secret key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":37938,"byte_end":38013,"line_start":352,"line_end":352,"column_start":1,"column_end":76}},{"value":"zeroize(drop)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":38039,"byte_end":38055,"line_start":354,"line_end":354,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40463,"byte_end":40471,"line_start":427,"line_end":427,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<SecretKey>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert this `SecretKey` into an array of 64 bytes with.","sig":null,"attributes":[{"value":"/ Convert this `SecretKey` into an array of 64 bytes with.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39590,"byte_end":39650,"line_start":407,"line_end":407,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39655,"byte_end":39658,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ Returns an array of 64 bytes, with the first 32 bytes being","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39663,"byte_end":39726,"line_start":409,"line_end":409,"column_start":5,"column_end":68}},{"value":"/ the secret scalar represented cannonically, and the last","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39731,"byte_end":39791,"line_start":410,"line_end":410,"column_start":5,"column_end":65}},{"value":"/ 32 bytes being the seed for nonces.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39796,"byte_end":39835,"line_start":411,"line_end":411,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39840,"byte_end":39843,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39848,"byte_end":39862,"line_start":413,"line_end":413,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39867,"byte_end":39870,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39875,"byte_end":39882,"line_start":415,"line_end":415,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{MiniSecretKey, SecretKey};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39887,"byte_end":39934,"line_start":416,"line_end":416,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39939,"byte_end":39942,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let mini_secret_key: MiniSecretKey = MiniSecretKey::generate();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39947,"byte_end":40014,"line_start":418,"line_end":418,"column_start":5,"column_end":72}},{"value":"/ let secret_key: SecretKey = mini_secret_key.expand(MiniSecretKey::UNIFORM_MODE);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40019,"byte_end":40103,"line_start":419,"line_end":419,"column_start":5,"column_end":89}},{"value":"/ # // was SecretKey::from(&mini_secret_key);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40108,"byte_end":40155,"line_start":420,"line_end":420,"column_start":5,"column_end":52}},{"value":"/ let secret_key_bytes: [u8; 64] = secret_key.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40160,"byte_end":40219,"line_start":421,"line_end":421,"column_start":5,"column_end":64}},{"value":"/ let bytes: [u8; 64] = secret_key.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40224,"byte_end":40272,"line_start":422,"line_end":422,"column_start":5,"column_end":53}},{"value":"/ let secret_key_again: SecretKey = SecretKey::from_bytes(&bytes[..]).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40277,"byte_end":40358,"line_start":423,"line_end":423,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(&bytes[..], & secret_key_again.to_bytes()[..]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40363,"byte_end":40425,"line_start":424,"line_end":424,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40430,"byte_end":40437,"line_start":425,"line_end":425,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40442,"byte_end":40451,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":41325,"byte_end":41335,"line_start":449,"line_end":449,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<SecretKey>::from_bytes","value":"pub fn from_bytes(&[u8]) -> SignatureResult<SecretKey>","parent":null,"children":[],"decl_id":null,"docs":" Construct an `SecretKey` from a slice of bytes.","sig":null,"attributes":[{"value":"/ Construct an `SecretKey` from a slice of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40695,"byte_end":40746,"line_start":434,"line_end":434,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40751,"byte_end":40754,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40759,"byte_end":40773,"line_start":436,"line_end":436,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40778,"byte_end":40781,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40786,"byte_end":40793,"line_start":438,"line_end":438,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{MiniSecretKey, SecretKey, ExpansionMode, SignatureError};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40798,"byte_end":40876,"line_start":439,"line_end":439,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40881,"byte_end":40884,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ let mini_secret_key: MiniSecretKey = MiniSecretKey::generate();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40889,"byte_end":40956,"line_start":441,"line_end":441,"column_start":5,"column_end":72}},{"value":"/ let secret_key: SecretKey = mini_secret_key.expand(MiniSecretKey::ED25519_MODE); ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":40961,"byte_end":41046,"line_start":442,"line_end":442,"column_start":5,"column_end":90}},{"value":"/ # // was SecretKey::from(&mini_secret_key);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":41051,"byte_end":41098,"line_start":443,"line_end":443,"column_start":5,"column_end":52}},{"value":"/ let bytes: [u8; 64] = secret_key.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":41103,"byte_end":41151,"line_start":444,"line_end":444,"column_start":5,"column_end":53}},{"value":"/ let secret_key_again: SecretKey = SecretKey::from_bytes(&bytes[..]).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":41156,"byte_end":41237,"line_start":445,"line_end":445,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(secret_key_again, secret_key);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":41242,"byte_end":41287,"line_start":446,"line_end":446,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":41292,"byte_end":41299,"line_start":447,"line_end":447,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":41304,"byte_end":41313,"line_start":448,"line_end":448,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":42296,"byte_end":42312,"line_start":475,"line_end":475,"column_start":12,"column_end":28},"name":"to_ed25519_bytes","qualname":"<SecretKey>::to_ed25519_bytes","value":"pub fn to_ed25519_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert this `SecretKey` into an array of 64 bytes, corresponding to\n an Ed25519 expanded secret key.","sig":null,"attributes":[{"value":"/ Convert this `SecretKey` into an array of 64 bytes, corresponding to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":41976,"byte_end":42048,"line_start":468,"line_end":468,"column_start":5,"column_end":77}},{"value":"/ an Ed25519 expanded secret key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":42053,"byte_end":42088,"line_start":469,"line_end":469,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":42093,"byte_end":42096,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ Returns an array of 64 bytes, with the first 32 bytes being","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":42101,"byte_end":42164,"line_start":471,"line_end":471,"column_start":5,"column_end":68}},{"value":"/ the secret scalar shifted ed25519 style, and the last 32 bytes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":42169,"byte_end":42235,"line_start":472,"line_end":472,"column_start":5,"column_end":71}},{"value":"/ being the seed for nonces.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":42240,"byte_end":42270,"line_start":473,"line_end":473,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":42275,"byte_end":42284,"line_start":474,"line_end":474,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43788,"byte_end":43806,"line_start":508,"line_end":508,"column_start":12,"column_end":30},"name":"from_ed25519_bytes","qualname":"<SecretKey>::from_ed25519_bytes","value":"pub fn from_ed25519_bytes(&[u8]) -> SignatureResult<SecretKey>","parent":null,"children":[],"decl_id":null,"docs":" Construct an `SecretKey` from a slice of bytes, corresponding to\n an Ed25519 expanded secret key.","sig":null,"attributes":[{"value":"/ Construct an `SecretKey` from a slice of bytes, corresponding to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43107,"byte_end":43175,"line_start":493,"line_end":493,"column_start":5,"column_end":73}},{"value":"/ an Ed25519 expanded secret key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43180,"byte_end":43215,"line_start":494,"line_end":494,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43220,"byte_end":43223,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43228,"byte_end":43241,"line_start":496,"line_end":496,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43246,"byte_end":43249,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43254,"byte_end":43261,"line_start":498,"line_end":498,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{SecretKey, SECRET_KEY_LENGTH};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43266,"byte_end":43317,"line_start":499,"line_end":499,"column_start":5,"column_end":56}},{"value":"/ use hex_literal::hex;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43322,"byte_end":43347,"line_start":500,"line_end":500,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43352,"byte_end":43355,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ let secret = hex!(\"28b0ae221c6bb06856b287f60d7ea0d98552ea5a16db16956849aa371db3eb51fd190cce74df356432b410bd64682309d6dedb27c76845daf388557cbac3ca34\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43360,"byte_end":43514,"line_start":502,"line_end":502,"column_start":5,"column_end":159}},{"value":"/ let public = hex!(\"46ebddef8cd9bb167dc30878d7113b7e168e6f0646beffd77d69d39bad76b47a\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43519,"byte_end":43609,"line_start":503,"line_end":503,"column_start":5,"column_end":95}},{"value":"/ let secret_key = SecretKey::from_ed25519_bytes(&secret[..]).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43614,"byte_end":43687,"line_start":504,"line_end":504,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(secret_key.to_public().to_bytes(), public);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43692,"byte_end":43750,"line_start":505,"line_end":505,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43755,"byte_end":43762,"line_start":506,"line_end":506,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":43767,"byte_end":43776,"line_start":507,"line_end":507,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":44871,"byte_end":44884,"line_start":536,"line_end":536,"column_start":12,"column_end":25},"name":"generate_with","qualname":"<SecretKey>::generate_with","value":"pub fn generate_with<R>(R) -> SecretKey where R: CryptoRng + RngCore","parent":null,"children":[],"decl_id":null,"docs":" Generate an \"unbiased\" `SecretKey` directly from a user\n suplied `csprng` uniformly, bypassing the `MiniSecretKey`\n layer.\n","sig":null,"attributes":[{"value":"/ Generate an \"unbiased\" `SecretKey` directly from a user","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":44719,"byte_end":44778,"line_start":533,"line_end":533,"column_start":5,"column_end":64}},{"value":"/ suplied `csprng` uniformly, bypassing the `MiniSecretKey`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":44783,"byte_end":44844,"line_start":534,"line_end":534,"column_start":5,"column_end":66}},{"value":"/ layer.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":44849,"byte_end":44859,"line_start":535,"line_end":535,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":45344,"byte_end":45352,"line_start":549,"line_end":549,"column_start":12,"column_end":20},"name":"generate","qualname":"<SecretKey>::generate","value":"pub fn generate() -> SecretKey","parent":null,"children":[],"decl_id":null,"docs":" Generate an \"unbiased\" `SecretKey` directly,\n bypassing the `MiniSecretKey` layer.\n","sig":null,"attributes":[{"value":"/ Generate an \"unbiased\" `SecretKey` directly,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":45205,"byte_end":45253,"line_start":546,"line_end":546,"column_start":5,"column_end":53}},{"value":"/ bypassing the `MiniSecretKey` layer.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":45258,"byte_end":45298,"line_start":547,"line_end":547,"column_start":5,"column_end":45}},{"value":"cfg(feature = \"getrandom\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":45303,"byte_end":45332,"line_start":548,"line_end":548,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":45502,"byte_end":45511,"line_start":554,"line_end":554,"column_start":12,"column_end":21},"name":"to_public","qualname":"<SecretKey>::to_public","value":"pub fn to_public(&Self) -> PublicKey","parent":null,"children":[],"decl_id":null,"docs":" Derive the `PublicKey` corresponding to this `SecretKey`.\n","sig":null,"attributes":[{"value":"/ Derive the `PublicKey` corresponding to this `SecretKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":45429,"byte_end":45490,"line_start":553,"line_end":553,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":45741,"byte_end":45751,"line_start":560,"line_end":560,"column_start":12,"column_end":22},"name":"to_keypair","qualname":"<SecretKey>::to_keypair","value":"pub fn to_keypair(Self) -> Keypair","parent":null,"children":[],"decl_id":null,"docs":" Derive the `PublicKey` corresponding to this `SecretKey`.\n","sig":null,"attributes":[{"value":"/ Derive the `PublicKey` corresponding to this `SecretKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":45668,"byte_end":45729,"line_start":559,"line_end":559,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":936},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46342,"byte_end":46351,"line_start":578,"line_end":578,"column_start":12,"column_end":21},"name":"PublicKey","qualname":"::keys::PublicKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" A Ristretto Schnorr public key.","sig":null,"attributes":[{"value":"/ A Ristretto Schnorr public key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":45893,"byte_end":45928,"line_start":569,"line_end":569,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":45929,"byte_end":45932,"line_start":570,"line_end":570,"column_start":1,"column_end":4}},{"value":"/ Internally, these are represented as a `RistrettoPoint`, meaning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":45933,"byte_end":46001,"line_start":571,"line_end":571,"column_start":1,"column_end":69}},{"value":"/ an Edwards point with a static guarantee to be 2-torsion free.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46002,"byte_end":46068,"line_start":572,"line_end":572,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46069,"byte_end":46072,"line_start":573,"line_end":573,"column_start":1,"column_end":4}},{"value":"/ At present, we decompress `PublicKey`s into this representation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46073,"byte_end":46140,"line_start":574,"line_end":574,"column_start":1,"column_end":68}},{"value":"/ during deserialization, which improves error handling, but costs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46141,"byte_end":46209,"line_start":575,"line_end":575,"column_start":1,"column_end":69}},{"value":"/ a compression during signing and verifiaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46210,"byte_end":46260,"line_start":576,"line_end":576,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47029,"byte_end":47042,"line_start":605,"line_end":605,"column_start":12,"column_end":25},"name":"as_compressed","qualname":"<PublicKey>::as_compressed","value":"pub fn as_compressed(&Self) -> &CompressedRistretto","parent":null,"children":[],"decl_id":null,"docs":" Access the compressed Ristretto form\n","sig":null,"attributes":[{"value":"/ Access the compressed Ristretto form","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46977,"byte_end":47017,"line_start":604,"line_end":604,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47160,"byte_end":47175,"line_start":608,"line_end":608,"column_start":12,"column_end":27},"name":"into_compressed","qualname":"<PublicKey>::into_compressed","value":"pub fn into_compressed(Self) -> CompressedRistretto","parent":null,"children":[],"decl_id":null,"docs":" Extract the compressed Ristretto form\n","sig":null,"attributes":[{"value":"/ Extract the compressed Ristretto form","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47107,"byte_end":47148,"line_start":607,"line_end":607,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47276,"byte_end":47284,"line_start":611,"line_end":611,"column_start":12,"column_end":20},"name":"as_point","qualname":"<PublicKey>::as_point","value":"pub fn as_point(&Self) -> &RistrettoPoint","parent":null,"children":[],"decl_id":null,"docs":" Access the point form\n","sig":null,"attributes":[{"value":"/ Access the point form","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47239,"byte_end":47264,"line_start":610,"line_end":610,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47377,"byte_end":47387,"line_start":614,"line_end":614,"column_start":12,"column_end":22},"name":"into_point","qualname":"<PublicKey>::into_point","value":"pub fn into_point(Self) -> RistrettoPoint","parent":null,"children":[],"decl_id":null,"docs":" Extract the point form\n","sig":null,"attributes":[{"value":"/ Extract the point form","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47339,"byte_end":47365,"line_start":613,"line_end":613,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47542,"byte_end":47557,"line_start":618,"line_end":618,"column_start":12,"column_end":27},"name":"from_compressed","qualname":"<PublicKey>::from_compressed","value":"pub fn from_compressed(CompressedRistretto) -> SignatureResult<PublicKey>","parent":null,"children":[],"decl_id":null,"docs":" Decompress into the `PublicKey` format that also retains the\n compressed form.\n","sig":null,"attributes":[{"value":"/ Decompress into the `PublicKey` format that also retains the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47441,"byte_end":47505,"line_start":616,"line_end":616,"column_start":5,"column_end":69}},{"value":"/ compressed form.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47510,"byte_end":47530,"line_start":617,"line_end":617,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47803,"byte_end":47813,"line_start":624,"line_end":624,"column_start":12,"column_end":22},"name":"from_point","qualname":"<PublicKey>::from_point","value":"pub fn from_point(RistrettoPoint) -> PublicKey","parent":null,"children":[],"decl_id":null,"docs":" Compress into the `PublicKey` format that also retains the\n uncompressed form.\n","sig":null,"attributes":[{"value":"/ Compress into the `PublicKey` format that also retains the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47702,"byte_end":47764,"line_start":622,"line_end":622,"column_start":5,"column_end":67}},{"value":"/ uncompressed form.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47769,"byte_end":47791,"line_start":623,"line_end":623,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48415,"byte_end":48423,"line_start":640,"line_end":640,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<PublicKey>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert this public key to a byte array.\n # Example","sig":null,"attributes":[{"value":"/ Convert this public key to a byte array.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47915,"byte_end":47959,"line_start":628,"line_end":628,"column_start":5,"column_end":49}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47964,"byte_end":47977,"line_start":629,"line_end":629,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47982,"byte_end":47985,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":47990,"byte_end":47997,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{SecretKey, PublicKey, PUBLIC_KEY_LENGTH, SignatureError};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48002,"byte_end":48080,"line_start":632,"line_end":632,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48085,"byte_end":48088,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ let public_key: PublicKey = SecretKey::generate().to_public();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48093,"byte_end":48159,"line_start":634,"line_end":634,"column_start":5,"column_end":71}},{"value":"/ let public_key_bytes = public_key.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48164,"byte_end":48213,"line_start":635,"line_end":635,"column_start":5,"column_end":54}},{"value":"/ let public_key_again: PublicKey = PublicKey::from_bytes(&public_key_bytes[..]).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48218,"byte_end":48310,"line_start":636,"line_end":636,"column_start":5,"column_end":97}},{"value":"/ assert_eq!(public_key_bytes, public_key_again.to_bytes());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48315,"byte_end":48377,"line_start":637,"line_end":637,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48382,"byte_end":48389,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48394,"byte_end":48403,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49319,"byte_end":49329,"line_start":666,"line_end":666,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<PublicKey>::from_bytes","value":"pub fn from_bytes(&[u8]) -> SignatureResult<PublicKey>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `PublicKey` from a slice of bytes.","sig":null,"attributes":[{"value":"/ Construct a `PublicKey` from a slice of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48511,"byte_end":48561,"line_start":644,"line_end":644,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48566,"byte_end":48569,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48574,"byte_end":48587,"line_start":646,"line_end":646,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48592,"byte_end":48595,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48600,"byte_end":48607,"line_start":648,"line_end":648,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{PublicKey, PUBLIC_KEY_LENGTH, SignatureError};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48612,"byte_end":48679,"line_start":649,"line_end":649,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48684,"byte_end":48687,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ let public_key_bytes: [u8; PUBLIC_KEY_LENGTH] = [","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48692,"byte_end":48745,"line_start":651,"line_end":651,"column_start":5,"column_end":58}},{"value":"/     208, 120, 140, 129, 177, 179, 237, 159,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48750,"byte_end":48797,"line_start":652,"line_end":652,"column_start":5,"column_end":52}},{"value":"/     252, 160, 028, 013, 206, 005, 211, 241,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48802,"byte_end":48849,"line_start":653,"line_end":653,"column_start":5,"column_end":52}},{"value":"/     192, 218, 001, 097, 130, 241, 020, 169,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48854,"byte_end":48901,"line_start":654,"line_end":654,"column_start":5,"column_end":52}},{"value":"/     119, 046, 246, 029, 079, 080, 077, 084];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48906,"byte_end":48954,"line_start":655,"line_end":655,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48959,"byte_end":48962,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ let public_key = PublicKey::from_bytes(&public_key_bytes).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":48967,"byte_end":49038,"line_start":657,"line_end":657,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(public_key.to_bytes(), public_key_bytes);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49043,"byte_end":49099,"line_start":658,"line_end":658,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49104,"byte_end":49111,"line_start":659,"line_end":659,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49116,"byte_end":49119,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49124,"byte_end":49137,"line_start":661,"line_end":661,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49142,"byte_end":49145,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ A `Result` whose okay value is an EdDSA `PublicKey` or whose error value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49150,"byte_end":49226,"line_start":663,"line_end":663,"column_start":5,"column_end":81}},{"value":"/ is an `SignatureError` describing the error that occurred.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49231,"byte_end":49293,"line_start":664,"line_end":664,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49298,"byte_end":49307,"line_start":665,"line_end":665,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":977},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49749,"byte_end":49756,"line_start":684,"line_end":684,"column_start":12,"column_end":19},"name":"Keypair","qualname":"::keys::Keypair","value":"Keypair { secret, public }","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":979}],"decl_id":null,"docs":" A Ristretto Schnorr keypair.\n","sig":null,"attributes":[{"value":"/ A Ristretto Schnorr keypair.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49634,"byte_end":49666,"line_start":680,"line_end":680,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":978},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49808,"byte_end":49814,"line_start":686,"line_end":686,"column_start":9,"column_end":15},"name":"secret","qualname":"::keys::Keypair::secret","value":"keys::SecretKey","parent":{"krate":0,"index":977},"children":[],"decl_id":null,"docs":" The secret half of this keypair.\n","sig":null,"attributes":[{"value":"/ The secret half of this keypair.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49763,"byte_end":49799,"line_start":685,"line_end":685,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":979},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49876,"byte_end":49882,"line_start":688,"line_end":688,"column_start":9,"column_end":15},"name":"public","qualname":"::keys::Keypair::public","value":"keys::PublicKey","parent":{"krate":0,"index":977},"children":[],"decl_id":null,"docs":" The public half of this keypair.\n","sig":null,"attributes":[{"value":"/ The public half of this keypair.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49831,"byte_end":49867,"line_start":687,"line_end":687,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51292,"byte_end":51300,"line_start":738,"line_end":738,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<Keypair>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Serialize `Keypair` to bytes.","sig":null,"attributes":[{"value":"/ Serialize `Keypair` to bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50697,"byte_end":50730,"line_start":720,"line_end":720,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50735,"byte_end":50738,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50743,"byte_end":50756,"line_start":722,"line_end":722,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50761,"byte_end":50764,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ A byte array `[u8; KEYPAIR_LENGTH]` consisting of first a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50769,"byte_end":50830,"line_start":724,"line_end":724,"column_start":5,"column_end":66}},{"value":"/ `SecretKey` serialized cannonically, and next the Ristterro","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50835,"byte_end":50898,"line_start":725,"line_end":725,"column_start":5,"column_end":68}},{"value":"/ `PublicKey`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50903,"byte_end":50918,"line_start":726,"line_end":726,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50923,"byte_end":50926,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50931,"byte_end":50945,"line_start":728,"line_end":728,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50950,"byte_end":50953,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50958,"byte_end":50965,"line_start":730,"line_end":730,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{Keypair, KEYPAIR_LENGTH};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50970,"byte_end":51016,"line_start":731,"line_end":731,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51021,"byte_end":51024,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ let keypair: Keypair = Keypair::generate();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51029,"byte_end":51076,"line_start":733,"line_end":733,"column_start":5,"column_end":52}},{"value":"/ let bytes: [u8; KEYPAIR_LENGTH] = keypair.to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51081,"byte_end":51138,"line_start":734,"line_end":734,"column_start":5,"column_end":62}},{"value":"/ let keypair_too = Keypair::from_bytes(&bytes[..]).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51143,"byte_end":51206,"line_start":735,"line_end":735,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(&bytes[..], & keypair_too.to_bytes()[..]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51211,"byte_end":51268,"line_start":736,"line_end":736,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51273,"byte_end":51280,"line_start":737,"line_end":737,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":52570,"byte_end":52580,"line_start":770,"line_end":770,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Keypair>::from_bytes","value":"pub fn from_bytes(&[u8]) -> SignatureResult<Keypair>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `Keypair` from bytes.","sig":null,"attributes":[{"value":"/ Deserialize a `Keypair` from bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51585,"byte_end":51624,"line_start":746,"line_end":746,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51629,"byte_end":51632,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ # Inputs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51637,"byte_end":51649,"line_start":748,"line_end":748,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51654,"byte_end":51657,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ * `bytes`: an `&[u8]` consisting of byte representations of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51662,"byte_end":51725,"line_start":750,"line_end":750,"column_start":5,"column_end":68}},{"value":"/ first a `SecretKey` and then the corresponding ristretto","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51730,"byte_end":51790,"line_start":751,"line_end":751,"column_start":5,"column_end":65}},{"value":"/ `PublicKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51795,"byte_end":51811,"line_start":752,"line_end":752,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51816,"byte_end":51819,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51824,"byte_end":51838,"line_start":754,"line_end":754,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51843,"byte_end":51846,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51851,"byte_end":51858,"line_start":756,"line_end":756,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{Keypair, KEYPAIR_LENGTH};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51863,"byte_end":51909,"line_start":757,"line_end":757,"column_start":5,"column_end":51}},{"value":"/ use hex_literal::hex;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51914,"byte_end":51939,"line_start":758,"line_end":758,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51944,"byte_end":51947,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ // TODO: Fix test vector","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51952,"byte_end":51980,"line_start":760,"line_end":760,"column_start":5,"column_end":33}},{"value":"/ // let keypair_bytes = hex!(\"28b0ae221c6bb06856b287f60d7ea0d98552ea5a16db16956849aa371db3eb51fd190cce74df356432b410bd64682309d6dedb27c76845daf388557cbac3ca3446ebddef8cd9bb167dc30878d7113b7e168e6f0646beffd77d69d39bad76b47a\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":51985,"byte_end":52213,"line_start":761,"line_end":761,"column_start":5,"column_end":233}},{"value":"/ // let keypair: Keypair = Keypair::from_bytes(&keypair_bytes[..]).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":52218,"byte_end":52297,"line_start":762,"line_end":762,"column_start":5,"column_end":84}},{"value":"/ // assert_eq!(&keypair_bytes[..], & keypair.to_bytes()[..]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":52302,"byte_end":52366,"line_start":763,"line_end":763,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":52371,"byte_end":52378,"line_start":764,"line_end":764,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":52383,"byte_end":52386,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":52391,"byte_end":52404,"line_start":766,"line_end":766,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":52409,"byte_end":52412,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ A `Result` whose okay value is an EdDSA `Keypair` or whose error value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":52417,"byte_end":52491,"line_start":768,"line_end":768,"column_start":5,"column_end":79}},{"value":"/ is an `SignatureError` describing the error that occurred.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":52496,"byte_end":52558,"line_start":769,"line_end":769,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53376,"byte_end":53397,"line_start":793,"line_end":793,"column_start":12,"column_end":33},"name":"to_half_ed25519_bytes","qualname":"<Keypair>::to_half_ed25519_bytes","value":"pub fn to_half_ed25519_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Serialize `Keypair` to bytes with Ed25519 secret key format.","sig":null,"attributes":[{"value":"/ Serialize `Keypair` to bytes with Ed25519 secret key format.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53095,"byte_end":53159,"line_start":784,"line_end":784,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53164,"byte_end":53167,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53172,"byte_end":53185,"line_start":786,"line_end":786,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53190,"byte_end":53193,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ A byte array `[u8; KEYPAIR_LENGTH]` consisting of first a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53198,"byte_end":53259,"line_start":788,"line_end":788,"column_start":5,"column_end":66}},{"value":"/ `SecretKey` serialized like Ed25519, and next the Ristterro","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53264,"byte_end":53327,"line_start":789,"line_end":789,"column_start":5,"column_end":68}},{"value":"/ `PublicKey`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53332,"byte_end":53347,"line_start":790,"line_end":790,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53352,"byte_end":53355,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53360,"byte_end":53364,"line_start":792,"line_end":792,"column_start":5,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54676,"byte_end":54699,"line_start":823,"line_end":823,"column_start":12,"column_end":35},"name":"from_half_ed25519_bytes","qualname":"<Keypair>::from_half_ed25519_bytes","value":"pub fn from_half_ed25519_bytes(&[u8]) -> SignatureResult<Keypair>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `Keypair` from bytes with Ed25519 style `SecretKey` format.","sig":null,"attributes":[{"value":"/ Deserialize a `Keypair` from bytes with Ed25519 style `SecretKey` format.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53690,"byte_end":53767,"line_start":801,"line_end":801,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53772,"byte_end":53775,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ # Inputs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53780,"byte_end":53792,"line_start":803,"line_end":803,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53797,"byte_end":53800,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ * `bytes`: an `&[u8]` representing the scalar for the secret key, and a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53805,"byte_end":53880,"line_start":805,"line_end":805,"column_start":5,"column_end":80}},{"value":"/   compressed Ristretto point, both as bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53885,"byte_end":53933,"line_start":806,"line_end":806,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53938,"byte_end":53941,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53946,"byte_end":53960,"line_start":808,"line_end":808,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53965,"byte_end":53968,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53973,"byte_end":53980,"line_start":810,"line_end":810,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{Keypair, KEYPAIR_LENGTH};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":53985,"byte_end":54031,"line_start":811,"line_end":811,"column_start":5,"column_end":51}},{"value":"/ use hex_literal::hex;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54036,"byte_end":54061,"line_start":812,"line_end":812,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54066,"byte_end":54069,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ let keypair_bytes = hex!(\"28b0ae221c6bb06856b287f60d7ea0d98552ea5a16db16956849aa371db3eb51fd190cce74df356432b410bd64682309d6dedb27c76845daf388557cbac3ca3446ebddef8cd9bb167dc30878d7113b7e168e6f0646beffd77d69d39bad76b47a\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54074,"byte_end":54299,"line_start":814,"line_end":814,"column_start":5,"column_end":230}},{"value":"/ let keypair: Keypair = Keypair::from_half_ed25519_bytes(&keypair_bytes[..]).unwrap();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54304,"byte_end":54393,"line_start":815,"line_end":815,"column_start":5,"column_end":94}},{"value":"/ assert_eq!(&keypair_bytes[..], & keypair.to_half_ed25519_bytes()[..]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54398,"byte_end":54472,"line_start":816,"line_end":816,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54477,"byte_end":54484,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54489,"byte_end":54492,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54497,"byte_end":54510,"line_start":819,"line_end":819,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54515,"byte_end":54518,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ A `Result` whose okay value is an EdDSA `Keypair` or whose error value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54523,"byte_end":54597,"line_start":821,"line_end":821,"column_start":5,"column_end":79}},{"value":"/ is an `SignatureError` describing the error that occurred.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":54602,"byte_end":54664,"line_start":822,"line_end":822,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55899,"byte_end":55912,"line_start":861,"line_end":861,"column_start":12,"column_end":25},"name":"generate_with","qualname":"<Keypair>::generate_with","value":"pub fn generate_with<R>(R) -> Keypair where R: CryptoRng + RngCore","parent":null,"children":[],"decl_id":null,"docs":" Generate a Ristretto Schnorr `Keypair` directly,\n bypassing the `MiniSecretKey` layer.","sig":null,"attributes":[{"value":"/ Generate a Ristretto Schnorr `Keypair` directly,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55218,"byte_end":55270,"line_start":837,"line_end":837,"column_start":5,"column_end":57}},{"value":"/ bypassing the `MiniSecretKey` layer.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55275,"byte_end":55315,"line_start":838,"line_end":838,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55320,"byte_end":55323,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55328,"byte_end":55341,"line_start":840,"line_end":840,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55346,"byte_end":55349,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55354,"byte_end":55361,"line_start":842,"line_end":842,"column_start":5,"column_end":12}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55366,"byte_end":55383,"line_start":843,"line_end":843,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55388,"byte_end":55391,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ use rand::{Rng, rngs::OsRng};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55396,"byte_end":55429,"line_start":845,"line_end":845,"column_start":5,"column_end":38}},{"value":"/ use schnorrkel::Keypair;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55434,"byte_end":55462,"line_start":846,"line_end":846,"column_start":5,"column_end":33}},{"value":"/ use schnorrkel::Signature;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55467,"byte_end":55497,"line_start":847,"line_end":847,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55502,"byte_end":55505,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ let keypair: Keypair = Keypair::generate_with(OsRng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55510,"byte_end":55567,"line_start":849,"line_end":849,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55572,"byte_end":55575,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55580,"byte_end":55587,"line_start":851,"line_end":851,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55592,"byte_end":55599,"line_start":852,"line_end":852,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55604,"byte_end":55607,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ # Input","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55612,"byte_end":55623,"line_start":854,"line_end":854,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55628,"byte_end":55631,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ A CSPRNG with a `fill_bytes()` method, e.g. `rand_chacha::ChaChaRng`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55636,"byte_end":55709,"line_start":856,"line_end":856,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55714,"byte_end":55717,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ We generate a `SecretKey` directly bypassing `MiniSecretKey`,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55722,"byte_end":55787,"line_start":858,"line_end":858,"column_start":5,"column_end":70}},{"value":"/ so our secret keys do not satisfy the high bit \"clamping\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55792,"byte_end":55853,"line_start":859,"line_end":859,"column_start":5,"column_end":66}},{"value":"/ impoised on Ed25519 keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":55858,"byte_end":55887,"line_start":860,"line_end":860,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":56315,"byte_end":56323,"line_start":873,"line_end":873,"column_start":12,"column_end":20},"name":"generate","qualname":"<Keypair>::generate","value":"pub fn generate() -> Keypair","parent":null,"children":[],"decl_id":null,"docs":" Generate a Ristretto Schnorr `Keypair` directly, from a user\n suplied `csprng`, bypassing the `MiniSecretKey` layer.\n","sig":null,"attributes":[{"value":"/ Generate a Ristretto Schnorr `Keypair` directly, from a user","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":56142,"byte_end":56206,"line_start":870,"line_end":870,"column_start":5,"column_end":69}},{"value":"/ suplied `csprng`, bypassing the `MiniSecretKey` layer.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":56211,"byte_end":56269,"line_start":871,"line_end":871,"column_start":5,"column_end":63}},{"value":"cfg(feature = \"getrandom\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":56274,"byte_end":56303,"line_start":872,"line_end":872,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":194},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"context","qualname":"::context","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":1453},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":222},{"krate":0,"index":233},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":251},{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":263},{"krate":0,"index":270},{"krate":0,"index":275},{"krate":0,"index":283}],"decl_id":null,"docs":" ### Schnorr signature contexts and configuration, adaptable to most Schnorr signature schemes.\n","sig":null,"attributes":[{"value":"/ ### Schnorr signature contexts and configuration, adaptable to most Schnorr signature schemes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":59880,"byte_end":59978,"line_start":10,"line_end":10,"column_start":1,"column_end":99}}]},{"kind":"Trait","id":{"krate":0,"index":210},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61282,"byte_end":61299,"line_start":46,"line_end":46,"column_start":11,"column_end":28},"name":"SigningTranscript","qualname":"::context::SigningTranscript","value":"SigningTranscript","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":220}],"decl_id":null,"docs":" Schnorr signing transcript","sig":null,"attributes":[{"value":"/ Schnorr signing transcript","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60369,"byte_end":60399,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60400,"byte_end":60403,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ We envision signatures being on messages, but if a signature occurs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60404,"byte_end":60475,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ inside a larger protocol then the signature scheme's internal","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60476,"byte_end":60541,"line_start":30,"line_end":30,"column_start":1,"column_end":66}},{"value":"/ transcript may exist before or persist after signing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60542,"byte_end":60599,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60600,"byte_end":60603,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ In this trait, we provide an interface for Schnorr signature-like","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60604,"byte_end":60673,"line_start":33,"line_end":33,"column_start":1,"column_end":70}},{"value":"/ constructions that is compatable with `merlin::Transcript`, but","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60674,"byte_end":60741,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ abstract enough to support conventional hash functions as well.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60742,"byte_end":60809,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60810,"byte_end":60813,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ We warn however that conventional hash functions do not provide","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60814,"byte_end":60881,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ strong enough domain seperation for usage via `&mut` references.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60882,"byte_end":60950,"line_start":38,"line_end":38,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60951,"byte_end":60954,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ We fold randomness into witness generation here too, which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":60955,"byte_end":61017,"line_start":40,"line_end":40,"column_start":1,"column_end":63}},{"value":"/ gives every function that takes a `SigningTranscript` a default","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61018,"byte_end":61085,"line_start":41,"line_end":41,"column_start":1,"column_end":68}},{"value":"/ argument `rng: impl Rng = thread_rng()` too.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61086,"byte_end":61134,"line_start":42,"line_end":42,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61135,"byte_end":61138,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ We also abstract over owned and borrowed `merlin::Transcript`s,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61139,"byte_end":61206,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/ so that simple use cases do not suffer from our support for.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61207,"byte_end":61271,"line_start":45,"line_end":45,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61386,"byte_end":61398,"line_start":48,"line_end":48,"column_start":8,"column_end":20},"name":"commit_bytes","qualname":"::context::SigningTranscript::commit_bytes","value":"pub fn commit_bytes(&mut Self, &'static [u8], &[u8])","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Extend transcript with some bytes, shadowed by `merlin::Transcript`.\n","sig":null,"attributes":[{"value":"/ Extend transcript with some bytes, shadowed by `merlin::Transcript`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61306,"byte_end":61378,"line_start":47,"line_end":47,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61502,"byte_end":61512,"line_start":51,"line_end":51,"column_start":8,"column_end":18},"name":"proto_name","qualname":"::context::SigningTranscript::proto_name","value":"pub fn proto_name(&mut Self, &'static [u8])","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Extend transcript with a protocol name\n","sig":null,"attributes":[{"value":"/ Extend transcript with a protocol name","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61452,"byte_end":61494,"line_start":50,"line_end":50,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61675,"byte_end":61687,"line_start":56,"line_end":56,"column_start":8,"column_end":20},"name":"commit_point","qualname":"::context::SigningTranscript::commit_point","value":"pub fn commit_point(&mut Self, &'static [u8], &CompressedRistretto)","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Extend the transcript with a compressed Ristretto point\n","sig":null,"attributes":[{"value":"/ Extend the transcript with a compressed Ristretto point","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":61608,"byte_end":61667,"line_start":55,"line_end":55,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":62332,"byte_end":62347,"line_start":77,"line_end":77,"column_start":8,"column_end":23},"name":"challenge_bytes","qualname":"::context::SigningTranscript::challenge_bytes","value":"pub fn challenge_bytes(&mut Self, &'static [u8], &mut [u8])","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Produce some challenge bytes, shadowed by `merlin::Transcript`.\n","sig":null,"attributes":[{"value":"/ Produce some challenge bytes, shadowed by `merlin::Transcript`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":62257,"byte_end":62324,"line_start":76,"line_end":76,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":62456,"byte_end":62472,"line_start":80,"line_end":80,"column_start":8,"column_end":24},"name":"challenge_scalar","qualname":"::context::SigningTranscript::challenge_scalar","value":"pub fn challenge_scalar(&mut Self, &'static [u8]) -> Scalar","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Produce the public challenge scalar `e`.\n","sig":null,"attributes":[{"value":"/ Produce the public challenge scalar `e`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":62404,"byte_end":62448,"line_start":79,"line_end":79,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":62800,"byte_end":62814,"line_start":88,"line_end":88,"column_start":8,"column_end":22},"name":"witness_scalar","qualname":"::context::SigningTranscript::witness_scalar","value":"pub fn witness_scalar(&Self, &'static [u8], &[&[u8]]) -> Scalar","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Produce a secret witness scalar `k`, aka nonce, from the protocol\n transcript and any \"nonce seeds\" kept with the secret keys.\n","sig":null,"attributes":[{"value":"/ Produce a secret witness scalar `k`, aka nonce, from the protocol","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":62655,"byte_end":62724,"line_start":86,"line_end":86,"column_start":5,"column_end":74}},{"value":"/ transcript and any \"nonce seeds\" kept with the secret keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":62729,"byte_end":62792,"line_start":87,"line_end":87,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":63182,"byte_end":63195,"line_start":96,"line_end":96,"column_start":8,"column_end":21},"name":"witness_bytes","qualname":"::context::SigningTranscript::witness_bytes","value":"pub fn witness_bytes(&Self, &'static [u8], &mut [u8], &[&[u8]])","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Produce secret witness bytes from the protocol transcript\n and any \"nonce seeds\" kept with the secret keys.\n","sig":null,"attributes":[{"value":"/ Produce secret witness bytes from the protocol transcript","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":63056,"byte_end":63117,"line_start":94,"line_end":94,"column_start":5,"column_end":66}},{"value":"/ and any \"nonce seeds\" kept with the secret keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":63122,"byte_end":63174,"line_start":95,"line_end":95,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":63481,"byte_end":63498,"line_start":102,"line_end":102,"column_start":8,"column_end":25},"name":"witness_bytes_rng","qualname":"::context::SigningTranscript::witness_bytes_rng","value":"pub fn witness_bytes_rng<R>(&Self, &'static [u8], &mut [u8], &[&[u8]], R)\nwhere R: RngCore + CryptoRng","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Produce secret witness bytes from the protocol transcript\n and any \"nonce seeds\" kept with the secret keys.\n","sig":null,"attributes":[{"value":"/ Produce secret witness bytes from the protocol transcript","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":63355,"byte_end":63416,"line_start":100,"line_end":100,"column_start":5,"column_end":66}},{"value":"/ and any \"nonce seeds\" kept with the secret keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":63421,"byte_end":63473,"line_start":101,"line_end":101,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":999},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66781,"byte_end":66795,"line_start":183,"line_end":183,"column_start":12,"column_end":26},"name":"SigningContext","qualname":"::context::SigningContext","value":"","parent":null,"children":[],"decl_id":null,"docs":" Schnorr signing context","sig":null,"attributes":[{"value":"/ Schnorr signing context","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66010,"byte_end":66037,"line_start":166,"line_end":166,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66038,"byte_end":66041,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ We expect users to have seperate `SigningContext`s for each role ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66042,"byte_end":66111,"line_start":168,"line_end":168,"column_start":1,"column_end":70}},{"value":"/ that signature play in their protocol.  These `SigningContext`s","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66112,"byte_end":66179,"line_start":169,"line_end":169,"column_start":1,"column_end":68}},{"value":"/ may be global `lazy_static!`s, or perhaps constants in future.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66180,"byte_end":66246,"line_start":170,"line_end":170,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66247,"byte_end":66250,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ To sign a message, apply the appropriate inherent method to create","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66251,"byte_end":66321,"line_start":172,"line_end":172,"column_start":1,"column_end":71}},{"value":"/ a signature transcript.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66322,"byte_end":66349,"line_start":173,"line_end":173,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66350,"byte_end":66353,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ You should use `merlin::Transcript`s directly if you must do","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66354,"byte_end":66418,"line_start":175,"line_end":175,"column_start":1,"column_end":65}},{"value":"/ anything more complex, like use signatures in larger zero-knoweldge","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66419,"byte_end":66490,"line_start":176,"line_end":176,"column_start":1,"column_end":72}},{"value":"/ protocols or sign several components but only reveal one later.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66491,"byte_end":66558,"line_start":177,"line_end":177,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66559,"byte_end":66562,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ We declare these methods `#[inline(always)]` because rustc does","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66563,"byte_end":66630,"line_start":179,"line_end":179,"column_start":1,"column_end":68}},{"value":"/ not handle large returns as efficently as one might like.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66631,"byte_end":66692,"line_start":180,"line_end":180,"column_start":1,"column_end":62}},{"value":"/ https://github.com/rust-random/rand/issues/817","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66693,"byte_end":66743,"line_start":181,"line_end":181,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66959,"byte_end":66974,"line_start":188,"line_end":188,"column_start":8,"column_end":23},"name":"signing_context","qualname":"::context::signing_context","value":"pub fn signing_context(&[u8]) -> SigningContext","parent":null,"children":[],"decl_id":null,"docs":" Initialize a signing context from a static byte string that\n identifies the signature's role in the larger protocol.\n","sig":null,"attributes":[{"value":"/ Initialize a signing context from a static byte string that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66810,"byte_end":66873,"line_start":185,"line_end":185,"column_start":1,"column_end":64}},{"value":"/ identifies the signature's role in the larger protocol.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66874,"byte_end":66933,"line_start":186,"line_end":186,"column_start":1,"column_end":60}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":66934,"byte_end":66951,"line_start":187,"line_end":187,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67235,"byte_end":67238,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"new","qualname":"<SigningContext>::new","value":"pub fn new(&[u8]) -> SigningContext","parent":null,"children":[],"decl_id":null,"docs":" Initialize a signing context from a static byte string that\n identifies the signature's role in the larger protocol.\n","sig":null,"attributes":[{"value":"/ Initialize a signing context from a static byte string that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67074,"byte_end":67137,"line_start":193,"line_end":193,"column_start":5,"column_end":68}},{"value":"/ identifies the signature's role in the larger protocol.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67142,"byte_end":67201,"line_start":194,"line_end":194,"column_start":5,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67206,"byte_end":67223,"line_start":195,"line_end":195,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67729,"byte_end":67734,"line_start":208,"line_end":208,"column_start":12,"column_end":17},"name":"bytes","qualname":"<SigningContext>::bytes","value":"pub fn bytes(&Self, &[u8]) -> Transcript","parent":null,"children":[],"decl_id":null,"docs":" Initalize an owned signing transcript on a message provided as a byte array.","sig":null,"attributes":[{"value":"/ Initalize an owned signing transcript on a message provided as a byte array.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67408,"byte_end":67488,"line_start":202,"line_end":202,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67493,"byte_end":67496,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Avoid this method when processing large slices because it","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67501,"byte_end":67562,"line_start":204,"line_end":204,"column_start":5,"column_end":66}},{"value":"/ calls `merlin::Transcript::append_message` directly and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67567,"byte_end":67626,"line_start":205,"line_end":205,"column_start":5,"column_end":64}},{"value":"/ `merlin` is designed for domain seperation, not performance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67631,"byte_end":67695,"line_start":206,"line_end":206,"column_start":5,"column_end":69}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67700,"byte_end":67717,"line_start":207,"line_end":207,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":68100,"byte_end":68103,"line_start":218,"line_end":218,"column_start":12,"column_end":15},"name":"xof","qualname":"<SigningContext>::xof","value":"pub fn xof<D: ExtendableOutput>(&Self, D) -> Transcript","parent":null,"children":[],"decl_id":null,"docs":" Initalize an owned signing transcript on a message provided\n as a hash function with extensible output mode (XOF) by\n finalizing the hash and extracting 32 bytes from XOF.\n","sig":null,"attributes":[{"value":"/ Initalize an owned signing transcript on a message provided","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67877,"byte_end":67940,"line_start":214,"line_end":214,"column_start":5,"column_end":68}},{"value":"/ as a hash function with extensible output mode (XOF) by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67945,"byte_end":68004,"line_start":215,"line_end":215,"column_start":5,"column_end":64}},{"value":"/ finalizing the hash and extracting 32 bytes from XOF.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":68009,"byte_end":68066,"line_start":216,"line_end":216,"column_start":5,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":68071,"byte_end":68088,"line_start":217,"line_end":217,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":68485,"byte_end":68492,"line_start":229,"line_end":229,"column_start":12,"column_end":19},"name":"hash256","qualname":"<SigningContext>::hash256","value":"pub fn hash256<D: FixedOutput<OutputSize = U32>>(&Self, D) -> Transcript","parent":null,"children":[],"decl_id":null,"docs":" Initalize an owned signing transcript on a message provided as\n a hash function with 256 bit output.\n","sig":null,"attributes":[{"value":"/ Initalize an owned signing transcript on a message provided as","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":68340,"byte_end":68406,"line_start":226,"line_end":226,"column_start":5,"column_end":71}},{"value":"/ a hash function with 256 bit output.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":68411,"byte_end":68451,"line_start":227,"line_end":227,"column_start":5,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":68456,"byte_end":68473,"line_start":228,"line_end":228,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":68931,"byte_end":68938,"line_start":240,"line_end":240,"column_start":12,"column_end":19},"name":"hash512","qualname":"<SigningContext>::hash512","value":"pub fn hash512<D: FixedOutput<OutputSize = U64>>(&Self, D) -> Transcript","parent":null,"children":[],"decl_id":null,"docs":" Initalize an owned signing transcript on a message provided as\n a hash function with 512 bit output, usually a gross over kill.\n","sig":null,"attributes":[{"value":"/ Initalize an owned signing transcript on a message provided as","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":68759,"byte_end":68825,"line_start":237,"line_end":237,"column_start":5,"column_end":71}},{"value":"/ a hash function with 512 bit output, usually a gross over kill.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":68830,"byte_end":68897,"line_start":238,"line_end":238,"column_start":5,"column_end":72}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":68902,"byte_end":68919,"line_start":239,"line_end":239,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":251},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70492,"byte_end":70505,"line_start":275,"line_end":275,"column_start":12,"column_end":25},"name":"XoFTranscript","qualname":"::context::XoFTranscript","value":"","parent":null,"children":[],"decl_id":null,"docs":" Very simple transcript construction from a modern hash fucntion.","sig":null,"attributes":[{"value":"/ Very simple transcript construction from a modern hash fucntion.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69204,"byte_end":69272,"line_start":250,"line_end":250,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69273,"byte_end":69276,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ We provide this transcript type to directly use conventional hash","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69277,"byte_end":69346,"line_start":252,"line_end":252,"column_start":1,"column_end":70}},{"value":"/ functions with an extensible output mode, like Shake128 and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69347,"byte_end":69410,"line_start":253,"line_end":253,"column_start":1,"column_end":64}},{"value":"/ Blake2x.  ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69411,"byte_end":69425,"line_start":254,"line_end":254,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69426,"byte_end":69429,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ We recommend using `merlin::Transcript` instead because merlin","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69430,"byte_end":69496,"line_start":256,"line_end":256,"column_start":1,"column_end":67}},{"value":"/ provides the transcript abstraction natively and might function","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69497,"byte_end":69564,"line_start":257,"line_end":257,"column_start":1,"column_end":68}},{"value":"/ better in low memory enviroments.  We therefore do not provide","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69565,"byte_end":69631,"line_start":258,"line_end":258,"column_start":1,"column_end":67}},{"value":"/ conveniences like `signing_context` for this.  ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69632,"byte_end":69683,"line_start":259,"line_end":259,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69684,"byte_end":69687,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ We note that merlin already uses Keccak, upon which Shak128 is based,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69688,"byte_end":69761,"line_start":261,"line_end":261,"column_start":1,"column_end":74}},{"value":"/ and that no rust implementation for Blake2x currently exists.  ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69762,"byte_end":69829,"line_start":262,"line_end":262,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69830,"byte_end":69833,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ We caution that our transcript abstractions cannot provide the ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69834,"byte_end":69901,"line_start":264,"line_end":264,"column_start":1,"column_end":68}},{"value":"/ protections agsint hash collisions that Ed25519 provides via","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69902,"byte_end":69966,"line_start":265,"line_end":265,"column_start":1,"column_end":65}},{"value":"/ double hashing, but that prehashed Ed25519 variants loose.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":69967,"byte_end":70029,"line_start":266,"line_end":266,"column_start":1,"column_end":63}},{"value":"/ As such, any hash function used here must be collision resistant.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70030,"byte_end":70099,"line_start":267,"line_end":267,"column_start":1,"column_end":70}},{"value":"/ We strongly recommend agsint building XOFs from weaker hash","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70100,"byte_end":70163,"line_start":268,"line_end":268,"column_start":1,"column_end":64}},{"value":"/ functions like SHA1 with HKDF constructions or similar.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70164,"byte_end":70223,"line_start":269,"line_end":269,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70224,"byte_end":70227,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ In `XoFTranscript` style, we never expose the hash function `H`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70228,"byte_end":70295,"line_start":271,"line_end":271,"column_start":1,"column_end":68}},{"value":"/ underlying this type, so that developers cannot circument the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70296,"byte_end":70361,"line_start":272,"line_end":272,"column_start":1,"column_end":66}},{"value":"/ domain seperartion provided by our methods.  We do this to make","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70362,"byte_end":70429,"line_start":273,"line_end":273,"column_start":1,"column_end":68}},{"value":"/ `&mut XoFTranscript : SigningTranscript` safe.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70430,"byte_end":70480,"line_start":274,"line_end":274,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":71103,"byte_end":71106,"line_start":293,"line_end":293,"column_start":12,"column_end":15},"name":"new","qualname":"<XoFTranscript<H>>::new","value":"pub fn new(H) -> XoFTranscript<H>","parent":null,"children":[],"decl_id":null,"docs":" Create a `XoFTranscript` from a conventional hash functions with an extensible output mode.","sig":null,"attributes":[{"value":"/ Create a `XoFTranscript` from a conventional hash functions with an extensible output mode.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70766,"byte_end":70861,"line_start":287,"line_end":287,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70866,"byte_end":70869,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ We intentionally consume and never reexpose the hash function","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70874,"byte_end":70939,"line_start":289,"line_end":289,"column_start":5,"column_end":70}},{"value":"/ provided, so that our domain seperation works correctly even","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70944,"byte_end":71008,"line_start":290,"line_end":290,"column_start":5,"column_end":69}},{"value":"/ when using `&mut XoFTranscript : SigningTranscript`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":71013,"byte_end":71069,"line_start":291,"line_end":291,"column_start":5,"column_end":61}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":71074,"byte_end":71091,"line_start":292,"line_end":292,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":270},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":73158,"byte_end":73182,"line_start":354,"line_end":354,"column_start":12,"column_end":36},"name":"SigningTranscriptWithRng","qualname":"::context::SigningTranscriptWithRng","value":"SigningTranscriptWithRng {  }","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274}],"decl_id":null,"docs":" Schnorr signing transcript with the default `ThreadRng` replaced\n by an arbitrary `CryptoRng`.","sig":null,"attributes":[{"value":"/ Schnorr signing transcript with the default `ThreadRng` replaced","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72397,"byte_end":72465,"line_start":339,"line_end":339,"column_start":1,"column_end":69}},{"value":"/ by an arbitrary `CryptoRng`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72466,"byte_end":72498,"line_start":340,"line_end":340,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72499,"byte_end":72502,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ If `ThreadRng` breaks on your platform, or merely if your paranoid,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72503,"byte_end":72574,"line_start":342,"line_end":342,"column_start":1,"column_end":72}},{"value":"/ then you might \"upgrade\" from `ThreadRng` to `OsRng` by using calls","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72575,"byte_end":72646,"line_start":343,"line_end":343,"column_start":1,"column_end":72}},{"value":"/ like `keypair.sign( attach_rng(t,OSRng::new()) )`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72647,"byte_end":72701,"line_start":344,"line_end":344,"column_start":1,"column_end":55}},{"value":"/ We recommend instead simply fixing `ThreadRng` for your platform","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72702,"byte_end":72770,"line_start":345,"line_end":345,"column_start":1,"column_end":69}},{"value":"/ however.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72771,"byte_end":72783,"line_start":346,"line_end":346,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72784,"byte_end":72787,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ There are also derandomization tricks like","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72788,"byte_end":72834,"line_start":348,"line_end":348,"column_start":1,"column_end":47}},{"value":"/ `attach_rng(t,ChaChaRng::from_seed([0u8; 32]))`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72835,"byte_end":72886,"line_start":349,"line_end":349,"column_start":1,"column_end":52}},{"value":"/ for deterministic signing in tests too.  Although derandomization","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72887,"byte_end":72956,"line_start":350,"line_end":350,"column_start":1,"column_end":70}},{"value":"/ produces secure signatures, we recommend against doing this in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":72957,"byte_end":73023,"line_start":351,"line_end":351,"column_start":1,"column_end":67}},{"value":"/ production because we implement protocols like multi-signatures","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":73024,"byte_end":73091,"line_start":352,"line_end":352,"column_start":1,"column_end":68}},{"value":"/ which likely become vulnerabile when derandomized.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":73092,"byte_end":73146,"line_start":353,"line_end":353,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":283},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":74457,"byte_end":74467,"line_start":386,"line_end":386,"column_start":8,"column_end":18},"name":"attach_rng","qualname":"::context::attach_rng","value":"pub fn attach_rng<T, R>(T, R) -> SigningTranscriptWithRng<T, R> where\nT: SigningTranscript, R: RngCore + CryptoRng","parent":null,"children":[],"decl_id":null,"docs":" Attach a `CryptoRng` to a `SigningTranscript` to repalce the default `ThreadRng`","sig":null,"attributes":[{"value":"/ Attach a `CryptoRng` to a `SigningTranscript` to repalce the default `ThreadRng`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":74017,"byte_end":74101,"line_start":379,"line_end":379,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":74102,"byte_end":74105,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"/ There are tricks like `attach_rng(t,ChaChaRng::from_seed([0u8; 32]))`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":74106,"byte_end":74179,"line_start":381,"line_end":381,"column_start":1,"column_end":74}},{"value":"/ for deterministic tests.  We warn against doing this in production","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":74180,"byte_end":74250,"line_start":382,"line_end":382,"column_start":1,"column_end":71}},{"value":"/ however because, although such derandomization produces secure Schnorr","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":74251,"byte_end":74325,"line_start":383,"line_end":383,"column_start":1,"column_end":75}},{"value":"/ signatures, we do implement protocols here like multi-signatures which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":74326,"byte_end":74400,"line_start":384,"line_end":384,"column_start":1,"column_end":75}},{"value":"/ likely become vulnerabile when derandomized.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":74401,"byte_end":74449,"line_start":385,"line_end":385,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":286},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":1457},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":1461},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":1004},{"krate":0,"index":1015},{"krate":0,"index":1014},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":317},{"krate":0,"index":326},{"krate":0,"index":331}],"decl_id":null,"docs":" ### Schnorr signature creation and verification, including batch verification.\n","sig":null,"attributes":[{"value":"/ ### Schnorr signature creation and verification, including batch verification.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":76206,"byte_end":76288,"line_start":10,"line_end":10,"column_start":1,"column_end":83}}]},{"kind":"Const","id":{"krate":0,"index":298},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":76638,"byte_end":76654,"line_start":26,"line_end":26,"column_start":11,"column_end":27},"name":"SIGNATURE_LENGTH","qualname":"::sign::SIGNATURE_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The length of a curve25519 EdDSA `Signature`, in bytes.\n","sig":null,"attributes":[{"value":"/ The length of a curve25519 EdDSA `Signature`, in bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":76568,"byte_end":76627,"line_start":25,"line_end":25,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1004},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":76934,"byte_end":76943,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"Signature","qualname":"::sign::Signature","value":"Signature {  }","parent":null,"children":[{"krate":0,"index":1005},{"krate":0,"index":1006}],"decl_id":null,"docs":" A Ristretto Schnorr signature \"detached\" from the signed message.","sig":null,"attributes":[{"value":"/ A Ristretto Schnorr signature \"detached\" from the signed message.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":76669,"byte_end":76738,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":76739,"byte_end":76742,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ These cannot be converted to any Ed25519 signature because they hash","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":76743,"byte_end":76815,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ curve points in the Ristretto encoding.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":76816,"byte_end":76859,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":76860,"byte_end":76884,"line_start":32,"line_end":32,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":79257,"byte_end":79265,"line_start":91,"line_end":91,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<Signature>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert this `Signature` to a byte array.\n","sig":null,"attributes":[{"value":"/ Convert this `Signature` to a byte array.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":79186,"byte_end":79231,"line_start":89,"line_end":89,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":79236,"byte_end":79245,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":80321,"byte_end":80331,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Signature>::from_bytes","value":"pub fn from_bytes(&[u8]) -> SignatureResult<Signature>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Signature` from a slice of bytes.","sig":null,"attributes":[{"value":"/ Construct a `Signature` from a slice of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":79547,"byte_end":79597,"line_start":99,"line_end":99,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":79602,"byte_end":79605,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ We distinguish schnorrkell signatures from ed25519 signatures","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":79610,"byte_end":79675,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"/ by setting the high bit of byte 31.  We return an error if","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":79680,"byte_end":79742,"line_start":102,"line_end":102,"column_start":5,"column_end":67}},{"value":"/ this marker remains unset because otherwise schnorrkel ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":79747,"byte_end":79806,"line_start":103,"line_end":103,"column_start":5,"column_end":64}},{"value":"/ signatures would be indistinguishable from ed25519 signatures.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":79811,"byte_end":79877,"line_start":104,"line_end":104,"column_start":5,"column_end":71}},{"value":"/ We cannot always distinguish between schnorrkel and ed25519","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":79882,"byte_end":79945,"line_start":105,"line_end":105,"column_start":5,"column_end":68}},{"value":"/ public keys either, so without this market bit we could not","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":79950,"byte_end":80013,"line_start":106,"line_end":106,"column_start":5,"column_end":68}},{"value":"/ do batch verification in systems that support precisely","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":80018,"byte_end":80077,"line_start":107,"line_end":107,"column_start":5,"column_end":64}},{"value":"/ ed25519 and schnorrkel.  ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":80082,"byte_end":80111,"line_start":108,"line_end":108,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":80116,"byte_end":80119,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ We cannot distinguish amongst different `SigningTranscript`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":80124,"byte_end":80187,"line_start":110,"line_end":110,"column_start":5,"column_end":68}},{"value":"/ types using these markey bits, but protocol should not need","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":80192,"byte_end":80255,"line_start":111,"line_end":111,"column_start":5,"column_end":68}},{"value":"/ two different transcript types.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":80260,"byte_end":80295,"line_start":112,"line_end":112,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":80300,"byte_end":80309,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":81208,"byte_end":81249,"line_start":138,"line_end":138,"column_start":12,"column_end":53},"name":"from_bytes_not_distinguished_from_ed25519","qualname":"<Signature>::from_bytes_not_distinguished_from_ed25519","value":"pub fn from_bytes_not_distinguished_from_ed25519(&[u8])\n-> SignatureResult<Signature>","parent":null,"children":[],"decl_id":null,"docs":" Depricated construction of a `Signature` from a slice of bytes\n without checking the bit distinguishing from ed25519.  Deprecated.\n","sig":null,"attributes":[{"value":"/ Depricated construction of a `Signature` from a slice of bytes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":81041,"byte_end":81107,"line_start":135,"line_end":135,"column_start":5,"column_end":71}},{"value":"/ without checking the bit distinguishing from ed25519.  Deprecated.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":81112,"byte_end":81182,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":81187,"byte_end":81196,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":82519,"byte_end":82523,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"sign","qualname":"<SecretKey>::sign","value":"pub fn sign<T: SigningTranscript>(&Self, T, &PublicKey) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Sign a transcript with this `SecretKey`.","sig":null,"attributes":[{"value":"/ Sign a transcript with this `SecretKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":81874,"byte_end":81918,"line_start":159,"line_end":159,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":81923,"byte_end":81926,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Requires a `SigningTranscript`, normally created from a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":81931,"byte_end":81990,"line_start":161,"line_end":161,"column_start":5,"column_end":64}},{"value":"/ `SigningContext` and a message, as well as the public key","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":81995,"byte_end":82056,"line_start":162,"line_end":162,"column_start":5,"column_end":66}},{"value":"/ correspodning to `self`.  Returns a Schnorr signature.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":82061,"byte_end":82119,"line_start":163,"line_end":163,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":82124,"byte_end":82127,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ We employ a randomized nonce here, but also incorporate the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":82132,"byte_end":82195,"line_start":165,"line_end":165,"column_start":5,"column_end":68}},{"value":"/ transcript like in a derandomized scheme, but only after first","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":82200,"byte_end":82266,"line_start":166,"line_end":166,"column_start":5,"column_end":71}},{"value":"/ extending the transcript by the public key.  As a result, there","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":82271,"byte_end":82338,"line_start":167,"line_end":167,"column_start":5,"column_end":72}},{"value":"/ should be no attacks even if both the random number generator","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":82343,"byte_end":82408,"line_start":168,"line_end":168,"column_start":5,"column_end":70}},{"value":"/ fails and the function gets called with the wrong public key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":82413,"byte_end":82478,"line_start":169,"line_end":169,"column_start":5,"column_end":70}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":82483,"byte_end":82507,"line_start":170,"line_end":170,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":83231,"byte_end":83247,"line_start":190,"line_end":190,"column_start":12,"column_end":28},"name":"sign_doublecheck","qualname":"<SecretKey>::sign_doublecheck","value":"pub fn sign_doublecheck<T>(&Self, T, &PublicKey) -> SignatureResult<Signature>\nwhere T: SigningTranscript + Clone","parent":null,"children":[],"decl_id":null,"docs":" Sign a message with this `SecretKey`, but doublecheck the result.\n","sig":null,"attributes":[{"value":"/ Sign a message with this `SecretKey`, but doublecheck the result.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":83150,"byte_end":83219,"line_start":189,"line_end":189,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":83632,"byte_end":83643,"line_start":200,"line_end":200,"column_start":12,"column_end":23},"name":"sign_simple","qualname":"<SecretKey>::sign_simple","value":"pub fn sign_simple(&Self, &[u8], &[u8], &PublicKey) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Sign a message with this `SecretKey`.\n","sig":null,"attributes":[{"value":"/ Sign a message with this `SecretKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":83579,"byte_end":83620,"line_start":199,"line_end":199,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":83895,"byte_end":83918,"line_start":207,"line_end":207,"column_start":12,"column_end":35},"name":"sign_simple_doublecheck","qualname":"<SecretKey>::sign_simple_doublecheck","value":"pub fn sign_simple_doublecheck(&Self, &[u8], &[u8], &PublicKey)\n-> SignatureResult<Signature>","parent":null,"children":[],"decl_id":null,"docs":" Sign a message with this `SecretKey`, but doublecheck the result.\n","sig":null,"attributes":[{"value":"/ Sign a message with this `SecretKey`, but doublecheck the result.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":83814,"byte_end":83883,"line_start":206,"line_end":206,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":84571,"byte_end":84577,"line_start":226,"line_end":226,"column_start":12,"column_end":18},"name":"verify","qualname":"<PublicKey>::verify","value":"pub fn verify<T: SigningTranscript>(&Self, T, &Signature)\n-> SignatureResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify a signature by this public key on a transcript.","sig":null,"attributes":[{"value":"/ Verify a signature by this public key on a transcript.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":84311,"byte_end":84369,"line_start":220,"line_end":220,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":84374,"byte_end":84377,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Requires a `SigningTranscript`, normally created from a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":84382,"byte_end":84441,"line_start":222,"line_end":222,"column_start":5,"column_end":64}},{"value":"/ `SigningContext` and a message, as well as the signature","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":84446,"byte_end":84506,"line_start":223,"line_end":223,"column_start":5,"column_end":65}},{"value":"/ to be verified.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":84511,"byte_end":84530,"line_start":224,"line_end":224,"column_start":5,"column_end":24}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":84535,"byte_end":84559,"line_start":225,"line_end":225,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":85232,"byte_end":85245,"line_start":242,"line_end":242,"column_start":12,"column_end":25},"name":"verify_simple","qualname":"<PublicKey>::verify_simple","value":"pub fn verify_simple(&Self, &[u8], &[u8], &Signature) -> SignatureResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify a signature by this public key on a message.\n","sig":null,"attributes":[{"value":"/ Verify a signature by this public key on a message.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":85165,"byte_end":85220,"line_start":241,"line_end":241,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":85602,"byte_end":85635,"line_start":252,"line_end":252,"column_start":12,"column_end":45},"name":"verify_simple_preaudit_deprecated","qualname":"<PublicKey>::verify_simple_preaudit_deprecated","value":"pub fn verify_simple_preaudit_deprecated(&Self, &'static [u8], &[u8], &[u8])\n-> SignatureResult<()>","parent":null,"children":[],"decl_id":null,"docs":" A temporary verification routine for use in transitioning substrate testnets only.\n","sig":null,"attributes":[{"value":"/ A temporary verification routine for use in transitioning substrate testnets only.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":85431,"byte_end":85517,"line_start":249,"line_end":249,"column_start":5,"column_end":91}},{"value":"cfg(feature = \"preaudit_deprecated\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":85522,"byte_end":85561,"line_start":250,"line_end":250,"column_start":5,"column_end":44}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":85566,"byte_end":85590,"line_start":251,"line_end":251,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88953,"byte_end":88957,"line_start":342,"line_end":342,"column_start":12,"column_end":16},"name":"sign","qualname":"<Keypair>::sign","value":"pub fn sign<T: SigningTranscript>(&Self, T) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Sign a transcript with this keypair's secret key.","sig":null,"attributes":[{"value":"/ Sign a transcript with this keypair's secret key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86570,"byte_end":86623,"line_start":282,"line_end":282,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86628,"byte_end":86631,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ Requires a `SigningTranscript`, normally created from a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86636,"byte_end":86695,"line_start":284,"line_end":284,"column_start":5,"column_end":64}},{"value":"/ `SigningContext` and a message.  Returns a Schnorr signature.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86700,"byte_end":86765,"line_start":285,"line_end":285,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86770,"byte_end":86773,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86778,"byte_end":86792,"line_start":287,"line_end":287,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86797,"byte_end":86800,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Internally, we manage signature transcripts using a 128 bit secure","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86805,"byte_end":86875,"line_start":289,"line_end":289,"column_start":5,"column_end":75}},{"value":"/ STROBE construction based on Keccak, which itself is extremly fast","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86880,"byte_end":86950,"line_start":290,"line_end":290,"column_start":5,"column_end":75}},{"value":"/ and secure.  You might however influence performance or security","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86955,"byte_end":87023,"line_start":291,"line_end":291,"column_start":5,"column_end":73}},{"value":"/ by prehashing your message, like","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87028,"byte_end":87064,"line_start":292,"line_end":292,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87069,"byte_end":87072,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87077,"byte_end":87084,"line_start":294,"line_end":294,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{Signature,Keypair};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87089,"byte_end":87129,"line_start":295,"line_end":295,"column_start":5,"column_end":45}},{"value":"/ use rand::prelude::*; // ThreadRng,thread_rng","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87134,"byte_end":87183,"line_start":296,"line_end":296,"column_start":5,"column_end":54}},{"value":"/ use sha3::Shake128;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87188,"byte_end":87211,"line_start":297,"line_end":297,"column_start":5,"column_end":28}},{"value":"/ use sha3::digest::{Input};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87216,"byte_end":87246,"line_start":298,"line_end":298,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87251,"byte_end":87254,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"std\"))]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87259,"byte_end":87293,"line_start":300,"line_end":300,"column_start":5,"column_end":39}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87298,"byte_end":87315,"line_start":301,"line_end":301,"column_start":5,"column_end":22}},{"value":"/ let mut csprng: ThreadRng = thread_rng();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87320,"byte_end":87365,"line_start":302,"line_end":302,"column_start":5,"column_end":50}},{"value":"/ let keypair: Keypair = Keypair::generate_with(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87370,"byte_end":87433,"line_start":303,"line_end":303,"column_start":5,"column_end":68}},{"value":"/ let message: &[u8] = b\"All I want is to pet all of the dogs.\";","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87438,"byte_end":87504,"line_start":304,"line_end":304,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87509,"byte_end":87512,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ // Create a hash digest object and feed it the message:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87517,"byte_end":87576,"line_start":306,"line_end":306,"column_start":5,"column_end":64}},{"value":"/ let prehashed = Shake128::default().chain(message);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87581,"byte_end":87636,"line_start":307,"line_end":307,"column_start":5,"column_end":60}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87641,"byte_end":87648,"line_start":308,"line_end":308,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87653,"byte_end":87658,"line_start":309,"line_end":309,"column_start":5,"column_end":10}},{"value":"/ # #[cfg(any(not(feature = \"std\")))]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87663,"byte_end":87702,"line_start":310,"line_end":310,"column_start":5,"column_end":44}},{"value":"/ # fn main() { }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87707,"byte_end":87726,"line_start":311,"line_end":311,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87731,"byte_end":87738,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87743,"byte_end":87746,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ We require a \"context\" string for all signatures, which should","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87751,"byte_end":87817,"line_start":314,"line_end":314,"column_start":5,"column_end":71}},{"value":"/ be chosen judiciously for your project.  It should represent the ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87822,"byte_end":87891,"line_start":315,"line_end":315,"column_start":5,"column_end":74}},{"value":"/ role the signature plays in your application.  If you use the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87896,"byte_end":87961,"line_start":316,"line_end":316,"column_start":5,"column_end":70}},{"value":"/ context in two purposes, and the same key, then a signature for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":87966,"byte_end":88033,"line_start":317,"line_end":317,"column_start":5,"column_end":72}},{"value":"/ one purpose can be substituted for the other.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88038,"byte_end":88087,"line_start":318,"line_end":318,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88092,"byte_end":88095,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88100,"byte_end":88107,"line_start":320,"line_end":320,"column_start":5,"column_end":12}},{"value":"/ # use schnorrkel::{Keypair,Signature,signing_context};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88112,"byte_end":88170,"line_start":321,"line_end":321,"column_start":5,"column_end":63}},{"value":"/ # use rand::prelude::*; // ThreadRng,thread_rng","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88175,"byte_end":88226,"line_start":322,"line_end":322,"column_start":5,"column_end":56}},{"value":"/ # use sha3::digest::Input;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88231,"byte_end":88261,"line_start":323,"line_end":323,"column_start":5,"column_end":35}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88266,"byte_end":88271,"line_start":324,"line_end":324,"column_start":5,"column_end":10}},{"value":"/ # #[cfg(all(feature = \"std\"))]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88276,"byte_end":88310,"line_start":325,"line_end":325,"column_start":5,"column_end":39}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88315,"byte_end":88332,"line_start":326,"line_end":326,"column_start":5,"column_end":22}},{"value":"/ # let mut csprng: ThreadRng = thread_rng();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88337,"byte_end":88384,"line_start":327,"line_end":327,"column_start":5,"column_end":52}},{"value":"/ # let keypair: Keypair = Keypair::generate_with(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88389,"byte_end":88454,"line_start":328,"line_end":328,"column_start":5,"column_end":70}},{"value":"/ # let message: &[u8] = b\"All I want is to pet all of the dogs.\";","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88459,"byte_end":88527,"line_start":329,"line_end":329,"column_start":5,"column_end":73}},{"value":"/ # let prehashed = ::sha3::Shake256::default().chain(message);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88532,"byte_end":88597,"line_start":330,"line_end":330,"column_start":5,"column_end":70}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88602,"byte_end":88607,"line_start":331,"line_end":331,"column_start":5,"column_end":10}},{"value":"/ let ctx = signing_context(b\"My Signing Context\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88612,"byte_end":88665,"line_start":332,"line_end":332,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88670,"byte_end":88673,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ let sig: Signature = keypair.sign(ctx.xof(prehashed));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88678,"byte_end":88736,"line_start":334,"line_end":334,"column_start":5,"column_end":63}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88741,"byte_end":88748,"line_start":335,"line_end":335,"column_start":5,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88753,"byte_end":88758,"line_start":336,"line_end":336,"column_start":5,"column_end":10}},{"value":"/ # #[cfg(any(not(feature = \"std\")))]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88763,"byte_end":88802,"line_start":337,"line_end":337,"column_start":5,"column_end":44}},{"value":"/ # fn main() { }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88807,"byte_end":88826,"line_start":338,"line_end":338,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88831,"byte_end":88838,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":88843,"byte_end":88846,"line_start":340,"line_end":340,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89127,"byte_end":89138,"line_start":348,"line_end":348,"column_start":12,"column_end":23},"name":"sign_simple","qualname":"<Keypair>::sign_simple","value":"pub fn sign_simple(&Self, &[u8], &[u8]) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Sign a message with this keypair's secret key.\n","sig":null,"attributes":[{"value":"/ Sign a message with this keypair's secret key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89065,"byte_end":89115,"line_start":347,"line_end":347,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":90119,"byte_end":90125,"line_start":377,"line_end":377,"column_start":12,"column_end":18},"name":"verify","qualname":"<Keypair>::verify","value":"pub fn verify<T: SigningTranscript>(&Self, T, &Signature)\n-> SignatureResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify a signature by keypair's public key on a transcript.","sig":null,"attributes":[{"value":"/ Verify a signature by keypair's public key on a transcript.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89256,"byte_end":89319,"line_start":353,"line_end":353,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89324,"byte_end":89327,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ Requires a `SigningTranscript`, normally created from a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89332,"byte_end":89391,"line_start":355,"line_end":355,"column_start":5,"column_end":64}},{"value":"/ `SigningContext` and a message, as well as the signature","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89396,"byte_end":89456,"line_start":356,"line_end":356,"column_start":5,"column_end":65}},{"value":"/ to be verified.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89461,"byte_end":89480,"line_start":357,"line_end":357,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89485,"byte_end":89488,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89493,"byte_end":89507,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89512,"byte_end":89515,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89520,"byte_end":89527,"line_start":361,"line_end":361,"column_start":5,"column_end":12}},{"value":"/ use schnorrkel::{Keypair,Signature,signing_context};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89532,"byte_end":89588,"line_start":362,"line_end":362,"column_start":5,"column_end":61}},{"value":"/ use rand::prelude::*; // ThreadRng,thread_rng","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89593,"byte_end":89642,"line_start":363,"line_end":363,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89647,"byte_end":89650,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89655,"byte_end":89672,"line_start":365,"line_end":365,"column_start":5,"column_end":22}},{"value":"/ let mut csprng: ThreadRng = thread_rng();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89677,"byte_end":89722,"line_start":366,"line_end":366,"column_start":5,"column_end":50}},{"value":"/ let keypair: Keypair = Keypair::generate_with(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89727,"byte_end":89790,"line_start":367,"line_end":367,"column_start":5,"column_end":68}},{"value":"/ let message: &[u8] = b\"All I want is to pet all of the dogs.\";","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89795,"byte_end":89861,"line_start":368,"line_end":368,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89866,"byte_end":89869,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ let ctx = signing_context(b\"Some context string\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89874,"byte_end":89928,"line_start":370,"line_end":370,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89933,"byte_end":89936,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ let sig: Signature = keypair.sign(ctx.bytes(message));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":89941,"byte_end":89999,"line_start":372,"line_end":372,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":90004,"byte_end":90007,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ assert!( keypair.public.verify(ctx.bytes(message), &sig).is_ok() );","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":90012,"byte_end":90083,"line_start":374,"line_end":374,"column_start":5,"column_end":76}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":90088,"byte_end":90095,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":90100,"byte_end":90107,"line_start":376,"line_end":376,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":90337,"byte_end":90350,"line_start":383,"line_end":383,"column_start":12,"column_end":25},"name":"verify_simple","qualname":"<Keypair>::verify_simple","value":"pub fn verify_simple(&Self, &[u8], &[u8], &Signature) -> SignatureResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify a signature by keypair's public key on a message.\n","sig":null,"attributes":[{"value":"/ Verify a signature by keypair's public key on a message.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":90265,"byte_end":90325,"line_start":382,"line_end":382,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":90582,"byte_end":90598,"line_start":390,"line_end":390,"column_start":12,"column_end":28},"name":"sign_doublecheck","qualname":"<Keypair>::sign_doublecheck","value":"pub fn sign_doublecheck<T>(&Self, T) -> SignatureResult<Signature> where\nT: SigningTranscript + Clone","parent":null,"children":[],"decl_id":null,"docs":" Sign a message with this `SecretKey`, but doublecheck the result.\n","sig":null,"attributes":[{"value":"/ Sign a message with this `SecretKey`, but doublecheck the result.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":90501,"byte_end":90570,"line_start":389,"line_end":389,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":90977,"byte_end":91000,"line_start":400,"line_end":400,"column_start":12,"column_end":35},"name":"sign_simple_doublecheck","qualname":"<Keypair>::sign_simple_doublecheck","value":"pub fn sign_simple_doublecheck(&Self, &[u8], &[u8])\n-> SignatureResult<Signature>","parent":null,"children":[],"decl_id":null,"docs":" Sign a message with this `SecretKey`, but doublecheck the result.\n","sig":null,"attributes":[{"value":"/ Sign a message with this `SecretKey`, but doublecheck the result.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":90896,"byte_end":90965,"line_start":399,"line_end":399,"column_start":5,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":343},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vrf","qualname":"::vrf","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","parent":null,"children":[{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":1481},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":1032},{"krate":0,"index":1036},{"krate":0,"index":373},{"krate":0,"index":377},{"krate":0,"index":380},{"krate":0,"index":1039},{"krate":0,"index":1068},{"krate":0,"index":1067},{"krate":0,"index":1064},{"krate":0,"index":1062},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1048},{"krate":0,"index":1046},{"krate":0,"index":1043},{"krate":0,"index":385},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1085},{"krate":0,"index":1112},{"krate":0,"index":1110},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1093},{"krate":0,"index":1091},{"krate":0,"index":1088},{"krate":0,"index":396},{"krate":0,"index":399},{"krate":0,"index":402},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":1114},{"krate":0,"index":1126},{"krate":0,"index":1124},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":434},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":1143},{"krate":0,"index":1156},{"krate":0,"index":1154},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":444},{"krate":0,"index":1158},{"krate":0,"index":1161},{"krate":0,"index":460},{"krate":0,"index":484},{"krate":0,"index":502},{"krate":0,"index":517}],"decl_id":null,"docs":" ### Implementation of a Verifiable Random Function (VRF) using Ristretto points and Schnorr DLEQ proofs.","sig":null,"attributes":[{"value":"/ ### Implementation of a Verifiable Random Function (VRF) using Ristretto points and Schnorr DLEQ proofs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":95396,"byte_end":95504,"line_start":10,"line_end":10,"column_start":1,"column_end":109}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":95505,"byte_end":95508,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ *Warning*  We warn that our VRF construction supports malleable","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":95509,"byte_end":95576,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/ outputs via the `*malleable*` methods.  These are insecure when","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":95577,"byte_end":95644,"line_start":13,"line_end":13,"column_start":1,"column_end":68}},{"value":"/ used in  conjunction with our HDKD provided in dervie.rs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":95645,"byte_end":95706,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/ Attackers could translate malleable VRF outputs from one soft subkey ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":95707,"byte_end":95780,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/ to another soft subkey, gaining early knowledge of the VRF output.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":95781,"byte_end":95851,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ We suggest using either non-malleable VRFs or using implicit","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":95852,"byte_end":95916,"line_start":17,"line_end":17,"column_start":1,"column_end":65}},{"value":"/ certificates instead of HDKD when using VRFs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":95917,"byte_end":95966,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":95967,"byte_end":95970,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ We model the VRF on \"Making NSEC5 Practical for DNSSEC\" by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":95971,"byte_end":96033,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/ Dimitrios Papadopoulos, Duane Wessels, Shumon Huque, Moni Naor,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96034,"byte_end":96101,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/ Jan Včelák, Leonid Rezyin, andd Sharon Goldberg.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96102,"byte_end":96158,"line_start":22,"line_end":22,"column_start":1,"column_end":55}},{"value":"/ https://eprint.iacr.org/2017/099.pdf","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96159,"byte_end":96199,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"/ We note the V(X)EdDSA signature scheme by Trevor Perrin at","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96200,"byte_end":96262,"line_start":24,"line_end":24,"column_start":1,"column_end":63}},{"value":"/ https://www.signal.org/docs/specifications/xeddsa/#vxeddsa","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96263,"byte_end":96325,"line_start":25,"line_end":25,"column_start":1,"column_end":63}},{"value":"/ is almost identical to the NSEC5 construction, except that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96326,"byte_end":96388,"line_start":26,"line_end":26,"column_start":1,"column_end":63}},{"value":"/ V(X)Ed25519 fails to be a VRF by giving signers multiple","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96389,"byte_end":96449,"line_start":27,"line_end":27,"column_start":1,"column_end":61}},{"value":"/ outputs per input.  There is another even later variant at","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96450,"byte_end":96512,"line_start":28,"line_end":28,"column_start":1,"column_end":63}},{"value":"/ https://datatracker.ietf.org/doc/draft-irtf-cfrg-vrf/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96513,"byte_end":96570,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96571,"byte_end":96574,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ We support individual signers merging numerous VRF outputs created","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96575,"byte_end":96645,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ with the same keypair, which follows the \"DLEQ Proofs\" and \"Batching","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96646,"byte_end":96718,"line_start":32,"line_end":32,"column_start":1,"column_end":73}},{"value":"/ the Proofs\" sections of \"Privacy Pass - The Math\" by Alex Davidson,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96719,"byte_end":96790,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ https://new.blog.cloudflare.com/privacy-pass-the-math/#dleqproofs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96791,"byte_end":96860,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ and \"Privacy Pass: Bypassing Internet Challenges Anonymously\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96861,"byte_end":96926,"line_start":35,"line_end":35,"column_start":1,"column_end":66}},{"value":"/ by Alex Davidson, Ian Goldberg, Nick Sullivan, George Tankersley,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96927,"byte_end":96996,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/ and Filippo Valsorda.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":96997,"byte_end":97022,"line_start":37,"line_end":37,"column_start":1,"column_end":26}},{"value":"/ https://www.petsymposium.org/2018/files/papers/issue3/popets-2018-0026.pdf","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97023,"byte_end":97101,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97102,"byte_end":97105,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ As noted there, our merging technique's soundness appeals to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97106,"byte_end":97170,"line_start":40,"line_end":40,"column_start":1,"column_end":65}},{"value":"/ Theorem 3.17 on page 74 of Ryan Henry's PhD thesis","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97171,"byte_end":97225,"line_start":41,"line_end":41,"column_start":1,"column_end":55}},{"value":"/ \"Efficient Zero-Knowledge Proofs and Applications\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97226,"byte_end":97280,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"/ https://uwspace.uwaterloo.ca/bitstream/handle/10012/8621/Henry_Ryan.pdf","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97281,"byte_end":97356,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ See also the attack on Peng and Bao’s batch proof protocol in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97357,"byte_end":97424,"line_start":44,"line_end":44,"column_start":1,"column_end":66}},{"value":"/ \"Batch Proofs of Partial Knowledge\" by Ryan Henry and Ian Goldberg","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97425,"byte_end":97495,"line_start":45,"line_end":45,"column_start":1,"column_end":71}},{"value":"/ https://www.cypherpunks.ca/~iang/pubs/batchzkp-acns.pdf","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97496,"byte_end":97555,"line_start":46,"line_end":46,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97556,"byte_end":97559,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ We might reasonably ask if the VRF signer's public key should","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97560,"byte_end":97625,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ really be hashed when creating the scalars in `vrfs_merge*`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97626,"byte_end":97690,"line_start":49,"line_end":49,"column_start":1,"column_end":65}},{"value":"/ After all, there is no similar requirement when the values being","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97691,"byte_end":97759,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ hashed are BLS public keys in say","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97760,"byte_end":97797,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ https://crypto.stanford.edu/~dabo/pubs/papers/BLSmultisig.html","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97798,"byte_end":97864,"line_start":52,"line_end":52,"column_start":1,"column_end":67}},{"value":"/ In fact, we expect the public key could be dropped both in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97865,"byte_end":97927,"line_start":53,"line_end":53,"column_start":1,"column_end":63}},{"value":"/ Privacy Pass' case, due to using randomness in the messages,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97928,"byte_end":97992,"line_start":54,"line_end":54,"column_start":1,"column_end":65}},{"value":"/ and in the VRF case, provided the message depends upon shared","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":97993,"byte_end":98058,"line_start":55,"line_end":55,"column_start":1,"column_end":66}},{"value":"/ randomness created after the public key.  Yet, there are VRF","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98059,"byte_end":98123,"line_start":56,"line_end":56,"column_start":1,"column_end":65}},{"value":"/ applications outside these two cases, and DLEQ proof applications","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98124,"byte_end":98193,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/ where the points are not even hashes.  At minimum, we expect","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98194,"byte_end":98258,"line_start":58,"line_end":58,"column_start":1,"column_end":65}},{"value":"/ hashing the public key prevents malicious signers from choosing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98259,"byte_end":98326,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ their key to cancel out the blinding of a particular point,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98327,"byte_end":98390,"line_start":60,"line_end":60,"column_start":1,"column_end":64}},{"value":"/ which might become important in a some anonymity applications.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98391,"byte_end":98457,"line_start":61,"line_end":61,"column_start":1,"column_end":67}},{"value":"/ In any case, there is no cost to hashing the public key for VRF","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98458,"byte_end":98525,"line_start":62,"line_end":62,"column_start":1,"column_end":68}},{"value":"/ applications, but important such an approach cannot yield a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98526,"byte_end":98589,"line_start":63,"line_end":63,"column_start":1,"column_end":64}},{"value":"/ verifiable shuffle.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98590,"byte_end":98613,"line_start":64,"line_end":64,"column_start":1,"column_end":24}},{"value":"/ TODO: Explain better!","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98614,"byte_end":98639,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98640,"byte_end":98643,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ We also implement verifier side batching analogous to batched","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98644,"byte_end":98709,"line_start":67,"line_end":67,"column_start":1,"column_end":66}},{"value":"/ verification of Schnorr signatures, but note this requires an","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98710,"byte_end":98775,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/ extra curve point, which enlarges the VRF proofs from 64 bytes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98776,"byte_end":98842,"line_start":69,"line_end":69,"column_start":1,"column_end":67}},{"value":"/ to 96 bytes.  We provide `shorten_*` methods to produce the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98843,"byte_end":98906,"line_start":70,"line_end":70,"column_start":1,"column_end":64}},{"value":"/ non-batchable proof from the batchable proof because doing so","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98907,"byte_end":98972,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"/ is an inherent part of the batch verification anyways.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":98973,"byte_end":99031,"line_start":72,"line_end":72,"column_start":1,"column_end":59}},{"value":"/ TODO: Security arguments!","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":99032,"byte_end":99061,"line_start":73,"line_end":73,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":99062,"byte_end":99065,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ We do not provide DLEQ proofs optimized for the same signer using","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":99066,"byte_end":99135,"line_start":75,"line_end":75,"column_start":1,"column_end":70}},{"value":"/ multiple public keys because such constructions sound more the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":99136,"byte_end":99202,"line_start":76,"line_end":76,"column_start":1,"column_end":67}},{"value":"/ domain of zero-knowledge proof libraries.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":99203,"byte_end":99248,"line_start":77,"line_end":77,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":362},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100879,"byte_end":100889,"line_start":119,"line_end":119,"column_start":11,"column_end":21},"name":"KUSAMA_VRF","qualname":"::vrf::KUSAMA_VRF","value":"bool","parent":null,"children":[],"decl_id":null,"docs":" Value for `kusama` paramater to `*dleq*` methods that yields the VRF for kusama.\n \n Greg Maxwell argue that nonce generation should hash all parameters\n that challenge generation does in https://moderncrypto.org/mail-archive/curves/2020/001012.html\n We support this position in prionciple as a defense in depth against\n attacks that cause missalignment between the public and secret keys.","sig":null,"attributes":[{"value":"/ Value for `kusama` paramater to `*dleq*` methods that yields the VRF for kusama.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":99855,"byte_end":99939,"line_start":101,"line_end":101,"column_start":1,"column_end":85}},{"value":"/ ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":99940,"byte_end":99944,"line_start":102,"line_end":102,"column_start":1,"column_end":5}},{"value":"/ Greg Maxwell argue that nonce generation should hash all parameters","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":99945,"byte_end":100016,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"/ that challenge generation does in https://moderncrypto.org/mail-archive/curves/2020/001012.html","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100017,"byte_end":100116,"line_start":104,"line_end":104,"column_start":1,"column_end":100}},{"value":"/ We support this position in prionciple as a defense in depth against","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100117,"byte_end":100189,"line_start":105,"line_end":105,"column_start":1,"column_end":73}},{"value":"/ attacks that cause missalignment between the public and secret keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100190,"byte_end":100262,"line_start":106,"line_end":106,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100263,"byte_end":100266,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ We did this for signatures but not for the VRF deployed in Kusama.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100267,"byte_end":100337,"line_start":108,"line_end":108,"column_start":1,"column_end":71}},{"value":"/ We cannot justify add this defense to the deployed VRF because","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100338,"byte_end":100404,"line_start":109,"line_end":109,"column_start":1,"column_end":67}},{"value":"/ several layers already address this attack, including merlin's","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100405,"byte_end":100471,"line_start":110,"line_end":110,"column_start":1,"column_end":67}},{"value":"/ witnesses and that signers normally only sign VRF outputs once.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100472,"byte_end":100539,"line_start":111,"line_end":111,"column_start":1,"column_end":68}},{"value":"/ ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100540,"byte_end":100544,"line_start":112,"line_end":112,"column_start":1,"column_end":5}},{"value":"/ We suggest using Greg Maxwell's trick if you use a stand alone DLEQ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100545,"byte_end":100616,"line_start":113,"line_end":113,"column_start":1,"column_end":72}},{"value":"/ proof though, meaning call `*dleq*` methods with `kusama: false`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100617,"byte_end":100686,"line_start":114,"line_end":114,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100687,"byte_end":100690,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ see: https://github.com/w3f/schnorrkel/issues/53","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100691,"byte_end":100743,"line_start":116,"line_end":116,"column_start":1,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":363},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100942,"byte_end":100959,"line_start":122,"line_end":122,"column_start":11,"column_end":28},"name":"VRF_OUTPUT_LENGTH","qualname":"::vrf::VRF_OUTPUT_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Length of VRF output.\n","sig":null,"attributes":[{"value":"/ Length of VRF output.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100906,"byte_end":100931,"line_start":121,"line_end":121,"column_start":1,"column_end":26}}]},{"kind":"Const","id":{"krate":0,"index":364},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101063,"byte_end":101079,"line_start":125,"line_end":125,"column_start":11,"column_end":27},"name":"VRF_PROOF_LENGTH","qualname":"::vrf::VRF_PROOF_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Length of the short VRF proof which lacks support for batch verification.\n","sig":null,"attributes":[{"value":"/ Length of the short VRF proof which lacks support for batch verification.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":100975,"byte_end":101052,"line_start":124,"line_end":124,"column_start":1,"column_end":78}}]},{"kind":"Const","id":{"krate":0,"index":365},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101175,"byte_end":101201,"line_start":128,"line_end":128,"column_start":11,"column_end":37},"name":"VRF_PROOF_BATCHABLE_LENGTH","qualname":"::vrf::VRF_PROOF_BATCHABLE_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Length of the longer VRF proof which supports batch verification.\n","sig":null,"attributes":[{"value":"/ Length of the longer VRF proof which supports batch verification.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101095,"byte_end":101164,"line_start":127,"line_end":127,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":366},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101468,"byte_end":101488,"line_start":135,"line_end":135,"column_start":11,"column_end":31},"name":"VRFSigningTranscript","qualname":"::vrf::VRFSigningTranscript","value":"VRFSigningTranscript","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368}],"decl_id":null,"docs":" `SigningTranscript` helper trait that manages VRF output malleability.","sig":null,"attributes":[{"value":"/ `SigningTranscript` helper trait that manages VRF output malleability.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101217,"byte_end":101291,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101292,"byte_end":101295,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ In short, `VRFSigningTranscript` acts like a default argument","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101296,"byte_end":101361,"line_start":132,"line_end":132,"column_start":1,"column_end":66}},{"value":"/ `malleabe : bool = false` for every mathod that uses it instead of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101362,"byte_end":101432,"line_start":133,"line_end":133,"column_start":1,"column_end":71}},{"value":"/ `SigningTranscript`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101433,"byte_end":101457,"line_start":134,"line_end":134,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":367},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101544,"byte_end":101545,"line_start":137,"line_end":137,"column_start":10,"column_end":11},"name":"T","qualname":"::vrf::VRFSigningTranscript::T","value":"type T: SigningTranscript;","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Real underlying `SigningTranscript`\n","sig":null,"attributes":[{"value":"/ Real underlying `SigningTranscript`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101495,"byte_end":101534,"line_start":136,"line_end":136,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101709,"byte_end":101747,"line_start":140,"line_end":140,"column_start":8,"column_end":46},"name":"transcript_with_malleability_addressed","qualname":"::vrf::VRFSigningTranscript::transcript_with_malleability_addressed","value":"pub fn transcript_with_malleability_addressed(Self, &PublicKey) -> Self::T","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Return the underlying `SigningTranscript` after addressing\n VRF output malleability, usually by making it non-malleable,\n","sig":null,"attributes":[{"value":"/ Return the underlying `SigningTranscript` after addressing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101570,"byte_end":101632,"line_start":138,"line_end":138,"column_start":5,"column_end":67}},{"value":"/ VRF output malleability, usually by making it non-malleable,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101637,"byte_end":101701,"line_start":139,"line_end":139,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1032},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102766,"byte_end":102775,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"Malleable","qualname":"::vrf::Malleable","value":"","parent":null,"children":[],"decl_id":null,"docs":" VRF SigningTranscript for malleable VRF ouputs.","sig":null,"attributes":[{"value":"/ VRF SigningTranscript for malleable VRF ouputs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102140,"byte_end":102191,"line_start":153,"line_end":153,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102192,"byte_end":102195,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ *Warning*  We caution that malleable VRF outputs are insecure when","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102196,"byte_end":102266,"line_start":155,"line_end":155,"column_start":1,"column_end":71}},{"value":"/ used in conjunction with HDKD, as provided in dervie.rs. ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102267,"byte_end":102328,"line_start":156,"line_end":156,"column_start":1,"column_end":62}},{"value":"/ Attackers could translate malleable VRF outputs from one soft subkey ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102329,"byte_end":102402,"line_start":157,"line_end":157,"column_start":1,"column_end":74}},{"value":"/ to another soft subkey, gaining early knowledge of the VRF output.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102403,"byte_end":102473,"line_start":158,"line_end":158,"column_start":1,"column_end":71}},{"value":"/ We think most VRF applicaitons for which HDKH soudns suitable","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102474,"byte_end":102539,"line_start":159,"line_end":159,"column_start":1,"column_end":66}},{"value":"/ benefit from using implicit certificates insead of HDKD anyways,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102540,"byte_end":102608,"line_start":160,"line_end":160,"column_start":1,"column_end":69}},{"value":"/ which should also be secure in combination with HDKD.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102609,"byte_end":102666,"line_start":161,"line_end":161,"column_start":1,"column_end":58}},{"value":"/ We always use non-malleable VRF inputs in our convenience methods.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102667,"byte_end":102737,"line_start":162,"line_end":162,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1035},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102798,"byte_end":102803,"line_start":164,"line_end":164,"column_start":44,"column_end":49},"name":"0","qualname":"::vrf::Malleable::0","value":"T","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":377},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103642,"byte_end":103660,"line_start":182,"line_end":182,"column_start":8,"column_end":26},"name":"vrf_malleable_hash","qualname":"::vrf::vrf_malleable_hash","value":"pub fn vrf_malleable_hash<T: SigningTranscript>(T) -> RistrettoBoth","parent":null,"children":[],"decl_id":null,"docs":" Create a malleable VRF input point by hashing a transcript to a point.","sig":null,"attributes":[{"value":"/ Create a malleable VRF input point by hashing a transcript to a point.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103015,"byte_end":103089,"line_start":172,"line_end":172,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103090,"byte_end":103093,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ *Warning*  We caution that malleable VRF inputs are insecure when","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103094,"byte_end":103163,"line_start":174,"line_end":174,"column_start":1,"column_end":70}},{"value":"/ used in conjunction with HDKD, as provided in dervie.rs. ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103164,"byte_end":103225,"line_start":175,"line_end":175,"column_start":1,"column_end":62}},{"value":"/ Attackers could translate malleable VRF outputs from one soft subkey ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103226,"byte_end":103299,"line_start":176,"line_end":176,"column_start":1,"column_end":74}},{"value":"/ to another soft subkey, gaining early knowledge of the VRF output.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103300,"byte_end":103370,"line_start":177,"line_end":177,"column_start":1,"column_end":71}},{"value":"/ We think most VRF applicaitons for which HDKH soudns suitable","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103371,"byte_end":103436,"line_start":178,"line_end":178,"column_start":1,"column_end":66}},{"value":"/ benefit from using implicit certificates insead of HDKD anyways,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103437,"byte_end":103505,"line_start":179,"line_end":179,"column_start":1,"column_end":69}},{"value":"/ which should also be secure in combination with HDKH.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103506,"byte_end":103563,"line_start":180,"line_end":180,"column_start":1,"column_end":58}},{"value":"/ We always use non-malleable VRF inputs in our convenience methods.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103564,"byte_end":103634,"line_start":181,"line_end":181,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103966,"byte_end":103974,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"vrf_hash","qualname":"<PublicKey>::vrf_hash","value":"pub fn vrf_hash<T>(&Self, T) -> RistrettoBoth where T: VRFSigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Create a non-malleable VRF input point by hashing a transcript to a point.\n","sig":null,"attributes":[{"value":"/ Create a non-malleable VRF input point by hashing a transcript to a point.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103876,"byte_end":103954,"line_start":189,"line_end":189,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104216,"byte_end":104231,"line_start":196,"line_end":196,"column_start":12,"column_end":27},"name":"vrf_attach_hash","qualname":"<PublicKey>::vrf_attach_hash","value":"pub fn vrf_attach_hash<T>(&Self, VRFOutput, T) -> SignatureResult<VRFInOut>\nwhere T: VRFSigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Pair a non-malleable VRF output with the hash of the given transcript.\n","sig":null,"attributes":[{"value":"/ Pair a non-malleable VRF output with the hash of the given transcript.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104130,"byte_end":104204,"line_start":195,"line_end":195,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1039},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105066,"byte_end":105075,"line_start":215,"line_end":215,"column_start":12,"column_end":21},"name":"VRFOutput","qualname":"::vrf::VRFOutput","value":"","parent":null,"children":[],"decl_id":null,"docs":" VRF output, possibly unverified.","sig":null,"attributes":[{"value":"/ VRF output, possibly unverified.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104382,"byte_end":104418,"line_start":202,"line_end":202,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104419,"byte_end":104422,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ Internally, we keep both `RistrettoPoint` and `CompressedRistretto`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104423,"byte_end":104494,"line_start":204,"line_end":204,"column_start":1,"column_end":72}},{"value":"/ forms using `RistrettoBoth`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104495,"byte_end":104527,"line_start":205,"line_end":205,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104528,"byte_end":104531,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ We'd actually love to statically distinguish here between inputs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104532,"byte_end":104600,"line_start":207,"line_end":207,"column_start":1,"column_end":69}},{"value":"/ and outputs, as well as whether outputs were verified, but doing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104601,"byte_end":104669,"line_start":208,"line_end":208,"column_start":1,"column_end":69}},{"value":"/ so would disrupt our general purpose DLEQ proof mechanism, so","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104670,"byte_end":104735,"line_start":209,"line_end":209,"column_start":1,"column_end":66}},{"value":"/ users must be responcible for this themselves.  We do however","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104736,"byte_end":104801,"line_start":210,"line_end":210,"column_start":1,"column_end":66}},{"value":"/ consume by value in actual output methods, and do not implement","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104802,"byte_end":104869,"line_start":211,"line_end":211,"column_start":1,"column_end":68}},{"value":"/ `Copy`, as a reminder that VRF outputs should only be used once","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104870,"byte_end":104937,"line_start":212,"line_end":212,"column_start":1,"column_end":68}},{"value":"/ and should be checked before usage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":104938,"byte_end":104977,"line_start":213,"line_end":213,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1041},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105076,"byte_end":105103,"line_start":215,"line_end":215,"column_start":22,"column_end":49},"name":"0","qualname":"::vrf::VRFOutput::0","value":"[u8; _]","parent":{"krate":0,"index":1039},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105331,"byte_end":105339,"line_start":223,"line_end":223,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<VRFOutput>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert this VRF output to a byte array.\n","sig":null,"attributes":[{"value":"/ Convert this VRF output to a byte array.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105261,"byte_end":105305,"line_start":221,"line_end":221,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105310,"byte_end":105319,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105469,"byte_end":105477,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<VRFOutput>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" View this secret key as a byte array.\n","sig":null,"attributes":[{"value":"/ View this secret key as a byte array.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105402,"byte_end":105443,"line_start":227,"line_end":227,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105448,"byte_end":105457,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105618,"byte_end":105628,"line_start":235,"line_end":235,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<VRFOutput>::from_bytes","value":"pub fn from_bytes(&[u8]) -> SignatureResult<VRFOutput>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `VRFOutput` from a slice of bytes.\n","sig":null,"attributes":[{"value":"/ Construct a `VRFOutput` from a slice of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105542,"byte_end":105592,"line_start":233,"line_end":233,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105597,"byte_end":105606,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106148,"byte_end":106165,"line_start":249,"line_end":249,"column_start":12,"column_end":29},"name":"attach_input_hash","qualname":"<VRFOutput>::attach_input_hash","value":"pub fn attach_input_hash<T>(&Self, &PublicKey, T) -> SignatureResult<VRFInOut>\nwhere T: VRFSigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Pair a non-malleable VRF output with the hash of the given transcript.\n","sig":null,"attributes":[{"value":"/ Pair a non-malleable VRF output with the hash of the given transcript.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106062,"byte_end":106136,"line_start":248,"line_end":248,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1085},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106832,"byte_end":106840,"line_start":265,"line_end":265,"column_start":12,"column_end":20},"name":"VRFInOut","qualname":"::vrf::VRFInOut","value":"VRFInOut { input, output }","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1087}],"decl_id":null,"docs":" VRF input and output paired together, possibly unverified.","sig":null,"attributes":[{"value":"/ VRF input and output paired together, possibly unverified.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106587,"byte_end":106649,"line_start":260,"line_end":260,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106650,"byte_end":106653,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ Internally, we keep both `RistrettoPoint` and `CompressedRistretto`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106654,"byte_end":106725,"line_start":262,"line_end":262,"column_start":1,"column_end":72}},{"value":"/ forms using `RistrettoBoth`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106726,"byte_end":106758,"line_start":263,"line_end":263,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1086},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106875,"byte_end":106880,"line_start":267,"line_end":267,"column_start":9,"column_end":14},"name":"input","qualname":"::vrf::VRFInOut::input","value":"points::RistrettoBoth","parent":{"krate":0,"index":1085},"children":[],"decl_id":null,"docs":" VRF input point\n","sig":null,"attributes":[{"value":"/ VRF input point","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106847,"byte_end":106866,"line_start":266,"line_end":266,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":1087},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106930,"byte_end":106936,"line_start":269,"line_end":269,"column_start":9,"column_end":15},"name":"output","qualname":"::vrf::VRFInOut::output","value":"points::RistrettoBoth","parent":{"krate":0,"index":1085},"children":[],"decl_id":null,"docs":" VRF output point\n","sig":null,"attributes":[{"value":"/ VRF output point","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106901,"byte_end":106921,"line_start":268,"line_end":268,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107097,"byte_end":107118,"line_start":275,"line_end":275,"column_start":12,"column_end":33},"name":"vrf_create_from_point","qualname":"<SecretKey>::vrf_create_from_point","value":"pub fn vrf_create_from_point(&Self, RistrettoBoth) -> VRFInOut","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the VRF-like multiplication on an uncompressed point,\n probably not useful in this form.\n","sig":null,"attributes":[{"value":"/ Evaluate the VRF-like multiplication on an uncompressed point,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106977,"byte_end":107043,"line_start":273,"line_end":273,"column_start":5,"column_end":71}},{"value":"/ probably not useful in this form.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107048,"byte_end":107085,"line_start":274,"line_end":274,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107628,"byte_end":107660,"line_start":286,"line_end":286,"column_start":12,"column_end":44},"name":"vrf_create_from_compressed_point","qualname":"<SecretKey>::vrf_create_from_compressed_point","value":"pub fn vrf_create_from_compressed_point(&Self, &VRFOutput)\n-> SignatureResult<VRFInOut>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the VRF-like multiplication on a compressed point,\n useful for proving key exchanges, OPRFs, or sequential VRFs.","sig":null,"attributes":[{"value":"/ Evaluate the VRF-like multiplication on a compressed point,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107286,"byte_end":107349,"line_start":280,"line_end":280,"column_start":5,"column_end":68}},{"value":"/ useful for proving key exchanges, OPRFs, or sequential VRFs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107354,"byte_end":107418,"line_start":281,"line_end":281,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107423,"byte_end":107426,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ We caution that such protocols could provide signing oracles","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107431,"byte_end":107495,"line_start":283,"line_end":283,"column_start":5,"column_end":69}},{"value":"/ and note that `vrf_create_from_point` cannot check for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107500,"byte_end":107558,"line_start":284,"line_end":284,"column_start":5,"column_end":63}},{"value":"/ problematic inputs like `attach_input_hash` does.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107563,"byte_end":107616,"line_start":285,"line_end":285,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107933,"byte_end":107948,"line_start":294,"line_end":294,"column_start":12,"column_end":27},"name":"vrf_create_hash","qualname":"<Keypair>::vrf_create_hash","value":"pub fn vrf_create_hash<T: VRFSigningTranscript>(&Self, T) -> VRFInOut","parent":null,"children":[],"decl_id":null,"docs":" Evaluate the VRF on the given transcript.\n","sig":null,"attributes":[{"value":"/ Evaluate the VRF on the given transcript.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107876,"byte_end":107921,"line_start":293,"line_end":293,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108154,"byte_end":108169,"line_start":301,"line_end":301,"column_start":12,"column_end":27},"name":"as_output_bytes","qualname":"<VRFInOut>::as_output_bytes","value":"pub fn as_output_bytes(&Self) -> &[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" VRF output point bytes for serialization.\n","sig":null,"attributes":[{"value":"/ VRF output point bytes for serialization.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108097,"byte_end":108142,"line_start":300,"line_end":300,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108307,"byte_end":108316,"line_start":306,"line_end":306,"column_start":12,"column_end":21},"name":"to_output","qualname":"<VRFInOut>::to_output","value":"pub fn to_output(&Self) -> VRFOutput","parent":null,"children":[],"decl_id":null,"docs":" VRF output point bytes for serialization.\n","sig":null,"attributes":[{"value":"/ VRF output point bytes for serialization.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108250,"byte_end":108295,"line_start":305,"line_end":305,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108955,"byte_end":108961,"line_start":319,"line_end":319,"column_start":12,"column_end":18},"name":"commit","qualname":"<VRFInOut>::commit","value":"pub fn commit<T: SigningTranscript>(&Self, &mut T)","parent":null,"children":[],"decl_id":null,"docs":" Commit VRF input and output to a transcript.","sig":null,"attributes":[{"value":"/ Commit VRF input and output to a transcript.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108408,"byte_end":108456,"line_start":310,"line_end":310,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108461,"byte_end":108464,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ We commit both the input and output to provide the 2Hash-DH","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108469,"byte_end":108532,"line_start":312,"line_end":312,"column_start":5,"column_end":68}},{"value":"/ construction from Theorem 2 on page 32 in appendix C of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108537,"byte_end":108596,"line_start":313,"line_end":313,"column_start":5,"column_end":64}},{"value":"/ [\"Ouroboros Praos: An adaptively-secure, semi-synchronous proof-of-stake blockchain\"](https://eprint.iacr.org/2017/573.pdf)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108601,"byte_end":108728,"line_start":314,"line_end":314,"column_start":5,"column_end":132}},{"value":"/ by Bernardo David, Peter Gazi, Aggelos Kiayias, and Alexander Russell.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108733,"byte_end":108807,"line_start":315,"line_end":315,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108812,"byte_end":108815,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ We use this construction both for the VRF usage methods","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108820,"byte_end":108879,"line_start":317,"line_end":317,"column_start":5,"column_end":64}},{"value":"/ `VRFInOut::make_*` as well as for signer side batching.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108884,"byte_end":108943,"line_start":318,"line_end":318,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":109729,"byte_end":109739,"line_start":334,"line_end":334,"column_start":12,"column_end":22},"name":"make_bytes","qualname":"<VRFInOut>::make_bytes","value":"pub fn make_bytes<B: Default + AsMut<[u8]>>(&Self, &[u8]) -> B","parent":null,"children":[],"decl_id":null,"docs":" Raw bytes output from the VRF.","sig":null,"attributes":[{"value":"/ Raw bytes output from the VRF.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":109143,"byte_end":109177,"line_start":324,"line_end":324,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":109182,"byte_end":109185,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ If you are not the signer then you must verify the VRF before calling this method.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":109190,"byte_end":109276,"line_start":326,"line_end":326,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":109281,"byte_end":109284,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ If called with distinct contexts then outputs should be independent.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":109289,"byte_end":109361,"line_start":328,"line_end":328,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":109366,"byte_end":109369,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ We incorporate both the input and output to provide the 2Hash-DH","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":109374,"byte_end":109442,"line_start":330,"line_end":330,"column_start":5,"column_end":73}},{"value":"/ construction from Theorem 2 on page 32 in appendex C of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":109447,"byte_end":109506,"line_start":331,"line_end":331,"column_start":5,"column_end":64}},{"value":"/ [\"Ouroboros Praos: An adaptively-secure, semi-synchronous proof-of-stake blockchain\"](https://eprint.iacr.org/2017/573.pdf)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":109511,"byte_end":109638,"line_start":332,"line_end":332,"column_start":5,"column_end":132}},{"value":"/ by Bernardo David, Peter Gazi, Aggelos Kiayias, and Alexander Russell.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":109643,"byte_end":109717,"line_start":333,"line_end":333,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":110284,"byte_end":110292,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"make_rng","qualname":"<VRFInOut>::make_rng","value":"pub fn make_rng<R: ::rand_core::SeedableRng>(&Self, &[u8]) -> R","parent":null,"children":[],"decl_id":null,"docs":" VRF output converted into any `SeedableRng`.","sig":null,"attributes":[{"value":"/ VRF output converted into any `SeedableRng`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":110023,"byte_end":110071,"line_start":343,"line_end":343,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":110076,"byte_end":110079,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ If you are not the signer then you must verify the VRF before calling this method.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":110084,"byte_end":110170,"line_start":345,"line_end":345,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":110175,"byte_end":110178,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ We expect most users would prefer the less generic `VRFInOut::make_chacharng` method.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":110183,"byte_end":110272,"line_start":347,"line_end":347,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111692,"byte_end":111707,"line_start":377,"line_end":377,"column_start":12,"column_end":27},"name":"make_merlin_rng","qualname":"<VRFInOut>::make_merlin_rng","value":"pub fn make_merlin_rng(&Self, &[u8]) -> merlin::TranscriptRng","parent":null,"children":[],"decl_id":null,"docs":" VRF output converted into Merlin's Keccek based `Rng`.","sig":null,"attributes":[{"value":"/ VRF output converted into Merlin's Keccek based `Rng`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111273,"byte_end":111331,"line_start":368,"line_end":368,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111336,"byte_end":111339,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ If you are not the signer then you must verify the VRF before calling this method.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111344,"byte_end":111430,"line_start":370,"line_end":370,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111435,"byte_end":111438,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ We think this might be marginally slower than `ChaChaRng`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111443,"byte_end":111504,"line_start":372,"line_end":372,"column_start":5,"column_end":66}},{"value":"/ when considerable output is required, but it should reduce","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111509,"byte_end":111571,"line_start":373,"line_end":373,"column_start":5,"column_end":67}},{"value":"/ the final linked binary size slightly, and improves domain","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111576,"byte_end":111638,"line_start":374,"line_end":374,"column_start":5,"column_end":67}},{"value":"/ separation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111643,"byte_end":111658,"line_start":375,"line_end":375,"column_start":5,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111663,"byte_end":111680,"line_start":376,"line_end":376,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113617,"byte_end":113627,"line_start":424,"line_end":424,"column_start":12,"column_end":22},"name":"vrfs_merge","qualname":"<PublicKey>::vrfs_merge","value":"pub fn vrfs_merge<B>(&Self, &[B], bool) -> VRFInOut where B: Borrow<VRFInOut>","parent":null,"children":[],"decl_id":null,"docs":" Merge VRF input and output pairs from the same signer,\n using variable time arithmetic","sig":null,"attributes":[{"value":"/ Merge VRF input and output pairs from the same signer,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":112758,"byte_end":112816,"line_start":407,"line_end":407,"column_start":5,"column_end":63}},{"value":"/ using variable time arithmetic","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":112821,"byte_end":112855,"line_start":408,"line_end":408,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":112860,"byte_end":112863,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ You should use `vartime=true` when verifying VRF proofs batched","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":112868,"byte_end":112935,"line_start":410,"line_end":410,"column_start":5,"column_end":72}},{"value":"/ by the singer.  You could usually use `vartime=true` even when","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":112940,"byte_end":113006,"line_start":411,"line_end":411,"column_start":5,"column_end":71}},{"value":"/ producing proofs, provided the set being signed is not secret.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113011,"byte_end":113077,"line_start":412,"line_end":412,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113082,"byte_end":113085,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ There is sadly no constant time 128 bit multiplication in dalek,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113090,"byte_end":113158,"line_start":414,"line_end":414,"column_start":5,"column_end":73}},{"value":"/ making `vartime=false` somewhat slower than necessary.  It should","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113163,"byte_end":113232,"line_start":415,"line_end":415,"column_start":5,"column_end":74}},{"value":"/ only impact signers in niche scenarios however, so the slower","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113237,"byte_end":113302,"line_start":416,"line_end":416,"column_start":5,"column_end":70}},{"value":"/ variant should normally be unnecessary.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113307,"byte_end":113350,"line_start":417,"line_end":417,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113355,"byte_end":113358,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ Panics if given an empty points list.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113363,"byte_end":113404,"line_start":419,"line_end":419,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113409,"byte_end":113412,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ TODO: Add constant time 128 bit batched multiplication to dalek.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113417,"byte_end":113485,"line_start":421,"line_end":421,"column_start":5,"column_end":73}},{"value":"/ TODO: Is rand_chacha's `gen::<u128>()` standardizable enough to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113490,"byte_end":113557,"line_start":422,"line_end":422,"column_start":5,"column_end":72}},{"value":"/ prefer it over merlin for the output?  ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":113562,"byte_end":113605,"line_start":423,"line_end":423,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1114},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":115730,"byte_end":115738,"line_start":478,"line_end":478,"column_start":12,"column_end":20},"name":"VRFProof","qualname":"::vrf::VRFProof","value":"VRFProof {  }","parent":null,"children":[{"krate":0,"index":1115},{"krate":0,"index":1116}],"decl_id":null,"docs":" Short proof of correctness for associated VRF output,\n for which no batched verification works.\n","sig":null,"attributes":[{"value":"/ Short proof of correctness for associated VRF output,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":115552,"byte_end":115609,"line_start":475,"line_end":475,"column_start":1,"column_end":58}},{"value":"/ for which no batched verification works.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":115610,"byte_end":115654,"line_start":476,"line_end":476,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":116064,"byte_end":116072,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<VRFProof>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert this `VRFProof` to a byte array.\n","sig":null,"attributes":[{"value":"/ Convert this `VRFProof` to a byte array.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":115994,"byte_end":116038,"line_start":488,"line_end":488,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":116043,"byte_end":116052,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":116380,"byte_end":116390,"line_start":500,"line_end":500,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<VRFProof>::from_bytes","value":"pub fn from_bytes(&[u8]) -> SignatureResult<VRFProof>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `VRFProof` from a slice of bytes.\n","sig":null,"attributes":[{"value":"/ Construct a `VRFProof` from a slice of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":116305,"byte_end":116354,"line_start":498,"line_end":498,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":116359,"byte_end":116368,"line_start":499,"line_end":499,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1143},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":117300,"byte_end":117317,"line_start":526,"line_end":526,"column_start":12,"column_end":29},"name":"VRFProofBatchable","qualname":"::vrf::VRFProofBatchable","value":"VRFProofBatchable {  }","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146}],"decl_id":null,"docs":" Longer proof of correctness for associated VRF output,\n which supports batching.\n","sig":null,"attributes":[{"value":"/ Longer proof of correctness for associated VRF output,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":117112,"byte_end":117170,"line_start":522,"line_end":522,"column_start":1,"column_end":59}},{"value":"/ which supports batching.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":117171,"byte_end":117199,"line_start":523,"line_end":523,"column_start":1,"column_end":29}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":117264,"byte_end":117288,"line_start":525,"line_end":525,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":117917,"byte_end":117925,"line_start":541,"line_end":541,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<VRFProofBatchable>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert this `VRFProofBatchable` to a byte array.\n","sig":null,"attributes":[{"value":"/ Convert this `VRFProofBatchable` to a byte array.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":117809,"byte_end":117862,"line_start":538,"line_end":538,"column_start":5,"column_end":58}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":117867,"byte_end":117891,"line_start":539,"line_end":539,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":117896,"byte_end":117905,"line_start":540,"line_end":540,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":118358,"byte_end":118368,"line_start":553,"line_end":553,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<VRFProofBatchable>::from_bytes","value":"pub fn from_bytes(&[u8]) -> SignatureResult<VRFProofBatchable>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `VRFProofBatchable` from a slice of bytes.\n","sig":null,"attributes":[{"value":"/ Construct a `VRFProofBatchable` from a slice of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":118245,"byte_end":118303,"line_start":550,"line_end":550,"column_start":5,"column_end":63}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":118308,"byte_end":118332,"line_start":551,"line_end":551,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":118337,"byte_end":118346,"line_start":552,"line_end":552,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":119289,"byte_end":119301,"line_start":575,"line_end":575,"column_start":12,"column_end":24},"name":"shorten_dleq","qualname":"<VRFProofBatchable>::shorten_dleq","value":"pub fn shorten_dleq<T>(&Self, T, &PublicKey, &VRFInOut, bool) -> VRFProof\nwhere T: SigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Return the shortened `VRFProof` for retransmitting in not batched situations\n","sig":null,"attributes":[{"value":"/ Return the shortened `VRFProof` for retransmitting in not batched situations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":119168,"byte_end":119248,"line_start":573,"line_end":573,"column_start":5,"column_end":85}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":119253,"byte_end":119277,"line_start":574,"line_end":574,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120338,"byte_end":120349,"line_start":600,"line_end":600,"column_start":12,"column_end":23},"name":"shorten_vrf","qualname":"<VRFProofBatchable>::shorten_vrf","value":"pub fn shorten_vrf<T>(&Self, &PublicKey, T, &VRFOutput)\n-> SignatureResult<VRFProof> where T: VRFSigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Return the shortened `VRFProof` for retransmitting in non-batched situations","sig":null,"attributes":[{"value":"/ Return the shortened `VRFProof` for retransmitting in non-batched situations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120070,"byte_end":120150,"line_start":595,"line_end":595,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120155,"byte_end":120158,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ TODO: Avoid the error path here by avoiding decompressing,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120163,"byte_end":120225,"line_start":597,"line_end":597,"column_start":5,"column_end":67}},{"value":"/ either locally here, or more likely by decompressing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120230,"byte_end":120286,"line_start":598,"line_end":598,"column_start":5,"column_end":61}},{"value":"/ `VRFOutput` in deserialization.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120291,"byte_end":120326,"line_start":599,"line_end":599,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":121155,"byte_end":121166,"line_start":620,"line_end":620,"column_start":12,"column_end":23},"name":"dleq_proove","qualname":"<Keypair>::dleq_proove","value":"pub fn dleq_proove<T>(&Self, T, &VRFInOut, bool)\n-> (VRFProof, VRFProofBatchable) where T: SigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Produce DLEQ proof.","sig":null,"attributes":[{"value":"/ Produce DLEQ proof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120802,"byte_end":120825,"line_start":613,"line_end":613,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120830,"byte_end":120833,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ We assume the `VRFInOut` paramater has been computed correctly","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120838,"byte_end":120904,"line_start":615,"line_end":615,"column_start":5,"column_end":71}},{"value":"/ by multiplying every input point by `self.secret`, like by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120909,"byte_end":120971,"line_start":616,"line_end":616,"column_start":5,"column_end":67}},{"value":"/ using one of the `vrf_create_*` methods on `SecretKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120976,"byte_end":121035,"line_start":617,"line_end":617,"column_start":5,"column_end":64}},{"value":"/ If so, we produce a proof that this multiplication was done correctly.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":121040,"byte_end":121114,"line_start":618,"line_end":618,"column_start":5,"column_end":79}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":121119,"byte_end":121143,"line_start":619,"line_end":619,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":122849,"byte_end":122857,"line_start":657,"line_end":657,"column_start":12,"column_end":20},"name":"vrf_sign","qualname":"<Keypair>::vrf_sign","value":"pub fn vrf_sign<T>(&Self, T) -> (VRFInOut, VRFProof, VRFProofBatchable) where\nT: VRFSigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Run VRF on one single input transcript, producing the outpus\n and correspodning short proof.","sig":null,"attributes":[{"value":"/ Run VRF on one single input transcript, producing the outpus","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":122397,"byte_end":122461,"line_start":649,"line_end":649,"column_start":5,"column_end":69}},{"value":"/ and correspodning short proof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":122466,"byte_end":122500,"line_start":650,"line_end":650,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":122505,"byte_end":122508,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ There are schemes like Ouroboros Praos in which nodes evaluate","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":122513,"byte_end":122579,"line_start":652,"line_end":652,"column_start":5,"column_end":71}},{"value":"/ VRFs repeatedly until they win some contest.  In these case,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":122584,"byte_end":122648,"line_start":653,"line_end":653,"column_start":5,"column_end":69}},{"value":"/ you should probably use vrf_sign_n_check to gain access to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":122653,"byte_end":122719,"line_start":654,"line_end":654,"column_start":5,"column_end":71}},{"value":"/ `VRFInOut` from `vrf_create_hash` first, and then avoid computing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":122724,"byte_end":122793,"line_start":655,"line_end":655,"column_start":5,"column_end":74}},{"value":"/ the proof whenever you do not win. ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":122798,"byte_end":122837,"line_start":656,"line_end":656,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123239,"byte_end":123253,"line_start":666,"line_end":666,"column_start":12,"column_end":26},"name":"vrf_sign_extra","qualname":"<Keypair>::vrf_sign_extra","value":"pub fn vrf_sign_extra<T, E>(&Self, T, E)\n-> (VRFInOut, VRFProof, VRFProofBatchable) where T: VRFSigningTranscript,\nE: SigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Run VRF on one single input transcript and an extra message transcript, \n producing the outpus and correspodning short proof.\n","sig":null,"attributes":[{"value":"/ Run VRF on one single input transcript and an extra message transcript, ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123091,"byte_end":123167,"line_start":664,"line_end":664,"column_start":5,"column_end":81}},{"value":"/ producing the outpus and correspodning short proof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123172,"byte_end":123227,"line_start":665,"line_end":665,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123968,"byte_end":123988,"line_start":684,"line_end":684,"column_start":12,"column_end":32},"name":"vrf_sign_after_check","qualname":"<Keypair>::vrf_sign_after_check","value":"pub fn vrf_sign_after_check<T, F>(&Self, T, F)\n-> Option<(VRFInOut, VRFProof, VRFProofBatchable)> where\nT: VRFSigningTranscript, F: FnMut(&VRFInOut) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Run VRF on one single input transcript, producing the outpus\n and correspodning short proof only if the result first passes\n some check.","sig":null,"attributes":[{"value":"/ Run VRF on one single input transcript, producing the outpus","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123567,"byte_end":123631,"line_start":676,"line_end":676,"column_start":5,"column_end":69}},{"value":"/ and correspodning short proof only if the result first passes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123636,"byte_end":123701,"line_start":677,"line_end":677,"column_start":5,"column_end":70}},{"value":"/ some check.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123706,"byte_end":123721,"line_start":678,"line_end":678,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123726,"byte_end":123729,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ There are schemes like Ouroboros Praos in which nodes evaluate","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123734,"byte_end":123800,"line_start":680,"line_end":680,"column_start":5,"column_end":71}},{"value":"/ VRFs repeatedly until they win some contest.  In these case,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123805,"byte_end":123869,"line_start":681,"line_end":681,"column_start":5,"column_end":69}},{"value":"/ you might use this function to short circuit computing the full","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123874,"byte_end":123941,"line_start":682,"line_end":682,"column_start":5,"column_end":72}},{"value":"/ proof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":123946,"byte_end":123956,"line_start":683,"line_end":683,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":124515,"byte_end":124541,"line_start":697,"line_end":697,"column_start":12,"column_end":38},"name":"vrf_sign_extra_after_check","qualname":"<Keypair>::vrf_sign_extra_after_check","value":"pub fn vrf_sign_extra_after_check<T, E, F>(&Self, T, F)\n-> Option<(VRFInOut, VRFProof, VRFProofBatchable)> where\nT: VRFSigningTranscript, E: SigningTranscript, F: FnMut(&VRFInOut) ->\nOption<E>","parent":null,"children":[],"decl_id":null,"docs":" Run VRF on one single input transcript, producing the outpus\n and correspodning short proof only if the result first passes\n some check, which itself returns an extra message transcript.\n","sig":null,"attributes":[{"value":"/ Run VRF on one single input transcript, producing the outpus","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":124299,"byte_end":124363,"line_start":694,"line_end":694,"column_start":5,"column_end":69}},{"value":"/ and correspodning short proof only if the result first passes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":124368,"byte_end":124433,"line_start":695,"line_end":695,"column_start":5,"column_end":70}},{"value":"/ some check, which itself returns an extra message transcript.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":124438,"byte_end":124503,"line_start":696,"line_end":696,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125324,"byte_end":125333,"line_start":716,"line_end":716,"column_start":12,"column_end":21},"name":"vrfs_sign","qualname":"<Keypair>::vrfs_sign","value":"pub fn vrfs_sign<T, I>(&Self, I)\n-> (Box<[VRFInOut]>, VRFProof, VRFProofBatchable) where\nT: VRFSigningTranscript, I: IntoIterator<Item = T>","parent":null,"children":[],"decl_id":null,"docs":" Run VRF on several input transcripts, producing their outputs\n and a common short proof.","sig":null,"attributes":[{"value":"/ Run VRF on several input transcripts, producing their outputs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":124956,"byte_end":125021,"line_start":709,"line_end":709,"column_start":5,"column_end":70}},{"value":"/ and a common short proof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125026,"byte_end":125055,"line_start":710,"line_end":710,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125060,"byte_end":125063,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ We merge the VRF outputs using variable time arithmetic, so","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125068,"byte_end":125131,"line_start":712,"line_end":712,"column_start":5,"column_end":68}},{"value":"/ if even the hash of the message being signed is sensitive then","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125136,"byte_end":125202,"line_start":713,"line_end":713,"column_start":5,"column_end":71}},{"value":"/ you might reimplement some constant time variant.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125207,"byte_end":125260,"line_start":714,"line_end":714,"column_start":5,"column_end":58}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125265,"byte_end":125312,"line_start":715,"line_end":715,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125957,"byte_end":125972,"line_start":731,"line_end":731,"column_start":12,"column_end":27},"name":"vrfs_sign_extra","qualname":"<Keypair>::vrfs_sign_extra","value":"pub fn vrfs_sign_extra<T, E, I>(&Self, I, E)\n-> (Box<[VRFInOut]>, VRFProof, VRFProofBatchable) where\nT: VRFSigningTranscript, E: SigningTranscript, I: IntoIterator<Item = T>","parent":null,"children":[],"decl_id":null,"docs":" Run VRF on several input transcripts and an extra message transcript,\n producing their outputs and a common short proof.","sig":null,"attributes":[{"value":"/ Run VRF on several input transcripts and an extra message transcript,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125557,"byte_end":125630,"line_start":724,"line_end":724,"column_start":5,"column_end":78}},{"value":"/ producing their outputs and a common short proof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125635,"byte_end":125688,"line_start":725,"line_end":725,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125693,"byte_end":125696,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ We merge the VRF outputs using variable time arithmetic, so","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125701,"byte_end":125764,"line_start":727,"line_end":727,"column_start":5,"column_end":68}},{"value":"/ if even the hash of the message being signed is sensitive then","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125769,"byte_end":125835,"line_start":728,"line_end":728,"column_start":5,"column_end":71}},{"value":"/ you might reimplement some constant time variant.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125840,"byte_end":125893,"line_start":729,"line_end":729,"column_start":5,"column_end":58}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":125898,"byte_end":125945,"line_start":730,"line_end":730,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":127060,"byte_end":127071,"line_start":758,"line_end":758,"column_start":12,"column_end":23},"name":"dleq_verify","qualname":"<PublicKey>::dleq_verify","value":"pub fn dleq_verify<T>(&Self, T, &VRFInOut, &VRFProof, bool)\n-> SignatureResult<VRFProofBatchable> where T: SigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Verify DLEQ proof that `p.output = s * p.input` where `self`\n `s` times the basepoint.","sig":null,"attributes":[{"value":"/ Verify DLEQ proof that `p.output = s * p.input` where `self`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126503,"byte_end":126567,"line_start":747,"line_end":747,"column_start":5,"column_end":69}},{"value":"/ `s` times the basepoint.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126572,"byte_end":126600,"line_start":748,"line_end":748,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126605,"byte_end":126608,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ We return an enlarged `VRFProofBatchable` instead of just true,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126613,"byte_end":126680,"line_start":750,"line_end":750,"column_start":5,"column_end":72}},{"value":"/ so that verifiers can forward batchable proofs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126685,"byte_end":126736,"line_start":751,"line_end":751,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126741,"byte_end":126744,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ In principle, one might provide \"blindly verifiable\" VRFs that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126749,"byte_end":126815,"line_start":753,"line_end":753,"column_start":5,"column_end":71}},{"value":"/ avoid requiring `self` here, but naively such constructions","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126820,"byte_end":126883,"line_start":754,"line_end":754,"column_start":5,"column_end":68}},{"value":"/ risk the same flaws as DLEQ based blind signatures, and this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126888,"byte_end":126952,"line_start":755,"line_end":755,"column_start":5,"column_end":69}},{"value":"/ version exploits the slightly faster basepoint arithmetic.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126957,"byte_end":127019,"line_start":756,"line_end":756,"column_start":5,"column_end":67}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":127024,"byte_end":127048,"line_start":757,"line_end":757,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":129103,"byte_end":129113,"line_start":810,"line_end":810,"column_start":12,"column_end":22},"name":"vrf_verify","qualname":"<PublicKey>::vrf_verify","value":"pub fn vrf_verify<T: VRFSigningTranscript>(&Self, T, &VRFOutput, &VRFProof)\n-> SignatureResult<(VRFInOut, VRFProofBatchable)>","parent":null,"children":[],"decl_id":null,"docs":" Verify VRF proof for one single input transcript and corresponding output.\n","sig":null,"attributes":[{"value":"/ Verify VRF proof for one single input transcript and corresponding output.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":129013,"byte_end":129091,"line_start":809,"line_end":809,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":129446,"byte_end":129462,"line_start":820,"line_end":820,"column_start":12,"column_end":28},"name":"vrf_verify_extra","qualname":"<PublicKey>::vrf_verify_extra","value":"pub fn vrf_verify_extra<T, E>(&Self, T, &VRFOutput, &VRFProof, E)\n-> SignatureResult<(VRFInOut, VRFProofBatchable)> where\nT: VRFSigningTranscript, E: SigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Verify VRF proof for one single input transcript and corresponding output.\n","sig":null,"attributes":[{"value":"/ Verify VRF proof for one single input transcript and corresponding output.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":129356,"byte_end":129434,"line_start":819,"line_end":819,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":130024,"byte_end":130035,"line_start":837,"line_end":837,"column_start":12,"column_end":23},"name":"vrfs_verify","qualname":"<PublicKey>::vrfs_verify","value":"pub fn vrfs_verify<T, I, O>(&Self, I, &[O], &VRFProof)\n-> SignatureResult<(Box<[VRFInOut]>, VRFProofBatchable)> where\nT: VRFSigningTranscript, I: IntoIterator<Item = T>, O: Borrow<VRFOutput>","parent":null,"children":[],"decl_id":null,"docs":" Verify a common VRF short proof for several input transcripts and corresponding outputs.\n","sig":null,"attributes":[{"value":"/ Verify a common VRF short proof for several input transcripts and corresponding outputs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":129868,"byte_end":129960,"line_start":835,"line_end":835,"column_start":5,"column_end":97}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":129965,"byte_end":130012,"line_start":836,"line_end":836,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":130552,"byte_end":130569,"line_start":853,"line_end":853,"column_start":12,"column_end":29},"name":"vrfs_verify_extra","qualname":"<PublicKey>::vrfs_verify_extra","value":"pub fn vrfs_verify_extra<T, E, I, O>(&Self, I, &[O], &VRFProof, E)\n-> SignatureResult<(Box<[VRFInOut]>, VRFProofBatchable)> where\nT: VRFSigningTranscript, E: SigningTranscript, I: IntoIterator<Item = T>,\nO: Borrow<VRFOutput>","parent":null,"children":[],"decl_id":null,"docs":" Verify a common VRF short proof for several input transcripts and corresponding outputs.\n","sig":null,"attributes":[{"value":"/ Verify a common VRF short proof for several input transcripts and corresponding outputs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":130396,"byte_end":130488,"line_start":851,"line_end":851,"column_start":5,"column_end":97}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":130493,"byte_end":130540,"line_start":852,"line_end":852,"column_start":5,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":132378,"byte_end":132395,"line_start":899,"line_end":899,"column_start":8,"column_end":25},"name":"dleq_verify_batch","qualname":"::vrf::dleq_verify_batch","value":"pub fn dleq_verify_batch(&[VRFInOut], &[VRFProofBatchable], &[PublicKey],\n                         bool) -> SignatureResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Batch verify DLEQ proofs where the public keys were held by\n different parties.","sig":null,"attributes":[{"value":"/ Batch verify DLEQ proofs where the public keys were held by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":131481,"byte_end":131544,"line_start":881,"line_end":881,"column_start":1,"column_end":64}},{"value":"/ different parties.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":131545,"byte_end":131567,"line_start":882,"line_end":882,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":131568,"byte_end":131571,"line_start":883,"line_end":883,"column_start":1,"column_end":4}},{"value":"/ We first reconstruct the `c`s present in the `VRFProof`s but absent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":131572,"byte_end":131643,"line_start":884,"line_end":884,"column_start":1,"column_end":72}},{"value":"/ in the `VRFProofBatchable`s, using `shorten_dleq`.  We then verify","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":131644,"byte_end":131714,"line_start":885,"line_end":885,"column_start":1,"column_end":71}},{"value":"/ the `R` and `Hr` components of the `VRFProofBatchable`s using the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":131715,"byte_end":131784,"line_start":886,"line_end":886,"column_start":1,"column_end":70}},{"value":"/ two equations a normal verification uses to discover them.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":131785,"byte_end":131847,"line_start":887,"line_end":887,"column_start":1,"column_end":63}},{"value":"/ We do this by delinearizing both verification equations with","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":131848,"byte_end":131912,"line_start":888,"line_end":888,"column_start":1,"column_end":65}},{"value":"/ random numbers.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":131913,"byte_end":131932,"line_start":889,"line_end":889,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":131933,"byte_end":131936,"line_start":890,"line_end":890,"column_start":1,"column_end":4}},{"value":"/ TODO: Assess when the two verification equations should be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":131937,"byte_end":131999,"line_start":891,"line_end":891,"column_start":1,"column_end":63}},{"value":"/ combined, presumably by benchmarking both forms.  At smaller batch","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":132000,"byte_end":132070,"line_start":892,"line_end":892,"column_start":1,"column_end":71}},{"value":"/ sizes then we should clearly benefit form the combined form, but","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":132071,"byte_end":132139,"line_start":893,"line_end":893,"column_start":1,"column_end":69}},{"value":"/ bany combination doubles the scalar by scalar multiplicications","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":132140,"byte_end":132207,"line_start":894,"line_end":894,"column_start":1,"column_end":68}},{"value":"/ and hashing, so large enough batch verifications should favor two","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":132208,"byte_end":132277,"line_start":895,"line_end":895,"column_start":1,"column_end":70}},{"value":"/ seperate calls.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":132278,"byte_end":132297,"line_start":896,"line_end":896,"column_start":1,"column_end":20}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":132298,"byte_end":132345,"line_start":897,"line_end":897,"column_start":1,"column_end":48}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":132346,"byte_end":132370,"line_start":898,"line_end":898,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":135189,"byte_end":135205,"line_start":969,"line_end":969,"column_start":8,"column_end":24},"name":"vrf_verify_batch","qualname":"::vrf::vrf_verify_batch","value":"pub fn vrf_verify_batch<T,\n                        I>(I, &[VRFOutput], &[VRFProofBatchable],\n                           &[PublicKey]) -> SignatureResult<Box<[VRFInOut]>>\nwhere T: VRFSigningTranscript, I: IntoIterator<Item = T>","parent":null,"children":[],"decl_id":null,"docs":" Batch verify VRFs by different signers","sig":null,"attributes":[{"value":"/ Batch verify VRFs by different signers","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":135083,"byte_end":135125,"line_start":965,"line_end":965,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":135126,"byte_end":135129,"line_start":966,"line_end":966,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":135130,"byte_end":135133,"line_start":967,"line_end":967,"column_start":1,"column_end":4}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":135134,"byte_end":135181,"line_start":968,"line_end":968,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":521},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"derive","qualname":"::derive","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":1173},{"krate":0,"index":1192},{"krate":0,"index":1191},{"krate":0,"index":1188},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1177},{"krate":0,"index":528},{"krate":0,"index":536},{"krate":0,"index":540},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":1194},{"krate":0,"index":1218},{"krate":0,"index":1216},{"krate":0,"index":1213},{"krate":0,"index":1207},{"krate":0,"index":1209},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1198},{"krate":0,"index":563},{"krate":0,"index":569}],"decl_id":null,"docs":" ### Implementation of \"hierarchical deterministic key derivation\" (HDKD) for Schnorr signatures on Ristretto \n \n *Warning*  We warn that our VRF construction in vrf.rs supports\n malleable VRF outputs via the `Malleable` type, which becomes\n insecure when used in conjunction with our hierarchical key\n derivation methods here.\n Attackers could translate malleable VRF outputs from one soft subkey \n to another soft subkey, gaining early knowledge of the VRF output.\n We think most VRF applicaitons for which HDKH sounds suitable\n benefit from using implicit certificates insead of HDKD anyways,\n which should also be secure in combination with HDKH.\n We always use non-malleable VRF inputs in our convenience methods.\n We suggest using implicit certificates instead of HDKD when \n using VRFs.","sig":null,"attributes":[{"value":"/ ### Implementation of \"hierarchical deterministic key derivation\" (HDKD) for Schnorr signatures on Ristretto ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144206,"byte_end":144319,"line_start":10,"line_end":10,"column_start":1,"column_end":114}},{"value":"/ ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144320,"byte_end":144324,"line_start":11,"line_end":11,"column_start":1,"column_end":5}},{"value":"/ *Warning*  We warn that our VRF construction in vrf.rs supports","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144325,"byte_end":144392,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/ malleable VRF outputs via the `Malleable` type, which becomes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144393,"byte_end":144458,"line_start":13,"line_end":13,"column_start":1,"column_end":66}},{"value":"/ insecure when used in conjunction with our hierarchical key","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144459,"byte_end":144522,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ derivation methods here.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144523,"byte_end":144551,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/ Attackers could translate malleable VRF outputs from one soft subkey ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144552,"byte_end":144625,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/ to another soft subkey, gaining early knowledge of the VRF output.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144626,"byte_end":144696,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ We think most VRF applicaitons for which HDKH sounds suitable","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144697,"byte_end":144762,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/ benefit from using implicit certificates insead of HDKD anyways,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144763,"byte_end":144831,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ which should also be secure in combination with HDKH.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144832,"byte_end":144889,"line_start":20,"line_end":20,"column_start":1,"column_end":58}},{"value":"/ We always use non-malleable VRF inputs in our convenience methods.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144890,"byte_end":144960,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ We suggest using implicit certificates instead of HDKD when ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":144962,"byte_end":145026,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ using VRFs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145027,"byte_end":145042,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145043,"byte_end":145046,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145047,"byte_end":145051,"line_start":26,"line_end":26,"column_start":1,"column_end":5}}]},{"kind":"Const","id":{"krate":0,"index":527},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145451,"byte_end":145468,"line_start":41,"line_end":41,"column_start":11,"column_end":28},"name":"CHAIN_CODE_LENGTH","qualname":"::derive::CHAIN_CODE_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Length in bytes of our chain codes.","sig":null,"attributes":[{"value":"/ Length in bytes of our chain codes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145285,"byte_end":145324,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145325,"byte_end":145328,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In fact, only 16 bytes sounds safe, but this never appears on chain,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145329,"byte_end":145401,"line_start":39,"line_end":39,"column_start":1,"column_end":73}},{"value":"/ so no downsides to using 32 bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145402,"byte_end":145440,"line_start":40,"line_end":40,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1173},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145986,"byte_end":145995,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"ChainCode","qualname":"::derive::ChainCode","value":"","parent":null,"children":[],"decl_id":null,"docs":" We cannot assume the original public key is secret and additional\n inputs might have low entropy, like `i` in BIP32.  As in BIP32,\n chain codes fill this gap by being a high entropy secret shared\n between public and private key holders.  These are produced by\n key derivations and can be incorporated into subsequence key\n derivations. \n See https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys\n","sig":null,"attributes":[{"value":"/ We cannot assume the original public key is secret and additional","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145483,"byte_end":145552,"line_start":43,"line_end":43,"column_start":1,"column_end":70}},{"value":"/ inputs might have low entropy, like `i` in BIP32.  As in BIP32,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145553,"byte_end":145620,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/ chain codes fill this gap by being a high entropy secret shared","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145621,"byte_end":145688,"line_start":45,"line_end":45,"column_start":1,"column_end":68}},{"value":"/ between public and private key holders.  These are produced by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145689,"byte_end":145755,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"/ key derivations and can be incorporated into subsequence key","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145756,"byte_end":145820,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"/ derivations. ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145821,"byte_end":145838,"line_start":48,"line_end":48,"column_start":1,"column_end":18}},{"value":"/ See https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145839,"byte_end":145923,"line_start":49,"line_end":49,"column_start":1,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":1175},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":145996,"byte_end":146023,"line_start":51,"line_end":51,"column_start":22,"column_end":49},"name":"0","qualname":"::derive::ChainCode::0","value":"[u8; _]","parent":{"krate":0,"index":1173},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":528},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146108,"byte_end":146118,"line_start":54,"line_end":54,"column_start":11,"column_end":21},"name":"Derivation","qualname":"::derive::Derivation","value":"Derivation: Sized","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":531},{"krate":0,"index":533}],"decl_id":null,"docs":" Key types that support \"hierarchical deterministic\" key derivation\n","sig":null,"attributes":[{"value":"/ Key types that support \"hierarchical deterministic\" key derivation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146027,"byte_end":146097,"line_start":53,"line_end":53,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146257,"byte_end":146268,"line_start":57,"line_end":57,"column_start":8,"column_end":19},"name":"derived_key","qualname":"::derive::Derivation::derived_key","value":"pub fn derived_key<T>(&Self, T, ChainCode) -> (Self, ChainCode) where\nT: SigningTranscript","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Derive key with subkey identified by a byte array\n presented via a `SigningTranscript`, and a chain code.\n","sig":null,"attributes":[{"value":"/ Derive key with subkey identified by a byte array","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146133,"byte_end":146186,"line_start":55,"line_end":55,"column_start":5,"column_end":58}},{"value":"/ presented via a `SigningTranscript`, and a chain code.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146191,"byte_end":146249,"line_start":56,"line_end":56,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146537,"byte_end":146555,"line_start":63,"line_end":63,"column_start":8,"column_end":26},"name":"derived_key_simple","qualname":"::derive::Derivation::derived_key_simple","value":"pub fn derived_key_simple<B: AsRef<[u8]>>(&Self, ChainCode, B)\n-> (Self, ChainCode)","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Derive key with subkey identified by a byte array \n and a chain code.  We do not include a context here\n becuase the chain code could serve this purpose.\n","sig":null,"attributes":[{"value":"/ Derive key with subkey identified by a byte array ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146358,"byte_end":146412,"line_start":60,"line_end":60,"column_start":5,"column_end":59}},{"value":"/ and a chain code.  We do not include a context here","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146417,"byte_end":146472,"line_start":61,"line_end":61,"column_start":5,"column_end":60}},{"value":"/ becuase the chain code could serve this purpose.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146477,"byte_end":146529,"line_start":62,"line_end":62,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146908,"byte_end":146930,"line_start":71,"line_end":71,"column_start":8,"column_end":30},"name":"derived_key_simple_rng","qualname":"::derive::Derivation::derived_key_simple_rng","value":"pub fn derived_key_simple_rng<B, R>(&Self, ChainCode, B, R)\n-> (Self, ChainCode) where B: AsRef<[u8]>, R: RngCore + CryptoRng","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Derive key with subkey identified by a byte array\n and a chain code, and with external ranodmnesses.\n","sig":null,"attributes":[{"value":"/ Derive key with subkey identified by a byte array","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146789,"byte_end":146842,"line_start":69,"line_end":69,"column_start":5,"column_end":58}},{"value":"/ and a chain code, and with external ranodmnesses.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146847,"byte_end":146900,"line_start":70,"line_end":70,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148977,"byte_end":149004,"line_start":118,"line_end":118,"column_start":12,"column_end":39},"name":"hard_derive_mini_secret_key","qualname":"<SecretKey>::hard_derive_mini_secret_key","value":"pub fn hard_derive_mini_secret_key<B: AsRef<[u8]>>(&Self, Option<ChainCode>,\n                                                   B)\n-> (MiniSecretKey, ChainCode)","parent":null,"children":[],"decl_id":null,"docs":" Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey` from a `SecretKey`","sig":null,"attributes":[{"value":"/ Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey` from a `SecretKey`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148152,"byte_end":148232,"line_start":105,"line_end":105,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148237,"byte_end":148240,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ We do not envision any \"good reasons\" why these \"hard\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148245,"byte_end":148303,"line_start":107,"line_end":107,"column_start":5,"column_end":63}},{"value":"/ derivations should ever be used after the soft `Derivation`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148308,"byte_end":148371,"line_start":108,"line_end":108,"column_start":5,"column_end":68}},{"value":"/ trait.  We similarly do not believe hard derivations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148376,"byte_end":148432,"line_start":109,"line_end":109,"column_start":5,"column_end":61}},{"value":"/ make any sense for `ChainCode`s or `ExtendedKey`s types.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148437,"byte_end":148497,"line_start":110,"line_end":110,"column_start":5,"column_end":65}},{"value":"/ Yet, some existing BIP32 workflows might do these things,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148502,"byte_end":148563,"line_start":111,"line_end":111,"column_start":5,"column_end":66}},{"value":"/ due to BIP32's de facto stnadardization and poor design.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148568,"byte_end":148628,"line_start":112,"line_end":112,"column_start":5,"column_end":65}},{"value":"/ In consequence, we provide this method to do \"hard\" derivations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148633,"byte_end":148700,"line_start":113,"line_end":113,"column_start":5,"column_end":72}},{"value":"/ in a way that should work with all BIP32 workflows and any","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148705,"byte_end":148767,"line_start":114,"line_end":114,"column_start":5,"column_end":67}},{"value":"/ permissible mutations of `SecretKey`.  This means only that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148772,"byte_end":148835,"line_start":115,"line_end":115,"column_start":5,"column_end":68}},{"value":"/ we hash the `SecretKey`'s scalar, but not its nonce becuase","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148840,"byte_end":148903,"line_start":116,"line_end":116,"column_start":5,"column_end":68}},{"value":"/ the secret key remains valid if the nonce is changed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148908,"byte_end":148965,"line_start":117,"line_end":117,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150482,"byte_end":150509,"line_start":151,"line_end":151,"column_start":12,"column_end":39},"name":"hard_derive_mini_secret_key","qualname":"<MiniSecretKey>::hard_derive_mini_secret_key","value":"pub fn hard_derive_mini_secret_key<B: AsRef<[u8]>>(&Self, Option<ChainCode>,\n                                                   B, ExpansionMode)\n-> (MiniSecretKey, ChainCode)","parent":null,"children":[],"decl_id":null,"docs":" Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey` from a `SecretKey`","sig":null,"attributes":[{"value":"/ Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey` from a `SecretKey`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":149657,"byte_end":149737,"line_start":138,"line_end":138,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":149742,"byte_end":149745,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ We do not envision any \"good reasons\" why these \"hard\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":149750,"byte_end":149808,"line_start":140,"line_end":140,"column_start":5,"column_end":63}},{"value":"/ derivations should ever be used after the soft `Derivation`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":149813,"byte_end":149876,"line_start":141,"line_end":141,"column_start":5,"column_end":68}},{"value":"/ trait.  We similarly do not believe hard derivations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":149881,"byte_end":149937,"line_start":142,"line_end":142,"column_start":5,"column_end":61}},{"value":"/ make any sense for `ChainCode`s or `ExtendedKey`s types.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":149942,"byte_end":150002,"line_start":143,"line_end":143,"column_start":5,"column_end":65}},{"value":"/ Yet, some existing BIP32 workflows might do these things,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150007,"byte_end":150068,"line_start":144,"line_end":144,"column_start":5,"column_end":66}},{"value":"/ due to BIP32's de facto stnadardization and poor design.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150073,"byte_end":150133,"line_start":145,"line_end":145,"column_start":5,"column_end":65}},{"value":"/ In consequence, we provide this method to do \"hard\" derivations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150138,"byte_end":150205,"line_start":146,"line_end":146,"column_start":5,"column_end":72}},{"value":"/ in a way that should work with all BIP32 workflows and any","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150210,"byte_end":150272,"line_start":147,"line_end":147,"column_start":5,"column_end":67}},{"value":"/ permissible mutations of `SecretKey`.  This means only that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150277,"byte_end":150340,"line_start":148,"line_end":148,"column_start":5,"column_end":68}},{"value":"/ we hash the `SecretKey`'s scalar, but not its nonce becuase","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150345,"byte_end":150408,"line_start":149,"line_end":149,"column_start":5,"column_end":68}},{"value":"/ the secret key remains valid if the nonce is changed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150413,"byte_end":150470,"line_start":150,"line_end":150,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151536,"byte_end":151563,"line_start":172,"line_end":172,"column_start":12,"column_end":39},"name":"hard_derive_mini_secret_key","qualname":"<Keypair>::hard_derive_mini_secret_key","value":"pub fn hard_derive_mini_secret_key<B: AsRef<[u8]>>(&Self, Option<ChainCode>,\n                                                   B)\n-> (MiniSecretKey, ChainCode)","parent":null,"children":[],"decl_id":null,"docs":" Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey` from a `SecretKey`","sig":null,"attributes":[{"value":"/ Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey` from a `SecretKey`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150711,"byte_end":150791,"line_start":159,"line_end":159,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150796,"byte_end":150799,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ We do not envision any \"good reasons\" why these \"hard\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150804,"byte_end":150862,"line_start":161,"line_end":161,"column_start":5,"column_end":63}},{"value":"/ derivations should ever be used after the soft `Derivation`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150867,"byte_end":150930,"line_start":162,"line_end":162,"column_start":5,"column_end":68}},{"value":"/ trait.  We similarly do not believe hard derivations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150935,"byte_end":150991,"line_start":163,"line_end":163,"column_start":5,"column_end":61}},{"value":"/ make any sense for `ChainCode`s or `ExtendedKey`s types.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150996,"byte_end":151056,"line_start":164,"line_end":164,"column_start":5,"column_end":65}},{"value":"/ Yet, some existing BIP32 workflows might do these things,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151061,"byte_end":151122,"line_start":165,"line_end":165,"column_start":5,"column_end":66}},{"value":"/ due to BIP32's de facto stnadardization and poor design.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151127,"byte_end":151187,"line_start":166,"line_end":166,"column_start":5,"column_end":65}},{"value":"/ In consequence, we provide this method to do \"hard\" derivations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151192,"byte_end":151259,"line_start":167,"line_end":167,"column_start":5,"column_end":72}},{"value":"/ in a way that should work with all BIP32 workflows and any","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151264,"byte_end":151326,"line_start":168,"line_end":168,"column_start":5,"column_end":67}},{"value":"/ permissible mutations of `SecretKey`.  This means only that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151331,"byte_end":151394,"line_start":169,"line_end":169,"column_start":5,"column_end":68}},{"value":"/ we hash the `SecretKey`'s scalar, but not its nonce becuase","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151399,"byte_end":151462,"line_start":170,"line_end":170,"column_start":5,"column_end":68}},{"value":"/ the secret key remains valid if the nonce is changed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151467,"byte_end":151524,"line_start":171,"line_end":171,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151952,"byte_end":151969,"line_start":181,"line_end":181,"column_start":12,"column_end":29},"name":"derive_secret_key","qualname":"<Keypair>::derive_secret_key","value":"pub fn derive_secret_key<T>(&Self, T, ChainCode) -> (SecretKey, ChainCode)\nwhere T: SigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Derive a secret key and new chain code from a key pair and chain code.","sig":null,"attributes":[{"value":"/ Derive a secret key and new chain code from a key pair and chain code.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151717,"byte_end":151791,"line_start":177,"line_end":177,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151796,"byte_end":151799,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ We expect the trait methods of `Keypair as Derivation` to be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151804,"byte_end":151868,"line_start":179,"line_end":179,"column_start":5,"column_end":69}},{"value":"/ more useful since signing anything requires the public key too.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":151873,"byte_end":151940,"line_start":180,"line_end":180,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1194},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":153905,"byte_end":153916,"line_start":232,"line_end":232,"column_start":12,"column_end":23},"name":"ExtendedKey","qualname":"::derive::ExtendedKey","value":"ExtendedKey { key, chaincode }","parent":null,"children":[{"krate":0,"index":1196},{"krate":0,"index":1197}],"decl_id":null,"docs":" A convenience wraper that combines derivable key and a chain code.\n","sig":null,"attributes":[{"value":"/ A convenience wraper that combines derivable key and a chain code.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":153772,"byte_end":153842,"line_start":230,"line_end":230,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1196},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":153959,"byte_end":153962,"line_start":234,"line_end":234,"column_start":9,"column_end":12},"name":"key","qualname":"::derive::ExtendedKey::key","value":"K","parent":{"krate":0,"index":1194},"children":[],"decl_id":null,"docs":" Appropriate key type\n","sig":null,"attributes":[{"value":"/ Appropriate key type","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":153926,"byte_end":153950,"line_start":233,"line_end":233,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1197},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154356,"byte_end":154365,"line_start":241,"line_end":241,"column_start":9,"column_end":18},"name":"chaincode","qualname":"::derive::ExtendedKey::chaincode","value":"derive::ChainCode","parent":{"krate":0,"index":1194},"children":[],"decl_id":null,"docs":" We cannot assume the original public key is secret and additional\n inputs might have low entropy, like `i` in BIP32.  As in BIP32,\n chain codes fill this gap by being a high entropy secret shared\n between public and private key holders.  These are produced by\n key derivations and can be incorporated into subsequence key\n derivations.  \n","sig":null,"attributes":[{"value":"/ We cannot assume the original public key is secret and additional","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":153971,"byte_end":154040,"line_start":235,"line_end":235,"column_start":5,"column_end":74}},{"value":"/ inputs might have low entropy, like `i` in BIP32.  As in BIP32,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154045,"byte_end":154112,"line_start":236,"line_end":236,"column_start":5,"column_end":72}},{"value":"/ chain codes fill this gap by being a high entropy secret shared","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154117,"byte_end":154184,"line_start":237,"line_end":237,"column_start":5,"column_end":72}},{"value":"/ between public and private key holders.  These are produced by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154189,"byte_end":154255,"line_start":238,"line_end":238,"column_start":5,"column_end":71}},{"value":"/ key derivations and can be incorporated into subsequence key","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154260,"byte_end":154324,"line_start":239,"line_end":239,"column_start":5,"column_end":69}},{"value":"/ derivations.  ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154329,"byte_end":154347,"line_start":240,"line_end":240,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154557,"byte_end":154568,"line_start":248,"line_end":248,"column_start":12,"column_end":23},"name":"derived_key","qualname":"<ExtendedKey<K>>::derived_key","value":"pub fn derived_key<T>(&Self, T) -> ExtendedKey<K> where T: SigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Derive key with subkey identified by a byte array\n presented as a hash, and a chain code.\n","sig":null,"attributes":[{"value":"/ Derive key with subkey identified by a byte array","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154445,"byte_end":154498,"line_start":246,"line_end":246,"column_start":5,"column_end":58}},{"value":"/ presented as a hash, and a chain code.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154503,"byte_end":154545,"line_start":247,"line_end":247,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154882,"byte_end":154900,"line_start":257,"line_end":257,"column_start":12,"column_end":30},"name":"derived_key_simple","qualname":"<ExtendedKey<K>>::derived_key_simple","value":"pub fn derived_key_simple<B: AsRef<[u8]>>(&Self, B) -> ExtendedKey<K>","parent":null,"children":[],"decl_id":null,"docs":" Derive key with subkey identified by a byte array and \n a chain code in the extended key.\n","sig":null,"attributes":[{"value":"/ Derive key with subkey identified by a byte array and ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154770,"byte_end":154828,"line_start":255,"line_end":255,"column_start":5,"column_end":63}},{"value":"/ a chain code in the extended key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154833,"byte_end":154870,"line_start":256,"line_end":256,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155948,"byte_end":155975,"line_start":278,"line_end":278,"column_start":12,"column_end":39},"name":"hard_derive_mini_secret_key","qualname":"<ExtendedKey<SecretKey>>::hard_derive_mini_secret_key","value":"pub fn hard_derive_mini_secret_key<B: AsRef<[u8]>>(&Self, B, ExpansionMode)\n-> ExtendedKey<SecretKey>","parent":null,"children":[],"decl_id":null,"docs":" Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey` from a `SecretKey`","sig":null,"attributes":[{"value":"/ Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey` from a `SecretKey`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155123,"byte_end":155203,"line_start":265,"line_end":265,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155208,"byte_end":155211,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ We do not envision any \"good reasons\" why these \"hard\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155216,"byte_end":155274,"line_start":267,"line_end":267,"column_start":5,"column_end":63}},{"value":"/ derivations should ever be used after the soft `Derivation`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155279,"byte_end":155342,"line_start":268,"line_end":268,"column_start":5,"column_end":68}},{"value":"/ trait.  We similarly do not believe hard derivations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155347,"byte_end":155403,"line_start":269,"line_end":269,"column_start":5,"column_end":61}},{"value":"/ make any sense for `ChainCode`s or `ExtendedKey`s types.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155408,"byte_end":155468,"line_start":270,"line_end":270,"column_start":5,"column_end":65}},{"value":"/ Yet, some existing BIP32 workflows might do these things,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155473,"byte_end":155534,"line_start":271,"line_end":271,"column_start":5,"column_end":66}},{"value":"/ due to BIP32's de facto stnadardization and poor design.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155539,"byte_end":155599,"line_start":272,"line_end":272,"column_start":5,"column_end":65}},{"value":"/ In consequence, we provide this method to do \"hard\" derivations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155604,"byte_end":155671,"line_start":273,"line_end":273,"column_start":5,"column_end":72}},{"value":"/ in a way that should work with all BIP32 workflows and any","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155676,"byte_end":155738,"line_start":274,"line_end":274,"column_start":5,"column_end":67}},{"value":"/ permissible mutations of `SecretKey`.  This means only that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155743,"byte_end":155806,"line_start":275,"line_end":275,"column_start":5,"column_end":68}},{"value":"/ we hash the `SecretKey`'s scalar, but not its nonce becuase","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155811,"byte_end":155874,"line_start":276,"line_end":276,"column_start":5,"column_end":68}},{"value":"/ the secret key remains valid if the nonce is changed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155879,"byte_end":155936,"line_start":277,"line_end":277,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":572},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cert","qualname":"::cert","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":1507},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":1221},{"krate":0,"index":1226},{"krate":0,"index":1225},{"krate":0,"index":579},{"krate":0,"index":1229},{"krate":0,"index":1248},{"krate":0,"index":1245},{"krate":0,"index":1244},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1233},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":589},{"krate":0,"index":594},{"krate":0,"index":600}],"decl_id":null,"docs":" ### Elliptic curve Qu-Vanstone implicit certificate scheme (ECQV) for Ristretto","sig":null,"attributes":[{"value":"/ ### Elliptic curve Qu-Vanstone implicit certificate scheme (ECQV) for Ristretto","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":158778,"byte_end":158861,"line_start":11,"line_end":11,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":158862,"byte_end":158865,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [Implicit certificates](https://en.wikipedia.org/wiki/Implicit_certificate)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":158866,"byte_end":158945,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ provide an extremely space efficent public key certificate scheme.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":158946,"byte_end":159016,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159017,"byte_end":159020,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ As a rule, implicit certificates do not prove possession of the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159021,"byte_end":159088,"line_start":16,"line_end":16,"column_start":1,"column_end":68}},{"value":"/ private key.  We thus worry more about fear rogue key attack when","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159089,"byte_end":159158,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ using them, but all protocols here should provide strong defenses","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159159,"byte_end":159228,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ against then.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159229,"byte_end":159246,"line_start":19,"line_end":19,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159247,"byte_end":159250,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [1] \"Standards for efficient cryptography, SEC 4: Elliptic Curve","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159251,"byte_end":159319,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/     Qu-Vanstone Implicit Certificate Scheme (ECQV)\".","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159320,"byte_end":159376,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/     http://www.secg.org/sec4-1.0.pdf","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159377,"byte_end":159417,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"/ [2] Daniel R. L. Brown, Robert P. Gallant, and Scott A. Vanstone.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159418,"byte_end":159487,"line_start":24,"line_end":24,"column_start":1,"column_end":70}},{"value":"/     \"Provably Secure Implicit Certificate Schemes\". Financial","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159488,"byte_end":159553,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/     Cryptography 2001. Lecture Notes in Computer Science.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159554,"byte_end":159615,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/     Springer Berlin Heidelberg. 2339 (1): 156–165. doi:10.1007/3-540-46088-8_15.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159616,"byte_end":159702,"line_start":27,"line_end":27,"column_start":1,"column_end":85}},{"value":"/     http://www.cacr.math.uwaterloo.ca/techreports/2000/corr2000-55.ps","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159703,"byte_end":159776,"line_start":28,"line_end":28,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1221},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160180,"byte_end":160194,"line_start":43,"line_end":43,"column_start":12,"column_end":26},"name":"ECQVCertSecret","qualname":"::cert::ECQVCertSecret","value":"","parent":null,"children":[],"decl_id":null,"docs":" ECQV Implicit Certificate Secret","sig":null,"attributes":[{"value":"/ ECQV Implicit Certificate Secret","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159961,"byte_end":159997,"line_start":38,"line_end":38,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":159998,"byte_end":160001,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Issuing an ECQV implicit certificate requires producing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160002,"byte_end":160061,"line_start":40,"line_end":40,"column_start":1,"column_end":60}},{"value":"/ this and securely sending it to the certificate holder.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160062,"byte_end":160121,"line_start":41,"line_end":41,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1223},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160195,"byte_end":160207,"line_start":43,"line_end":43,"column_start":27,"column_end":39},"name":"0","qualname":"::cert::ECQVCertSecret::0","value":"[u8; 64]","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1229},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160991,"byte_end":161005,"line_start":68,"line_end":68,"column_start":12,"column_end":26},"name":"ECQVCertPublic","qualname":"::cert::ECQVCertPublic","value":"","parent":null,"children":[],"decl_id":null,"docs":" ECQV Implicit Certificate Public Key Reconstruction Data","sig":null,"attributes":[{"value":"/ ECQV Implicit Certificate Public Key Reconstruction Data","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160667,"byte_end":160727,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160728,"byte_end":160731,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Identifying the public key of, and implicity verifying, an ECQV","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160732,"byte_end":160799,"line_start":64,"line_end":64,"column_start":1,"column_end":68}},{"value":"/ implicit certificate requires this data, which is produced","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160800,"byte_end":160862,"line_start":65,"line_end":65,"column_start":1,"column_end":63}},{"value":"/ when the certificate holder accepts the implicit certificate.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160863,"byte_end":160928,"line_start":66,"line_end":66,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1231},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161006,"byte_end":161018,"line_start":68,"line_end":68,"column_start":27,"column_end":39},"name":"0","qualname":"::cert::ECQVCertPublic::0","value":"[u8; 32]","parent":{"krate":0,"index":1229},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161793,"byte_end":161808,"line_start":88,"line_end":88,"column_start":12,"column_end":27},"name":"issue_ecqv_cert","qualname":"<Keypair>::issue_ecqv_cert","value":"pub fn issue_ecqv_cert<T>(&Self, T, &PublicKey) -> ECQVCertSecret where\nT: SigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Issue an ECQV implicit certificate","sig":null,"attributes":[{"value":"/ Issue an ECQV implicit certificate","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161223,"byte_end":161261,"line_start":78,"line_end":78,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161266,"byte_end":161269,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Aside from the issuing `Keypair` supplied as `self`, you provide both","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161274,"byte_end":161347,"line_start":80,"line_end":80,"column_start":5,"column_end":78}},{"value":"/ (1) a `SigningTranscript` called `t` that incorporates both the context ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161352,"byte_end":161428,"line_start":81,"line_end":81,"column_start":5,"column_end":81}},{"value":"/     and the certificate requester's identity, and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161433,"byte_end":161486,"line_start":82,"line_end":82,"column_start":5,"column_end":58}},{"value":"/ (2) the `seed_public_key` supplied by the certificate recipient","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161491,"byte_end":161558,"line_start":83,"line_end":83,"column_start":5,"column_end":72}},{"value":"/     in their certificate request.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161563,"byte_end":161600,"line_start":84,"line_end":84,"column_start":5,"column_end":42}},{"value":"/ We return an `ECQVCertSecret` which the issuer sent to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161605,"byte_end":161667,"line_start":85,"line_end":85,"column_start":5,"column_end":67}},{"value":"/ certificate requester, ans from which the certificate requester","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161672,"byte_end":161739,"line_start":86,"line_end":86,"column_start":5,"column_end":72}},{"value":"/ derives their certified key pair.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161744,"byte_end":161781,"line_start":87,"line_end":87,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":164004,"byte_end":164020,"line_start":134,"line_end":134,"column_start":12,"column_end":28},"name":"accept_ecqv_cert","qualname":"<PublicKey>::accept_ecqv_cert","value":"pub fn accept_ecqv_cert<T>(&Self, T, &SecretKey, ECQVCertSecret)\n-> SignatureResult<(ECQVCertPublic, SecretKey)> where T: SigningTranscript","parent":null,"children":[],"decl_id":null,"docs":" Accept an ECQV implicit certificate","sig":null,"attributes":[{"value":"/ Accept an ECQV implicit certificate","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":162966,"byte_end":163005,"line_start":116,"line_end":116,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163010,"byte_end":163013,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ We request an ECQV implicit certificate by first creating an","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163018,"byte_end":163082,"line_start":118,"line_end":118,"column_start":5,"column_end":69}},{"value":"/ ephemeral `Keypair` and sending the public portion to the issuer","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163087,"byte_end":163155,"line_start":119,"line_end":119,"column_start":5,"column_end":73}},{"value":"/ as `seed_public_key`.  An issuer issues the certificat by replying","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163160,"byte_end":163230,"line_start":120,"line_end":120,"column_start":5,"column_end":75}},{"value":"/ with the `ECQVCertSecret` created by `issue_ecqv_cert`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163235,"byte_end":163294,"line_start":121,"line_end":121,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163299,"byte_end":163302,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Aside from the issuer `PublicKey` supplied as `self`, you provide","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163307,"byte_end":163376,"line_start":123,"line_end":123,"column_start":5,"column_end":74}},{"value":"/ (1) a `SigningTranscript` called `t` that incorporates both the context","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163381,"byte_end":163456,"line_start":124,"line_end":124,"column_start":5,"column_end":80}},{"value":"/     and the certificate requester's identity,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163461,"byte_end":163510,"line_start":125,"line_end":125,"column_start":5,"column_end":54}},{"value":"/ (2) the `seed_secret_key` corresponding to the `seed_public_key`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163515,"byte_end":163583,"line_start":126,"line_end":126,"column_start":5,"column_end":73}},{"value":"/     they sent to the issuer by the certificate recipient in their","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163588,"byte_end":163657,"line_start":127,"line_end":127,"column_start":5,"column_end":74}},{"value":"/     certificate request, and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163662,"byte_end":163694,"line_start":128,"line_end":128,"column_start":5,"column_end":37}},{"value":"/ (3) the `ECQVCertSecret` send by the issuer to the certificate","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163699,"byte_end":163765,"line_start":129,"line_end":129,"column_start":5,"column_end":71}},{"value":"/     requester.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163770,"byte_end":163788,"line_start":130,"line_end":130,"column_start":5,"column_end":23}},{"value":"/ We return both your certificate's new `SecretKey` as well as","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163793,"byte_end":163857,"line_start":131,"line_end":131,"column_start":5,"column_end":69}},{"value":"/ an `ECQVCertPublic` from which third parties may derive","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163862,"byte_end":163921,"line_start":132,"line_end":132,"column_start":5,"column_end":64}},{"value":"/ corresponding public key from `h` and the issuer's public key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":163926,"byte_end":163992,"line_start":133,"line_end":133,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165871,"byte_end":165891,"line_start":178,"line_end":178,"column_start":12,"column_end":32},"name":"issue_self_ecqv_cert","qualname":"<Keypair>::issue_self_ecqv_cert","value":"pub fn issue_self_ecqv_cert<T>(&Self, T) -> (ECQVCertPublic, SecretKey) where\nT: SigningTranscript + Clone","parent":null,"children":[],"decl_id":null,"docs":" Issue an ECQV Implicit Certificate for yourself","sig":null,"attributes":[{"value":"/ Issue an ECQV Implicit Certificate for yourself","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165076,"byte_end":165127,"line_start":163,"line_end":163,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165132,"byte_end":165135,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ We can issue an implicit certificate to ourselves if we merely","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165140,"byte_end":165206,"line_start":165,"line_end":165,"column_start":5,"column_end":71}},{"value":"/ want to certify an associated public key.  We should prefer","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165211,"byte_end":165274,"line_start":166,"line_end":166,"column_start":5,"column_end":68}},{"value":"/ this option over \"hierarchical deterministic\" key derivation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165279,"byte_end":165343,"line_start":167,"line_end":167,"column_start":5,"column_end":69}},{"value":"/ because compromizing the resulting secret key does not","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165348,"byte_end":165406,"line_start":168,"line_end":168,"column_start":5,"column_end":63}},{"value":"/ compromize the issuer's secret key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165411,"byte_end":165450,"line_start":169,"line_end":169,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165455,"byte_end":165458,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ In this case, we avoid the entire interactive protocol described","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165463,"byte_end":165531,"line_start":171,"line_end":171,"column_start":5,"column_end":73}},{"value":"/ by `issue_ecqv_cert` and `accept_ecqv_cert` by hiding it an all","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165536,"byte_end":165603,"line_start":172,"line_end":172,"column_start":5,"column_end":72}},{"value":"/ managment of the ephemeral `Keypair` inside this function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165608,"byte_end":165670,"line_start":173,"line_end":173,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165675,"byte_end":165678,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Aside from the issuing secret key supplied as `self`, you provide","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165683,"byte_end":165752,"line_start":175,"line_end":175,"column_start":5,"column_end":74}},{"value":"/ only a digest `h` that incorporates any context and metadata","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165757,"byte_end":165821,"line_start":176,"line_end":176,"column_start":5,"column_end":69}},{"value":"/ pertaining to the issued key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165826,"byte_end":165859,"line_start":177,"line_end":177,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":166671,"byte_end":166685,"line_start":199,"line_end":199,"column_start":12,"column_end":26},"name":"open_ecqv_cert","qualname":"<PublicKey>::open_ecqv_cert","value":"pub fn open_ecqv_cert<T>(&Self, T, &ECQVCertPublic)\n-> SignatureResult<PublicKey> where T: SigningTranscript","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":166656,"byte_end":166659,"line_start":198,"line_end":198,"column_start":5,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":603},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"errors","qualname":"::errors","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":1250},{"krate":0,"index":1269},{"krate":0,"index":1268},{"krate":0,"index":1266},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1257},{"krate":0,"index":608},{"krate":0,"index":1271},{"krate":0,"index":1302},{"krate":0,"index":1301},{"krate":0,"index":1299},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1289},{"krate":0,"index":611},{"krate":0,"index":614}],"decl_id":null,"docs":" ### Errors which may occur when parsing keys and/or signatures to or from wire formats.\n","sig":null,"attributes":[{"value":"/ ### Errors which may occur when parsing keys and/or signatures to or from wire formats.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168012,"byte_end":168103,"line_start":11,"line_end":11,"column_start":1,"column_end":92}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168224,"byte_end":168249,"line_start":15,"line_end":15,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":606},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168356,"byte_end":168371,"line_start":22,"line_end":22,"column_start":10,"column_end":25},"name":"SignatureResult","qualname":"::errors::SignatureResult","value":"Result<T, SignatureError>","parent":null,"children":[],"decl_id":null,"docs":" `Result` specilized to this crate for convenience.\n","sig":null,"attributes":[{"value":"/ `Result` specilized to this crate for convenience.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168292,"byte_end":168346,"line_start":21,"line_end":21,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1251},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168623,"byte_end":168633,"line_start":28,"line_end":28,"column_start":5,"column_end":15},"name":"Commitment","qualname":"::errors::MultiSignatureStage::Commitment","value":"MultiSignatureStage::Commitment","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":" Initial commitment phase of a multi-signature\n","sig":null,"attributes":[{"value":"/ Initial commitment phase of a multi-signature","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168569,"byte_end":168618,"line_start":27,"line_end":27,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1253},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168681,"byte_end":168687,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"Reveal","qualname":"::errors::MultiSignatureStage::Reveal","value":"MultiSignatureStage::Reveal","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":" Reveal phase of a multi-signature\n","sig":null,"attributes":[{"value":"/ Reveal phase of a multi-signature","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168639,"byte_end":168676,"line_start":29,"line_end":29,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1255},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168745,"byte_end":168756,"line_start":32,"line_end":32,"column_start":5,"column_end":16},"name":"Cosignature","qualname":"::errors::MultiSignatureStage::Cosignature","value":"MultiSignatureStage::Cosignature","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":" Actual cosigning phase of a multi-signature\n","sig":null,"attributes":[{"value":"/ Actual cosigning phase of a multi-signature","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168693,"byte_end":168740,"line_start":31,"line_end":31,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":1250},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168543,"byte_end":168562,"line_start":26,"line_end":26,"column_start":10,"column_end":29},"name":"MultiSignatureStage","qualname":"::errors::MultiSignatureStage","value":"pub enum MultiSignatureStage {\n\n    /// Initial commitment phase of a multi-signature\n    Commitment,\n\n    /// Reveal phase of a multi-signature\n    Reveal,\n\n    /// Actual cosigning phase of a multi-signature\n    Cosignature,\n}","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1253},{"krate":0,"index":1255}],"decl_id":null,"docs":" Three-round trip multi-signature stage identifies used in error reporting\n","sig":null,"attributes":[{"value":"/ Three-round trip multi-signature stage identifies used in error reporting","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168405,"byte_end":168482,"line_start":24,"line_end":24,"column_start":1,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1272},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170184,"byte_end":170197,"line_start":73,"line_end":73,"column_start":5,"column_end":18},"name":"EquationFalse","qualname":"::errors::SignatureError::EquationFalse","value":"SignatureError::EquationFalse","parent":{"krate":0,"index":1271},"children":[],"decl_id":null,"docs":" A signature verification equation failed.","sig":null,"attributes":[{"value":"/ A signature verification equation failed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170030,"byte_end":170075,"line_start":69,"line_end":69,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170080,"byte_end":170083,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ We emphasise that all variants represent a failed signature,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170088,"byte_end":170152,"line_start":71,"line_end":71,"column_start":5,"column_end":69}},{"value":"/ not only this one.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170157,"byte_end":170179,"line_start":72,"line_end":72,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1274},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170264,"byte_end":170287,"line_start":75,"line_end":75,"column_start":5,"column_end":28},"name":"PointDecompressionError","qualname":"::errors::SignatureError::PointDecompressionError","value":"SignatureError::PointDecompressionError","parent":{"krate":0,"index":1271},"children":[],"decl_id":null,"docs":" Invalid point provided, usually to `verify` methods.\n","sig":null,"attributes":[{"value":"/ Invalid point provided, usually to `verify` methods.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170203,"byte_end":170259,"line_start":74,"line_end":74,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1276},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170362,"byte_end":170379,"line_start":77,"line_end":77,"column_start":5,"column_end":22},"name":"ScalarFormatError","qualname":"::errors::SignatureError::ScalarFormatError","value":"SignatureError::ScalarFormatError","parent":{"krate":0,"index":1271},"children":[],"decl_id":null,"docs":" Invalid scalar provided, usually to `Signature::from_bytes`.\n","sig":null,"attributes":[{"value":"/ Invalid scalar provided, usually to `Signature::from_bytes`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170293,"byte_end":170357,"line_start":76,"line_end":76,"column_start":5,"column_end":69}}]},{"kind":"StructVariant","id":{"krate":0,"index":1278},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170630,"byte_end":170646,"line_start":83,"line_end":83,"column_start":5,"column_end":21},"name":"BytesLengthError","qualname":"::errors::SignatureError::BytesLengthError","value":"SignatureError::BytesLengthError { name, description, length }","parent":{"krate":0,"index":1271},"children":[],"decl_id":null,"docs":" An error in the length of bytes handed to a constructor.","sig":null,"attributes":[{"value":"/ An error in the length of bytes handed to a constructor.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170385,"byte_end":170445,"line_start":78,"line_end":78,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170450,"byte_end":170453,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ To use this, pass a string specifying the `name` of the type","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170458,"byte_end":170522,"line_start":80,"line_end":80,"column_start":5,"column_end":69}},{"value":"/ which is returning the error, and the `length` in bytes which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170527,"byte_end":170592,"line_start":81,"line_end":81,"column_start":5,"column_end":70}},{"value":"/ its constructor expects.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170597,"byte_end":170625,"line_start":82,"line_end":82,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1282},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170975,"byte_end":170994,"line_start":92,"line_end":92,"column_start":5,"column_end":24},"name":"NotMarkedSchnorrkel","qualname":"::errors::SignatureError::NotMarkedSchnorrkel","value":"SignatureError::NotMarkedSchnorrkel","parent":{"krate":0,"index":1271},"children":[],"decl_id":null,"docs":" Signature not marked as schnorrkel, maybe try ed25519 instead.\n","sig":null,"attributes":[{"value":"/ Signature not marked as schnorrkel, maybe try ed25519 instead.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170904,"byte_end":170970,"line_start":91,"line_end":91,"column_start":5,"column_end":71}}]},{"kind":"StructVariant","id":{"krate":0,"index":1284},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":171114,"byte_end":171125,"line_start":95,"line_end":95,"column_start":5,"column_end":16},"name":"MuSigAbsent","qualname":"::errors::SignatureError::MuSigAbsent","value":"SignatureError::MuSigAbsent { musig_stage }","parent":{"krate":0,"index":1271},"children":[],"decl_id":null,"docs":" There is no record of the preceeding multi-signautre protocol\n stage for the specified public key.\n","sig":null,"attributes":[{"value":"/ There is no record of the preceeding multi-signautre protocol","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":171000,"byte_end":171065,"line_start":93,"line_end":93,"column_start":5,"column_end":70}},{"value":"/ stage for the specified public key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":171070,"byte_end":171109,"line_start":94,"line_end":94,"column_start":5,"column_end":44}}]},{"kind":"StructVariant","id":{"krate":0,"index":1286},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":171474,"byte_end":171491,"line_start":103,"line_end":103,"column_start":5,"column_end":22},"name":"MuSigInconsistent","qualname":"::errors::SignatureError::MuSigInconsistent","value":"SignatureError::MuSigInconsistent { musig_stage, duplicate }","parent":{"krate":0,"index":1271},"children":[],"decl_id":null,"docs":" For this public key, there are either conflicting records for\n the preceeding multi-signautre protocol stage or else duplicate\n duplicate records for the current stage.\n","sig":null,"attributes":[{"value":"/ For this public key, there are either conflicting records for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":171283,"byte_end":171348,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/ the preceeding multi-signautre protocol stage or else duplicate","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":171353,"byte_end":171420,"line_start":101,"line_end":101,"column_start":5,"column_end":72}},{"value":"/ duplicate records for the current stage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":171425,"byte_end":171469,"line_start":102,"line_end":102,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":1271},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":170009,"byte_end":170023,"line_start":68,"line_end":68,"column_start":10,"column_end":24},"name":"SignatureError","qualname":"::errors::SignatureError","value":"pub enum SignatureError {\n\n    /// A signature verification equation failed.\n    ///\n    /// We emphasise that all variants represent a failed signature,\n    /// not only this one.\n    EquationFalse,\n\n    /// Invalid point provided, usually to `verify` methods.\n    PointDecompressionError,\n\n    /// Invalid scalar provided, usually to `Signature::from_bytes`.\n    ScalarFormatError,\n\n    /// An error in the length of bytes handed to a constructor.\n    ///\n    /// To use this, pass a string specifying the `name` of the type\n    /// which is returning the error, and the `length` in bytes which\n    /// its constructor expects.\n    BytesLengthError {\n        /// Identifies the type returning the error\n        name: &'static str,\n        /// Describes the type returning the error\n        description: &'static str,\n        /// Length expected by the constructor in bytes\n        length: usize,\n    },\n\n    /// Signature not marked as schnorrkel, maybe try ed25519 instead.\n    NotMarkedSchnorrkel,\n\n    /// There is no record of the preceeding multi-signautre protocol\n    /// stage for the specified public key.\n    MuSigAbsent {\n        /// Identifies the multi-signature protocol stage during which\n        /// the error occured.\n        musig_stage: MultiSignatureStage,\n    },\n\n    /// For this public key, there are either conflicting records for\n    /// the preceeding multi-signautre protocol stage or else duplicate\n    /// duplicate records for the current stage.\n    MuSigInconsistent {\n        /// Identifies the multi-signature protocol stage during which\n        /// the error occured.\n        musig_stage: MultiSignatureStage,\n        /// Set true if the stage was reached correctly once but this\n        /// duplicate disagrees.\n        duplicate: bool,\n    },\n}","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1276},{"krate":0,"index":1278},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1286}],"decl_id":null,"docs":" Errors which may occur while processing signatures and keypairs.","sig":null,"attributes":[{"value":"/ Errors which may occur while processing signatures and keypairs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169093,"byte_end":169161,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169162,"byte_end":169165,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ All these errors represent a failed signature when they occur in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169166,"byte_end":169234,"line_start":48,"line_end":48,"column_start":1,"column_end":69}},{"value":"/ the context of verifying a sitgnature, including in deserializaing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169235,"byte_end":169305,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/ for verification.  We expose the distinction among them primarily","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169306,"byte_end":169375,"line_start":50,"line_end":50,"column_start":1,"column_end":70}},{"value":"/ for debugging purposes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169376,"byte_end":169403,"line_start":51,"line_end":51,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169404,"byte_end":169407,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ This error may arise due to:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169408,"byte_end":169440,"line_start":53,"line_end":53,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169441,"byte_end":169444,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ * Being given bytes with a length different to what was expected.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169445,"byte_end":169514,"line_start":55,"line_end":55,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169515,"byte_end":169518,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ * A problem decompressing `r`, a curve point, in the `Signature`, or the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169519,"byte_end":169595,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"/   curve point for a `PublicKey`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169596,"byte_end":169632,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169633,"byte_end":169636,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ * A problem with the format of `s`, a scalar, in the `Signature`.  This","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169637,"byte_end":169712,"line_start":60,"line_end":60,"column_start":1,"column_end":76}},{"value":"/   is only raised if the high-bit of the scalar was set.  (Scalars must","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169713,"byte_end":169787,"line_start":61,"line_end":61,"column_start":1,"column_end":75}},{"value":"/   only be constructed from 255-bit integers.)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169788,"byte_end":169837,"line_start":62,"line_end":62,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169838,"byte_end":169841,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ * Multi-signature protocol errors","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":169842,"byte_end":169879,"line_start":64,"line_end":64,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":614},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":173572,"byte_end":173604,"line_start":162,"line_end":162,"column_start":8,"column_end":40},"name":"serde_error_from_signature_error","qualname":"::errors::serde_error_from_signature_error","value":"pub fn serde_error_from_signature_error<E>(SignatureError) -> E where\nE: ::serde::de::Error","parent":null,"children":[],"decl_id":null,"docs":" Convert `SignatureError` into `::serde::de::Error` aka `SerdeError`","sig":null,"attributes":[{"value":"/ Convert `SignatureError` into `::serde::de::Error` aka `SerdeError`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":173322,"byte_end":173393,"line_start":157,"line_end":157,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":173394,"byte_end":173397,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ We should do this with `From` but right now the orphan rules prohibit","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":173398,"byte_end":173471,"line_start":159,"line_end":159,"column_start":1,"column_end":74}},{"value":"/ `impl From<SignatureError> for E where E: ::serde::de::Error`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":173472,"byte_end":173538,"line_start":160,"line_end":160,"column_start":1,"column_end":67}},{"value":"cfg(feature = \"serde\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":173539,"byte_end":173564,"line_start":161,"line_end":161,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":176222,"byte_end":176234,"line_start":61,"line_end":61,"column_start":8,"column_end":20},"name":"verify_batch","qualname":"::batch::verify_batch","value":"pub fn verify_batch<T, I>(I, &[Signature], &[PublicKey], bool)\n-> SignatureResult<()> where T: SigningTranscript, I: IntoIterator<Item = T>","parent":null,"children":[],"decl_id":null,"docs":" Verify a batch of `signatures` on `messages` with their respective `public_keys`.","sig":null,"attributes":[{"value":"/ Verify a batch of `signatures` on `messages` with their respective `public_keys`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":174682,"byte_end":174767,"line_start":20,"line_end":20,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":174768,"byte_end":174771,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Inputs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":174772,"byte_end":174784,"line_start":22,"line_end":22,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":174785,"byte_end":174788,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ * `messages` is a slice of byte slices, one per signed message.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":174789,"byte_end":174856,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ * `signatures` is a slice of `Signature`s.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":174857,"byte_end":174903,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/ * `public_keys` is a slice of `PublicKey`s.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":174904,"byte_end":174951,"line_start":26,"line_end":26,"column_start":1,"column_end":48}},{"value":"/ * `deduplicate_public_keys` ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":174952,"byte_end":174984,"line_start":27,"line_end":27,"column_start":1,"column_end":33}},{"value":"/ * `csprng` is an implementation of `RngCore+CryptoRng`, such as `rand::ThreadRng`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":174985,"byte_end":175071,"line_start":28,"line_end":28,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175072,"byte_end":175075,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175076,"byte_end":175088,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175089,"byte_end":175092,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This function will panic if the `messages, `signatures`, and `public_keys`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175093,"byte_end":175171,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ slices are not equal length.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175172,"byte_end":175204,"line_start":33,"line_end":33,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175205,"byte_end":175208,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175209,"byte_end":175222,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175223,"byte_end":175226,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ * A `Result` whose `Ok` value is an emtpy tuple and whose `Err` value is a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175227,"byte_end":175305,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/   `SignatureError` containing a description of the internal error which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175306,"byte_end":175381,"line_start":38,"line_end":38,"column_start":1,"column_end":76}},{"value":"/   occured.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175382,"byte_end":175396,"line_start":39,"line_end":39,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175397,"byte_end":175400,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175401,"byte_end":175415,"line_start":41,"line_end":41,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175416,"byte_end":175419,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175420,"byte_end":175427,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/ use schnorrkel::{Keypair,PublicKey,Signature,verify_batch,signing_context};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175428,"byte_end":175507,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175508,"byte_end":175511,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175512,"byte_end":175529,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/ let ctx = signing_context(b\"some batch\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175530,"byte_end":175575,"line_start":47,"line_end":47,"column_start":1,"column_end":46}},{"value":"/ let mut csprng = rand::thread_rng();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175576,"byte_end":175616,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/ let keypairs: Vec<Keypair> = (0..64).map(|_| Keypair::generate_with(&mut csprng)).collect();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175617,"byte_end":175713,"line_start":49,"line_end":49,"column_start":1,"column_end":97}},{"value":"/ let msg: &[u8] = b\"They're good dogs Brant\";","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175714,"byte_end":175762,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/ let signatures:  Vec<Signature> = keypairs.iter().map(|key| key.sign(ctx.bytes(&msg))).collect();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175763,"byte_end":175864,"line_start":51,"line_end":51,"column_start":1,"column_end":102}},{"value":"/ let public_keys: Vec<PublicKey> = keypairs.iter().map(|key| key.public).collect();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175865,"byte_end":175951,"line_start":52,"line_end":52,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175952,"byte_end":175955,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ let transcripts = ::std::iter::once(ctx.bytes(msg)).cycle().take(64);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":175956,"byte_end":176029,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":176030,"byte_end":176033,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ assert!( verify_batch(transcripts, &signatures[..], &public_keys[..], false).is_ok() );","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":176034,"byte_end":176125,"line_start":56,"line_end":56,"column_start":1,"column_end":92}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":176126,"byte_end":176133,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":176134,"byte_end":176141,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":176142,"byte_end":176189,"line_start":59,"line_end":59,"column_start":1,"column_end":48}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":176190,"byte_end":176214,"line_start":60,"line_end":60,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177374,"byte_end":177400,"line_start":95,"line_end":95,"column_start":8,"column_end":34},"name":"verify_batch_deterministic","qualname":"::batch::verify_batch_deterministic","value":"pub fn verify_batch_deterministic<T, I>(I, &[Signature], &[PublicKey], bool)\n-> SignatureResult<()> where T: SigningTranscript, I: IntoIterator<Item = T>","parent":null,"children":[],"decl_id":null,"docs":" Verify a batch of `signatures` on `messages` with their respective `public_keys`.","sig":null,"attributes":[{"value":"/ Verify a batch of `signatures` on `messages` with their respective `public_keys`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177118,"byte_end":177203,"line_start":90,"line_end":90,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177204,"byte_end":177207,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Avoids using system randomness and instead depends entirely upon delinearization.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177208,"byte_end":177293,"line_start":92,"line_end":92,"column_start":1,"column_end":86}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177294,"byte_end":177341,"line_start":93,"line_end":93,"column_start":1,"column_end":48}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177342,"byte_end":177366,"line_start":94,"line_end":94,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177990,"byte_end":178006,"line_start":113,"line_end":113,"column_start":8,"column_end":24},"name":"verify_batch_rng","qualname":"::batch::verify_batch_rng","value":"pub fn verify_batch_rng<T, I, R>(I, &[Signature], &[PublicKey], bool, R)\n-> SignatureResult<()> where T: SigningTranscript, I: IntoIterator<Item = T>,\nR: RngCore + CryptoRng","parent":null,"children":[],"decl_id":null,"docs":" Verify a batch of `signatures` on `messages` with their respective `public_keys`.\n \n Inputs and return agree with `verify_batch` except the user supplies their own random number generator.\n","sig":null,"attributes":[{"value":"/ Verify a batch of `signatures` on `messages` with their respective `public_keys`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177711,"byte_end":177796,"line_start":108,"line_end":108,"column_start":1,"column_end":86}},{"value":"/ ","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177797,"byte_end":177801,"line_start":109,"line_end":109,"column_start":1,"column_end":5}},{"value":"/ Inputs and return agree with `verify_batch` except the user supplies their own random number generator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177802,"byte_end":177909,"line_start":110,"line_end":110,"column_start":1,"column_end":108}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177910,"byte_end":177957,"line_start":111,"line_end":111,"column_start":1,"column_end":48}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177958,"byte_end":177982,"line_start":112,"line_end":112,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":657},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"musig","qualname":"::musig","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":1545},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":682},{"krate":0,"index":690},{"krate":0,"index":695},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":705},{"krate":0,"index":714},{"krate":0,"index":1304},{"krate":0,"index":1320},{"krate":0,"index":1317},{"krate":0,"index":1316},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":715},{"krate":0,"index":1322},{"krate":0,"index":1336},{"krate":0,"index":1334},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":1342},{"krate":0,"index":1363},{"krate":0,"index":1361},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":751},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":783},{"krate":0,"index":787},{"krate":0,"index":793},{"krate":0,"index":803},{"krate":0,"index":809},{"krate":0,"index":817},{"krate":0,"index":1365},{"krate":0,"index":1381},{"krate":0,"index":1378},{"krate":0,"index":1377},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":820},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836}],"decl_id":null,"docs":" Implementation for Ristretto Schnorr signatures of\n \"Simple Schnorr Multi-Signatures with Applications to Bitcoin\" by\n Gregory Maxwell, Andrew Poelstra, Yannick Seurin, and Pieter Wuille\n https://eprint.iacr.org/2018/068","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10263,"byte_end":10286,"line_start":276,"line_end":276,"column_start":1,"column_end":24}},{"value":"/ Implementation for Ristretto Schnorr signatures of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185294,"byte_end":185348,"line_start":10,"line_end":10,"column_start":1,"column_end":55}},{"value":"/ \"Simple Schnorr Multi-Signatures with Applications to Bitcoin\" by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185349,"byte_end":185418,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ Gregory Maxwell, Andrew Poelstra, Yannick Seurin, and Pieter Wuille","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185419,"byte_end":185490,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ https://eprint.iacr.org/2018/068","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185491,"byte_end":185527,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185528,"byte_end":185531,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ We observe the security arguments from the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185532,"byte_end":185578,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/ [original 2-round version](https://eprint.iacr.org/2018/068/20180118:124757)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185579,"byte_end":185659,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ were found lacking in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185660,"byte_end":185685,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/ \"On the Provable Security of Two-Round Multi-Signatures\" by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185686,"byte_end":185749,"line_start":18,"line_end":18,"column_start":1,"column_end":64}},{"value":"/ Manu Drijvers, Kasra Edalatnejad, Bryan Ford, and Gregory Neven","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185750,"byte_end":185817,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/ https://eprint.iacr.org/2018/417","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185818,"byte_end":185854,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/ ([slides](https://rwc.iacr.org/2019/slides/neven.pdf))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185855,"byte_end":185913,"line_start":21,"line_end":21,"column_start":1,"column_end":59}},{"value":"/ so we implement only the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185914,"byte_end":185942,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ [3-round version](https://eprint.iacr.org/2018/068/20180520:191909).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":185943,"byte_end":186015,"line_start":23,"line_end":23,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":186016,"byte_end":186019,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Appendix A of the [MuSig paper](https://eprint.iacr.org/2018/068)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":186020,"byte_end":186089,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ discusses Interactive Aggregate Signatures (IAS) in which cosigners'","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":186090,"byte_end":186162,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ messages differ.  Appendix A.3 gives a secure scheme that correctly","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":186163,"byte_end":186234,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/ binds signers to their messages.  See","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":186235,"byte_end":186276,"line_start":28,"line_end":28,"column_start":1,"column_end":42}},{"value":"/ https://github.com/w3f/schnorrkel/issues/5#issuecomment-477912319","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":186277,"byte_end":186346,"line_start":29,"line_end":29,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":679},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188508,"byte_end":188526,"line_start":97,"line_end":97,"column_start":11,"column_end":29},"name":"AggregatePublicKey","qualname":"::musig::AggregatePublicKey","value":"AggregatePublicKey","parent":null,"children":[{"krate":0,"index":680},{"krate":0,"index":681}],"decl_id":null,"docs":" Any data structure used for aggregating public keys.","sig":null,"attributes":[{"value":"/ Any data structure used for aggregating public keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188203,"byte_end":188259,"line_start":91,"line_end":91,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188260,"byte_end":188263,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ Internally, these must usually iterate over the public keys being","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188264,"byte_end":188333,"line_start":93,"line_end":93,"column_start":1,"column_end":70}},{"value":"/ aggregated in lexicographic order, so any `BTreeMap<PublicKey,V>`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188334,"byte_end":188403,"line_start":94,"line_end":94,"column_start":1,"column_end":70}},{"value":"/ works.  Alternative designs sound plausible when working with some","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188404,"byte_end":188474,"line_start":95,"line_end":95,"column_start":1,"column_end":71}},{"value":"/ blockchain scheme.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188475,"byte_end":188497,"line_start":96,"line_end":96,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188623,"byte_end":188632,"line_start":99,"line_end":99,"column_start":8,"column_end":17},"name":"weighting","qualname":"::musig::AggregatePublicKey::weighting","value":"pub fn weighting(&Self, &PublicKey) -> Option<Scalar>","parent":{"krate":0,"index":679},"children":[],"decl_id":null,"docs":" Return delinearization weighting for one of many public keys being aggregated.\n","sig":null,"attributes":[{"value":"/ Return delinearization weighting for one of many public keys being aggregated.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188533,"byte_end":188615,"line_start":98,"line_end":98,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188726,"byte_end":188736,"line_start":102,"line_end":102,"column_start":8,"column_end":18},"name":"public_key","qualname":"::musig::AggregatePublicKey::public_key","value":"pub fn public_key(&Self) -> PublicKey","parent":{"krate":0,"index":679},"children":[],"decl_id":null,"docs":" Returns aggregated public key.\n","sig":null,"attributes":[{"value":"/ Returns aggregated public key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188684,"byte_end":188718,"line_start":101,"line_end":101,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":690},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":189470,"byte_end":189493,"line_start":125,"line_end":125,"column_start":12,"column_end":35},"name":"AggregatePublicKeySlice","qualname":"::musig::AggregatePublicKeySlice","value":"","parent":null,"children":[],"decl_id":null,"docs":" Aggregation helper for public keys kept in slices\n","sig":null,"attributes":[{"value":"/ Aggregation helper for public keys kept in slices","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":189405,"byte_end":189458,"line_start":124,"line_end":124,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":189597,"byte_end":189628,"line_start":129,"line_end":129,"column_start":8,"column_end":39},"name":"aggregate_public_key_from_slice","qualname":"::musig::aggregate_public_key_from_slice","value":"pub fn aggregate_public_key_from_slice<'a>(&'a mut [PublicKey])\n-> Option<AggregatePublicKeySlice>","parent":null,"children":[],"decl_id":null,"docs":" Aggregate public keys stored in a mutable slice\n","sig":null,"attributes":[{"value":"/ Aggregate public keys stored in a mutable slice","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":189538,"byte_end":189589,"line_start":128,"line_end":128,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":698},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":189975,"byte_end":190011,"line_start":139,"line_end":139,"column_start":8,"column_end":44},"name":"aggregate_public_key_from_refs_slice","qualname":"::musig::aggregate_public_key_from_refs_slice","value":"pub fn aggregate_public_key_from_refs_slice<'a>(&'a mut [&'a PublicKey])\n-> Option<AggregatePublicKeySlice>","parent":null,"children":[],"decl_id":null,"docs":" Aggregate public keys stored in a mutable slice\n","sig":null,"attributes":[{"value":"/ Aggregate public keys stored in a mutable slice","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":189916,"byte_end":189967,"line_start":138,"line_end":138,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":190365,"byte_end":190403,"line_start":149,"line_end":149,"column_start":8,"column_end":46},"name":"aggregate_public_key_from_sorted_slice","qualname":"::musig::aggregate_public_key_from_sorted_slice","value":"pub fn aggregate_public_key_from_sorted_slice<'a, K>(&'a mut [K])\n-> Option<AggregatePublicKeySlice> where K: Borrow<PublicKey> + PartialOrd<K>","parent":null,"children":[],"decl_id":null,"docs":" Aggregate public keys stored in a sorted slice\n","sig":null,"attributes":[{"value":"/ Aggregate public keys stored in a sorted slice","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":190307,"byte_end":190357,"line_start":148,"line_end":148,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1304},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":191584,"byte_end":191594,"line_start":184,"line_end":184,"column_start":12,"column_end":22},"name":"Commitment","qualname":"::musig::Commitment","value":"","parent":null,"children":[],"decl_id":null,"docs":" Commitments to `R_i` values shared between cosigners during signing\n","sig":null,"attributes":[{"value":"/ Commitments to `R_i` values shared between cosigners during signing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":191460,"byte_end":191531,"line_start":182,"line_end":182,"column_start":1,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":1306},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":191595,"byte_end":191620,"line_start":184,"line_end":184,"column_start":23,"column_end":48},"name":"0","qualname":"::musig::Commitment::0","value":"[u8; _]","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":722},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":192854,"byte_end":192860,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"Reveal","qualname":"::musig::Reveal","value":"","parent":null,"children":[],"decl_id":null,"docs":" Revealed `R_i` values shared between cosigners during signing\n","sig":null,"attributes":[{"value":"/ Revealed `R_i` values shared between cosigners during signing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":192738,"byte_end":192803,"line_start":226,"line_end":226,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":724},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":192861,"byte_end":192881,"line_start":228,"line_end":228,"column_start":19,"column_end":39},"name":"0","qualname":"::musig::Reveal::0","value":"[u8; _]","parent":{"krate":0,"index":722},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":745},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":197202,"byte_end":197207,"line_start":348,"line_end":348,"column_start":12,"column_end":17},"name":"MuSig","qualname":"::musig::MuSig","value":"MuSig {  }","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750}],"decl_id":null,"docs":" Schnorr multi-signature (MuSig) container generic over its session types\n","sig":null,"attributes":[{"value":"/ Schnorr multi-signature (MuSig) container generic over its session types","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":197089,"byte_end":197165,"line_start":346,"line_end":346,"column_start":1,"column_end":77}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":197166,"byte_end":197190,"line_start":347,"line_end":347,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":197496,"byte_end":197507,"line_start":358,"line_end":358,"column_start":12,"column_end":23},"name":"public_keys","qualname":"<MuSig<T, S>>::public_keys","value":"pub fn public_keys(&Self, bool) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over public keys.","sig":null,"attributes":[{"value":"/ Iterates over public keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":197351,"byte_end":197381,"line_start":355,"line_end":355,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":197386,"byte_end":197389,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ If `require_reveal=true` then we count only public key that revealed their `R` values.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":197394,"byte_end":197484,"line_start":357,"line_end":357,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":198397,"byte_end":198407,"line_start":379,"line_end":379,"column_start":12,"column_end":22},"name":"public_key","qualname":"<MuSig<T, S>>::public_key","value":"pub fn public_key(&Self) -> PublicKey","parent":null,"children":[],"decl_id":null,"docs":" Aggregate public key given currently revealed `R` values\n","sig":null,"attributes":[{"value":"/ Aggregate public key given currently revealed `R` values","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":198325,"byte_end":198385,"line_start":378,"line_end":378,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":198573,"byte_end":198592,"line_start":383,"line_end":383,"column_start":12,"column_end":31},"name":"expected_public_key","qualname":"<MuSig<T, S>>::expected_public_key","value":"pub fn expected_public_key(&Self) -> PublicKey","parent":null,"children":[],"decl_id":null,"docs":" Aggregate public key expected if all currently committed nodes fully participate\n","sig":null,"attributes":[{"value":"/ Aggregate public key expected if all currently committed nodes fully participate","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":198477,"byte_end":198561,"line_start":382,"line_end":382,"column_start":5,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":774},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":200778,"byte_end":200794,"line_start":440,"line_end":440,"column_start":11,"column_end":27},"name":"TranscriptStages","qualname":"::musig::TranscriptStages","value":"TranscriptStages","parent":null,"children":[],"decl_id":null,"docs":" Initial cosigning stages during which transcript modification\n remains possible but not advisable.\n","sig":null,"attributes":[{"value":"/ Initial cosigning stages during which transcript modification","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":200662,"byte_end":200727,"line_start":438,"line_end":438,"column_start":1,"column_end":66}},{"value":"/ remains possible but not advisable.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":200728,"byte_end":200767,"line_start":439,"line_end":439,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201332,"byte_end":201342,"line_start":451,"line_end":451,"column_start":12,"column_end":22},"name":"transcript","qualname":"<MuSig<T, S>>::transcript","value":"pub fn transcript(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" We permit extending the transcript whenever you like, so\n that say the message may be agreed upon in parallel to the\n commitments.  We advise against doing so however, as this\n requires absolute faith in your random number generator,\n usually `rand::thread_rng()`.\n","sig":null,"attributes":[{"value":"/ We permit extending the transcript whenever you like, so","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201024,"byte_end":201084,"line_start":446,"line_end":446,"column_start":5,"column_end":65}},{"value":"/ that say the message may be agreed upon in parallel to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201089,"byte_end":201151,"line_start":447,"line_end":447,"column_start":5,"column_end":67}},{"value":"/ commitments.  We advise against doing so however, as this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201156,"byte_end":201217,"line_start":448,"line_end":448,"column_start":5,"column_end":66}},{"value":"/ requires absolute faith in your random number generator,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201222,"byte_end":201282,"line_start":449,"line_end":449,"column_start":5,"column_end":65}},{"value":"/ usually `rand::thread_rng()`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201287,"byte_end":201320,"line_start":450,"line_end":450,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201700,"byte_end":201705,"line_start":461,"line_end":461,"column_start":12,"column_end":17},"name":"musig","qualname":"<Keypair>::musig","value":"pub fn musig<'k, T>(&'k Self, T) -> MuSig<T, CommitStage<&'k Keypair>> where\nT: SigningTranscript + Clone","parent":null,"children":[],"decl_id":null,"docs":" Initialize a multi-signature aka cosignature protocol run.","sig":null,"attributes":[{"value":"/ Initialize a multi-signature aka cosignature protocol run.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201402,"byte_end":201464,"line_start":455,"line_end":455,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201469,"byte_end":201472,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ We borrow the keypair here to discurage keeping too many","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201477,"byte_end":201537,"line_start":457,"line_end":457,"column_start":5,"column_end":65}},{"value":"/ copies of the private key, but the `MuSig::new` method","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201542,"byte_end":201600,"line_start":458,"line_end":458,"column_start":5,"column_end":63}},{"value":"/ can create an owned version, or use `Rc` or `Arc`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201605,"byte_end":201659,"line_start":459,"line_end":459,"column_start":5,"column_end":59}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201664,"byte_end":201688,"line_start":460,"line_end":460,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":787},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201923,"byte_end":201934,"line_start":469,"line_end":469,"column_start":12,"column_end":23},"name":"CommitStage","qualname":"::musig::CommitStage","value":"CommitStage {  }","parent":null,"children":[{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":792}],"decl_id":null,"docs":" Commitment stage for cosigner's `R` values\n","sig":null,"attributes":[{"value":"/ Commitment stage for cosigner's `R` values","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201840,"byte_end":201886,"line_start":467,"line_end":467,"column_start":1,"column_end":47}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201887,"byte_end":201911,"line_start":468,"line_end":468,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":202499,"byte_end":202502,"line_start":485,"line_end":485,"column_start":12,"column_end":15},"name":"new","qualname":"<MuSig<T, CommitStage<K>>>::new","value":"pub fn new(K, T) -> MuSig<T, CommitStage<K>>","parent":null,"children":[],"decl_id":null,"docs":" Initialize a multi-signature aka cosignature protocol run.","sig":null,"attributes":[{"value":"/ Initialize a multi-signature aka cosignature protocol run.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":202116,"byte_end":202178,"line_start":478,"line_end":478,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":202183,"byte_end":202186,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ We encurage borrowing the `Keypair` to minimize copies of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":202191,"byte_end":202252,"line_start":480,"line_end":480,"column_start":5,"column_end":66}},{"value":"/ the private key, so we provide the `Keypair::musig` method","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":202257,"byte_end":202319,"line_start":481,"line_end":481,"column_start":5,"column_end":67}},{"value":"/ for the `K = &'k Keypair` case.  You could use `Rc` or `Arc`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":202324,"byte_end":202388,"line_start":482,"line_end":482,"column_start":5,"column_end":69}},{"value":"/ with this `MuSig::new` method, or even pass in an owned copy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":202393,"byte_end":202458,"line_start":483,"line_end":483,"column_start":5,"column_end":70}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":202463,"byte_end":202487,"line_start":484,"line_end":484,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":203490,"byte_end":203504,"line_start":509,"line_end":509,"column_start":12,"column_end":26},"name":"our_commitment","qualname":"<MuSig<T, CommitStage<K>>>::our_commitment","value":"pub fn our_commitment(&Self) -> Commitment","parent":null,"children":[],"decl_id":null,"docs":" Our commitment to our `R` to send to all other cosigners\n","sig":null,"attributes":[{"value":"/ Our commitment to our `R` to send to all other cosigners","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":203418,"byte_end":203478,"line_start":508,"line_end":508,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":203687,"byte_end":203707,"line_start":514,"line_end":514,"column_start":12,"column_end":32},"name":"add_their_commitment","qualname":"<MuSig<T, CommitStage<K>>>::add_their_commitment","value":"pub fn add_their_commitment(&mut Self, PublicKey, Commitment)\n-> SignatureResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Add a new cosigner's public key and associated `R` bypassing our commitmewnt phase.\n","sig":null,"attributes":[{"value":"/ Add a new cosigner's public key and associated `R` bypassing our commitmewnt phase.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":203588,"byte_end":203675,"line_start":513,"line_end":513,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":204306,"byte_end":204318,"line_start":531,"line_end":531,"column_start":12,"column_end":24},"name":"reveal_stage","qualname":"<MuSig<T, CommitStage<K>>>::reveal_stage","value":"pub fn reveal_stage(Self) -> MuSig<T, RevealStage<K>>","parent":null,"children":[],"decl_id":null,"docs":" Commit to reveal phase transition.\n","sig":null,"attributes":[{"value":"/ Commit to reveal phase transition.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":204227,"byte_end":204265,"line_start":529,"line_end":529,"column_start":5,"column_end":43}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":204270,"byte_end":204294,"line_start":530,"line_end":530,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":803},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":204594,"byte_end":204605,"line_start":539,"line_end":539,"column_start":12,"column_end":23},"name":"RevealStage","qualname":"::musig::RevealStage","value":"RevealStage {  }","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":808}],"decl_id":null,"docs":" Reveal stage for cosigner's `R` values\n","sig":null,"attributes":[{"value":"/ Reveal stage for cosigner's `R` values","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":204515,"byte_end":204557,"line_start":537,"line_end":537,"column_start":1,"column_end":43}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":204558,"byte_end":204582,"line_start":538,"line_end":538,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":204862,"byte_end":204872,"line_start":549,"line_end":549,"column_start":12,"column_end":22},"name":"our_reveal","qualname":"<MuSig<T, RevealStage<K>>>::our_reveal","value":"pub fn our_reveal(&Self) -> &Reveal","parent":null,"children":[],"decl_id":null,"docs":" Reveal our `R` contribution to send to all other cosigners\n","sig":null,"attributes":[{"value":"/ Reveal our `R` contribution to send to all other cosigners","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":204788,"byte_end":204850,"line_start":548,"line_end":548,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205168,"byte_end":205184,"line_start":556,"line_end":556,"column_start":12,"column_end":28},"name":"add_their_reveal","qualname":"<MuSig<T, RevealStage<K>>>::add_their_reveal","value":"pub fn add_their_reveal(&mut Self, PublicKey, Reveal) -> SignatureResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Include a revealed `R` value from a previously committed cosigner\n","sig":null,"attributes":[{"value":"/ Include a revealed `R` value from a previously committed cosigner","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205087,"byte_end":205156,"line_start":555,"line_end":555,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206759,"byte_end":206770,"line_start":591,"line_end":591,"column_start":12,"column_end":23},"name":"add_trusted","qualname":"<MuSig<T, RevealStage<K>>>::add_trusted","value":"pub fn add_trusted(&mut Self, PublicKey, Reveal) -> SignatureResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Add a new cosigner's public key and associated `R` bypassing our\n commitmewnt phase.","sig":null,"attributes":[{"value":"/ Add a new cosigner's public key and associated `R` bypassing our","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205590,"byte_end":205658,"line_start":569,"line_end":569,"column_start":5,"column_end":73}},{"value":"/ commitmewnt phase.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205663,"byte_end":205685,"line_start":570,"line_end":570,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205690,"byte_end":205693,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ We implemented defenses that reduce the risks posed by this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205698,"byte_end":205761,"line_start":572,"line_end":572,"column_start":5,"column_end":68}},{"value":"/ method, but anyone who wishes provable security should heed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205766,"byte_end":205829,"line_start":573,"line_end":573,"column_start":5,"column_end":68}},{"value":"/ the advice below:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205834,"byte_end":205855,"line_start":574,"line_end":574,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205860,"byte_end":205863,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ Avoid using this due to the attack described in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205868,"byte_end":205919,"line_start":576,"line_end":576,"column_start":5,"column_end":56}},{"value":"/ \"On the Provable Security of Two-Round Multi-Signatures\" by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205924,"byte_end":205987,"line_start":577,"line_end":577,"column_start":5,"column_end":68}},{"value":"/ Manu Drijvers, Kasra Edalatnejad, Bryan Ford, and Gregory Neven","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":205992,"byte_end":206059,"line_start":578,"line_end":578,"column_start":5,"column_end":72}},{"value":"/ https://eprint.iacr.org/2018/417","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206064,"byte_end":206100,"line_start":579,"line_end":579,"column_start":5,"column_end":41}},{"value":"/ Avoid using this for public keys held by networked devices","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206105,"byte_end":206167,"line_start":580,"line_end":580,"column_start":5,"column_end":67}},{"value":"/ in particular.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206172,"byte_end":206190,"line_start":581,"line_end":581,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206195,"byte_end":206198,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ There are however limited scenarios in which using this appears","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206203,"byte_end":206270,"line_start":583,"line_end":583,"column_start":5,"column_end":72}},{"value":"/ secure, primarily if the trusted device is (a) air gapped,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206275,"byte_end":206337,"line_start":584,"line_end":584,"column_start":5,"column_end":67}},{"value":"/ (b) stateful, and (c) infrequently used, via some constrained","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206342,"byte_end":206407,"line_start":585,"line_end":585,"column_start":5,"column_end":70}},{"value":"/ channel like manually scanning QR code.  Almost all hardware","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206412,"byte_end":206476,"line_start":586,"line_end":586,"column_start":5,"column_end":69}},{"value":"/ wallets designs fail (b), but non-hardware wallets fail (a),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206481,"byte_end":206545,"line_start":587,"line_end":587,"column_start":5,"column_end":69}},{"value":"/ with the middle ground being only something like Pairty Signer.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206550,"byte_end":206617,"line_start":588,"line_end":588,"column_start":5,"column_end":72}},{"value":"/ Also, any public keys controlled by an organization likely","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206622,"byte_end":206684,"line_start":589,"line_end":589,"column_start":5,"column_end":67}},{"value":"/ fail (c) too, making this only useful for individuals.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":206689,"byte_end":206747,"line_start":590,"line_end":590,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":207406,"byte_end":207418,"line_start":609,"line_end":609,"column_start":12,"column_end":24},"name":"cosign_stage","qualname":"<MuSig<T, RevealStage<K>>>::cosign_stage","value":"pub fn cosign_stage(Self) -> MuSig<T, CosignStage>","parent":null,"children":[],"decl_id":null,"docs":" Reveal to cosign phase transition.\n","sig":null,"attributes":[{"value":"/ Reveal to cosign phase transition.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":207327,"byte_end":207365,"line_start":607,"line_end":607,"column_start":5,"column_end":43}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":207370,"byte_end":207394,"line_start":608,"line_end":608,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":817},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":208611,"byte_end":208622,"line_start":637,"line_end":637,"column_start":12,"column_end":23},"name":"CosignStage","qualname":"::musig::CosignStage","value":"CosignStage {  }","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819}],"decl_id":null,"docs":" Final cosigning stage  colelction\n","sig":null,"attributes":[{"value":"/ Final cosigning stage  colelction","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":208537,"byte_end":208574,"line_start":635,"line_end":635,"column_start":1,"column_end":38}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":208575,"byte_end":208599,"line_start":636,"line_end":636,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1365},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":208841,"byte_end":208852,"line_start":646,"line_end":646,"column_start":12,"column_end":23},"name":"Cosignature","qualname":"::musig::Cosignature","value":"","parent":null,"children":[],"decl_id":null,"docs":" Cosignatures shared between cosigners during signing\n","sig":null,"attributes":[{"value":"/ Cosignatures shared between cosigners during signing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":208732,"byte_end":208788,"line_start":644,"line_end":644,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":1367},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":208853,"byte_end":208865,"line_start":646,"line_end":646,"column_start":24,"column_end":36},"name":"0","qualname":"::musig::Cosignature::0","value":"[u8; 32]","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":208979,"byte_end":208994,"line_start":650,"line_end":650,"column_start":12,"column_end":27},"name":"our_cosignature","qualname":"<MuSig<T, CosignStage>>::our_cosignature","value":"pub fn our_cosignature(&Self) -> Cosignature","parent":null,"children":[],"decl_id":null,"docs":" Reveals our signature contribution\n","sig":null,"attributes":[{"value":"/ Reveals our signature contribution","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":208929,"byte_end":208967,"line_start":649,"line_end":649,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":209137,"byte_end":209158,"line_start":655,"line_end":655,"column_start":12,"column_end":33},"name":"add_their_cosignature","qualname":"<MuSig<T, CosignStage>>::add_their_cosignature","value":"pub fn add_their_cosignature(&mut Self, PublicKey, Cosignature)\n-> SignatureResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Include a cosignature from another cosigner\n","sig":null,"attributes":[{"value":"/ Include a cosignature from another cosigner","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":209078,"byte_end":209125,"line_start":654,"line_end":654,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":209773,"byte_end":209781,"line_start":671,"line_end":671,"column_start":12,"column_end":20},"name":"cosigned","qualname":"<MuSig<T, CosignStage>>::cosigned","value":"pub fn cosigned(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Interate over the cosigners who successfully revaled and\n later cosigned.\n","sig":null,"attributes":[{"value":"/ Interate over the cosigners who successfully revaled and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":209677,"byte_end":209737,"line_start":669,"line_end":669,"column_start":5,"column_end":65}},{"value":"/ later cosigned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":209742,"byte_end":209761,"line_start":670,"line_end":670,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":210223,"byte_end":210233,"line_start":682,"line_end":682,"column_start":12,"column_end":22},"name":"uncosigned","qualname":"<MuSig<T, CosignStage>>::uncosigned","value":"pub fn uncosigned(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Interate over the possible cosigners who successfully committed\n and revaled, but actually cosigned.\n","sig":null,"attributes":[{"value":"/ Interate over the possible cosigners who successfully committed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":210100,"byte_end":210167,"line_start":680,"line_end":680,"column_start":5,"column_end":72}},{"value":"/ and revaled, but actually cosigned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":210172,"byte_end":210211,"line_start":681,"line_end":681,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":210631,"byte_end":210635,"line_start":693,"line_end":693,"column_start":12,"column_end":16},"name":"sign","qualname":"<MuSig<T, CosignStage>>::sign","value":"pub fn sign(&Self) -> Option<Signature>","parent":null,"children":[],"decl_id":null,"docs":" Actually computes the cosignature\n","sig":null,"attributes":[{"value":"/ Actually computes the cosignature","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":210553,"byte_end":210590,"line_start":691,"line_end":691,"column_start":5,"column_end":42}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":210595,"byte_end":210619,"line_start":692,"line_end":692,"column_start":5,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":832},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":211375,"byte_end":211395,"line_start":710,"line_end":710,"column_start":8,"column_end":28},"name":"collect_cosignatures","qualname":"::musig::collect_cosignatures","value":"pub fn collect_cosignatures<T: SigningTranscript + Clone>(T)\n-> MuSig<T, CollectStage>","parent":null,"children":[],"decl_id":null,"docs":" Initialize a collector of cosignatures who does not themselves cosign.\n","sig":null,"attributes":[{"value":"/ Initialize a collector of cosignatures who does not themselves cosign.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":211268,"byte_end":211342,"line_start":708,"line_end":708,"column_start":1,"column_end":75}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":211343,"byte_end":211367,"line_start":709,"line_end":709,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":834},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":211643,"byte_end":211655,"line_start":716,"line_end":716,"column_start":12,"column_end":24},"name":"CollectStage","qualname":"::musig::CollectStage","value":"","parent":null,"children":[],"decl_id":null,"docs":" Initial stage for cosignature collectors who do not themselves cosign.\n","sig":null,"attributes":[{"value":"/ Initial stage for cosignature collectors who do not themselves cosign.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":211557,"byte_end":211631,"line_start":715,"line_end":715,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":211826,"byte_end":211829,"line_start":721,"line_end":721,"column_start":12,"column_end":15},"name":"add","qualname":"<MuSig<T, CollectStage>>::add","value":"pub fn add(&mut Self, PublicKey, Reveal, Cosignature) -> SignatureResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Adds revealed `R` and cosignature into a cosignature collector\n","sig":null,"attributes":[{"value":"/ Adds revealed `R` and cosignature into a cosignature collector","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":211719,"byte_end":211785,"line_start":719,"line_end":719,"column_start":5,"column_end":71}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":211790,"byte_end":211814,"line_start":720,"line_end":720,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":212641,"byte_end":212650,"line_start":742,"line_end":742,"column_start":12,"column_end":21},"name":"signature","qualname":"<MuSig<T, CollectStage>>::signature","value":"pub fn signature(Self) -> Signature","parent":null,"children":[],"decl_id":null,"docs":" Actually computes the collected cosignature.\n","sig":null,"attributes":[{"value":"/ Actually computes the collected cosignature.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":212552,"byte_end":212600,"line_start":740,"line_end":740,"column_start":5,"column_end":53}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":212605,"byte_end":212629,"line_start":741,"line_end":741,"column_start":5,"column_end":29}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":17775,"byte_end":17788,"line_start":43,"line_end":43,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":18319,"byte_end":18332,"line_start":65,"line_end":65,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":21720,"byte_end":21733,"line_start":158,"line_end":158,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":22081,"byte_end":22094,"line_start":172,"line_end":172,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":22679,"byte_end":22692,"line_start":191,"line_end":191,"column_start":14,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":23051,"byte_end":23064,"line_start":204,"line_end":204,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29208,"byte_end":29221,"line_start":101,"line_end":101,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29378,"byte_end":29391,"line_start":107,"line_end":107,"column_start":13,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29414,"byte_end":29427,"line_start":108,"line_end":108,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29548,"byte_end":29561,"line_start":113,"line_end":113,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29655,"byte_end":29668,"line_start":119,"line_end":119,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":38444,"byte_end":38453,"line_start":365,"line_end":365,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":38639,"byte_end":38648,"line_start":371,"line_end":371,"column_start":13,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":38671,"byte_end":38680,"line_start":372,"line_end":372,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":38801,"byte_end":38810,"line_start":377,"line_end":377,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39457,"byte_end":39466,"line_start":404,"line_end":404,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":133},{"krate":0,"index":138},{"krate":0,"index":142},{"krate":0,"index":147},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46396,"byte_end":46405,"line_start":580,"line_end":580,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46737,"byte_end":46746,"line_start":595,"line_end":595,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46835,"byte_end":46844,"line_start":601,"line_end":601,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49507,"byte_end":49516,"line_start":671,"line_end":671,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49915,"byte_end":49922,"line_start":691,"line_end":691,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50006,"byte_end":50013,"line_start":696,"line_end":696,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50099,"byte_end":50106,"line_start":702,"line_end":702,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50242,"byte_end":50249,"line_start":709,"line_end":709,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":65365,"byte_end":65375,"line_start":144,"line_end":144,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67053,"byte_end":67067,"line_start":192,"line_end":192,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":245},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70701,"byte_end":70714,"line_start":284,"line_end":284,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":71177,"byte_end":71190,"line_start":296,"line_end":296,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":71352,"byte_end":71365,"line_start":303,"line_end":303,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":73305,"byte_end":73329,"line_start":361,"line_end":361,"column_start":33,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":77863,"byte_end":77872,"line_start":58,"line_end":58,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":78812,"byte_end":78821,"line_start":80,"line_end":80,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":309},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":81858,"byte_end":81867,"line_start":158,"line_end":158,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":84295,"byte_end":84304,"line_start":219,"line_end":219,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86556,"byte_end":86563,"line_start":281,"line_end":281,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101825,"byte_end":101826,"line_start":143,"line_end":143,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102839,"byte_end":102848,"line_start":165,"line_end":165,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103860,"byte_end":103869,"line_start":188,"line_end":188,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105112,"byte_end":105121,"line_start":217,"line_end":217,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":389},{"krate":0,"index":391},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106961,"byte_end":106970,"line_start":272,"line_end":272,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107862,"byte_end":107869,"line_start":292,"line_end":292,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108082,"byte_end":108090,"line_start":299,"line_end":299,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111896,"byte_end":111907,"line_start":380,"line_end":380,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":112369,"byte_end":112380,"line_start":391,"line_end":391,"column_start":41,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":112742,"byte_end":112751,"line_start":406,"line_end":406,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":115819,"byte_end":115827,"line_start":485,"line_end":485,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":117592,"byte_end":117609,"line_start":535,"line_end":535,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":449},{"krate":0,"index":456},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120788,"byte_end":120795,"line_start":612,"line_end":612,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":468},{"krate":0,"index":472},{"krate":0,"index":476},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126487,"byte_end":126496,"line_start":746,"line_end":746,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":492},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":147247,"byte_end":147256,"line_start":80,"line_end":80,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148136,"byte_end":148145,"line_start":104,"line_end":104,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":149637,"byte_end":149650,"line_start":137,"line_end":137,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150697,"byte_end":150704,"line_start":158,"line_end":158,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":152898,"byte_end":152905,"line_start":202,"line_end":202,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":153202,"byte_end":153211,"line_start":212,"line_end":212,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":153415,"byte_end":153424,"line_start":220,"line_end":220,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154424,"byte_end":154435,"line_start":245,"line_end":245,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155094,"byte_end":155105,"line_start":264,"line_end":264,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160466,"byte_end":160480,"line_start":54,"line_end":54,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161073,"byte_end":161087,"line_start":71,"line_end":71,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161209,"byte_end":161216,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":162950,"byte_end":162959,"line_start":115,"line_end":115,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165062,"byte_end":165069,"line_start":162,"line_end":162,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":166640,"byte_end":166649,"line_start":197,"line_end":197,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168778,"byte_end":168797,"line_start":35,"line_end":35,"column_start":18,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":172102,"byte_end":172116,"line_start":128,"line_end":128,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":176593,"byte_end":176601,"line_start":75,"line_end":75,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177105,"byte_end":177113,"line_start":88,"line_end":88,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188794,"byte_end":188802,"line_start":105,"line_end":105,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":190721,"byte_end":190744,"line_start":158,"line_end":158,"column_start":35,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":191629,"byte_end":191639,"line_start":186,"line_end":186,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":192257,"byte_end":192271,"line_start":207,"line_end":207,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":192937,"byte_end":192943,"line_start":231,"line_end":231,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":193032,"byte_end":193038,"line_start":234,"line_end":234,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":193249,"byte_end":193255,"line_start":244,"line_end":244,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":193266,"byte_end":193272,"line_start":246,"line_end":246,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":738},{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":194428,"byte_end":194431,"line_start":280,"line_end":280,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":197334,"byte_end":197339,"line_start":354,"line_end":354,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":764},{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":200827,"byte_end":200838,"line_start":441,"line_end":441,"column_start":30,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":200899,"byte_end":200910,"line_start":442,"line_end":442,"column_start":30,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":200952,"byte_end":200957,"line_start":443,"line_end":443,"column_start":11,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201388,"byte_end":201395,"line_start":454,"line_end":454,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":202033,"byte_end":202038,"line_start":475,"line_end":475,"column_start":11,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":204704,"byte_end":204709,"line_start":545,"line_end":545,"column_start":11,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":208902,"byte_end":208907,"line_start":648,"line_end":648,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":827},{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":211691,"byte_end":211696,"line_start":718,"line_end":718,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":9951,"byte_end":9957,"line_start":258,"line_end":258,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":13}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":9980,"byte_end":9984,"line_start":260,"line_end":260,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":52}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":9995,"byte_end":10002,"line_start":262,"line_end":262,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":194}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10012,"byte_end":10016,"line_start":263,"line_end":263,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":286}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10026,"byte_end":10029,"line_start":264,"line_end":264,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":343}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10039,"byte_end":10045,"line_start":265,"line_end":265,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":521}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10055,"byte_end":10059,"line_start":266,"line_end":266,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":572}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10069,"byte_end":10075,"line_start":267,"line_end":267,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":603}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/lib.rs","byte_start":10295,"byte_end":10300,"line_start":277,"line_end":277,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":657}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":17775,"byte_end":17788,"line_start":43,"line_end":43,"column_start":16,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":854},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":18319,"byte_end":18332,"line_start":65,"line_end":65,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":854},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":21720,"byte_end":21733,"line_start":158,"line_end":158,"column_start":26,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":854},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":22081,"byte_end":22094,"line_start":172,"line_end":172,"column_start":36,"column_end":49},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":854},"to":{"krate":1,"index":1833}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":22679,"byte_end":22692,"line_start":191,"line_end":191,"column_start":14,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":854},"to":{"krate":1,"index":1822}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/points.rs","byte_start":23051,"byte_end":23064,"line_start":204,"line_end":204,"column_start":29,"column_end":42},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":854},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29208,"byte_end":29221,"line_start":101,"line_end":101,"column_start":16,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":880},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29378,"byte_end":29391,"line_start":107,"line_end":107,"column_start":13,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":880},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29414,"byte_end":29427,"line_start":108,"line_end":108,"column_start":20,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":880},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29548,"byte_end":29561,"line_start":113,"line_end":113,"column_start":25,"column_end":38},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":880},"to":{"krate":30,"index":40}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":29655,"byte_end":29668,"line_start":119,"line_end":119,"column_start":6,"column_end":19},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":38444,"byte_end":38453,"line_start":365,"line_end":365,"column_start":16,"column_end":25},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":908},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":38639,"byte_end":38648,"line_start":371,"line_end":371,"column_start":13,"column_end":22},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":908},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":38671,"byte_end":38680,"line_start":372,"line_end":372,"column_start":20,"column_end":29},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":908},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":38801,"byte_end":38810,"line_start":377,"line_end":377,"column_start":25,"column_end":34},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":908},"to":{"krate":30,"index":40}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":39457,"byte_end":39466,"line_start":404,"line_end":404,"column_start":6,"column_end":15},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":908},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46396,"byte_end":46405,"line_start":580,"line_end":580,"column_start":16,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":936},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46737,"byte_end":46746,"line_start":595,"line_end":595,"column_start":22,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":936},"to":{"krate":1,"index":1980}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":46835,"byte_end":46844,"line_start":601,"line_end":601,"column_start":6,"column_end":15},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49507,"byte_end":49516,"line_start":671,"line_end":671,"column_start":26,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":936},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":49915,"byte_end":49922,"line_start":691,"line_end":691,"column_start":18,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":977},"to":{"krate":28,"index":21}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50006,"byte_end":50013,"line_start":696,"line_end":696,"column_start":15,"column_end":22},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":977},"to":{"krate":1,"index":2295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50099,"byte_end":50106,"line_start":702,"line_end":702,"column_start":26,"column_end":33},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":977},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/keys.rs","byte_start":50242,"byte_end":50249,"line_start":709,"line_end":709,"column_start":6,"column_end":13},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":65365,"byte_end":65375,"line_start":144,"line_end":144,"column_start":28,"column_end":38},"kind":{"Impl":{"id":38}},"from":{"krate":37,"index":111},"to":{"krate":0,"index":210}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":67053,"byte_end":67067,"line_start":192,"line_end":192,"column_start":6,"column_end":20},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":999},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":70701,"byte_end":70714,"line_start":284,"line_end":284,"column_start":9,"column_end":22},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":71177,"byte_end":71190,"line_start":296,"line_end":296,"column_start":21,"column_end":34},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":251},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":71352,"byte_end":71365,"line_start":303,"line_end":303,"column_start":31,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":251},"to":{"krate":0,"index":210}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/context.rs","byte_start":73305,"byte_end":73329,"line_start":361,"line_end":361,"column_start":33,"column_end":57},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":270},"to":{"krate":0,"index":210}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":77863,"byte_end":77872,"line_start":58,"line_end":58,"column_start":16,"column_end":25},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1004},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":78812,"byte_end":78821,"line_start":80,"line_end":80,"column_start":6,"column_end":15},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1004},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":81858,"byte_end":81867,"line_start":158,"line_end":158,"column_start":6,"column_end":15},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":908},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":84295,"byte_end":84304,"line_start":219,"line_end":219,"column_start":6,"column_end":15},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/sign.rs","byte_start":86556,"byte_end":86563,"line_start":281,"line_end":281,"column_start":6,"column_end":13},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":101825,"byte_end":101826,"line_start":143,"line_end":143,"column_start":34,"column_end":35},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":370},"to":{"krate":0,"index":366}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":102839,"byte_end":102848,"line_start":165,"line_end":165,"column_start":34,"column_end":43},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1032},"to":{"krate":0,"index":366}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":103860,"byte_end":103869,"line_start":188,"line_end":188,"column_start":6,"column_end":15},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":105112,"byte_end":105121,"line_start":217,"line_end":217,"column_start":6,"column_end":15},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1039},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":106961,"byte_end":106970,"line_start":272,"line_end":272,"column_start":6,"column_end":15},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":908},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":107862,"byte_end":107869,"line_start":292,"line_end":292,"column_start":6,"column_end":13},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":108082,"byte_end":108090,"line_start":299,"line_end":299,"column_start":6,"column_end":14},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1085},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":111896,"byte_end":111907,"line_start":380,"line_end":380,"column_start":39,"column_end":50},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":413},"to":{"krate":19,"index":141}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":112369,"byte_end":112380,"line_start":391,"line_end":391,"column_start":41,"column_end":52},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":413},"to":{"krate":19,"index":146}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":112742,"byte_end":112751,"line_start":406,"line_end":406,"column_start":6,"column_end":15},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":115819,"byte_end":115827,"line_start":485,"line_end":485,"column_start":6,"column_end":14},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":117592,"byte_end":117609,"line_start":535,"line_end":535,"column_start":6,"column_end":23},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":120788,"byte_end":120795,"line_start":612,"line_end":612,"column_start":6,"column_end":13},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/vrf.rs","byte_start":126487,"byte_end":126496,"line_start":746,"line_end":746,"column_start":6,"column_end":15},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":146121,"byte_end":146126,"line_start":54,"line_end":54,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2076},"to":{"krate":0,"index":528}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":147247,"byte_end":147256,"line_start":80,"line_end":80,"column_start":6,"column_end":15},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":148136,"byte_end":148145,"line_start":104,"line_end":104,"column_start":6,"column_end":15},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":908},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":149637,"byte_end":149650,"line_start":137,"line_end":137,"column_start":6,"column_end":19},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":150697,"byte_end":150704,"line_start":158,"line_end":158,"column_start":6,"column_end":13},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":152898,"byte_end":152905,"line_start":202,"line_end":202,"column_start":21,"column_end":28},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":977},"to":{"krate":0,"index":528}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":153202,"byte_end":153211,"line_start":212,"line_end":212,"column_start":21,"column_end":30},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":908},"to":{"krate":0,"index":528}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":153415,"byte_end":153424,"line_start":220,"line_end":220,"column_start":21,"column_end":30},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":936},"to":{"krate":0,"index":528}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":154424,"byte_end":154435,"line_start":245,"line_end":245,"column_start":21,"column_end":32},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/derive.rs","byte_start":155094,"byte_end":155105,"line_start":264,"line_end":264,"column_start":6,"column_end":17},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":160466,"byte_end":160480,"line_start":54,"line_end":54,"column_start":31,"column_end":45},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1229},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161073,"byte_end":161087,"line_start":71,"line_end":71,"column_start":6,"column_end":20},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1229},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":161209,"byte_end":161216,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":162950,"byte_end":162959,"line_start":115,"line_end":115,"column_start":6,"column_end":15},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":165062,"byte_end":165069,"line_start":162,"line_end":162,"column_start":6,"column_end":13},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/cert.rs","byte_start":166640,"byte_end":166649,"line_start":197,"line_end":197,"column_start":6,"column_end":15},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":168778,"byte_end":168797,"line_start":35,"line_end":35,"column_start":18,"column_end":37},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1250},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/errors.rs","byte_start":172102,"byte_end":172116,"line_start":128,"line_end":128,"column_start":18,"column_end":32},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1271},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":176593,"byte_end":176601,"line_start":75,"line_end":75,"column_start":29,"column_end":37},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":628},"to":{"krate":19,"index":141}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/batch.rs","byte_start":177105,"byte_end":177113,"line_start":88,"line_end":88,"column_start":31,"column_end":39},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":628},"to":{"krate":19,"index":146}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":188794,"byte_end":188802,"line_start":105,"line_end":105,"column_start":34,"column_end":42},"kind":{"Impl":{"id":90}},"from":{"krate":5,"index":907},"to":{"krate":0,"index":679}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":190721,"byte_end":190744,"line_start":158,"line_end":158,"column_start":35,"column_end":58},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":690},"to":{"krate":0,"index":679}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":191629,"byte_end":191639,"line_start":186,"line_end":186,"column_start":6,"column_end":16},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":192257,"byte_end":192271,"line_start":207,"line_end":207,"column_start":6,"column_end":20},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":192937,"byte_end":192943,"line_start":231,"line_end":231,"column_start":16,"column_end":22},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":722},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":193032,"byte_end":193038,"line_start":234,"line_end":234,"column_start":28,"column_end":34},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":722},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":193249,"byte_end":193255,"line_start":244,"line_end":244,"column_start":13,"column_end":19},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":722},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":193266,"byte_end":193272,"line_start":246,"line_end":246,"column_start":6,"column_end":12},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":722},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":194428,"byte_end":194431,"line_start":280,"line_end":280,"column_start":6,"column_end":9},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":197334,"byte_end":197339,"line_start":354,"line_end":354,"column_start":36,"column_end":41},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":200827,"byte_end":200838,"line_start":441,"line_end":441,"column_start":30,"column_end":41},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":787},"to":{"krate":0,"index":774}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":200899,"byte_end":200910,"line_start":442,"line_end":442,"column_start":30,"column_end":41},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":803},"to":{"krate":0,"index":774}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":200952,"byte_end":200957,"line_start":443,"line_end":443,"column_start":11,"column_end":16},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":201388,"byte_end":201395,"line_start":454,"line_end":454,"column_start":6,"column_end":13},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":202033,"byte_end":202038,"line_start":475,"line_end":475,"column_start":11,"column_end":16},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":204704,"byte_end":204709,"line_start":545,"line_end":545,"column_start":11,"column_end":16},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":208902,"byte_end":208907,"line_start":648,"line_end":648,"column_start":34,"column_end":39},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/schnorrkel-0.9.1/src/musig.rs","byte_start":211691,"byte_end":211696,"line_start":718,"line_end":718,"column_start":34,"column_end":39},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":745},"to":{"krate":4294967295,"index":4294967295}}]}