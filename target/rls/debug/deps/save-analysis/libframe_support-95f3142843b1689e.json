{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0","program":"/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","frame_support","--edition=2018","/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"once_cell\"","--cfg","feature=\"serde\"","--cfg","feature=\"sp-state-machine\"","--cfg","feature=\"std\"","-C","metadata=95f3142843b1689e","-C","extra-filename=-95f3142843b1689e","--out-dir","/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","-L","dependency=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","--extern","bitflags=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libbitflags-9633f6440ece0104.rmeta","--extern","frame_metadata=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libframe_metadata-4f0c6f18298fd128.rmeta","--extern","frame_support_procedural=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libframe_support_procedural-1e7f4028d8ac3da0.so","--extern","impl_trait_for_tuples=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libimpl_trait_for_tuples-aa72137a2bc842f1.so","--extern","log=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/liblog-5304c8458a68373a.rmeta","--extern","once_cell=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libonce_cell-82346cc774cf0c24.rmeta","--extern","codec=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libparity_scale_codec-b38ed3f0a4e0f6cc.rmeta","--extern","paste=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libpaste-7a9336802b8e1163.so","--extern","serde=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libserde-c1d0451fd273a165.rmeta","--extern","smallvec=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsmallvec-8544fa198532a31d.rmeta","--extern","sp_arithmetic=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_arithmetic-2ada7ade9f2ecb61.rmeta","--extern","sp_core=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_core-cba9ce4ea9a4c43e.rmeta","--extern","sp_inherents=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_inherents-250d552e0883e68a.rmeta","--extern","sp_io=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_io-42cf169bf4521445.rmeta","--extern","sp_runtime=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_runtime-0db274db735c112d.rmeta","--extern","sp_staking=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_staking-3d214b31de0f5fcb.rmeta","--extern","sp_state_machine=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_state_machine-e70515343424d649.rmeta","--extern","sp_std=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_std-0142de4e2fb49a91.rmeta","--extern","sp_tracing=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_tracing-78eb7b3d9c5b3c71.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libframe_support-95f3142843b1689e.rmeta"},"prelude":{"crate_id":{"name":"frame_support","disambiguator":[10862535661279247526,13610871615897446752]},"crate_root":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src","external_crates":[{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","num":2,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":18,"id":{"name":"sp_tracing","disambiguator":[9619578780568606008,17901182021480941559]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","num":19,"id":{"name":"sp_std","disambiguator":[9770677728196279493,12510806215599864837]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","num":20,"id":{"name":"parity_scale_codec","disambiguator":[8513279373943582847,10751956381400254447]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","num":21,"id":{"name":"parity_scale_codec_derive","disambiguator":[3988632595002997288,5128307631409362997]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","num":22,"id":{"name":"arrayvec","disambiguator":[1943503948824698767,8928204549588057885]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","num":23,"id":{"name":"byte_slice_cast","disambiguator":[11971851078352766489,17994270080533667189]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","num":24,"id":{"name":"serde","disambiguator":[9329802083187344169,15516913349122290357]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","num":25,"id":{"name":"serde_derive","disambiguator":[9132577773600900999,13098957011468639310]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":26,"id":{"name":"tracing_core","disambiguator":[11735089163411024588,17388945486717174255]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":27,"id":{"name":"lazy_static","disambiguator":[4038955093903438243,10998562936998939215]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":28,"id":{"name":"tracing","disambiguator":[12634947417058916823,13964040762799800002]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":29,"id":{"name":"cfg_if","disambiguator":[11748229077813686416,18120593503603249335]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":30,"id":{"name":"pin_project_lite","disambiguator":[10940599627664034505,1256839874217548822]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":31,"id":{"name":"tracing_subscriber","disambiguator":[2737517103962892138,6007003846142012037]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":32,"id":{"name":"regex","disambiguator":[15379754631532878358,1305285703807680371]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":33,"id":{"name":"aho_corasick","disambiguator":[15808597861067690095,17129261582138448034]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":34,"id":{"name":"memchr","disambiguator":[1157675088820504487,7216068552727726090]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":35,"id":{"name":"regex_syntax","disambiguator":[15754485282953042439,939955947925160166]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":36,"id":{"name":"thread_local","disambiguator":[4515805766320255868,12702638825636986852]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":37,"id":{"name":"once_cell","disambiguator":[12659116934471307003,7435940676996991787]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":38,"id":{"name":"parking_lot","disambiguator":[18159808056392103160,16155596511951534654]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":39,"id":{"name":"instant","disambiguator":[6707731622692707509,11541478860689369278]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":40,"id":{"name":"lock_api","disambiguator":[117164551345877035,12793837009537715804]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":41,"id":{"name":"scopeguard","disambiguator":[6745301356711570827,8805850024978740077]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":42,"id":{"name":"parking_lot_core","disambiguator":[13491894724313637548,4430950099799626494]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","num":43,"id":{"name":"smallvec","disambiguator":[12123569432201045790,1609040209808900757]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":44,"id":{"name":"libc","disambiguator":[7953600248772063458,1989307123664392873]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":45,"id":{"name":"matchers","disambiguator":[11196127239289206652,8821764124139599593]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":46,"id":{"name":"regex_automata","disambiguator":[1356799715280784519,12525503415491810456]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":47,"id":{"name":"byteorder","disambiguator":[16743341458239395833,5344541827637086529]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":48,"id":{"name":"ansi_term","disambiguator":[13348744980724887879,5052188682016064389]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":49,"id":{"name":"tracing_log","disambiguator":[2517198273552123748,17355328636754591651]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","num":50,"id":{"name":"log","disambiguator":[3545289885770114131,433247333334147900]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":51,"id":{"name":"serde_json","disambiguator":[2535307572117126142,15340677427040480041]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":52,"id":{"name":"itoa","disambiguator":[1783620119987649435,3821505174059274534]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":53,"id":{"name":"ryu","disambiguator":[4560945869205572345,5209367066204268501]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":54,"id":{"name":"tracing_serde","disambiguator":[4562426333319122918,15922045924750474936]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":55,"id":{"name":"sharded_slab","disambiguator":[17401401532503036136,1601036186833089112]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":56,"id":{"name":"chrono","disambiguator":[17126090541689444332,1886024564587297196]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":57,"id":{"name":"num_integer","disambiguator":[5126256796491658918,13702474337812182890]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":58,"id":{"name":"num_traits","disambiguator":[12449281939908862398,945796103035123006]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":59,"id":{"name":"sp_core","disambiguator":[482245497719965997,4446364731874136958]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":60,"id":{"name":"sp_runtime_interface","disambiguator":[8486305343948881103,18310204470691800149]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":61,"id":{"name":"sp_wasm_interface","disambiguator":[12654239842700216049,8433569663077031038]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","num":62,"id":{"name":"impl_trait_for_tuples","disambiguator":[9660762680991374145,8791689571548580469]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":63,"id":{"name":"wasmi","disambiguator":[6918656205759776739,8549698197006326748]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":64,"id":{"name":"memory_units","disambiguator":[4446909059691065796,8711733259455937782]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":65,"id":{"name":"parity_wasm","disambiguator":[2746304515579433884,15008885245026691101]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":66,"id":{"name":"wasmi_validation","disambiguator":[12503892293425695562,631775191906383592]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":67,"id":{"name":"num_rational","disambiguator":[8002101714546462564,7774992686627339530]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":68,"id":{"name":"num_bigint","disambiguator":[8324002608551350377,6864858279968498277]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":69,"id":{"name":"sp_runtime_interface_proc_macro","disambiguator":[18335766830024536561,5137992637639085820]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":70,"id":{"name":"sp_externalities","disambiguator":[15346619557778524113,15546321444447335287]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":71,"id":{"name":"sp_storage","disambiguator":[12236995375180460119,10483812130181742021]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":72,"id":{"name":"sp_debug_derive","disambiguator":[1127781656639809926,12270005864681690604]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":73,"id":{"name":"ref_cast","disambiguator":[3109219419575014207,1073703474336682823]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":74,"id":{"name":"ref_cast_impl","disambiguator":[548036109860010999,5849971523560802531]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":75,"id":{"name":"impl_serde","disambiguator":[807954869803654047,4716339343125958352]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":76,"id":{"name":"environmental","disambiguator":[12825357754638386979,7940730235394234995]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":77,"id":{"name":"primitive_types","disambiguator":[11755663010420176922,11551187208533645918]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":78,"id":{"name":"fixed_hash","disambiguator":[761001719887353079,113272237603088689]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":79,"id":{"name":"static_assertions","disambiguator":[17267408535625969050,4632693660215762815]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":80,"id":{"name":"rustc_hex","disambiguator":[8252233264516824388,17670331916333253350]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":81,"id":{"name":"rand","disambiguator":[8754712101818231124,439968306620514562]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":82,"id":{"name":"rand_core","disambiguator":[17249439947178837211,16150054665629866134]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":83,"id":{"name":"getrandom","disambiguator":[5295995297352709213,7943019062197219340]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":84,"id":{"name":"uint","disambiguator":[249403627217210170,66937591079663351]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":85,"id":{"name":"hex","disambiguator":[5817943069691027302,2071035837552761178]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":86,"id":{"name":"crunchy","disambiguator":[16496986770395509475,10742896350538019007]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":87,"id":{"name":"impl_codec","disambiguator":[18061770301012622754,8940897700826662907]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":88,"id":{"name":"blake2_rfc","disambiguator":[11744292092095819415,9801326368370969682]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":89,"id":{"name":"arrayvec","disambiguator":[14648713630236782063,9849397673914679400]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":90,"id":{"name":"nodrop","disambiguator":[11522295318034127309,11770490405937775818]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":91,"id":{"name":"constant_time_eq","disambiguator":[11542931171304914434,3999952699895281030]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":92,"id":{"name":"sha2","disambiguator":[6501481284549552844,10223970258463939953]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":93,"id":{"name":"block_buffer","disambiguator":[13966198174714371443,9733068092495573015]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":94,"id":{"name":"generic_array","disambiguator":[17630325060485713573,8632611388700851125]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":95,"id":{"name":"typenum","disambiguator":[8726524992263171078,2989859816024006970]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":96,"id":{"name":"digest","disambiguator":[3267007905718091736,6472354886699068987]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":97,"id":{"name":"opaque_debug","disambiguator":[6572339997394954866,9498658499336361599]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":98,"id":{"name":"cpuid_bool","disambiguator":[6205407880030392451,6093553700822162471]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":99,"id":{"name":"tiny_keccak","disambiguator":[6907276523880939152,15806809385348513789]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":100,"id":{"name":"twox_hash","disambiguator":[4843776605774432337,16933932808593462508]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":101,"id":{"name":"cfg_if","disambiguator":[10021299859095236603,9970654228449935443]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":102,"id":{"name":"rand","disambiguator":[746826575780793851,4471793012143423394]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":103,"id":{"name":"rand_core","disambiguator":[3238620688790230140,13462498439867285351]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":104,"id":{"name":"getrandom","disambiguator":[16958247650847020380,5385242026854871367]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":105,"id":{"name":"rand_chacha","disambiguator":[441716931807972491,17272912142872802949]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":106,"id":{"name":"ppv_lite86","disambiguator":[5486910781073359264,15253540615556416119]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":107,"id":{"name":"rand_pcg","disambiguator":[3160627028304066158,11293307244701815743]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":108,"id":{"name":"base58","disambiguator":[3369462119818718244,8362136954819660540]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":109,"id":{"name":"zeroize","disambiguator":[10556093639355727955,15809428849932923722]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":110,"id":{"name":"zeroize_derive","disambiguator":[5655268509516224944,6725263168993598751]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":111,"id":{"name":"secrecy","disambiguator":[16459322919098341897,12171937217720544940]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":112,"id":{"name":"ed25519_dalek","disambiguator":[11398848187809677205,7856143361522293917]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":113,"id":{"name":"ed25519","disambiguator":[17719961624066905290,3692275665346932817]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":114,"id":{"name":"signature","disambiguator":[8760395504805049851,3413849478659787523]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":115,"id":{"name":"curve25519_dalek","disambiguator":[4071595552511680062,1824077030073052835]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":116,"id":{"name":"subtle","disambiguator":[17934521912222352306,18444245334094816619]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":117,"id":{"name":"substrate_bip39","disambiguator":[1792972643475504061,2284854317310986267]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":118,"id":{"name":"sha2","disambiguator":[6031437354618425809,1156418039787797982]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":119,"id":{"name":"block_buffer","disambiguator":[17013019169273939082,8694242993449314512]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":120,"id":{"name":"block_padding","disambiguator":[12027653930546257504,11934247384914869959]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":121,"id":{"name":"byte_tools","disambiguator":[11700157176403723246,15042745078268532608]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":122,"id":{"name":"generic_array","disambiguator":[8154424454435046820,8305875546402162267]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":123,"id":{"name":"fake_simd","disambiguator":[14036491710765223056,16121027988084704970]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":124,"id":{"name":"opaque_debug","disambiguator":[15355801993192592970,15368723170800198628]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":125,"id":{"name":"digest","disambiguator":[18028793442622875312,8404934643691058449]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":126,"id":{"name":"hmac","disambiguator":[2398036106222558641,12747122617455590906]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":127,"id":{"name":"crypto_mac","disambiguator":[13559926310032573477,17050896233749691016]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":128,"id":{"name":"subtle","disambiguator":[10946190608180335518,5756656367206348154]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":129,"id":{"name":"pbkdf2","disambiguator":[18045263582543352373,3198099767612698545]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":130,"id":{"name":"schnorrkel","disambiguator":[1001073668430333559,14191689993495040953]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":131,"id":{"name":"arrayref","disambiguator":[16818885780591367818,9624370045344091841]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":132,"id":{"name":"curve25519_dalek","disambiguator":[11182327997470844279,2917915551897756157]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":133,"id":{"name":"merlin","disambiguator":[10995490140485953775,3078541580170789468]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":134,"id":{"name":"keccak","disambiguator":[8402286363173856787,11033165844963027687]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":135,"id":{"name":"bip39","disambiguator":[14654181774436755031,16150481678645946358]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":136,"id":{"name":"thiserror","disambiguator":[11211909712945309034,1462899715189146714]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":137,"id":{"name":"thiserror_impl","disambiguator":[12140497728656256834,17536753507674282886]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":138,"id":{"name":"rustc_hash","disambiguator":[18120138039320172856,5174853055526042934]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":139,"id":{"name":"anyhow","disambiguator":[17455878141675706397,15024690126878403217]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":140,"id":{"name":"unicode_normalization","disambiguator":[7319256477008403990,850912555204041804]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":141,"id":{"name":"tinyvec","disambiguator":[13757798832981975562,16448938864586428141]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":142,"id":{"name":"tinyvec_macros","disambiguator":[6971095827479815106,2369805349969581398]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":143,"id":{"name":"hmac","disambiguator":[17433356495996038620,7849656493985933521]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":144,"id":{"name":"crypto_mac","disambiguator":[16952472478491170049,5748167897379155211]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":145,"id":{"name":"pbkdf2","disambiguator":[7649781412603123506,9859389210053091319]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":146,"id":{"name":"secp256k1","disambiguator":[16737428765420032088,13773206920855754217]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":147,"id":{"name":"hmac_drbg","disambiguator":[17404808929730230210,16695580170234810369]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":148,"id":{"name":"hash_db","disambiguator":[16222527159578958881,15417756680510520186]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":149,"id":{"name":"hash256_std_hasher","disambiguator":[14242029744627902613,3090809591287000861]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":150,"id":{"name":"parity_util_mem","disambiguator":[5692800706026385981,13988503766425499944]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":151,"id":{"name":"parity_util_mem_derive","disambiguator":[3916493160687366221,3998416894547474512]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":152,"id":{"name":"hashbrown","disambiguator":[15858687212683710517,10679103842408037307]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":153,"id":{"name":"ahash","disambiguator":[11000207869931019655,11365772628104082715]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":154,"id":{"name":"dyn_clonable","disambiguator":[1160672861310717368,179577393650705180]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":155,"id":{"name":"dyn_clone","disambiguator":[153351459397055590,2262572122976187853]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":156,"id":{"name":"dyn_clonable_impl","disambiguator":[8143725291046252364,3517763874786058099]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":157,"id":{"name":"futures","disambiguator":[3463592966268286824,7540824572693008632]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":158,"id":{"name":"futures_core","disambiguator":[1741251118759805826,11401665632333816338]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":159,"id":{"name":"futures_util","disambiguator":[3438948224063739788,15492469175479036624]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":160,"id":{"name":"pin_utils","disambiguator":[6148991665019902715,7706982228305245343]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":161,"id":{"name":"proc_macro_hack","disambiguator":[18107074244595300940,7254669559897049488]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":162,"id":{"name":"futures_task","disambiguator":[7625991371478830382,1732980289896795878]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":163,"id":{"name":"futures_sink","disambiguator":[8661685636113034652,10637809691106661968]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":164,"id":{"name":"futures_channel","disambiguator":[9340365945153326119,16413412677825364759]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":165,"id":{"name":"slab","disambiguator":[10964154642823013274,18136006732140345220]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":166,"id":{"name":"futures_io","disambiguator":[1719766009174806638,1918012058549137250]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":167,"id":{"name":"futures_macro","disambiguator":[83206124768939847,1707592736898867711]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":168,"id":{"name":"futures_executor","disambiguator":[7121268507423420993,8515073597681227929]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":169,"id":{"name":"num_cpus","disambiguator":[12520181572928967600,156566489628191520]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":170,"id":{"name":"paste","disambiguator":[8828623746635266423,3569886997012004366]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":171,"id":{"name":"sp_state_machine","disambiguator":[8742579675119555660,12103213563172048341]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":172,"id":{"name":"sp_trie","disambiguator":[13118048614907196054,1322344655374896753]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":173,"id":{"name":"trie_db","disambiguator":[45886576227001508,916380512454680783]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":174,"id":{"name":"trie_root","disambiguator":[10825234960134104556,2662406007426998997]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":175,"id":{"name":"memory_db","disambiguator":[632864180048084116,11252723647111274025]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":176,"id":{"name":"sp_panic_handler","disambiguator":[5416557423676215538,14720217030722033865]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":177,"id":{"name":"backtrace","disambiguator":[4616807196884616560,3593374161003727633]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":178,"id":{"name":"rustc_demangle","disambiguator":[9678936452046898147,13376131821060520602]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":179,"id":{"name":"addr2line","disambiguator":[13179013064549937275,4522599632718693230]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":180,"id":{"name":"gimli","disambiguator":[6269171323339485423,8607067438569868048]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":181,"id":{"name":"object","disambiguator":[6940909019048410244,13242167454319359684]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":182,"id":{"name":"miniz_oxide","disambiguator":[18262343450495648065,5536561149793384440]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":183,"id":{"name":"adler","disambiguator":[159802053453029657,12486606382973290645]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":184,"id":{"name":"sp_io","disambiguator":[1343155938050319935,3445903780346215844]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":185,"id":{"name":"sp_keystore","disambiguator":[4019588266445288396,3441142528766855232]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":186,"id":{"name":"async_trait","disambiguator":[14716418409663937871,16252118711427297795]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":187,"id":{"name":"derive_more","disambiguator":[6247326867867388500,13168463329696418615]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","num":188,"id":{"name":"frame_metadata","disambiguator":[15796749728305969429,10824479864899718150]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","num":189,"id":{"name":"sp_runtime","disambiguator":[10633588416924757119,2482730311043215932]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","num":190,"id":{"name":"sp_application_crypto","disambiguator":[6863622932818007083,12016026392606748588]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","num":191,"id":{"name":"sp_arithmetic","disambiguator":[6212385222009708574,6862010849189890576]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","num":192,"id":{"name":"integer_sqrt","disambiguator":[16829217331349863768,1347948894207436676]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","num":193,"id":{"name":"either","disambiguator":[3299987193669673221,15328579128940892041]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/inherent.rs","num":194,"id":{"name":"sp_inherents","disambiguator":[7040802491274088198,12990343860866766019]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","num":195,"id":{"name":"sp_staking","disambiguator":[17140434046789482120,9520367511684078464]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","num":196,"id":{"name":"bitflags","disambiguator":[1486220796094162926,11566124556688293180]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","num":197,"id":{"name":"frame_support_procedural","disambiguator":[15011448505222568999,4575779929719264499]}}],"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":686,"byte_end":68448,"line_start":18,"line_end":2062,"column_start":1,"column_end":42}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":884,"byte_end":894,"line_start":26,"line_end":26,"column_start":9,"column_end":19},"alias_span":null,"name":"sp_tracing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":929,"byte_end":934,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"alias_span":null,"name":"serde","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":59,"index":3836},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":953,"byte_end":957,"line_start":30,"line_end":30,"column_start":18,"column_end":22},"alias_span":null,"name":"Void","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":19,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":982,"byte_end":988,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"alias_span":null,"name":"sp_std","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1013,"byte_end":1018,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"alias_span":null,"name":"codec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":37,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1067,"byte_end":1076,"line_start":37,"line_end":37,"column_start":9,"column_end":18},"alias_span":null,"name":"once_cell","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":170,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1101,"byte_end":1106,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"alias_span":null,"name":"paste","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":171,"index":2342},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1173,"byte_end":1191,"line_start":42,"line_end":42,"column_start":27,"column_end":45},"alias_span":null,"name":"BasicExternalities","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":184,"index":140},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1233,"byte_end":1237,"line_start":44,"line_end":44,"column_start":26,"column_end":30},"alias_span":null,"name":"storage_root","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":184,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1216,"byte_end":1221,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"alias_span":null,"name":"sp_io","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":72,"index":43},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1297,"byte_end":1309,"line_start":46,"line_end":46,"column_start":21,"column_end":33},"alias_span":null,"name":"RuntimeDebug","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":50,"index":13},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71760,"byte_end":71764,"line_start":92,"line_end":92,"column_start":15,"column_end":19},"alias_span":null,"name":"info","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":50,"index":14},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71766,"byte_end":71771,"line_start":92,"line_end":92,"column_start":21,"column_end":26},"alias_span":null,"name":"debug","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":50,"index":11},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71773,"byte_end":71778,"line_start":92,"line_end":92,"column_start":28,"column_end":33},"alias_span":null,"name":"error","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":50,"index":15},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71780,"byte_end":71785,"line_start":92,"line_end":92,"column_start":35,"column_end":40},"alias_span":null,"name":"trace","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":50,"index":12},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71787,"byte_end":71791,"line_start":92,"line_end":92,"column_start":42,"column_end":46},"alias_span":null,"name":"warn","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71809,"byte_end":71822,"line_start":93,"line_end":93,"column_start":16,"column_end":29},"alias_span":null,"name":"print","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":19,"index":47},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71849,"byte_end":71855,"line_start":94,"line_end":94,"column_start":17,"column_end":23},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":50,"index":13},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":72071,"byte_end":72075,"line_start":102,"line_end":102,"column_start":18,"column_end":22},"alias_span":null,"name":"info","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":72077,"byte_end":72082,"line_start":102,"line_end":102,"column_start":24,"column_end":29},"alias_span":null,"name":"debug","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":50,"index":14},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":72077,"byte_end":72082,"line_start":102,"line_end":102,"column_start":24,"column_end":29},"alias_span":null,"name":"debug","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":50,"index":11},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":72084,"byte_end":72089,"line_start":102,"line_end":102,"column_start":31,"column_end":36},"alias_span":null,"name":"error","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":50,"index":15},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":72091,"byte_end":72096,"line_start":102,"line_end":102,"column_start":38,"column_end":43},"alias_span":null,"name":"trace","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":50,"index":12},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":72098,"byte_end":72102,"line_start":102,"line_end":102,"column_start":45,"column_end":49},"alias_span":null,"name":"warn","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":72104,"byte_end":72109,"line_start":102,"line_end":102,"column_start":51,"column_end":56},"alias_span":null,"name":"print","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":2,"index":6250},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91553,"byte_end":91559,"line_start":21,"line_end":21,"column_start":25,"column_end":31},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":5,"index":3403},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91561,"byte_end":91564,"line_start":21,"line_end":21,"column_start":33,"column_end":36},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":5,"index":4841},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91576,"byte_end":91579,"line_start":21,"line_end":21,"column_start":48,"column_end":51},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":2,"index":1762},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91581,"byte_end":91586,"line_start":21,"line_end":21,"column_start":53,"column_end":58},"alias_span":null,"name":"Clone","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":2,"index":1765},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91581,"byte_end":91586,"line_start":21,"line_end":21,"column_start":53,"column_end":58},"alias_span":null,"name":"Clone","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":2,"index":1795},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91588,"byte_end":91590,"line_start":21,"line_end":21,"column_start":60,"column_end":62},"alias_span":null,"name":"Eq","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":2,"index":1797},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91588,"byte_end":91590,"line_start":21,"line_end":21,"column_start":60,"column_end":62},"alias_span":null,"name":"Eq","value":"","parent":{"krate":0,"index":57}},{"kind":"Use","ref_id":{"krate":2,"index":1790},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91592,"byte_end":91601,"line_start":21,"line_end":21,"column_start":64,"column_end":73},"alias_span":null,"name":"PartialEq","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":2,"index":1794},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91592,"byte_end":91601,"line_start":21,"line_end":21,"column_start":64,"column_end":73},"alias_span":null,"name":"PartialEq","value":"","parent":{"krate":0,"index":58}},{"kind":"Use","ref_id":{"krate":2,"index":2065},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91604,"byte_end":91610,"line_start":21,"line_end":21,"column_start":76,"column_end":82},"alias_span":null,"name":"marker","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":20,"index":135},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91636,"byte_end":91641,"line_start":22,"line_end":22,"column_start":24,"column_end":29},"alias_span":null,"name":"Codec","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":20,"index":699},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91643,"byte_end":91653,"line_start":22,"line_end":22,"column_start":31,"column_end":41},"alias_span":null,"name":"EncodeLike","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":20,"index":127},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91655,"byte_end":91661,"line_start":22,"line_end":22,"column_start":43,"column_end":49},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":21,"index":203},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91655,"byte_end":91661,"line_start":22,"line_end":22,"column_start":43,"column_end":49},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":63}},{"kind":"Use","ref_id":{"krate":20,"index":109},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91663,"byte_end":91669,"line_start":22,"line_end":22,"column_start":51,"column_end":57},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":21,"index":202},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91663,"byte_end":91669,"line_start":22,"line_end":22,"column_start":51,"column_end":57},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":64}},{"kind":"Use","ref_id":{"krate":20,"index":59},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91671,"byte_end":91676,"line_start":22,"line_end":22,"column_start":59,"column_end":64},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":20,"index":80},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91678,"byte_end":91684,"line_start":22,"line_end":22,"column_start":66,"column_end":72},"alias_span":null,"name":"Output","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":20,"index":501},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91686,"byte_end":91696,"line_start":22,"line_end":22,"column_start":74,"column_end":84},"alias_span":null,"name":"HasCompact","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":20,"index":234},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91698,"byte_end":91709,"line_start":22,"line_end":22,"column_start":86,"column_end":97},"alias_span":null,"name":"EncodeAsRef","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":188,"index":113},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91739,"byte_end":91755,"line_start":24,"line_end":24,"column_start":2,"column_end":18},"alias_span":null,"name":"FunctionMetadata","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":188,"index":100},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91757,"byte_end":91772,"line_start":24,"line_end":24,"column_start":20,"column_end":35},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":188,"index":45},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91774,"byte_end":91794,"line_start":24,"line_end":24,"column_start":37,"column_end":57},"alias_span":null,"name":"DecodeDifferentArray","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":188,"index":145},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91796,"byte_end":91820,"line_start":24,"line_end":24,"column_start":59,"column_end":83},"alias_span":null,"name":"FunctionArgumentMetadata","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":188,"index":285},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91823,"byte_end":91845,"line_start":25,"line_end":25,"column_start":2,"column_end":24},"alias_span":null,"name":"ModuleConstantMetadata","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":188,"index":69},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91847,"byte_end":91858,"line_start":25,"line_end":25,"column_start":26,"column_end":37},"alias_span":null,"name":"DefaultByte","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":188,"index":349},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91860,"byte_end":91877,"line_start":25,"line_end":25,"column_start":39,"column_end":56},"alias_span":null,"name":"DefaultByteGetter","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":188,"index":350},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91860,"byte_end":91877,"line_start":25,"line_end":25,"column_start":39,"column_end":56},"alias_span":null,"name":"DefaultByteGetter","value":"","parent":{"krate":0,"index":76}},{"kind":"Use","ref_id":{"krate":188,"index":65},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91879,"byte_end":91898,"line_start":25,"line_end":25,"column_start":58,"column_end":77},"alias_span":null,"name":"ModuleErrorMetadata","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":188,"index":318},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91900,"byte_end":91913,"line_start":25,"line_end":25,"column_start":79,"column_end":92},"alias_span":null,"name":"ErrorMetadata","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":2071},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91944,"byte_end":91959,"line_start":28,"line_end":28,"column_start":2,"column_end":17},"alias_span":null,"name":"GetDispatchInfo","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":7113},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91961,"byte_end":91973,"line_start":28,"line_end":28,"column_start":19,"column_end":31},"alias_span":null,"name":"DispatchInfo","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":2033},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91975,"byte_end":91984,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"alias_span":null,"name":"WeighData","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":2036},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91986,"byte_end":92002,"line_start":28,"line_end":28,"column_start":44,"column_end":60},"alias_span":null,"name":"ClassifyDispatch","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":189,"index":1246},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92004,"byte_end":92023,"line_start":28,"line_end":28,"column_start":62,"column_end":81},"alias_span":null,"name":"TransactionPriority","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":2023},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92025,"byte_end":92031,"line_start":28,"line_end":28,"column_start":83,"column_end":89},"alias_span":null,"name":"Weight","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":2039},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92034,"byte_end":92041,"line_start":29,"line_end":29,"column_start":2,"column_end":9},"alias_span":null,"name":"PaysFee","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":7142},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92043,"byte_end":92059,"line_start":29,"line_end":29,"column_start":11,"column_end":27},"alias_span":null,"name":"PostDispatchInfo","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":2088},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92061,"byte_end":92081,"line_start":29,"line_end":29,"column_start":29,"column_end":49},"alias_span":null,"name":"WithPostDispatchInfo","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":189,"index":1108},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92115,"byte_end":92127,"line_start":31,"line_end":31,"column_start":30,"column_end":42},"alias_span":null,"name":"Dispatchable","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":189,"index":3935},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92129,"byte_end":92142,"line_start":31,"line_end":31,"column_start":44,"column_end":57},"alias_span":null,"name":"DispatchError","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":4157},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92171,"byte_end":92183,"line_start":33,"line_end":33,"column_start":2,"column_end":14},"alias_span":null,"name":"CallMetadata","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":1863},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92185,"byte_end":92200,"line_start":33,"line_end":33,"column_start":16,"column_end":31},"alias_span":null,"name":"GetCallMetadata","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":1860},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92202,"byte_end":92213,"line_start":33,"line_end":33,"column_start":33,"column_end":44},"alias_span":null,"name":"GetCallName","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":1904},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92215,"byte_end":92237,"line_start":33,"line_end":33,"column_start":46,"column_end":68},"alias_span":null,"name":"UnfilteredDispatchable","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":1992},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92239,"byte_end":92255,"line_start":33,"line_end":33,"column_start":70,"column_end":86},"alias_span":null,"name":"GetPalletVersion","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":189,"index":1557},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":178118,"byte_end":178136,"line_start":24,"line_end":24,"column_start":21,"column_end":39},"alias_span":null,"name":"TransactionOutcome","value":"","parent":{"krate":0,"index":118}},{"kind":"Use","ref_id":{"krate":71,"index":405},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":214167,"byte_end":214176,"line_start":26,"line_end":26,"column_start":28,"column_end":37},"alias_span":null,"name":"ChildInfo","value":"","parent":{"krate":0,"index":222}},{"kind":"Use","ref_id":{"krate":71,"index":431},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":214178,"byte_end":214187,"line_start":26,"line_end":26,"column_start":39,"column_end":48},"alias_span":null,"name":"ChildType","value":"","parent":{"krate":0,"index":222}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":221399,"byte_end":221409,"line_start":31,"line_end":31,"column_start":14,"column_end":24},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":268}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":221431,"byte_end":221447,"line_start":32,"line_end":32,"column_start":21,"column_end":37},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":268}},{"kind":"Use","ref_id":{"krate":0,"index":522},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":221464,"byte_end":221476,"line_start":33,"line_end":33,"column_start":16,"column_end":28},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":268}},{"kind":"Use","ref_id":{"krate":0,"index":649},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266218,"byte_end":266230,"line_start":28,"line_end":28,"column_start":17,"column_end":29},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":624}},{"kind":"Use","ref_id":{"krate":0,"index":695},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266232,"byte_end":266252,"line_start":28,"line_end":28,"column_start":31,"column_end":51},"alias_span":null,"name":"StorageValueMetadata","value":"","parent":{"krate":0,"index":624}},{"kind":"Use","ref_id":{"krate":0,"index":728},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266269,"byte_end":266279,"line_start":29,"line_end":29,"column_start":15,"column_end":25},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":624}},{"kind":"Use","ref_id":{"krate":0,"index":828},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266281,"byte_end":266299,"line_start":29,"line_end":29,"column_start":27,"column_end":45},"alias_span":null,"name":"StorageMapMetadata","value":"","parent":{"krate":0,"index":624}},{"kind":"Use","ref_id":{"krate":0,"index":865},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266323,"byte_end":266339,"line_start":30,"line_end":30,"column_start":22,"column_end":38},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":624}},{"kind":"Use","ref_id":{"krate":0,"index":1001},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266341,"byte_end":266365,"line_start":30,"line_end":30,"column_start":40,"column_end":64},"alias_span":null,"name":"StorageDoubleMapMetadata","value":"","parent":{"krate":0,"index":624}},{"kind":"Use","ref_id":{"krate":188,"index":219},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/event.rs","byte_start":323403,"byte_end":323416,"line_start":24,"line_end":24,"column_start":26,"column_end":39},"alias_span":null,"name":"EventMetadata","value":"","parent":{"krate":0,"index":1402}},{"kind":"Use","ref_id":{"krate":188,"index":100},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/event.rs","byte_start":323418,"byte_end":323433,"line_start":24,"line_end":24,"column_start":41,"column_end":56},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":1402}},{"kind":"Use","ref_id":{"krate":188,"index":188},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/event.rs","byte_start":323435,"byte_end":323453,"line_start":24,"line_end":24,"column_start":58,"column_end":76},"alias_span":null,"name":"OuterEventMetadata","value":"","parent":{"krate":0,"index":1402}},{"kind":"Use","ref_id":{"krate":188,"index":176},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/event.rs","byte_start":323455,"byte_end":323463,"line_start":24,"line_end":24,"column_start":78,"column_end":86},"alias_span":null,"name":"FnEncode","value":"","parent":{"krate":0,"index":1402}},{"kind":"Use","ref_id":{"krate":188,"index":177},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/event.rs","byte_start":323455,"byte_end":323463,"line_start":24,"line_end":24,"column_start":78,"column_end":86},"alias_span":null,"name":"FnEncode","value":"","parent":{"krate":0,"index":1407}},{"kind":"Use","ref_id":{"krate":188,"index":100},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344012,"byte_end":344027,"line_start":19,"line_end":19,"column_start":2,"column_end":17},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":176},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344029,"byte_end":344037,"line_start":19,"line_end":19,"column_start":19,"column_end":27},"alias_span":null,"name":"FnEncode","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":177},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344029,"byte_end":344037,"line_start":19,"line_end":19,"column_start":19,"column_end":27},"alias_span":null,"name":"FnEncode","value":"","parent":{"krate":0,"index":1416}},{"kind":"Use","ref_id":{"krate":188,"index":564},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344039,"byte_end":344054,"line_start":19,"line_end":19,"column_start":29,"column_end":44},"alias_span":null,"name":"RuntimeMetadata","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":675},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344056,"byte_end":344070,"line_start":19,"line_end":19,"column_start":46,"column_end":60},"alias_span":null,"name":"ModuleMetadata","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":91},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344072,"byte_end":344098,"line_start":19,"line_end":19,"column_start":62,"column_end":88},"alias_span":null,"name":"RuntimeMetadataLastVersion","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":349},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344101,"byte_end":344118,"line_start":20,"line_end":20,"column_start":2,"column_end":19},"alias_span":null,"name":"DefaultByteGetter","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":350},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344101,"byte_end":344118,"line_start":20,"line_end":20,"column_start":2,"column_end":19},"alias_span":null,"name":"DefaultByteGetter","value":"","parent":{"krate":0,"index":1420}},{"kind":"Use","ref_id":{"krate":188,"index":505},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344120,"byte_end":344143,"line_start":20,"line_end":20,"column_start":21,"column_end":44},"alias_span":null,"name":"RuntimeMetadataPrefixed","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":506},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344120,"byte_end":344143,"line_start":20,"line_end":20,"column_start":21,"column_end":44},"alias_span":null,"name":"RuntimeMetadataPrefixed","value":"","parent":{"krate":0,"index":1421}},{"kind":"Use","ref_id":{"krate":188,"index":251},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344145,"byte_end":344165,"line_start":20,"line_end":20,"column_start":46,"column_end":66},"alias_span":null,"name":"StorageEntryMetadata","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":474},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344167,"byte_end":344182,"line_start":20,"line_end":20,"column_start":68,"column_end":83},"alias_span":null,"name":"StorageMetadata","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":397},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344185,"byte_end":344201,"line_start":21,"line_end":21,"column_start":2,"column_end":18},"alias_span":null,"name":"StorageEntryType","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":441},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344203,"byte_end":344223,"line_start":21,"line_end":21,"column_start":20,"column_end":40},"alias_span":null,"name":"StorageEntryModifier","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":69},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344225,"byte_end":344236,"line_start":21,"line_end":21,"column_start":42,"column_end":53},"alias_span":null,"name":"DefaultByte","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":354},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344238,"byte_end":344251,"line_start":21,"line_end":21,"column_start":55,"column_end":68},"alias_span":null,"name":"StorageHasher","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":65},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344253,"byte_end":344272,"line_start":21,"line_end":21,"column_start":70,"column_end":89},"alias_span":null,"name":"ModuleErrorMetadata","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":188,"index":535},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":344275,"byte_end":344292,"line_start":22,"line_end":22,"column_start":2,"column_end":19},"alias_span":null,"name":"ExtrinsicMetadata","value":"","parent":{"krate":0,"index":1413}},{"kind":"Use","ref_id":{"krate":5,"index":4841},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/inherent.rs","byte_start":366194,"byte_end":366197,"line_start":19,"line_end":19,"column_start":29,"column_end":32},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":1438}},{"kind":"Use","ref_id":{"krate":189,"index":1070},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/inherent.rs","byte_start":366250,"byte_end":366255,"line_start":21,"line_end":21,"column_start":37,"column_end":42},"alias_span":null,"name":"BlockT","value":"","parent":{"krate":0,"index":1438}},{"kind":"Use","ref_id":{"krate":189,"index":1080},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/inherent.rs","byte_start":366267,"byte_end":366276,"line_start":21,"line_end":21,"column_start":54,"column_end":63},"alias_span":null,"name":"Extrinsic","value":"","parent":{"krate":0,"index":1438}},{"kind":"Use","ref_id":{"krate":194,"index":105},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/inherent.rs","byte_start":366317,"byte_end":366329,"line_start":23,"line_end":23,"column_start":24,"column_end":36},"alias_span":null,"name":"InherentData","value":"","parent":{"krate":0,"index":1438}},{"kind":"Use","ref_id":{"krate":194,"index":72},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/inherent.rs","byte_start":366331,"byte_end":366346,"line_start":23,"line_end":23,"column_start":38,"column_end":53},"alias_span":null,"name":"ProvideInherent","value":"","parent":{"krate":0,"index":1438}},{"kind":"Use","ref_id":{"krate":194,"index":126},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/inherent.rs","byte_start":366348,"byte_end":366368,"line_start":23,"line_end":23,"column_start":55,"column_end":75},"alias_span":null,"name":"CheckInherentsResult","value":"","parent":{"krate":0,"index":1438}},{"kind":"Use","ref_id":{"krate":194,"index":64},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/inherent.rs","byte_start":366370,"byte_end":366382,"line_start":23,"line_end":23,"column_start":77,"column_end":89},"alias_span":null,"name":"IsFatalError","value":"","parent":{"krate":0,"index":1438}},{"kind":"Use","ref_id":{"krate":189,"index":1156},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/unsigned.rs","byte_start":373751,"byte_end":373767,"line_start":19,"line_end":19,"column_start":36,"column_end":52},"alias_span":null,"name":"ValidateUnsigned","value":"","parent":{"krate":0,"index":1449}},{"kind":"Use","ref_id":{"krate":189,"index":1269},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/unsigned.rs","byte_start":373836,"byte_end":373855,"line_start":22,"line_end":22,"column_start":2,"column_end":21},"alias_span":null,"name":"TransactionValidity","value":"","parent":{"krate":0,"index":1449}},{"kind":"Use","ref_id":{"krate":189,"index":3433},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/unsigned.rs","byte_start":373857,"byte_end":373875,"line_start":22,"line_end":22,"column_start":23,"column_end":41},"alias_span":null,"name":"UnknownTransaction","value":"","parent":{"krate":0,"index":1449}},{"kind":"Use","ref_id":{"krate":189,"index":3471},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/unsigned.rs","byte_start":373877,"byte_end":373901,"line_start":22,"line_end":22,"column_start":43,"column_end":67},"alias_span":null,"name":"TransactionValidityError","value":"","parent":{"krate":0,"index":1449}},{"kind":"Use","ref_id":{"krate":189,"index":3508},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/unsigned.rs","byte_start":373903,"byte_end":373920,"line_start":22,"line_end":22,"column_start":69,"column_end":86},"alias_span":null,"name":"TransactionSource","value":"","parent":{"krate":0,"index":1449}},{"kind":"Use","ref_id":{"krate":189,"index":2840},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/error.rs","byte_start":377804,"byte_end":377815,"line_start":21,"line_end":21,"column_start":30,"column_end":41},"alias_span":null,"name":"LookupError","value":"","parent":{"krate":0,"index":1457}},{"kind":"Use","ref_id":{"krate":189,"index":2841},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/error.rs","byte_start":377804,"byte_end":377815,"line_start":21,"line_end":21,"column_start":30,"column_end":41},"alias_span":null,"name":"LookupError","value":"","parent":{"krate":0,"index":1459}},{"kind":"Use","ref_id":{"krate":189,"index":2806},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/error.rs","byte_start":377817,"byte_end":377826,"line_start":21,"line_end":21,"column_start":43,"column_end":52},"alias_span":null,"name":"BadOrigin","value":"","parent":{"krate":0,"index":1457}},{"kind":"Use","ref_id":{"krate":189,"index":2807},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/error.rs","byte_start":377817,"byte_end":377826,"line_start":21,"line_end":21,"column_start":43,"column_end":52},"alias_span":null,"name":"BadOrigin","value":"","parent":{"krate":0,"index":1460}},{"kind":"Use","ref_id":{"krate":188,"index":65},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/error.rs","byte_start":377869,"byte_end":377888,"line_start":23,"line_end":23,"column_start":26,"column_end":45},"alias_span":null,"name":"ModuleErrorMetadata","value":"","parent":{"krate":0,"index":1457}},{"kind":"Use","ref_id":{"krate":188,"index":318},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/error.rs","byte_start":377890,"byte_end":377903,"line_start":23,"line_end":23,"column_start":47,"column_end":60},"alias_span":null,"name":"ErrorMetadata","value":"","parent":{"krate":0,"index":1457}},{"kind":"Use","ref_id":{"krate":188,"index":100},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/error.rs","byte_start":377905,"byte_end":377920,"line_start":23,"line_end":23,"column_start":62,"column_end":77},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":1457}},{"kind":"Use","ref_id":{"krate":2,"index":1333},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384391,"byte_end":384395,"line_start":43,"line_end":43,"column_start":24,"column_end":28},"alias_span":null,"name":"swap","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":2,"index":1335},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384397,"byte_end":384401,"line_start":43,"line_end":43,"column_start":30,"column_end":34},"alias_span":null,"name":"take","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":2,"index":3035},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384410,"byte_end":384417,"line_start":43,"line_end":43,"column_start":43,"column_end":50},"alias_span":null,"name":"RefCell","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":5,"index":4841},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384424,"byte_end":384427,"line_start":43,"line_end":43,"column_start":57,"column_end":60},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":5,"index":93},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384436,"byte_end":384439,"line_start":43,"line_end":43,"column_start":69,"column_end":72},"alias_span":null,"name":"Box","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":189,"index":1246},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462965,"byte_end":462984,"line_start":144,"line_end":144,"column_start":43,"column_end":62},"alias_span":null,"name":"TransactionPriority","value":"","parent":{"krate":0,"index":1995}},{"kind":"Use","ref_id":{"krate":0,"index":1394},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1685,"byte_end":1692,"line_start":73,"line_end":73,"column_start":2,"column_end":9},"alias_span":null,"name":"Twox256","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1395},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1685,"byte_end":1692,"line_start":73,"line_end":73,"column_start":2,"column_end":9},"alias_span":null,"name":"Twox256","value":"","parent":{"krate":0,"index":2222}},{"kind":"Use","ref_id":{"krate":0,"index":1386},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1694,"byte_end":1701,"line_start":73,"line_end":73,"column_start":11,"column_end":18},"alias_span":null,"name":"Twox128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1387},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1694,"byte_end":1701,"line_start":73,"line_end":73,"column_start":11,"column_end":18},"alias_span":null,"name":"Twox128","value":"","parent":{"krate":0,"index":2223}},{"kind":"Use","ref_id":{"krate":0,"index":1378},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1703,"byte_end":1713,"line_start":73,"line_end":73,"column_start":20,"column_end":30},"alias_span":null,"name":"Blake2_256","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1379},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1703,"byte_end":1713,"line_start":73,"line_end":73,"column_start":20,"column_end":30},"alias_span":null,"name":"Blake2_256","value":"","parent":{"krate":0,"index":2224}},{"kind":"Use","ref_id":{"krate":0,"index":1370},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1715,"byte_end":1725,"line_start":73,"line_end":73,"column_start":32,"column_end":42},"alias_span":null,"name":"Blake2_128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1371},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1715,"byte_end":1725,"line_start":73,"line_end":73,"column_start":32,"column_end":42},"alias_span":null,"name":"Blake2_128","value":"","parent":{"krate":0,"index":2225}},{"kind":"Use","ref_id":{"krate":0,"index":1346},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1727,"byte_end":1735,"line_start":73,"line_end":73,"column_start":44,"column_end":52},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1347},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1727,"byte_end":1735,"line_start":73,"line_end":73,"column_start":44,"column_end":52},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":2226}},{"kind":"Use","ref_id":{"krate":0,"index":1354},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1737,"byte_end":1749,"line_start":73,"line_end":73,"column_start":54,"column_end":66},"alias_span":null,"name":"Twox64Concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1355},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1737,"byte_end":1749,"line_start":73,"line_end":73,"column_start":54,"column_end":66},"alias_span":null,"name":"Twox64Concat","value":"","parent":{"krate":0,"index":2227}},{"kind":"Use","ref_id":{"krate":0,"index":1362},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1751,"byte_end":1767,"line_start":73,"line_end":73,"column_start":68,"column_end":84},"alias_span":null,"name":"Blake2_128Concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1363},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1751,"byte_end":1767,"line_start":73,"line_end":73,"column_start":68,"column_end":84},"alias_span":null,"name":"Blake2_128Concat","value":"","parent":{"krate":0,"index":2228}},{"kind":"Use","ref_id":{"krate":0,"index":1315},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1769,"byte_end":1777,"line_start":73,"line_end":73,"column_start":86,"column_end":94},"alias_span":null,"name":"Hashable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1340},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1780,"byte_end":1793,"line_start":74,"line_end":74,"column_start":2,"column_end":15},"alias_span":null,"name":"StorageHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1344},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1795,"byte_end":1818,"line_start":74,"line_end":74,"column_start":17,"column_end":40},"alias_span":null,"name":"ReversibleStorageHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1090},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1848,"byte_end":1860,"line_start":77,"line_end":77,"column_start":2,"column_end":14},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1117},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1862,"byte_end":1872,"line_start":77,"line_end":77,"column_start":16,"column_end":26},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1192},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1874,"byte_end":1890,"line_start":77,"line_end":77,"column_start":28,"column_end":44},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1274},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1892,"byte_end":1910,"line_start":77,"line_end":77,"column_start":46,"column_end":64},"alias_span":null,"name":"StoragePrefixedMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1168},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1912,"byte_end":1930,"line_start":77,"line_end":77,"column_start":66,"column_end":84},"alias_span":null,"name":"IterableStorageMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1177},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1933,"byte_end":1957,"line_start":78,"line_end":78,"column_start":2,"column_end":26},"alias_span":null,"name":"IterableStorageDoubleMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":565},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1959,"byte_end":1968,"line_start":78,"line_end":78,"column_start":28,"column_end":37},"alias_span":null,"name":"migration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":107},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1997,"byte_end":2006,"line_start":80,"line_end":80,"column_start":26,"column_end":35},"alias_span":null,"name":"Parameter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":101},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":2008,"byte_end":2016,"line_start":80,"line_end":80,"column_start":37,"column_end":45},"alias_span":null,"name":"Callable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":189,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":2027,"byte_end":2037,"line_start":81,"line_end":81,"column_start":9,"column_end":19},"alias_span":null,"name":"sp_runtime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":189,"index":1421},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":2046,"byte_end":2063,"line_start":81,"line_end":81,"column_start":28,"column_end":45},"alias_span":null,"name":"ConsensusEngineId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":189,"index":1547},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":2065,"byte_end":2070,"line_start":81,"line_end":81,"column_start":47,"column_end":52},"alias_span":null,"name":"print","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":189,"index":1214},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":2080,"byte_end":2089,"line_start":81,"line_end":81,"column_start":62,"column_end":71},"alias_span":null,"name":"Printable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":197,"index":1082},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":9298,"byte_end":9310,"line_start":342,"line_end":342,"column_start":2,"column_end":14},"alias_span":null,"name":"decl_storage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":197,"index":1083},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":9312,"byte_end":9329,"line_start":342,"line_end":342,"column_start":16,"column_end":33},"alias_span":null,"name":"construct_runtime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":197,"index":1085},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":9331,"byte_end":9344,"line_start":342,"line_end":342,"column_start":35,"column_end":48},"alias_span":null,"name":"transactional","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":197,"index":1089},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":9346,"byte_end":9365,"line_start":342,"line_end":342,"column_start":50,"column_end":69},"alias_span":null,"name":"RuntimeDebugNoBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":197,"index":1087},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":9846,"byte_end":9858,"line_start":361,"line_end":361,"column_start":35,"column_end":47},"alias_span":null,"name":"CloneNoBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":197,"index":1091},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":10354,"byte_end":10363,"line_start":379,"line_end":379,"column_start":35,"column_end":44},"alias_span":null,"name":"EqNoBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":197,"index":1090},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":10870,"byte_end":10886,"line_start":397,"line_end":397,"column_start":35,"column_end":51},"alias_span":null,"name":"PartialEqNoBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":197,"index":1088},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":11393,"byte_end":11405,"line_start":416,"line_end":416,"column_start":35,"column_end":47},"alias_span":null,"name":"DebugNoBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":197,"index":1092},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":12235,"byte_end":12256,"line_start":447,"line_end":447,"column_start":35,"column_end":56},"alias_span":null,"name":"require_transactional","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":197,"index":1094},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":12871,"byte_end":12894,"line_start":462,"line_end":462,"column_start":35,"column_end":58},"alias_span":null,"name":"crate_to_pallet_version","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":1762},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":15609,"byte_end":15618,"line_start":571,"line_end":571,"column_start":17,"column_end":26},"alias_span":null,"name":"Serialize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":25,"index":930},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":15609,"byte_end":15618,"line_start":571,"line_end":571,"column_start":17,"column_end":26},"alias_span":null,"name":"Serialize","value":"","parent":{"krate":0,"index":2271}},{"kind":"Use","ref_id":{"krate":24,"index":1274},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":15620,"byte_end":15631,"line_start":571,"line_end":571,"column_start":28,"column_end":39},"alias_span":null,"name":"Deserialize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":25,"index":931},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":15620,"byte_end":15631,"line_start":571,"line_end":571,"column_start":28,"column_end":39},"alias_span":null,"name":"Deserialize","value":"","parent":{"krate":0,"index":2272}},{"kind":"Use","ref_id":{"krate":2,"index":2089},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":29893,"byte_end":29904,"line_start":1046,"line_end":1046,"column_start":26,"column_end":37},"alias_span":null,"name":"PhantomData","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":2,"index":2090},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":29893,"byte_end":29904,"line_start":1046,"line_end":1046,"column_start":26,"column_end":37},"alias_span":null,"name":"PhantomData","value":"","parent":{"krate":0,"index":2274}},{"kind":"Use","ref_id":{"krate":0,"index":1970},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":29963,"byte_end":29975,"line_start":1048,"line_end":1048,"column_start":33,"column_end":45},"alias_span":null,"name":"GenesisBuild","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":197,"index":1091},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30005,"byte_end":30014,"line_start":1050,"line_end":1050,"column_start":3,"column_end":12},"alias_span":null,"name":"EqNoBound","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":197,"index":1090},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30016,"byte_end":30032,"line_start":1050,"line_end":1050,"column_start":14,"column_end":30},"alias_span":null,"name":"PartialEqNoBound","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":197,"index":1089},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30034,"byte_end":30053,"line_start":1050,"line_end":1050,"column_start":32,"column_end":51},"alias_span":null,"name":"RuntimeDebugNoBound","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":197,"index":1088},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30055,"byte_end":30067,"line_start":1050,"line_end":1050,"column_start":53,"column_end":65},"alias_span":null,"name":"DebugNoBound","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":197,"index":1087},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30069,"byte_end":30081,"line_start":1050,"line_end":1050,"column_start":67,"column_end":79},"alias_span":null,"name":"CloneNoBound","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1394},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30083,"byte_end":30090,"line_start":1050,"line_end":1050,"column_start":81,"column_end":88},"alias_span":null,"name":"Twox256","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1395},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30083,"byte_end":30090,"line_start":1050,"line_end":1050,"column_start":81,"column_end":88},"alias_span":null,"name":"Twox256","value":"","parent":{"krate":0,"index":2282}},{"kind":"Use","ref_id":{"krate":0,"index":1386},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30094,"byte_end":30101,"line_start":1051,"line_end":1051,"column_start":3,"column_end":10},"alias_span":null,"name":"Twox128","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1387},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30094,"byte_end":30101,"line_start":1051,"line_end":1051,"column_start":3,"column_end":10},"alias_span":null,"name":"Twox128","value":"","parent":{"krate":0,"index":2283}},{"kind":"Use","ref_id":{"krate":0,"index":1378},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30103,"byte_end":30113,"line_start":1051,"line_end":1051,"column_start":12,"column_end":22},"alias_span":null,"name":"Blake2_256","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1379},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30103,"byte_end":30113,"line_start":1051,"line_end":1051,"column_start":12,"column_end":22},"alias_span":null,"name":"Blake2_256","value":"","parent":{"krate":0,"index":2284}},{"kind":"Use","ref_id":{"krate":0,"index":1370},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30115,"byte_end":30125,"line_start":1051,"line_end":1051,"column_start":24,"column_end":34},"alias_span":null,"name":"Blake2_128","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1371},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30115,"byte_end":30125,"line_start":1051,"line_end":1051,"column_start":24,"column_end":34},"alias_span":null,"name":"Blake2_128","value":"","parent":{"krate":0,"index":2285}},{"kind":"Use","ref_id":{"krate":0,"index":1346},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30127,"byte_end":30135,"line_start":1051,"line_end":1051,"column_start":36,"column_end":44},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1347},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30127,"byte_end":30135,"line_start":1051,"line_end":1051,"column_start":36,"column_end":44},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":2286}},{"kind":"Use","ref_id":{"krate":0,"index":1354},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30137,"byte_end":30149,"line_start":1051,"line_end":1051,"column_start":46,"column_end":58},"alias_span":null,"name":"Twox64Concat","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1355},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30137,"byte_end":30149,"line_start":1051,"line_end":1051,"column_start":46,"column_end":58},"alias_span":null,"name":"Twox64Concat","value":"","parent":{"krate":0,"index":2287}},{"kind":"Use","ref_id":{"krate":0,"index":1362},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30151,"byte_end":30167,"line_start":1051,"line_end":1051,"column_start":60,"column_end":76},"alias_span":null,"name":"Blake2_128Concat","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1363},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30151,"byte_end":30167,"line_start":1051,"line_end":1051,"column_start":60,"column_end":76},"alias_span":null,"name":"Blake2_128Concat","value":"","parent":{"krate":0,"index":2288}},{"kind":"Use","ref_id":{"krate":0,"index":16},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30169,"byte_end":30174,"line_start":1051,"line_end":1051,"column_start":78,"column_end":83},"alias_span":null,"name":"debug","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":2263},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30176,"byte_end":30182,"line_start":1051,"line_end":1051,"column_start":85,"column_end":91},"alias_span":null,"name":"ensure","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":72,"index":43},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30186,"byte_end":30198,"line_start":1052,"line_end":1052,"column_start":3,"column_end":15},"alias_span":null,"name":"RuntimeDebug","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":118},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30200,"byte_end":30207,"line_start":1052,"line_end":1052,"column_start":17,"column_end":24},"alias_span":null,"name":"storage","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1660},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30220,"byte_end":30223,"line_start":1053,"line_end":1053,"column_start":12,"column_end":15},"alias_span":null,"name":"Get","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1963},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30225,"byte_end":30230,"line_start":1053,"line_end":1053,"column_start":17,"column_end":22},"alias_span":null,"name":"Hooks","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1921},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30232,"byte_end":30238,"line_start":1053,"line_end":1053,"column_start":24,"column_end":30},"alias_span":null,"name":"IsType","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1992},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30240,"byte_end":30256,"line_start":1053,"line_end":1053,"column_start":32,"column_end":48},"alias_span":null,"name":"GetPalletVersion","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1898},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30258,"byte_end":30270,"line_start":1053,"line_end":1053,"column_start":50,"column_end":62},"alias_span":null,"name":"EnsureOrigin","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":98},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30286,"byte_end":30312,"line_start":1054,"line_end":1054,"column_start":14,"column_end":40},"alias_span":null,"name":"DispatchResultWithPostInfo","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":107},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30314,"byte_end":30323,"line_start":1054,"line_end":1054,"column_start":42,"column_end":51},"alias_span":null,"name":"Parameter","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":3935},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30325,"byte_end":30338,"line_start":1054,"line_end":1054,"column_start":53,"column_end":66},"alias_span":null,"name":"DispatchError","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":7036},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30353,"byte_end":30366,"line_start":1055,"line_end":1055,"column_start":13,"column_end":26},"alias_span":null,"name":"DispatchClass","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":7008},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30368,"byte_end":30372,"line_start":1055,"line_end":1055,"column_start":28,"column_end":32},"alias_span":null,"name":"Pays","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":2023},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30374,"byte_end":30380,"line_start":1055,"line_end":1055,"column_start":34,"column_end":40},"alias_span":null,"name":"Weight","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":649},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30402,"byte_end":30414,"line_start":1056,"line_end":1056,"column_start":20,"column_end":32},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":728},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30416,"byte_end":30426,"line_start":1056,"line_end":1056,"column_start":34,"column_end":44},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":865},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30428,"byte_end":30444,"line_start":1056,"line_end":1056,"column_start":46,"column_end":62},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1045},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30446,"byte_end":30456,"line_start":1056,"line_end":1056,"column_start":64,"column_end":74},"alias_span":null,"name":"ValueQuery","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1046},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30446,"byte_end":30456,"line_start":1056,"line_end":1056,"column_start":64,"column_end":74},"alias_span":null,"name":"ValueQuery","value":"","parent":{"krate":0,"index":2311}},{"kind":"Use","ref_id":{"krate":0,"index":1037},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30458,"byte_end":30469,"line_start":1056,"line_end":1056,"column_start":76,"column_end":87},"alias_span":null,"name":"OptionQuery","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":1038},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30458,"byte_end":30469,"line_start":1056,"line_end":1056,"column_start":76,"column_end":87},"alias_span":null,"name":"OptionQuery","value":"","parent":{"krate":0,"index":2312}},{"kind":"Use","ref_id":{"krate":20,"index":109},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30493,"byte_end":30499,"line_start":1058,"line_end":1058,"column_start":18,"column_end":24},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":21,"index":202},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30493,"byte_end":30499,"line_start":1058,"line_end":1058,"column_start":18,"column_end":24},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":2314}},{"kind":"Use","ref_id":{"krate":20,"index":127},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30501,"byte_end":30507,"line_start":1058,"line_end":1058,"column_start":26,"column_end":32},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":21,"index":203},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30501,"byte_end":30507,"line_start":1058,"line_end":1058,"column_start":26,"column_end":32},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":2315}},{"kind":"Use","ref_id":{"krate":194,"index":105},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30534,"byte_end":30546,"line_start":1059,"line_end":1059,"column_start":25,"column_end":37},"alias_span":null,"name":"InherentData","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":194,"index":21},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30548,"byte_end":30566,"line_start":1059,"line_end":1059,"column_start":39,"column_end":57},"alias_span":null,"name":"InherentIdentifier","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":194,"index":72},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30568,"byte_end":30583,"line_start":1059,"line_end":1059,"column_start":59,"column_end":74},"alias_span":null,"name":"ProvideInherent","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":3015},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30620,"byte_end":30645,"line_start":1061,"line_end":1061,"column_start":12,"column_end":37},"alias_span":null,"name":"MaybeSerializeDeserialize","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":1048},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30647,"byte_end":30653,"line_start":1061,"line_end":1061,"column_start":39,"column_end":45},"alias_span":null,"name":"Member","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":1156},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30655,"byte_end":30671,"line_start":1061,"line_end":1061,"column_start":47,"column_end":63},"alias_span":null,"name":"ValidateUnsigned","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":3508},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30703,"byte_end":30720,"line_start":1063,"line_end":1063,"column_start":4,"column_end":21},"alias_span":null,"name":"TransactionSource","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":1269},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30722,"byte_end":30741,"line_start":1063,"line_end":1063,"column_start":23,"column_end":42},"alias_span":null,"name":"TransactionValidity","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":3540},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30743,"byte_end":30759,"line_start":1063,"line_end":1063,"column_start":44,"column_end":60},"alias_span":null,"name":"ValidTransaction","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":1246},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30761,"byte_end":30780,"line_start":1063,"line_end":1063,"column_start":62,"column_end":81},"alias_span":null,"name":"TransactionPriority","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":1248},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30785,"byte_end":30799,"line_start":1064,"line_end":1064,"column_start":4,"column_end":18},"alias_span":null,"name":"TransactionTag","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":1247},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30801,"byte_end":30821,"line_start":1064,"line_end":1064,"column_start":20,"column_end":40},"alias_span":null,"name":"TransactionLongevity","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":3471},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30823,"byte_end":30847,"line_start":1064,"line_end":1064,"column_start":42,"column_end":66},"alias_span":null,"name":"TransactionValidityError","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":3381},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30849,"byte_end":30867,"line_start":1064,"line_end":1064,"column_start":68,"column_end":86},"alias_span":null,"name":"InvalidTransaction","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":189,"index":3433},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":30872,"byte_end":30890,"line_start":1065,"line_end":1065,"column_start":4,"column_end":22},"alias_span":null,"name":"UnknownTransaction","value":"","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":197,"index":1084},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":68441,"byte_end":68447,"line_start":2062,"line_end":2062,"column_start":35,"column_end":41},"alias_span":null,"name":"pallet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":686,"byte_end":68448,"line_start":18,"line_end":2062,"column_start":1,"column_end":42},"name":"","qualname":"::","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":118},{"krate":0,"index":1306},{"krate":0,"index":1402},{"krate":0,"index":1413},{"krate":0,"index":1435},{"krate":0,"index":1438},{"krate":0,"index":1449},{"krate":0,"index":1457},{"krate":0,"index":1466},{"krate":0,"index":1995},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":8083},{"krate":0,"index":2223},{"krate":0,"index":8085},{"krate":0,"index":2224},{"krate":0,"index":8087},{"krate":0,"index":2225},{"krate":0,"index":8089},{"krate":0,"index":2226},{"krate":0,"index":8091},{"krate":0,"index":2227},{"krate":0,"index":8093},{"krate":0,"index":2228},{"krate":0,"index":8095},{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2238},{"krate":0,"index":2239},{"krate":0,"index":2240},{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2245},{"krate":0,"index":2246},{"krate":0,"index":2247},{"krate":0,"index":7484},{"krate":0,"index":7493},{"krate":0,"index":7490},{"krate":0,"index":7491},{"krate":0,"index":7487},{"krate":0,"index":7488},{"krate":0,"index":7485},{"krate":0,"index":2251},{"krate":0,"index":2252},{"krate":0,"index":2253},{"krate":0,"index":2254},{"krate":0,"index":2255},{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":8149},{"krate":0,"index":2272},{"krate":0,"index":8151},{"krate":0,"index":2273},{"krate":0,"index":2335}],"decl_id":null,"docs":" Support code for the runtime.\n","sig":null,"attributes":[{"value":"/ Support code for the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":686,"byte_end":719,"line_start":18,"line_end":18,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":16},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"debug","qualname":"::debug","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":7519},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43}],"decl_id":null,"docs":" Runtime debugging and logging utilities.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1312,"byte_end":1324,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/ Runtime debugging and logging utilities.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69136,"byte_end":69180,"line_start":18,"line_end":18,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69181,"byte_end":69184,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This module contains macros and functions that will allow","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69185,"byte_end":69246,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ you to print logs out of the runtime code.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69247,"byte_end":69293,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69294,"byte_end":69297,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ First and foremost be aware that adding regular logging code to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69298,"byte_end":69365,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"/ your runtime will have a negative effect on the performance","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69366,"byte_end":69429,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ and size of the blob. Luckily there are some ways to mitigate","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69430,"byte_end":69495,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ this that are described below.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69496,"byte_end":69530,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69531,"byte_end":69534,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ First component to utilize debug-printing and logging is actually","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69535,"byte_end":69604,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ located in `primitives` crate: `sp_core::RuntimeDebug`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69605,"byte_end":69664,"line_start":29,"line_end":29,"column_start":1,"column_end":60}},{"value":"/ This custom-derive generates `core::fmt::Debug` implementation,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69665,"byte_end":69732,"line_start":30,"line_end":30,"column_start":1,"column_end":68}},{"value":"/ just like regular `derive(Debug)`, however it does not generate","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69733,"byte_end":69800,"line_start":31,"line_end":31,"column_start":1,"column_end":68}},{"value":"/ any code when the code is compiled to WASM. This means that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69801,"byte_end":69864,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"/ you can safely sprinkle `RuntimeDebug` in your runtime codebase,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69865,"byte_end":69933,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ without affecting the size. This also allows you to print/log","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":69934,"byte_end":69999,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/ both when the code is running natively or in WASM, but note","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70000,"byte_end":70063,"line_start":35,"line_end":35,"column_start":1,"column_end":64}},{"value":"/ that WASM debug formatting of structs will be empty.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70064,"byte_end":70120,"line_start":36,"line_end":36,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70121,"byte_end":70124,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70125,"byte_end":70143,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"/\tuse frame_support::debug;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70144,"byte_end":70173,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70174,"byte_end":70177,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ #[derive(sp_core::RuntimeDebug)]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70178,"byte_end":70214,"line_start":41,"line_end":41,"column_start":1,"column_end":37}},{"value":"/\tstruct MyStruct {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70215,"byte_end":70236,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/   a: u64,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70237,"byte_end":70250,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/\t}","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70251,"byte_end":70256,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70257,"byte_end":70260,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // First initialize the logger.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70261,"byte_end":70296,"line_start":46,"line_end":46,"column_start":1,"column_end":36}},{"value":"/ //","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70297,"byte_end":70303,"line_start":47,"line_end":47,"column_start":1,"column_end":7}},{"value":"/ // This is only required when you want the logs to be printed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70304,"byte_end":70369,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ // also during non-native run.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70370,"byte_end":70404,"line_start":49,"line_end":49,"column_start":1,"column_end":35}},{"value":"/ // Note that enabling the logger has performance impact on","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70405,"byte_end":70467,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ // WASM runtime execution and should be used sparingly.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70468,"byte_end":70527,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/\tdebug::RuntimeLogger::init();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70528,"byte_end":70561,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70562,"byte_end":70565,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ let x = MyStruct { a: 5 };","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70566,"byte_end":70596,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"/\t// will log an info line `\"My struct: MyStruct{a:5}\"` when running","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70597,"byte_end":70667,"line_start":55,"line_end":55,"column_start":1,"column_end":71}},{"value":"/\t// natively, but will only print `\"My struct: \"` when running WASM.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70668,"byte_end":70739,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"/\tdebug::info!(\"My struct: {:?}\", x);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70740,"byte_end":70779,"line_start":57,"line_end":57,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70780,"byte_end":70783,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/\t// same output here, although this will print to stdout","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70784,"byte_end":70843,"line_start":59,"line_end":59,"column_start":1,"column_end":60}},{"value":"/\t// (and without log format)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70844,"byte_end":70875,"line_start":60,"line_end":60,"column_start":1,"column_end":32}},{"value":"/\tdebug::print!(\"My struct: {:?}\", x);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70876,"byte_end":70916,"line_start":61,"line_end":61,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70917,"byte_end":70924,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70925,"byte_end":70928,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ If you want to avoid extra overhead in WASM, but still be able","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70929,"byte_end":70995,"line_start":64,"line_end":64,"column_start":1,"column_end":67}},{"value":"/ to print / log when the code is executed natively you can use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":70996,"byte_end":71061,"line_start":65,"line_end":65,"column_start":1,"column_end":66}},{"value":"/ macros coming from `native` sub-module. This module enables","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71062,"byte_end":71125,"line_start":66,"line_end":66,"column_start":1,"column_end":64}},{"value":"/ logs conditionally and strips out logs in WASM.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71126,"byte_end":71177,"line_start":67,"line_end":67,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71178,"byte_end":71181,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71182,"byte_end":71200,"line_start":69,"line_end":69,"column_start":1,"column_end":19}},{"value":"/\tuse frame_support::debug::native;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71201,"byte_end":71238,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71239,"byte_end":71242,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ #[derive(sp_core::RuntimeDebug)]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71243,"byte_end":71279,"line_start":72,"line_end":72,"column_start":1,"column_end":37}},{"value":"/\tstruct MyStruct {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71280,"byte_end":71301,"line_start":73,"line_end":73,"column_start":1,"column_end":22}},{"value":"/   a: u64,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71302,"byte_end":71315,"line_start":74,"line_end":74,"column_start":1,"column_end":14}},{"value":"/\t}","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71316,"byte_end":71321,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71322,"byte_end":71325,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ // We don't initialize the logger, since","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71326,"byte_end":71370,"line_start":77,"line_end":77,"column_start":1,"column_end":45}},{"value":"/ // we are not printing anything out in WASM.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71371,"byte_end":71419,"line_start":78,"line_end":78,"column_start":1,"column_end":49}},{"value":"/\t// debug::RuntimeLogger::init();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71420,"byte_end":71456,"line_start":79,"line_end":79,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71457,"byte_end":71460,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let x = MyStruct { a: 5 };","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71461,"byte_end":71491,"line_start":81,"line_end":81,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71492,"byte_end":71495,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/\t// Displays an info log when running natively, nothing when WASM.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71496,"byte_end":71565,"line_start":83,"line_end":83,"column_start":1,"column_end":70}},{"value":"/\tnative::info!(\"My struct: {:?}\", x);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71566,"byte_end":71606,"line_start":84,"line_end":84,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71607,"byte_end":71610,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/\t// same output to stdout, no overhead on WASM.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71611,"byte_end":71661,"line_start":86,"line_end":86,"column_start":1,"column_end":51}},{"value":"/\tnative::print!(\"My struct: {:?}\", x);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71662,"byte_end":71703,"line_start":87,"line_end":87,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71704,"byte_end":71711,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":72045,"byte_end":72051,"line_start":101,"line_end":101,"column_start":9,"column_end":15},"name":"native","qualname":"::debug::native","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":7537},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35}],"decl_id":null,"docs":" Native-only logging.","sig":null,"attributes":[{"value":"/ Native-only logging.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71858,"byte_end":71882,"line_start":96,"line_end":96,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71883,"byte_end":71886,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ Using any functions from this module will have any effect","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71887,"byte_end":71948,"line_start":98,"line_end":98,"column_start":1,"column_end":62}},{"value":"/ only if the runtime is running natively (i.e. not via WASM)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":71949,"byte_end":72012,"line_start":99,"line_end":99,"column_start":1,"column_end":64}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":72013,"byte_end":72036,"line_start":100,"line_end":100,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":37},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":72939,"byte_end":72944,"line_start":143,"line_end":143,"column_start":8,"column_end":13},"name":"debug","qualname":"::debug::debug","value":"pub fn debug<impl Debug: Debug>(&impl Debug)","parent":null,"children":[],"decl_id":null,"docs":" Print out the debuggable type.\n","sig":null,"attributes":[{"value":"/ Print out the debuggable type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":72897,"byte_end":72931,"line_start":142,"line_end":142,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":39},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73550,"byte_end":73563,"line_start":159,"line_end":159,"column_start":12,"column_end":25},"name":"RuntimeLogger","qualname":"::debug::RuntimeLogger","value":"","parent":null,"children":[],"decl_id":null,"docs":" Runtime logger implementation - `log` crate backend.","sig":null,"attributes":[{"value":"/ Runtime logger implementation - `log` crate backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73000,"byte_end":73056,"line_start":147,"line_end":147,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73057,"byte_end":73060,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ The logger should be initialized if you want to display","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73061,"byte_end":73120,"line_start":149,"line_end":149,"column_start":1,"column_end":60}},{"value":"/ logs inside the runtime that is not necessarily running natively.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73121,"byte_end":73190,"line_start":150,"line_end":150,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73191,"byte_end":73194,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ When runtime is executed natively any log statements are displayed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73195,"byte_end":73265,"line_start":152,"line_end":152,"column_start":1,"column_end":71}},{"value":"/ even if this logger is NOT initialized.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73266,"byte_end":73309,"line_start":153,"line_end":153,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73310,"byte_end":73313,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ Note that even though the logs are not displayed in WASM, they","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73314,"byte_end":73380,"line_start":155,"line_end":155,"column_start":1,"column_end":67}},{"value":"/ may still affect the size and performance of the generated runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73381,"byte_end":73452,"line_start":156,"line_end":156,"column_start":1,"column_end":72}},{"value":"/ To lower the footprint make sure to only use macros from `native`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73453,"byte_end":73522,"line_start":157,"line_end":157,"column_start":1,"column_end":70}},{"value":"/ sub-module.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73523,"byte_end":73538,"line_start":158,"line_end":158,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73705,"byte_end":73709,"line_start":166,"line_end":166,"column_start":9,"column_end":13},"name":"init","qualname":"<RuntimeLogger>::init","value":"pub fn init()","parent":null,"children":[],"decl_id":null,"docs":" Initialize the logger.","sig":null,"attributes":[{"value":"/ Initialize the logger.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73588,"byte_end":73614,"line_start":162,"line_end":162,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73616,"byte_end":73619,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ This is a no-op when running natively (`std`).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73621,"byte_end":73671,"line_start":164,"line_end":164,"column_start":2,"column_end":52}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73673,"byte_end":73696,"line_start":165,"line_end":165,"column_start":2,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":50},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dispatch","qualname":"::dispatch","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":7557},{"krate":0,"index":57},{"krate":0,"index":7559},{"krate":0,"index":58},{"krate":0,"index":7561},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":7569},{"krate":0,"index":64},{"krate":0,"index":7571},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":7593},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":108}],"decl_id":null,"docs":" Dispatch system. Contains a macro for defining runtime modules and\n generating values representing lazy module function calls.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1365,"byte_end":1377,"line_start":52,"line_end":52,"column_start":1,"column_end":13}},{"value":"/ Dispatch system. Contains a macro for defining runtime modules and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91394,"byte_end":91464,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/ generating values representing lazy module function calls.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":91465,"byte_end":91527,"line_start":19,"line_end":19,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92459,"byte_end":92485,"line_start":39,"line_end":39,"column_start":10,"column_end":36},"name":"DispatchResultWithPostInfo","qualname":"::dispatch::DispatchResultWithPostInfo","value":"sp_runtime::DispatchResultWithInfo<crate::weights::PostDispatchInfo>","parent":null,"children":[],"decl_id":null,"docs":" The return typ of a `Dispatchable` in frame. When returned explicitly from\n a dispatchable function it allows overriding the default `PostDispatchInfo`\n returned from a dispatch.\n","sig":null,"attributes":[{"value":"/ The return typ of a `Dispatchable` in frame. When returned explicitly from","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92261,"byte_end":92339,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/ a dispatchable function it allows overriding the default `PostDispatchInfo`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92340,"byte_end":92419,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ returned from a dispatch.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92420,"byte_end":92449,"line_start":38,"line_end":38,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":99},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92909,"byte_end":92923,"line_start":46,"line_end":46,"column_start":10,"column_end":24},"name":"DispatchResult","qualname":"::dispatch::DispatchResult","value":"Result<(), sp_runtime::DispatchError>","parent":null,"children":[],"decl_id":null,"docs":" Unaugmented version of `DispatchResultWithPostInfo` that can be returned from\n dispatchable functions and is automatically converted to the augmented type. Should be\n used whenever the `PostDispatchInfo` does not need to be overwritten. As this should\n be the common case it is the implicit return type when none is specified.\n","sig":null,"attributes":[{"value":"/ Unaugmented version of `DispatchResultWithPostInfo` that can be returned from","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92560,"byte_end":92641,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ dispatchable functions and is automatically converted to the augmented type. Should be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92642,"byte_end":92732,"line_start":43,"line_end":43,"column_start":1,"column_end":91}},{"value":"/ used whenever the `PostDispatchInfo` does not need to be overwritten. As this should","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92733,"byte_end":92821,"line_start":44,"line_end":44,"column_start":1,"column_end":89}},{"value":"/ be the common case it is the implicit return type when none is specified.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92822,"byte_end":92899,"line_start":45,"line_end":45,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":100},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93039,"byte_end":93064,"line_start":49,"line_end":49,"column_start":10,"column_end":35},"name":"DispatchErrorWithPostInfo","qualname":"::dispatch::DispatchErrorWithPostInfo","value":"sp_runtime::DispatchErrorWithPostInfo<crate::weights::PostDispatchInfo>","parent":null,"children":[],"decl_id":null,"docs":" The error type contained in a `DispatchResultWithPostInfo`.\n","sig":null,"attributes":[{"value":"/ The error type contained in a `DispatchResultWithPostInfo`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":92966,"byte_end":93029,"line_start":48,"line_end":48,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":101},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93201,"byte_end":93209,"line_start":53,"line_end":53,"column_start":11,"column_end":19},"name":"Callable","qualname":"::dispatch::Callable","value":"Callable<T>","parent":null,"children":[{"krate":0,"index":103}],"decl_id":null,"docs":" Serializable version of pallet dispatchable.\n","sig":null,"attributes":[{"value":"/ Serializable version of pallet dispatchable.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93142,"byte_end":93190,"line_start":52,"line_end":52,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":103},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93221,"byte_end":93225,"line_start":54,"line_end":54,"column_start":7,"column_end":11},"name":"Call","qualname":"::dispatch::Callable::Call","value":"type Call: UnfilteredDispatchable + Codec + Clone + PartialEq + Eq;","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":104},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93394,"byte_end":93409,"line_start":59,"line_end":59,"column_start":10,"column_end":25},"name":"CallableCallFor","qualname":"::dispatch::CallableCallFor","value":"<A as Callable<R>>::Call","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":107},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93619,"byte_end":93628,"line_start":64,"line_end":64,"column_start":11,"column_end":20},"name":"Parameter","qualname":"::dispatch::Parameter","value":"Parameter: Codec + EncodeLike + Clone + Eq + fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" A type that can be used as a parameter in a dispatchable function.","sig":null,"attributes":[{"value":"/ A type that can be used as a parameter in a dispatchable function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93445,"byte_end":93515,"line_start":61,"line_end":61,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93516,"byte_end":93519,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ When using `decl_module` all arguments for call functions must implement this trait.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93520,"byte_end":93608,"line_start":63,"line_end":63,"column_start":1,"column_end":89}}]},{"kind":"Mod","id":{"krate":0,"index":118},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"storage","qualname":"::storage","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":7635},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":7639},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":7641},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":166},{"krate":0,"index":222},{"krate":0,"index":268},{"krate":0,"index":565},{"krate":0,"index":624},{"krate":0,"index":1070},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1090},{"krate":0,"index":1117},{"krate":0,"index":1168},{"krate":0,"index":1177},{"krate":0,"index":1192},{"krate":0,"index":1263},{"krate":0,"index":1269},{"krate":0,"index":1274},{"krate":0,"index":1288},{"krate":0,"index":1290},{"krate":0,"index":1293},{"krate":0,"index":1300},{"krate":0,"index":1302},{"krate":0,"index":1304}],"decl_id":null,"docs":" Stuff to do with the runtime's storage.\n","sig":null,"attributes":[{"value":"/ Stuff to do with the runtime's storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":177875,"byte_end":177918,"line_start":18,"line_end":18,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":133},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unhashed","qualname":"::storage::unhashed","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":7651},{"krate":0,"index":137},{"krate":0,"index":7653},{"krate":0,"index":138},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"decl_id":null,"docs":" Operation on unhashed runtime storage.\n","sig":null,"attributes":[{"value":"/ Operation on unhashed runtime storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":205473,"byte_end":205515,"line_start":18,"line_end":18,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":138},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":205676,"byte_end":205679,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::unhashed::get","value":"pub fn get<T: Decode + Sized>(&[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":205571,"byte_end":205668,"line_start":23,"line_end":23,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":142},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206077,"byte_end":206091,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::unhashed::get_or_default","value":"pub fn get_or_default<T: Decode + Sized + Default>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":205956,"byte_end":206049,"line_start":34,"line_end":34,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206050,"byte_end":206069,"line_start":35,"line_end":35,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":144},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206304,"byte_end":206310,"line_start":42,"line_end":42,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::unhashed::get_or","value":"pub fn get_or<T: Decode + Sized>(&[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206186,"byte_end":206276,"line_start":40,"line_end":40,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206277,"byte_end":206296,"line_start":41,"line_end":41,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":146},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206525,"byte_end":206536,"line_start":48,"line_end":48,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::unhashed::get_or_else","value":"pub fn get_or_else<T: Decode + Sized, F: FnOnce() -> T>(&[u8], F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206405,"byte_end":206497,"line_start":46,"line_end":46,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206498,"byte_end":206517,"line_start":47,"line_end":47,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":149},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206701,"byte_end":206704,"line_start":53,"line_end":53,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::unhashed::put","value":"pub fn put<T: Encode + ?Sized>(&[u8], &T)","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206654,"byte_end":206693,"line_start":52,"line_end":52,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":152},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206923,"byte_end":206927,"line_start":58,"line_end":58,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::unhashed::take","value":"pub fn take<T: Decode + Sized>(&[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":206816,"byte_end":206915,"line_start":57,"line_end":57,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":154},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207169,"byte_end":207184,"line_start":68,"line_end":68,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::unhashed::take_or_default","value":"pub fn take_or_default<T: Decode + Sized + Default>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207033,"byte_end":207131,"line_start":66,"line_end":66,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207132,"byte_end":207161,"line_start":67,"line_end":67,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":156},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207443,"byte_end":207450,"line_start":74,"line_end":74,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::unhashed::take_or","value":"pub fn take_or<T: Decode + Sized>(&[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207280,"byte_end":207370,"line_start":72,"line_end":72,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207371,"byte_end":207435,"line_start":73,"line_end":73,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":158},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207711,"byte_end":207723,"line_start":80,"line_end":80,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::unhashed::take_or_else","value":"pub fn take_or_else<T: Decode + Sized, F: FnOnce() -> T>(&[u8], F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207546,"byte_end":207638,"line_start":78,"line_end":78,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207639,"byte_end":207703,"line_start":79,"line_end":79,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":161},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207909,"byte_end":207915,"line_start":85,"line_end":85,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::unhashed::exists","value":"pub fn exists(&[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207842,"byte_end":207901,"line_start":84,"line_end":84,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":162},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":208028,"byte_end":208032,"line_start":90,"line_end":90,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::unhashed::kill","value":"pub fn kill(&[u8])","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":207970,"byte_end":208020,"line_start":89,"line_end":89,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":163},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":208154,"byte_end":208165,"line_start":95,"line_end":95,"column_start":8,"column_end":19},"name":"kill_prefix","qualname":"::storage::unhashed::kill_prefix","value":"pub fn kill_prefix(&[u8])","parent":null,"children":[],"decl_id":null,"docs":" Ensure keys with the given `prefix` have no entries in storage.\n","sig":null,"attributes":[{"value":"/ Ensure keys with the given `prefix` have no entries in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":208079,"byte_end":208146,"line_start":94,"line_end":94,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":164},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":208269,"byte_end":208276,"line_start":100,"line_end":100,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::unhashed::get_raw","value":"pub fn get_raw(&[u8]) -> Option<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":208225,"byte_end":208261,"line_start":99,"line_end":99,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":165},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":208593,"byte_end":208600,"line_start":109,"line_end":109,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::unhashed::put_raw","value":"pub fn put_raw(&[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":208339,"byte_end":208377,"line_start":104,"line_end":104,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":208378,"byte_end":208381,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ **WARNING**: If you set the storage of the Substrate Wasm (`well_known_keys::CODE`),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":208382,"byte_end":208470,"line_start":106,"line_end":106,"column_start":1,"column_end":89}},{"value":"/ you should also call `frame_system::RuntimeUpgraded::put(true)` to trigger the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":208471,"byte_end":208553,"line_start":107,"line_end":107,"column_start":1,"column_end":83}},{"value":"/ `on_runtime_upgrade` logic.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/unhashed.rs","byte_start":208554,"byte_end":208585,"line_start":108,"line_end":108,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":166},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hashed","qualname":"::storage::hashed","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":7659},{"krate":0,"index":171},{"krate":0,"index":7661},{"krate":0,"index":172},{"krate":0,"index":176},{"krate":0,"index":180},{"krate":0,"index":184},{"krate":0,"index":189},{"krate":0,"index":193},{"krate":0,"index":197},{"krate":0,"index":201},{"krate":0,"index":205},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":219}],"decl_id":null,"docs":" Operation on runtime storage using hashed keys.\n","sig":null,"attributes":[{"value":"/ Operation on runtime storage using hashed keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":209351,"byte_end":209402,"line_start":18,"line_end":18,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":172},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":209584,"byte_end":209587,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::hashed::get","value":"pub fn get<T, HashFn, R>(&HashFn, &[u8]) -> Option<T> where T: Decode + Sized,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":209479,"byte_end":209576,"line_start":24,"line_end":24,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":209872,"byte_end":209886,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::hashed::get_or_default","value":"pub fn get_or_default<T, HashFn, R>(&HashFn, &[u8]) -> T where T: Decode +\nSized + Default, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":209751,"byte_end":209844,"line_start":34,"line_end":34,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":209845,"byte_end":209864,"line_start":35,"line_end":35,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":180},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":210181,"byte_end":210187,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::hashed::get_or","value":"pub fn get_or<T, HashFn, R>(&HashFn, &[u8], T) -> T where T: Decode + Sized,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":210063,"byte_end":210153,"line_start":45,"line_end":45,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":210154,"byte_end":210173,"line_start":46,"line_end":46,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":210499,"byte_end":210510,"line_start":58,"line_end":58,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::hashed::get_or_else","value":"pub fn get_or_else<T, F, HashFn, R>(&HashFn, &[u8], F) -> T where T: Decode +\nSized, F: FnOnce() -> T, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":210379,"byte_end":210471,"line_start":56,"line_end":56,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":210472,"byte_end":210491,"line_start":57,"line_end":57,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":189},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":210776,"byte_end":210779,"line_start":69,"line_end":69,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::hashed::put","value":"pub fn put<T, HashFn, R>(&HashFn, &[u8], &T) where T: Encode,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":210729,"byte_end":210768,"line_start":68,"line_end":68,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":211047,"byte_end":211051,"line_start":79,"line_end":79,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::hashed::take","value":"pub fn take<T, HashFn, R>(&HashFn, &[u8]) -> Option<T> where T: Decode +\nSized, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":210940,"byte_end":211039,"line_start":78,"line_end":78,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":211352,"byte_end":211367,"line_start":90,"line_end":90,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::hashed::take_or_default","value":"pub fn take_or_default<T, HashFn, R>(&HashFn, &[u8]) -> T where T: Decode +\nSized + Default, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":211216,"byte_end":211314,"line_start":88,"line_end":88,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":211315,"byte_end":211344,"line_start":89,"line_end":89,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":211708,"byte_end":211715,"line_start":101,"line_end":101,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::hashed::take_or","value":"pub fn take_or<T, HashFn, R>(&HashFn, &[u8], T) -> T where T: Decode + Sized,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":211545,"byte_end":211635,"line_start":99,"line_end":99,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":211636,"byte_end":211700,"line_start":100,"line_end":100,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":212073,"byte_end":212085,"line_start":112,"line_end":112,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::hashed::take_or_else","value":"pub fn take_or_else<T, F, HashFn, R>(&HashFn, &[u8], F) -> T where T: Decode +\nSized, F: FnOnce() -> T, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":211908,"byte_end":212000,"line_start":110,"line_end":110,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":212001,"byte_end":212065,"line_start":111,"line_end":111,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":210},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":212372,"byte_end":212378,"line_start":123,"line_end":123,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::hashed::exists","value":"pub fn exists<HashFn, R>(&HashFn, &[u8]) -> bool where HashFn: Fn(&[u8]) -> R,\nR: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":212305,"byte_end":212364,"line_start":122,"line_end":122,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":213},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":212575,"byte_end":212579,"line_start":132,"line_end":132,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::hashed::kill","value":"pub fn kill<HashFn, R>(&HashFn, &[u8]) where HashFn: Fn(&[u8]) -> R,\nR: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":212517,"byte_end":212567,"line_start":131,"line_end":131,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":216},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":212752,"byte_end":212759,"line_start":141,"line_end":141,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::hashed::get_raw","value":"pub fn get_raw<HashFn, R>(&HashFn, &[u8]) -> Option<Vec<u8>> where\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":212708,"byte_end":212744,"line_start":140,"line_end":140,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":219},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":212956,"byte_end":212963,"line_start":150,"line_end":150,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::hashed::put_raw","value":"pub fn put_raw<HashFn, R>(&HashFn, &[u8], &[u8]) where HashFn: Fn(&[u8]) -> R,\nR: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.\n","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/hashed.rs","byte_start":212910,"byte_end":212948,"line_start":149,"line_end":149,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":222},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"child","qualname":"::storage::child","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":7665},{"krate":0,"index":227},{"krate":0,"index":7667},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":236},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" Operation on runtime child storages.","sig":null,"attributes":[{"value":"/ Operation on runtime child storages.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":213802,"byte_end":213842,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":213843,"byte_end":213846,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This module is a currently only a variant of unhashed with additional `child_info`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":213847,"byte_end":213934,"line_start":20,"line_end":20,"column_start":1,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":232},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":214299,"byte_end":214309,"line_start":31,"line_end":31,"column_start":2,"column_end":12},"name":"AllRemoved","qualname":"::storage::child::KillOutcome::AllRemoved","value":"KillOutcome::AllRemoved","parent":{"krate":0,"index":231},"children":[],"decl_id":null,"docs":" No key remains in the child trie.\n","sig":null,"attributes":[{"value":"/ No key remains in the child trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":214260,"byte_end":214297,"line_start":30,"line_end":30,"column_start":2,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":234},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":214393,"byte_end":214406,"line_start":33,"line_end":33,"column_start":2,"column_end":15},"name":"SomeRemaining","qualname":"::storage::child::KillOutcome::SomeRemaining","value":"KillOutcome::SomeRemaining","parent":{"krate":0,"index":231},"children":[],"decl_id":null,"docs":" At least one key still resides in the child trie due to the supplied limit.\n","sig":null,"attributes":[{"value":"/ At least one key still resides in the child trie due to the supplied limit.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":214312,"byte_end":214391,"line_start":32,"line_end":32,"column_start":2,"column_end":81}}]},{"kind":"Enum","id":{"krate":0,"index":231},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":214245,"byte_end":214256,"line_start":29,"line_end":29,"column_start":10,"column_end":21},"name":"KillOutcome","qualname":"::storage::child::KillOutcome","value":"pub enum KillOutcome {\n\n    /// No key remains in the child trie.\n    AllRemoved,\n\n    /// At least one key still resides in the child trie due to the supplied limit.\n    SomeRemaining,\n}","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":234}],"decl_id":null,"docs":" The outcome of calling [`kill_storage`].\n","sig":null,"attributes":[{"value":"/ The outcome of calling [`kill_storage`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":214191,"byte_end":214235,"line_start":28,"line_end":28,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":214516,"byte_end":214519,"line_start":37,"line_end":37,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::child::get","value":"pub fn get<T: Decode + Sized>(&ChildInfo, &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":214411,"byte_end":214508,"line_start":36,"line_end":36,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":215147,"byte_end":215161,"line_start":60,"line_end":60,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::child::get_or_default","value":"pub fn get_or_default<T: Decode + Sized + Default>(&ChildInfo, &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":215026,"byte_end":215119,"line_start":58,"line_end":58,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":215120,"byte_end":215139,"line_start":59,"line_end":59,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":242},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":215415,"byte_end":215421,"line_start":69,"line_end":69,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::child::get_or","value":"pub fn get_or<T: Decode + Sized>(&ChildInfo, &[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":215297,"byte_end":215387,"line_start":67,"line_end":67,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":215388,"byte_end":215407,"line_start":68,"line_end":68,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":244},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":215678,"byte_end":215689,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::child::get_or_else","value":"pub fn get_or_else<T: Decode + Sized, F: FnOnce() -> T>(&ChildInfo, &[u8], F)\n-> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":215558,"byte_end":215650,"line_start":77,"line_end":77,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":215651,"byte_end":215670,"line_start":78,"line_end":78,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":247},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":215896,"byte_end":215899,"line_start":88,"line_end":88,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::child::put","value":"pub fn put<T: Encode>(&ChildInfo, &[u8], &T)","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":215849,"byte_end":215888,"line_start":87,"line_end":87,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":250},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":216266,"byte_end":216270,"line_start":105,"line_end":105,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::child::take","value":"pub fn take<T: Decode + Sized>(&ChildInfo, &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":216159,"byte_end":216258,"line_start":104,"line_end":104,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":216565,"byte_end":216580,"line_start":118,"line_end":118,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::child::take_or_default","value":"pub fn take_or_default<T: Codec + Sized + Default>(&ChildInfo, &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":216429,"byte_end":216527,"line_start":116,"line_end":116,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":216528,"byte_end":216557,"line_start":117,"line_end":117,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":254},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":216879,"byte_end":216886,"line_start":127,"line_end":127,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::child::take_or","value":"pub fn take_or<T: Codec + Sized>(&ChildInfo, &[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":216716,"byte_end":216806,"line_start":125,"line_end":125,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":216807,"byte_end":216871,"line_start":126,"line_end":126,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217188,"byte_end":217200,"line_start":137,"line_end":137,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::child::take_or_else","value":"pub fn take_or_else<T: Codec + Sized, F: FnOnce() -> T>(&ChildInfo, &[u8], F)\n-> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217023,"byte_end":217115,"line_start":135,"line_end":135,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217116,"byte_end":217180,"line_start":136,"line_end":136,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":259},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217427,"byte_end":217433,"line_start":146,"line_end":146,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::child::exists","value":"pub fn exists(&ChildInfo, &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217360,"byte_end":217419,"line_start":145,"line_end":145,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":218603,"byte_end":218615,"line_start":177,"line_end":177,"column_start":8,"column_end":20},"name":"kill_storage","qualname":"::storage::child::kill_storage","value":"pub fn kill_storage(&ChildInfo, Option<u32>) -> KillOutcome","parent":null,"children":[],"decl_id":null,"docs":" Remove all `storage_key` key/values","sig":null,"attributes":[{"value":"/ Remove all `storage_key` key/values","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217659,"byte_end":217698,"line_start":158,"line_end":158,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217699,"byte_end":217702,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ Deletes all keys from the overlay and up to `limit` keys from the backend if","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217703,"byte_end":217783,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/ it is set to `Some`. No limit is applied when `limit` is set to `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217784,"byte_end":217859,"line_start":161,"line_end":161,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217860,"byte_end":217863,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ The limit can be used to partially delete a child trie in case it is too large","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217864,"byte_end":217946,"line_start":163,"line_end":163,"column_start":1,"column_end":83}},{"value":"/ to delete in one go (block).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217947,"byte_end":217979,"line_start":164,"line_end":164,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217980,"byte_end":217983,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217984,"byte_end":217994,"line_start":166,"line_end":166,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217995,"byte_end":217998,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ Please note that keys that are residing in the overlay for that child trie when","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":217999,"byte_end":218082,"line_start":168,"line_end":168,"column_start":1,"column_end":84}},{"value":"/ issuing this call are all deleted without counting towards the `limit`. Only keys","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":218083,"byte_end":218168,"line_start":169,"line_end":169,"column_start":1,"column_end":86}},{"value":"/ written during the current block are part of the overlay. Deleting with a `limit`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":218169,"byte_end":218254,"line_start":170,"line_end":170,"column_start":1,"column_end":86}},{"value":"/ mostly makes sense with an empty overlay for that child trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":218255,"byte_end":218320,"line_start":171,"line_end":171,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":218321,"byte_end":218324,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ Calling this function multiple times per block for the same `storage_key` does","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":218325,"byte_end":218407,"line_start":173,"line_end":173,"column_start":1,"column_end":83}},{"value":"/ not make much sense because it is not cumulative when called inside the same block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":218408,"byte_end":218495,"line_start":174,"line_end":174,"column_start":1,"column_end":88}},{"value":"/ Use this function to distribute the deletion of a single child trie across multiple","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":218496,"byte_end":218583,"line_start":175,"line_end":175,"column_start":1,"column_end":88}},{"value":"/ blocks.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":218584,"byte_end":218595,"line_start":176,"line_end":176,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":262},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":219011,"byte_end":219015,"line_start":194,"line_end":194,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::child::kill","value":"pub fn kill(&ChildInfo, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":218953,"byte_end":219003,"line_start":193,"line_end":193,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":263},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":219262,"byte_end":219269,"line_start":209,"line_end":209,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::child::get_raw","value":"pub fn get_raw(&ChildInfo, &[u8]) -> Option<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":219218,"byte_end":219254,"line_start":208,"line_end":208,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":264},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":219522,"byte_end":219529,"line_start":222,"line_end":222,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::child::put_raw","value":"pub fn put_raw(&ChildInfo, &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.\n","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":219476,"byte_end":219514,"line_start":221,"line_end":221,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":265},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":219789,"byte_end":219793,"line_start":237,"line_end":237,"column_start":8,"column_end":12},"name":"root","qualname":"::storage::child::root","value":"pub fn root(&ChildInfo) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Calculate current child root value.\n","sig":null,"attributes":[{"value":"/ Calculate current child root value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":219742,"byte_end":219781,"line_start":236,"line_end":236,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":266},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":220072,"byte_end":220075,"line_start":248,"line_end":248,"column_start":8,"column_end":11},"name":"len","qualname":"::storage::child::len","value":"pub fn len(&ChildInfo, &[u8]) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Return the length in bytes of the value without reading it. `None` if it does not exist.\n","sig":null,"attributes":[{"value":"/ Return the length in bytes of the value without reading it. `None` if it does not exist.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/child.rs","byte_start":219972,"byte_end":220064,"line_start":247,"line_end":247,"column_start":1,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":268},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"generator","qualname":"::storage::generator","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":378},{"krate":0,"index":507},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564}],"decl_id":null,"docs":" Generators are a set of trait on which storage traits are implemented.","sig":null,"attributes":[{"value":"/ Generators are a set of trait on which storage traits are implemented.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":221028,"byte_end":221102,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":221103,"byte_end":221106,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ (i.e. implementing the generator for StorageValue on a type will automatically derive the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":221107,"byte_end":221200,"line_start":20,"line_end":20,"column_start":1,"column_end":94}},{"value":"/ implementation of StorageValue for this type).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":221201,"byte_end":221251,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":221252,"byte_end":221255,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ They are used by `decl_storage`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":221256,"byte_end":221292,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":221293,"byte_end":221296,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This is internal api and is subject to change.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/mod.rs","byte_start":221297,"byte_end":221347,"line_start":25,"line_end":25,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":288},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226458,"byte_end":226468,"line_start":38,"line_end":38,"column_start":11,"column_end":21},"name":"StorageMap","qualname":"::storage::generator::map::StorageMap","value":"StorageMap<K: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298}],"decl_id":null,"docs":" Generator for `StorageMap` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageMap` used by `decl_storage`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226040,"byte_end":226094,"line_start":27,"line_end":27,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226095,"byte_end":226098,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ By default each key value is stored at:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226099,"byte_end":226142,"line_start":29,"line_end":29,"column_start":1,"column_end":44}},{"value":"/ ```nocompile","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226143,"byte_end":226159,"line_start":30,"line_end":30,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix) ++ Hasher(encode(key))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226160,"byte_end":226236,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226237,"byte_end":226244,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226245,"byte_end":226248,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226249,"byte_end":226262,"line_start":34,"line_end":34,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226263,"byte_end":226266,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ If the keys are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226267,"byte_end":226360,"line_start":36,"line_end":36,"column_start":1,"column_end":94}},{"value":"/ `blake2_256` must be used.  Otherwise, other values in storage can be compromised.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226361,"byte_end":226447,"line_start":37,"line_end":37,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":291},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226543,"byte_end":226548,"line_start":40,"line_end":40,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::map::StorageMap::Query","value":"type Query;","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226501,"byte_end":226536,"line_start":39,"line_end":39,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":292},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226601,"byte_end":226607,"line_start":43,"line_end":43,"column_start":7,"column_end":13},"name":"Hasher","qualname":"::storage::generator::map::StorageMap::Hasher","value":"type Hasher: StorageHasher;","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Hasher. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Hasher. Used for generating final key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226552,"byte_end":226594,"line_start":42,"line_end":42,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226680,"byte_end":226693,"line_start":46,"line_end":46,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::map::StorageMap::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226626,"byte_end":226675,"line_start":45,"line_end":45,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226771,"byte_end":226785,"line_start":49,"line_end":49,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::map::StorageMap::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226716,"byte_end":226766,"line_start":48,"line_end":48,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226917,"byte_end":226928,"line_start":53,"line_end":53,"column_start":5,"column_end":16},"name":"prefix_hash","qualname":"::storage::generator::map::StorageMap::prefix_hash","value":"pub fn prefix_hash() -> Vec<u8>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" The full prefix; just the hash of `module_prefix` concatenated to the hash of\n `storage_prefix`.\n","sig":null,"attributes":[{"value":"/ The full prefix; just the hash of `module_prefix` concatenated to the hash of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226808,"byte_end":226889,"line_start":51,"line_end":51,"column_start":2,"column_end":83}},{"value":"/ `storage_prefix`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":226891,"byte_end":226912,"line_start":52,"line_end":52,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":227390,"byte_end":227418,"line_start":68,"line_end":68,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::map::StorageMap::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<V>) -> Self::Query","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":227312,"byte_end":227385,"line_start":67,"line_end":67,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":227510,"byte_end":227538,"line_start":71,"line_end":71,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::map::StorageMap::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<V>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":227451,"byte_end":227505,"line_start":70,"line_end":70,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":227622,"byte_end":227643,"line_start":74,"line_end":74,"column_start":5,"column_end":26},"name":"storage_map_final_key","qualname":"::storage::generator::map::StorageMap::storage_map_final_key","value":"pub fn storage_map_final_key<KeyArg>(KeyArg) -> Vec<u8> where\nKeyArg: EncodeLike<K>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":227571,"byte_end":227617,"line_start":73,"line_end":73,"column_start":2,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":398},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239353,"byte_end":239369,"line_start":44,"line_end":44,"column_start":11,"column_end":27},"name":"StorageDoubleMap","qualname":"::storage::generator::double_map::StorageDoubleMap","value":"StorageDoubleMap<K1: FullEncode, K2: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":412}],"decl_id":null,"docs":" Generator for `StorageDoubleMap` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageDoubleMap` used by `decl_storage`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238391,"byte_end":238451,"line_start":24,"line_end":24,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238452,"byte_end":238455,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Mapping of keys to a storage path","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238456,"byte_end":238495,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238496,"byte_end":238499,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The storage key (i.e. the key under which the `Value` will be stored) is created from two parts.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238500,"byte_end":238600,"line_start":28,"line_end":28,"column_start":1,"column_end":101}},{"value":"/ The first part is a hash of a concatenation of the `key1_prefix` and `Key1`. And the second part","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238601,"byte_end":238701,"line_start":29,"line_end":29,"column_start":1,"column_end":101}},{"value":"/ is a hash of a `Key2`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238702,"byte_end":238728,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238729,"byte_end":238732,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Thus value for (key1, key2) is stored at:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238733,"byte_end":238778,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/ ```nocompile","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238779,"byte_end":238795,"line_start":33,"line_end":33,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix) ++ Hasher1(encode(key1)) ++ Hasher2(encode(key2))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238796,"byte_end":238899,"line_start":34,"line_end":34,"column_start":1,"column_end":104}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238900,"byte_end":238907,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238908,"byte_end":238911,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238912,"byte_end":238925,"line_start":37,"line_end":37,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238926,"byte_end":238929,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ If the key1s are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":238930,"byte_end":239024,"line_start":39,"line_end":39,"column_start":1,"column_end":95}},{"value":"/ `blake2_256` must be used for Hasher1. Otherwise, other values in storage can be compromised.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239025,"byte_end":239122,"line_start":40,"line_end":40,"column_start":1,"column_end":98}},{"value":"/ If the key2s are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239123,"byte_end":239217,"line_start":41,"line_end":41,"column_start":1,"column_end":95}},{"value":"/ `blake2_256` must be used for Hasher2. Otherwise, other items in storage with the same first","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239218,"byte_end":239314,"line_start":42,"line_end":42,"column_start":1,"column_end":97}},{"value":"/ key can be compromised.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239315,"byte_end":239342,"line_start":43,"line_end":43,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":402},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239461,"byte_end":239466,"line_start":46,"line_end":46,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::double_map::StorageDoubleMap::Query","value":"type Query;","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239419,"byte_end":239454,"line_start":45,"line_end":45,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":403},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239506,"byte_end":239513,"line_start":49,"line_end":49,"column_start":7,"column_end":14},"name":"Hasher1","qualname":"::storage::generator::double_map::StorageDoubleMap::Hasher1","value":"type Hasher1: StorageHasher;","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Hasher for the first key.\n","sig":null,"attributes":[{"value":"/ Hasher for the first key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239470,"byte_end":239499,"line_start":48,"line_end":48,"column_start":2,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":404},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239569,"byte_end":239576,"line_start":52,"line_end":52,"column_start":7,"column_end":14},"name":"Hasher2","qualname":"::storage::generator::double_map::StorageDoubleMap::Hasher2","value":"type Hasher2: StorageHasher;","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Hasher for the second key.\n","sig":null,"attributes":[{"value":"/ Hasher for the second key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239532,"byte_end":239562,"line_start":51,"line_end":51,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239649,"byte_end":239662,"line_start":55,"line_end":55,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::double_map::StorageDoubleMap::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239595,"byte_end":239644,"line_start":54,"line_end":54,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239740,"byte_end":239754,"line_start":58,"line_end":58,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239685,"byte_end":239735,"line_start":57,"line_end":57,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239886,"byte_end":239897,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"prefix_hash","qualname":"::storage::generator::double_map::StorageDoubleMap::prefix_hash","value":"pub fn prefix_hash() -> Vec<u8>","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" The full prefix; just the hash of `module_prefix` concatenated to the hash of\n `storage_prefix`.\n","sig":null,"attributes":[{"value":"/ The full prefix; just the hash of `module_prefix` concatenated to the hash of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239777,"byte_end":239858,"line_start":60,"line_end":60,"column_start":2,"column_end":83}},{"value":"/ `storage_prefix`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":239860,"byte_end":239881,"line_start":61,"line_end":61,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":240359,"byte_end":240387,"line_start":77,"line_end":77,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::double_map::StorageDoubleMap::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<V>) -> Self::Query","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":240281,"byte_end":240354,"line_start":76,"line_end":76,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":240479,"byte_end":240507,"line_start":80,"line_end":80,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::double_map::StorageDoubleMap::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<V>","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":240420,"byte_end":240474,"line_start":79,"line_end":79,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":240604,"byte_end":240633,"line_start":83,"line_end":83,"column_start":5,"column_end":34},"name":"storage_double_map_final_key1","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_double_map_final_key1","value":"pub fn storage_double_map_final_key1<KArg1>(KArg1) -> Vec<u8> where\nKArg1: EncodeLike<K1>","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Generate the first part of the key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the first part of the key used in top storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":240540,"byte_end":240599,"line_start":82,"line_end":82,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":241275,"byte_end":241303,"line_start":102,"line_end":102,"column_start":5,"column_end":33},"name":"storage_double_map_final_key","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_double_map_final_key","value":"pub fn storage_double_map_final_key<KArg1, KArg2>(KArg1, KArg2) -> Vec<u8>\nwhere KArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":241224,"byte_end":241270,"line_start":101,"line_end":101,"column_start":2,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":522},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255374,"byte_end":255386,"line_start":31,"line_end":31,"column_start":11,"column_end":23},"name":"StorageValue","qualname":"::storage::generator::value::StorageValue","value":"StorageValue<T: FullCodec>","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529}],"decl_id":null,"docs":" Generator for `StorageValue` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageValue` used by `decl_storage`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255189,"byte_end":255245,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255246,"byte_end":255249,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ By default value is stored at:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255250,"byte_end":255284,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/ ```nocompile","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255285,"byte_end":255301,"line_start":28,"line_end":28,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255302,"byte_end":255355,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255356,"byte_end":255363,"line_start":30,"line_end":30,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":524},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255446,"byte_end":255451,"line_start":33,"line_end":33,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::value::StorageValue::Query","value":"type Query;","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255404,"byte_end":255439,"line_start":32,"line_end":32,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255509,"byte_end":255522,"line_start":36,"line_end":36,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::value::StorageValue::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255455,"byte_end":255504,"line_start":35,"line_end":35,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255600,"byte_end":255614,"line_start":39,"line_end":39,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::value::StorageValue::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255545,"byte_end":255595,"line_start":38,"line_end":38,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255715,"byte_end":255743,"line_start":42,"line_end":42,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::value::StorageValue::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<T>) -> Self::Query","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255637,"byte_end":255710,"line_start":41,"line_end":41,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255835,"byte_end":255863,"line_start":45,"line_end":45,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::value::StorageValue::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<T>","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255776,"byte_end":255830,"line_start":44,"line_end":44,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255947,"byte_end":255970,"line_start":48,"line_end":48,"column_start":5,"column_end":28},"name":"storage_value_final_key","qualname":"::storage::generator::value::StorageValue::storage_value_final_key","value":"pub fn storage_value_final_key() -> [u8; ]","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":255896,"byte_end":255942,"line_start":47,"line_end":47,"column_start":2,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":565},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"migration","qualname":"::storage::migration","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":7757},{"krate":0,"index":569},{"krate":0,"index":7759},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":7763},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":580},{"krate":0,"index":585},{"krate":0,"index":590},{"krate":0,"index":598},{"krate":0,"index":605},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":619},{"krate":0,"index":620}],"decl_id":null,"docs":" Some utilities for helping access storage with arbitrary key types.\n","sig":null,"attributes":[{"value":"/ Some utilities for helping access storage with arbitrary key types.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":259142,"byte_end":259213,"line_start":18,"line_end":18,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":574},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":259412,"byte_end":259427,"line_start":26,"line_end":26,"column_start":12,"column_end":27},"name":"StorageIterator","qualname":"::storage::migration::StorageIterator","value":"StorageIterator {  }","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579}],"decl_id":null,"docs":" Utility to iterate through raw items in storage.\n","sig":null,"attributes":[{"value":"/ Utility to iterate through raw items in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":259348,"byte_end":259400,"line_start":25,"line_end":25,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":259663,"byte_end":259666,"line_start":35,"line_end":35,"column_start":9,"column_end":12},"name":"new","qualname":"<StorageIterator<T>>::new","value":"pub fn new(&[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":259567,"byte_end":259654,"line_start":34,"line_end":34,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":259849,"byte_end":259860,"line_start":40,"line_end":40,"column_start":9,"column_end":20},"name":"with_suffix","qualname":"<StorageIterator<T>>::with_suffix","value":"pub fn with_suffix(&[u8], &[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":259753,"byte_end":259840,"line_start":39,"line_end":39,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":260301,"byte_end":260306,"line_start":50,"line_end":50,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageIterator<T>>::drain","value":"pub fn drain(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mutate this iterator into a draining iterator; items iterated are removed from storage.\n","sig":null,"attributes":[{"value":"/ Mutate this iterator into a draining iterator; items iterated are removed from storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":260201,"byte_end":260292,"line_start":49,"line_end":49,"column_start":2,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":590},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":261121,"byte_end":261139,"line_start":84,"line_end":84,"column_start":12,"column_end":30},"name":"StorageKeyIterator","qualname":"::storage::migration::StorageKeyIterator","value":"StorageKeyIterator {  }","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597}],"decl_id":null,"docs":" Utility to iterate through raw items in storage.\n","sig":null,"attributes":[{"value":"/ Utility to iterate through raw items in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":261057,"byte_end":261109,"line_start":83,"line_end":83,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":261454,"byte_end":261457,"line_start":93,"line_end":93,"column_start":9,"column_end":12},"name":"new","qualname":"<StorageKeyIterator<K, T, H>>::new","value":"pub fn new(&[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":261358,"byte_end":261445,"line_start":92,"line_end":92,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":261640,"byte_end":261651,"line_start":98,"line_end":98,"column_start":9,"column_end":20},"name":"with_suffix","qualname":"<StorageKeyIterator<K, T, H>>::with_suffix","value":"pub fn with_suffix(&[u8], &[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":261544,"byte_end":261631,"line_start":97,"line_end":97,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":262092,"byte_end":262097,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageKeyIterator<K, T, H>>::drain","value":"pub fn drain(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mutate this iterator into a draining iterator; items iterated are removed from storage.\n","sig":null,"attributes":[{"value":"/ Mutate this iterator into a draining iterator; items iterated are removed from storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":261992,"byte_end":262083,"line_start":107,"line_end":107,"column_start":2,"column_end":93}}]},{"kind":"Function","id":{"krate":0,"index":612},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":263143,"byte_end":263161,"line_start":150,"line_end":150,"column_start":8,"column_end":26},"name":"have_storage_value","qualname":"::storage::migration::have_storage_value","value":"pub fn have_storage_value(&[u8], &[u8], &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":263039,"byte_end":263135,"line_start":149,"line_end":149,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":613},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":263375,"byte_end":263392,"line_start":155,"line_end":155,"column_start":8,"column_end":25},"name":"get_storage_value","qualname":"::storage::migration::get_storage_value","value":"pub fn get_storage_value<T: Decode + Sized>(&[u8], &[u8], &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":263271,"byte_end":263367,"line_start":154,"line_end":154,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":615},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":263808,"byte_end":263826,"line_start":164,"line_end":164,"column_start":8,"column_end":26},"name":"take_storage_value","qualname":"::storage::migration::take_storage_value","value":"pub fn take_storage_value<T: Decode + Sized>(&[u8], &[u8], &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Take a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Take a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":263703,"byte_end":263800,"line_start":163,"line_end":163,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":264244,"byte_end":264261,"line_start":173,"line_end":173,"column_start":8,"column_end":25},"name":"put_storage_value","qualname":"::storage::migration::put_storage_value","value":"pub fn put_storage_value<T: Encode>(&[u8], &[u8], &[u8], T)","parent":null,"children":[],"decl_id":null,"docs":" Put a particular value into storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Put a particular value into storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":264138,"byte_end":264236,"line_start":172,"line_end":172,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":264669,"byte_end":264690,"line_start":182,"line_end":182,"column_start":8,"column_end":29},"name":"remove_storage_prefix","qualname":"::storage::migration::remove_storage_prefix","value":"pub fn remove_storage_prefix(&[u8], &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":264565,"byte_end":264661,"line_start":181,"line_end":181,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":620},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":265076,"byte_end":265093,"line_start":191,"line_end":191,"column_start":8,"column_end":25},"name":"take_storage_item","qualname":"::storage::migration::take_storage_item","value":"pub fn take_storage_item<K: Encode + Sized, T: Decode + Sized,\n                         H: StorageHasher>(&[u8], &[u8], K) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":264972,"byte_end":265068,"line_start":190,"line_end":190,"column_start":1,"column_end":97}}]},{"kind":"Mod","id":{"krate":0,"index":624},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"types","qualname":"::storage::types","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":707},{"krate":0,"index":844},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1045},{"krate":0,"index":1047},{"krate":0,"index":1055},{"krate":0,"index":1060},{"krate":0,"index":1064},{"krate":0,"index":1067}],"decl_id":null,"docs":" Storage types to build abstraction on storage, they implements storage traits such as\n StorageMap and others.\n","sig":null,"attributes":[{"value":"/ Storage types to build abstraction on storage, they implements storage traits such as","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":265967,"byte_end":266056,"line_start":18,"line_end":18,"column_start":1,"column_end":90}},{"value":"/ StorageMap and others.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266057,"byte_end":266083,"line_start":19,"line_end":19,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":649},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":270230,"byte_end":270242,"line_start":36,"line_end":36,"column_start":12,"column_end":24},"name":"StorageValue","qualname":"::storage::types::value::StorageValue","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type that allow to store a value.","sig":null,"attributes":[{"value":"/ A type that allow to store a value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":270049,"byte_end":270088,"line_start":30,"line_end":30,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":270089,"byte_end":270092,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Each value is stored at:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":270093,"byte_end":270121,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/ ```nocompile","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":270122,"byte_end":270138,"line_start":33,"line_end":33,"column_start":1,"column_end":17}},{"value":"/ Twox128(Prefix::pallet_prefix()) ++ Twox128(Prefix::STORAGE_PREFIX)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":270139,"byte_end":270210,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":270211,"byte_end":270218,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271367,"byte_end":271377,"line_start":71,"line_end":71,"column_start":9,"column_end":19},"name":"hashed_key","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::hashed_key","value":"pub fn hashed_key() -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Get the storage key.\n","sig":null,"attributes":[{"value":"/ Get the storage key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271334,"byte_end":271358,"line_start":70,"line_end":70,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271516,"byte_end":271522,"line_start":74,"line_end":74,"column_start":9,"column_end":15},"name":"exists","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::exists","value":"pub fn exists() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271458,"byte_end":271507,"line_start":73,"line_end":73,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271658,"byte_end":271661,"line_start":77,"line_end":77,"column_start":9,"column_end":12},"name":"get","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::get","value":"pub fn get() -> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Load the value from the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Load the value from the provided storage instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271595,"byte_end":271649,"line_start":76,"line_end":76,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271861,"byte_end":271868,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"try_get","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::try_get","value":"pub fn try_get() -> Result<Value, ()>","parent":null,"children":[],"decl_id":null,"docs":" Try to get the underlying value from the provided storage instance; `Ok` if it exists,\n `Err` if not.\n","sig":null,"attributes":[{"value":"/ Try to get the underlying value from the provided storage instance; `Ok` if it exists,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271743,"byte_end":271833,"line_start":79,"line_end":79,"column_start":2,"column_end":92}},{"value":"/ `Err` if not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271835,"byte_end":271852,"line_start":80,"line_end":80,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272852,"byte_end":272861,"line_start":106,"line_end":106,"column_start":9,"column_end":18},"name":"translate","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::translate","value":"pub fn translate<O: Decode, F: FnOnce(Option<O>) -> Option<Value>>(F)\n-> Result<Option<Value>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Translate a value from some previous type (`O`) to the current type.","sig":null,"attributes":[{"value":"/ Translate a value from some previous type (`O`) to the current type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271958,"byte_end":272030,"line_start":85,"line_end":85,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272032,"byte_end":272035,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ `f: F` is the translation function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272037,"byte_end":272076,"line_start":87,"line_end":87,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272078,"byte_end":272081,"line_start":88,"line_end":88,"column_start":2,"column_end":5}},{"value":"/ Returns `Err` if the storage item could not be interpreted as the old type, and Ok, along","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272083,"byte_end":272176,"line_start":89,"line_end":89,"column_start":2,"column_end":95}},{"value":"/ with the new value if it could.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272178,"byte_end":272213,"line_start":90,"line_end":90,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272215,"byte_end":272218,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ NOTE: This operates from and to `Option<_>` types; no effort is made to respect the default","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272220,"byte_end":272315,"line_start":92,"line_end":92,"column_start":2,"column_end":97}},{"value":"/ value of the original type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272317,"byte_end":272348,"line_start":93,"line_end":93,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272350,"byte_end":272353,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272355,"byte_end":272368,"line_start":95,"line_end":95,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272370,"byte_end":272373,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272375,"byte_end":272468,"line_start":97,"line_end":97,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272470,"byte_end":272542,"line_start":98,"line_end":98,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272544,"byte_end":272547,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272549,"byte_end":272560,"line_start":100,"line_end":100,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272562,"byte_end":272565,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272567,"byte_end":272657,"line_start":102,"line_end":102,"column_start":2,"column_end":92}},{"value":"/ while ensuring **no usage of this storage are made before the call to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272659,"byte_end":272732,"line_start":103,"line_end":103,"column_start":2,"column_end":75}},{"value":"/ `on_runtime_upgrade`**. (More precisely prior initialized modules doesn't make use of this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272734,"byte_end":272828,"line_start":104,"line_end":104,"column_start":2,"column_end":96}},{"value":"/ storage).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":272830,"byte_end":272843,"line_start":105,"line_end":105,"column_start":2,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273099,"byte_end":273102,"line_start":113,"line_end":113,"column_start":9,"column_end":12},"name":"put","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::put","value":"pub fn put<Arg: EncodeLike<Value>>(Arg)","parent":null,"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273022,"byte_end":273090,"line_start":112,"line_end":112,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273348,"byte_end":273351,"line_start":120,"line_end":120,"column_start":9,"column_end":12},"name":"set","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::set","value":"pub fn set(QueryKind::Query)","parent":null,"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance.","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273202,"byte_end":273270,"line_start":117,"line_end":117,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273272,"byte_end":273275,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ this uses the query type rather than the underlying value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273277,"byte_end":273339,"line_start":119,"line_end":119,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273466,"byte_end":273472,"line_start":123,"line_end":123,"column_start":9,"column_end":15},"name":"mutate","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::mutate","value":"pub fn mutate<R, F: FnOnce(&mut QueryKind::Query) -> R>(F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value\n","sig":null,"attributes":[{"value":"/ Mutate the value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273437,"byte_end":273457,"line_start":122,"line_end":122,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273645,"byte_end":273655,"line_start":128,"line_end":128,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::try_mutate","value":"pub fn try_mutate<R, E, F: FnOnce(&mut QueryKind::Query) -> Result<R, E>>(F)\n-> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value if closure returns `Ok`\n","sig":null,"attributes":[{"value":"/ Mutate the value if closure returns `Ok`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273592,"byte_end":273636,"line_start":127,"line_end":127,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273847,"byte_end":273851,"line_start":135,"line_end":135,"column_start":9,"column_end":13},"name":"kill","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::kill","value":"pub fn kill()","parent":null,"children":[],"decl_id":null,"docs":" Clear the storage value.\n","sig":null,"attributes":[{"value":"/ Clear the storage value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273810,"byte_end":273838,"line_start":134,"line_end":134,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273977,"byte_end":273981,"line_start":138,"line_end":138,"column_start":9,"column_end":13},"name":"take","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::take","value":"pub fn take() -> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":273914,"byte_end":273968,"line_start":137,"line_end":137,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274405,"byte_end":274411,"line_start":149,"line_end":149,"column_start":9,"column_end":15},"name":"append","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::append","value":"pub fn append<Item, EncodeLikeItem>(EncodeLikeItem) where Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, Value: StorageAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274064,"byte_end":274118,"line_start":140,"line_end":140,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274120,"byte_end":274123,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageAppend`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274125,"byte_end":274180,"line_start":142,"line_end":142,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274182,"byte_end":274185,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274187,"byte_end":274200,"line_start":144,"line_end":144,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274202,"byte_end":274205,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage item will be overwritten","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274207,"byte_end":274292,"line_start":146,"line_end":146,"column_start":2,"column_end":87}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274294,"byte_end":274377,"line_start":147,"line_end":147,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274379,"byte_end":274396,"line_start":148,"line_end":148,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":275050,"byte_end":275060,"line_start":169,"line_end":169,"column_start":9,"column_end":19},"name":"decode_len","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::decode_len","value":"pub fn decode_len() -> Option<usize> where Value: StorageDecodeLength","parent":null,"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274614,"byte_end":274689,"line_start":158,"line_end":158,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274691,"byte_end":274694,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274696,"byte_end":274757,"line_start":160,"line_end":160,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274759,"byte_end":274762,"line_start":161,"line_end":161,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274764,"byte_end":274850,"line_start":162,"line_end":162,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274852,"byte_end":274890,"line_start":163,"line_end":163,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274892,"byte_end":274895,"line_start":164,"line_end":164,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274897,"byte_end":274910,"line_start":165,"line_end":165,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274912,"byte_end":274915,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":274917,"byte_end":275010,"line_start":167,"line_end":167,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":275012,"byte_end":275041,"line_start":168,"line_end":168,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":695},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":275241,"byte_end":275261,"line_start":175,"line_end":175,"column_start":11,"column_end":31},"name":"StorageValueMetadata","qualname":"::storage::types::value::StorageValueMetadata","value":"StorageValueMetadata","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698}],"decl_id":null,"docs":" Part of storage metadata for storage value.\n","sig":null,"attributes":[{"value":"/ Part of storage metadata for storage value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":275183,"byte_end":275230,"line_start":174,"line_end":174,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":696},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":275271,"byte_end":275279,"line_start":176,"line_end":176,"column_start":8,"column_end":16},"name":"MODIFIER","qualname":"::storage::types::value::StorageValueMetadata::MODIFIER","value":"StorageEntryModifier","parent":{"krate":0,"index":695},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":697},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":275310,"byte_end":275314,"line_start":177,"line_end":177,"column_start":8,"column_end":12},"name":"NAME","qualname":"::storage::types::value::StorageValueMetadata::NAME","value":"&'static str","parent":{"krate":0,"index":695},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":698},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":275337,"byte_end":275344,"line_start":178,"line_end":178,"column_start":8,"column_end":15},"name":"DEFAULT","qualname":"::storage::types::value::StorageValueMetadata::DEFAULT","value":"DefaultByteGetter","parent":{"krate":0,"index":695},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":728},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":280093,"byte_end":280103,"line_start":45,"line_end":45,"column_start":12,"column_end":22},"name":"StorageMap","qualname":"::storage::types::map::StorageMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type that allow to store value for given key. Allowing to insert/remove/iterate on values.","sig":null,"attributes":[{"value":"/ A type that allow to store value for given key. Allowing to insert/remove/iterate on values.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279611,"byte_end":279707,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279708,"byte_end":279711,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Each value is stored at:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279712,"byte_end":279740,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/ ```nocompile","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279741,"byte_end":279757,"line_start":35,"line_end":35,"column_start":1,"column_end":17}},{"value":"/ Twox128(Prefix::pallet_prefix())","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279758,"byte_end":279794,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/\t\t++ Twox128(Prefix::STORAGE_PREFIX)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279795,"byte_end":279834,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/\t\t++ Hasher1(encode(key))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279835,"byte_end":279863,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279864,"byte_end":279871,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279872,"byte_end":279875,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279876,"byte_end":279889,"line_start":41,"line_end":41,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279890,"byte_end":279893,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ If the keys are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279894,"byte_end":279987,"line_start":43,"line_end":43,"column_start":1,"column_end":94}},{"value":"/ `blake2_128_concat` must be used.  Otherwise, other values in storage can be compromised.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":279988,"byte_end":280081,"line_start":44,"line_end":44,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282107,"byte_end":282121,"line_start":105,"line_end":105,"column_start":9,"column_end":23},"name":"hashed_key_for","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::hashed_key_for","value":"pub fn hashed_key_for<KeyArg: EncodeLike<Key>>(KeyArg) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282020,"byte_end":282098,"line_start":104,"line_end":104,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282308,"byte_end":282320,"line_start":110,"line_end":110,"column_start":9,"column_end":21},"name":"contains_key","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::contains_key","value":"pub fn contains_key<KeyArg: EncodeLike<Key>>(KeyArg) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282250,"byte_end":282299,"line_start":109,"line_end":109,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282515,"byte_end":282518,"line_start":115,"line_end":115,"column_start":9,"column_end":12},"name":"get","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::get","value":"pub fn get<KeyArg: EncodeLike<Key>>(KeyArg) -> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282444,"byte_end":282506,"line_start":114,"line_end":114,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282761,"byte_end":282768,"line_start":122,"line_end":122,"column_start":9,"column_end":16},"name":"try_get","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::try_get","value":"pub fn try_get<KeyArg: EncodeLike<Key>>(KeyArg) -> Result<Value, ()>","parent":null,"children":[],"decl_id":null,"docs":" Try to get the value for the given key from the map.","sig":null,"attributes":[{"value":"/ Try to get the value for the given key from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282645,"byte_end":282701,"line_start":119,"line_end":119,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282703,"byte_end":282706,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282708,"byte_end":282752,"line_start":121,"line_end":121,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282941,"byte_end":282945,"line_start":127,"line_end":127,"column_start":9,"column_end":13},"name":"swap","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::swap","value":"pub fn swap<KeyArg1: EncodeLike<Key>,\n            KeyArg2: EncodeLike<Key>>(KeyArg1, KeyArg2)","parent":null,"children":[],"decl_id":null,"docs":" Swap the values of two keys.\n","sig":null,"attributes":[{"value":"/ Swap the values of two keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":282900,"byte_end":282932,"line_start":126,"line_end":126,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":283180,"byte_end":283186,"line_start":132,"line_end":132,"column_start":9,"column_end":15},"name":"insert","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::insert","value":"pub fn insert<KeyArg: EncodeLike<Key>,\n              ValArg: EncodeLike<Value>>(KeyArg, ValArg)","parent":null,"children":[],"decl_id":null,"docs":" Store a value to be associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given key from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":283104,"byte_end":283171,"line_start":131,"line_end":131,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":283383,"byte_end":283389,"line_start":137,"line_end":137,"column_start":9,"column_end":15},"name":"remove","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::remove","value":"pub fn remove<KeyArg: EncodeLike<Key>>(KeyArg)","parent":null,"children":[],"decl_id":null,"docs":" Remove the value under a key.\n","sig":null,"attributes":[{"value":"/ Remove the value under a key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":283341,"byte_end":283374,"line_start":136,"line_end":136,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":283541,"byte_end":283547,"line_start":142,"line_end":142,"column_start":9,"column_end":15},"name":"mutate","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::mutate","value":"pub fn mutate<KeyArg: EncodeLike<Key>, R, F: FnOnce(&mut QueryKind::Query) ->\n              R>(KeyArg, F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under a key.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":283499,"byte_end":283532,"line_start":141,"line_end":141,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":283784,"byte_end":283794,"line_start":150,"line_end":150,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::try_mutate","value":"pub fn try_mutate<KeyArg, R, E, F>(KeyArg, F) -> Result<R, E> where\nKeyArg: EncodeLike<Key>, F: FnOnce(&mut QueryKind::Query) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":283720,"byte_end":283775,"line_start":149,"line_end":149,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284095,"byte_end":284108,"line_start":159,"line_end":159,"column_start":9,"column_end":22},"name":"mutate_exists","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::mutate_exists","value":"pub fn mutate_exists<KeyArg: EncodeLike<Key>, R, F: FnOnce(&mut Option<Value>)\n                     -> R>(KeyArg, F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under a key. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284012,"byte_end":284086,"line_start":158,"line_end":158,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284390,"byte_end":284407,"line_start":167,"line_end":167,"column_start":9,"column_end":26},"name":"try_mutate_exists","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::try_mutate_exists","value":"pub fn try_mutate_exists<KeyArg, R, E, F>(KeyArg, F) -> Result<R, E> where\nKeyArg: EncodeLike<Key>, F: FnOnce(&mut Option<Value>) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284285,"byte_end":284381,"line_start":166,"line_end":166,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284669,"byte_end":284673,"line_start":176,"line_end":176,"column_start":9,"column_end":13},"name":"take","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::take","value":"pub fn take<KeyArg: EncodeLike<Key>>(KeyArg) -> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Take the value under a key.\n","sig":null,"attributes":[{"value":"/ Take the value under a key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284629,"byte_end":284660,"line_start":175,"line_end":175,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285142,"byte_end":285148,"line_start":189,"line_end":189,"column_start":9,"column_end":15},"name":"append","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::append","value":"pub fn append<Item, EncodeLikeItem,\n              EncodeLikeKey>(EncodeLikeKey, EncodeLikeItem) where\nEncodeLikeKey: EncodeLike<Key>, Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, Value: StorageAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Append the given items to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given items to the value in the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284801,"byte_end":284856,"line_start":180,"line_end":180,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284858,"byte_end":284861,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement `codec::EncodeAppend`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284863,"byte_end":284922,"line_start":182,"line_end":182,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284924,"byte_end":284927,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284929,"byte_end":284942,"line_start":184,"line_end":184,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284944,"byte_end":284947,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":284949,"byte_end":285029,"line_start":186,"line_end":186,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285031,"byte_end":285114,"line_start":187,"line_end":187,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285116,"byte_end":285133,"line_start":188,"line_end":188,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285891,"byte_end":285901,"line_start":211,"line_end":211,"column_start":9,"column_end":19},"name":"decode_len","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::decode_len","value":"pub fn decode_len<KeyArg: EncodeLike<Key>>(KeyArg) -> Option<usize> where\nValue: StorageDecodeLength","parent":null,"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285428,"byte_end":285512,"line_start":199,"line_end":199,"column_start":2,"column_end":86}},{"value":"/ given `key`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285514,"byte_end":285530,"line_start":200,"line_end":200,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285532,"byte_end":285535,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285537,"byte_end":285598,"line_start":202,"line_end":202,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285600,"byte_end":285603,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285605,"byte_end":285691,"line_start":204,"line_end":204,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285693,"byte_end":285731,"line_start":205,"line_end":205,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285733,"byte_end":285736,"line_start":206,"line_end":206,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285738,"byte_end":285751,"line_start":207,"line_end":207,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285753,"byte_end":285756,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285758,"byte_end":285851,"line_start":209,"line_end":209,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":285853,"byte_end":285882,"line_start":210,"line_end":210,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286262,"byte_end":286273,"line_start":220,"line_end":220,"column_start":9,"column_end":20},"name":"migrate_key","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::migrate_key","value":"pub fn migrate_key<OldHasher: crate::hash::StorageHasher,\n                   KeyArg: EncodeLike<Key>>(KeyArg) -> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286069,"byte_end":286159,"line_start":217,"line_end":217,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286161,"byte_end":286164,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286166,"byte_end":286253,"line_start":219,"line_end":219,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286510,"byte_end":286520,"line_start":227,"line_end":227,"column_start":9,"column_end":19},"name":"remove_all","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::remove_all","value":"pub fn remove_all()","parent":null,"children":[],"decl_id":null,"docs":" Remove all value of the storage.\n","sig":null,"attributes":[{"value":"/ Remove all value of the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286465,"byte_end":286501,"line_start":226,"line_end":226,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286739,"byte_end":286750,"line_start":234,"line_end":234,"column_start":9,"column_end":20},"name":"iter_values","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::iter_values","value":"pub fn iter_values() -> crate::storage::PrefixIterator<Value>","parent":null,"children":[],"decl_id":null,"docs":" Iter over all value of the storage.","sig":null,"attributes":[{"value":"/ Iter over all value of the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286598,"byte_end":286637,"line_start":231,"line_end":231,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286639,"byte_end":286642,"line_start":232,"line_end":232,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value failed to decode becaues storage is corrupted then it is skipped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286644,"byte_end":286730,"line_start":233,"line_end":233,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287459,"byte_end":287475,"line_start":252,"line_end":252,"column_start":9,"column_end":25},"name":"translate_values","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::translate_values","value":"pub fn translate_values<OldValue: Decode, F: FnMut(OldValue) ->\n                        Option<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286870,"byte_end":286964,"line_start":238,"line_end":238,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286966,"byte_end":286969,"line_start":239,"line_end":239,"column_start":2,"column_end":5}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":286971,"byte_end":287050,"line_start":240,"line_end":240,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287052,"byte_end":287055,"line_start":241,"line_end":241,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287057,"byte_end":287141,"line_start":242,"line_end":242,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287143,"byte_end":287146,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287148,"byte_end":287161,"line_start":244,"line_end":244,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287163,"byte_end":287166,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287168,"byte_end":287261,"line_start":246,"line_end":246,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287263,"byte_end":287335,"line_start":247,"line_end":247,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287337,"byte_end":287340,"line_start":248,"line_end":248,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287342,"byte_end":287353,"line_start":249,"line_end":249,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287355,"byte_end":287358,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287360,"byte_end":287450,"line_start":251,"line_end":251,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288125,"byte_end":288129,"line_start":270,"line_end":270,"column_start":9,"column_end":13},"name":"iter","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::iter","value":"pub fn iter() -> crate::storage::PrefixIterator<(Key, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287976,"byte_end":288037,"line_start":267,"line_end":267,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288039,"byte_end":288042,"line_start":268,"line_end":268,"column_start":2,"column_end":5}},{"value":"/ If you alter the map while doing this, you'll get undefined results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288044,"byte_end":288116,"line_start":269,"line_end":269,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288437,"byte_end":288442,"line_start":277,"line_end":277,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::drain","value":"pub fn drain() -> crate::storage::PrefixIterator<(Key, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order.","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288254,"byte_end":288339,"line_start":274,"line_end":274,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288341,"byte_end":288344,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ If you add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288346,"byte_end":288428,"line_start":276,"line_end":276,"column_start":2,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288848,"byte_end":288857,"line_start":286,"line_end":286,"column_start":9,"column_end":18},"name":"translate","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty>>::translate","value":"pub fn translate<O: Decode, F: FnMut(Key, O) -> Option<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288568,"byte_end":288662,"line_start":281,"line_end":281,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288664,"byte_end":288667,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288669,"byte_end":288748,"line_start":283,"line_end":283,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288750,"byte_end":288753,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288755,"byte_end":288839,"line_start":285,"line_end":285,"column_start":2,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":828},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":289092,"byte_end":289110,"line_start":294,"line_end":294,"column_start":11,"column_end":29},"name":"StorageMapMetadata","qualname":"::storage::types::map::StorageMapMetadata","value":"StorageMapMetadata","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832}],"decl_id":null,"docs":" Part of storage metadata for a storage map.","sig":null,"attributes":[{"value":"/ Part of storage metadata for a storage map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":288991,"byte_end":289038,"line_start":291,"line_end":291,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":289039,"byte_end":289042,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ NOTE: Generic hasher is supported.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":289043,"byte_end":289081,"line_start":293,"line_end":293,"column_start":1,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":829},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":289120,"byte_end":289128,"line_start":295,"line_end":295,"column_start":8,"column_end":16},"name":"MODIFIER","qualname":"::storage::types::map::StorageMapMetadata::MODIFIER","value":"StorageEntryModifier","parent":{"krate":0,"index":828},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":830},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":289159,"byte_end":289163,"line_start":296,"line_end":296,"column_start":8,"column_end":12},"name":"NAME","qualname":"::storage::types::map::StorageMapMetadata::NAME","value":"&'static str","parent":{"krate":0,"index":828},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":831},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":289186,"byte_end":289193,"line_start":297,"line_end":297,"column_start":8,"column_end":15},"name":"DEFAULT","qualname":"::storage::types::map::StorageMapMetadata::DEFAULT","value":"DefaultByteGetter","parent":{"krate":0,"index":828},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":832},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":289221,"byte_end":289227,"line_start":298,"line_end":298,"column_start":8,"column_end":14},"name":"HASHER","qualname":"::storage::types::map::StorageMapMetadata::HASHER","value":"frame_metadata::StorageHasher","parent":{"krate":0,"index":828},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":865},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":297081,"byte_end":297097,"line_start":48,"line_end":48,"column_start":12,"column_end":28},"name":"StorageDoubleMap","qualname":"::storage::types::double_map::StorageDoubleMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type that allow to store values for `(key1, key2)` couple. Similar to `StorageMap` but allow\n to iterate and remove value associated to first key.","sig":null,"attributes":[{"value":"/ A type that allow to store values for `(key1, key2)` couple. Similar to `StorageMap` but allow","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296466,"byte_end":296564,"line_start":32,"line_end":32,"column_start":1,"column_end":99}},{"value":"/ to iterate and remove value associated to first key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296565,"byte_end":296621,"line_start":33,"line_end":33,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296622,"byte_end":296625,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Each value is stored at:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296626,"byte_end":296654,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/ ```nocompile","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296655,"byte_end":296671,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/ Twox128(Prefix::pallet_prefix())","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296672,"byte_end":296708,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/\t\t++ Twox128(Prefix::STORAGE_PREFIX)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296709,"byte_end":296748,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/\t\t++ Hasher1(encode(key1))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296749,"byte_end":296778,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/\t\t++ Hasher2(encode(key2))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296779,"byte_end":296808,"line_start":40,"line_end":40,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296809,"byte_end":296816,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296817,"byte_end":296820,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296821,"byte_end":296834,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296835,"byte_end":296838,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ If the key1s (or key2s) are not trusted (e.g. can be set by a user), a cryptographic `hasher`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296839,"byte_end":296936,"line_start":45,"line_end":45,"column_start":1,"column_end":98}},{"value":"/ such as `blake2_128_concat` must be used for Hasher1 (resp. Hasher2). Otherwise, other values","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":296937,"byte_end":297034,"line_start":46,"line_end":46,"column_start":1,"column_end":98}},{"value":"/ in storage can be compromised.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":297035,"byte_end":297069,"line_start":47,"line_end":47,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":299496,"byte_end":299510,"line_start":118,"line_end":118,"column_start":9,"column_end":23},"name":"hashed_key_for","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::hashed_key_for","value":"pub fn hashed_key_for<KArg1, KArg2>(KArg1, KArg2) -> Vec<u8> where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":299409,"byte_end":299487,"line_start":117,"line_end":117,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":299773,"byte_end":299785,"line_start":127,"line_end":127,"column_start":9,"column_end":21},"name":"contains_key","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::contains_key","value":"pub fn contains_key<KArg1, KArg2>(KArg1, KArg2) -> bool where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":299715,"byte_end":299764,"line_start":126,"line_end":126,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":300063,"byte_end":300066,"line_start":136,"line_end":136,"column_start":9,"column_end":12},"name":"get","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::get","value":"pub fn get<KArg1, KArg2>(KArg1, KArg2) -> QueryKind::Query where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the double map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the double map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":299985,"byte_end":300054,"line_start":135,"line_end":135,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":300392,"byte_end":300399,"line_start":147,"line_end":147,"column_start":9,"column_end":16},"name":"try_get","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::try_get","value":"pub fn try_get<KArg1, KArg2>(KArg1, KArg2) -> Result<Value, ()> where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Try to get the value for the given key from the double map.","sig":null,"attributes":[{"value":"/ Try to get the value for the given key from the double map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":300269,"byte_end":300332,"line_start":144,"line_end":144,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":300334,"byte_end":300337,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":300339,"byte_end":300383,"line_start":146,"line_end":146,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":300668,"byte_end":300672,"line_start":155,"line_end":155,"column_start":9,"column_end":13},"name":"take","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::take","value":"pub fn take<KArg1, KArg2>(KArg1, KArg2) -> QueryKind::Query where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":300605,"byte_end":300659,"line_start":154,"line_end":154,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":300922,"byte_end":300926,"line_start":164,"line_end":164,"column_start":9,"column_end":13},"name":"swap","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::swap","value":"pub fn swap<XKArg1, XKArg2, YKArg1, YKArg2>(XKArg1, XKArg2, YKArg1, YKArg2)\nwhere XKArg1: EncodeLike<Key1>, XKArg2: EncodeLike<Key2>,\nYKArg1: EncodeLike<Key1>, YKArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Swap the values of two key-pairs.\n","sig":null,"attributes":[{"value":"/ Swap the values of two key-pairs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":300876,"byte_end":300913,"line_start":163,"line_end":163,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":301320,"byte_end":301326,"line_start":175,"line_end":175,"column_start":9,"column_end":15},"name":"insert","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::insert","value":"pub fn insert<KArg1, KArg2, VArg>(KArg1, KArg2, VArg) where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>, VArg: EncodeLike<Value>","parent":null,"children":[],"decl_id":null,"docs":" Store a value to be associated with the given keys from the double map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given keys from the double map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":301236,"byte_end":301311,"line_start":174,"line_end":174,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":301612,"byte_end":301618,"line_start":185,"line_end":185,"column_start":9,"column_end":15},"name":"remove","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::remove","value":"pub fn remove<KArg1, KArg2>(KArg1, KArg2) where KArg1: EncodeLike<Key1>,\nKArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Remove the value under the given keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":301561,"byte_end":301603,"line_start":184,"line_end":184,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":301855,"byte_end":301868,"line_start":194,"line_end":194,"column_start":9,"column_end":22},"name":"remove_prefix","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::remove_prefix","value":"pub fn remove_prefix<KArg1: ?Sized>(KArg1) where KArg1: EncodeLike<Key1>","parent":null,"children":[],"decl_id":null,"docs":" Remove all values under the first key.\n","sig":null,"attributes":[{"value":"/ Remove all values under the first key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":301804,"byte_end":301846,"line_start":193,"line_end":193,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":302074,"byte_end":302092,"line_start":199,"line_end":199,"column_start":9,"column_end":27},"name":"iter_prefix_values","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::iter_prefix_values","value":"pub fn iter_prefix_values<KArg1: ?Sized>(KArg1)\n-> crate::storage::PrefixIterator<Value> where KArg1: EncodeLike<Key1>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over values that share the first key.\n","sig":null,"attributes":[{"value":"/ Iterate over values that share the first key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":302016,"byte_end":302065,"line_start":198,"line_end":198,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":302339,"byte_end":302345,"line_start":206,"line_end":206,"column_start":9,"column_end":15},"name":"mutate","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::mutate","value":"pub fn mutate<KArg1, KArg2, R, F>(KArg1, KArg2, F) -> R where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>,\nF: FnOnce(&mut QueryKind::Query) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":302288,"byte_end":302330,"line_start":205,"line_end":205,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":302673,"byte_end":302683,"line_start":216,"line_end":216,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::try_mutate","value":"pub fn try_mutate<KArg1, KArg2, R, E, F>(KArg1, KArg2, F) -> Result<R, E>\nwhere KArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>,\nF: FnOnce(&mut QueryKind::Query) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under the given keys when the closure returns `Ok`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys when the closure returns `Ok`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":302592,"byte_end":302664,"line_start":215,"line_end":215,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":303051,"byte_end":303064,"line_start":226,"line_end":226,"column_start":9,"column_end":22},"name":"mutate_exists","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::mutate_exists","value":"pub fn mutate_exists<KArg1, KArg2, R, F>(KArg1, KArg2, F) -> R where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>,\nF: FnOnce(&mut Option<Value>) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under the given keys. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":302959,"byte_end":303042,"line_start":225,"line_end":225,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":303420,"byte_end":303437,"line_start":236,"line_end":236,"column_start":9,"column_end":26},"name":"try_mutate_exists","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::try_mutate_exists","value":"pub fn try_mutate_exists<KArg1, KArg2, R, E, F>(KArg1, KArg2, F)\n-> Result<R, E> where KArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>,\nF: FnOnce(&mut Option<Value>) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":303315,"byte_end":303411,"line_start":235,"line_end":235,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304053,"byte_end":304059,"line_start":254,"line_end":254,"column_start":9,"column_end":15},"name":"append","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::append","value":"pub fn append<Item, EncodeLikeItem, KArg1,\n              KArg2>(KArg1, KArg2, EncodeLikeItem) where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>, Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, Value: StorageAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":303717,"byte_end":303771,"line_start":245,"line_end":245,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":303773,"byte_end":303776,"line_start":246,"line_end":246,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageAppend`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":303778,"byte_end":303833,"line_start":247,"line_end":247,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":303835,"byte_end":303838,"line_start":248,"line_end":248,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":303840,"byte_end":303853,"line_start":249,"line_end":249,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":303855,"byte_end":303858,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":303860,"byte_end":303940,"line_start":251,"line_end":251,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":303942,"byte_end":304025,"line_start":252,"line_end":252,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304027,"byte_end":304044,"line_start":253,"line_end":253,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304861,"byte_end":304871,"line_start":280,"line_end":280,"column_start":9,"column_end":19},"name":"decode_len","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::decode_len","value":"pub fn decode_len<KArg1, KArg2>(KArg1, KArg2) -> Option<usize> where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>, Value: StorageDecodeLength","parent":null,"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key1` and `key2`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304386,"byte_end":304470,"line_start":268,"line_end":268,"column_start":2,"column_end":86}},{"value":"/ given `key1` and `key2`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304472,"byte_end":304500,"line_start":269,"line_end":269,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304502,"byte_end":304505,"line_start":270,"line_end":270,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304507,"byte_end":304568,"line_start":271,"line_end":271,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304570,"byte_end":304573,"line_start":272,"line_end":272,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304575,"byte_end":304661,"line_start":273,"line_end":273,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304663,"byte_end":304701,"line_start":274,"line_end":274,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304703,"byte_end":304706,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304708,"byte_end":304721,"line_start":276,"line_end":276,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304723,"byte_end":304726,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304728,"byte_end":304821,"line_start":278,"line_end":278,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":304823,"byte_end":304852,"line_start":279,"line_end":279,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":305343,"byte_end":305355,"line_start":293,"line_end":293,"column_start":9,"column_end":21},"name":"migrate_keys","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::migrate_keys","value":"pub fn migrate_keys<OldHasher1: crate::StorageHasher,\n                    OldHasher2: crate::StorageHasher,\n                    KeyArg1: EncodeLike<Key1>,\n                    KeyArg2: EncodeLike<Key2>>(KeyArg1, KeyArg2)\n-> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and\n `OldHasher2` to the current hashers.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":305116,"byte_end":305198,"line_start":289,"line_end":289,"column_start":2,"column_end":84}},{"value":"/ `OldHasher2` to the current hashers.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":305200,"byte_end":305240,"line_start":290,"line_end":290,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":305242,"byte_end":305245,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":305247,"byte_end":305334,"line_start":292,"line_end":292,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":305718,"byte_end":305728,"line_start":305,"line_end":305,"column_start":9,"column_end":19},"name":"remove_all","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::remove_all","value":"pub fn remove_all()","parent":null,"children":[],"decl_id":null,"docs":" Remove all value of the storage.\n","sig":null,"attributes":[{"value":"/ Remove all value of the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":305673,"byte_end":305709,"line_start":304,"line_end":304,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":305947,"byte_end":305958,"line_start":312,"line_end":312,"column_start":9,"column_end":20},"name":"iter_values","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::iter_values","value":"pub fn iter_values() -> crate::storage::PrefixIterator<Value>","parent":null,"children":[],"decl_id":null,"docs":" Iter over all value of the storage.","sig":null,"attributes":[{"value":"/ Iter over all value of the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":305806,"byte_end":305845,"line_start":309,"line_end":309,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":305847,"byte_end":305850,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value failed to decode becaues storage is corrupted then it is skipped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":305852,"byte_end":305938,"line_start":311,"line_end":311,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306662,"byte_end":306678,"line_start":329,"line_end":329,"column_start":9,"column_end":25},"name":"translate_values","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::translate_values","value":"pub fn translate_values<OldValue: Decode, F: FnMut(OldValue) ->\n                        Option<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306078,"byte_end":306172,"line_start":316,"line_end":316,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306174,"byte_end":306253,"line_start":317,"line_end":317,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306255,"byte_end":306258,"line_start":318,"line_end":318,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306260,"byte_end":306344,"line_start":319,"line_end":319,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306346,"byte_end":306349,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306351,"byte_end":306364,"line_start":321,"line_end":321,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306366,"byte_end":306369,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306371,"byte_end":306464,"line_start":323,"line_end":323,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306466,"byte_end":306538,"line_start":324,"line_end":324,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306540,"byte_end":306543,"line_start":325,"line_end":325,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306545,"byte_end":306556,"line_start":326,"line_end":326,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306558,"byte_end":306561,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306563,"byte_end":306653,"line_start":328,"line_end":328,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":307525,"byte_end":307536,"line_start":350,"line_end":350,"column_start":9,"column_end":20},"name":"iter_prefix","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::iter_prefix","value":"pub fn iter_prefix<impl EncodeLike<Key1>: EncodeLike<Key1>>(impl EncodeLike<Key1>)\n-> crate::storage::PrefixIterator<(Key2, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with first key `k1` in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with first key `k1` in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":307309,"byte_end":307390,"line_start":346,"line_end":346,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":307392,"byte_end":307395,"line_start":347,"line_end":347,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values whose first key is `k1` to the map while doing this, you'll get","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":307397,"byte_end":307492,"line_start":348,"line_end":348,"column_start":2,"column_end":97}},{"value":"/ undefined results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":307494,"byte_end":307516,"line_start":349,"line_end":349,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":307942,"byte_end":307954,"line_start":359,"line_end":359,"column_start":9,"column_end":21},"name":"drain_prefix","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::drain_prefix","value":"pub fn drain_prefix<impl EncodeLike<Key1>: EncodeLike<Key1>>(impl EncodeLike<Key1>)\n-> crate::storage::PrefixIterator<(Key2, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements from the map with first key `k1` and iterate through them in no\n particular order.","sig":null,"attributes":[{"value":"/ Remove all elements from the map with first key `k1` and iterate through them in no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":307709,"byte_end":307796,"line_start":354,"line_end":354,"column_start":2,"column_end":89}},{"value":"/ particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":307798,"byte_end":307819,"line_start":355,"line_end":355,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":307821,"byte_end":307824,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ If you add elements with first key `k1` to the map while doing this, you'll get undefined","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":307826,"byte_end":307919,"line_start":357,"line_end":357,"column_start":2,"column_end":95}},{"value":"/ results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":307921,"byte_end":307933,"line_start":358,"line_end":358,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308295,"byte_end":308299,"line_start":366,"line_end":366,"column_start":9,"column_end":13},"name":"iter","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::iter","value":"pub fn iter() -> crate::storage::PrefixIterator<(Key1, Key2, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308128,"byte_end":308189,"line_start":363,"line_end":363,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308191,"byte_end":308194,"line_start":364,"line_end":364,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308196,"byte_end":308286,"line_start":365,"line_end":365,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308627,"byte_end":308632,"line_start":373,"line_end":373,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::drain","value":"pub fn drain() -> crate::storage::PrefixIterator<(Key1, Key2, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order.","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308444,"byte_end":308529,"line_start":370,"line_end":370,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308531,"byte_end":308534,"line_start":371,"line_end":371,"column_start":2,"column_end":5}},{"value":"/ If you add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308536,"byte_end":308618,"line_start":372,"line_end":372,"column_start":2,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309058,"byte_end":309067,"line_start":382,"line_end":382,"column_start":9,"column_end":18},"name":"translate","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\n                 OnEmpty>>::translate","value":"pub fn translate<O: Decode, F: FnMut(Key1, Key2, O) -> Option<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308778,"byte_end":308872,"line_start":377,"line_end":377,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308874,"byte_end":308877,"line_start":378,"line_end":378,"column_start":2,"column_end":5}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308879,"byte_end":308958,"line_start":379,"line_end":379,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308960,"byte_end":308963,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":308965,"byte_end":309049,"line_start":381,"line_end":381,"column_start":2,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":1001},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309330,"byte_end":309354,"line_start":390,"line_end":390,"column_start":11,"column_end":35},"name":"StorageDoubleMapMetadata","qualname":"::storage::types::double_map::StorageDoubleMapMetadata","value":"StorageDoubleMapMetadata","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006}],"decl_id":null,"docs":" Part of storage metadata for a storage double map.","sig":null,"attributes":[{"value":"/ Part of storage metadata for a storage double map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309221,"byte_end":309275,"line_start":387,"line_end":387,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309276,"byte_end":309279,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ NOTE: Generic hashers is supported.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309280,"byte_end":309319,"line_start":389,"line_end":389,"column_start":1,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":1002},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309364,"byte_end":309372,"line_start":391,"line_end":391,"column_start":8,"column_end":16},"name":"MODIFIER","qualname":"::storage::types::double_map::StorageDoubleMapMetadata::MODIFIER","value":"StorageEntryModifier","parent":{"krate":0,"index":1001},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1003},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309403,"byte_end":309407,"line_start":392,"line_end":392,"column_start":8,"column_end":12},"name":"NAME","qualname":"::storage::types::double_map::StorageDoubleMapMetadata::NAME","value":"&'static str","parent":{"krate":0,"index":1001},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1004},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309430,"byte_end":309437,"line_start":393,"line_end":393,"column_start":8,"column_end":15},"name":"DEFAULT","qualname":"::storage::types::double_map::StorageDoubleMapMetadata::DEFAULT","value":"DefaultByteGetter","parent":{"krate":0,"index":1001},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1005},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309465,"byte_end":309472,"line_start":394,"line_end":394,"column_start":8,"column_end":15},"name":"HASHER1","qualname":"::storage::types::double_map::StorageDoubleMapMetadata::HASHER1","value":"frame_metadata::StorageHasher","parent":{"krate":0,"index":1001},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1006},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309512,"byte_end":309519,"line_start":395,"line_end":395,"column_start":8,"column_end":15},"name":"HASHER2","qualname":"::storage::types::double_map::StorageDoubleMapMetadata::HASHER2","value":"frame_metadata::StorageHasher","parent":{"krate":0,"index":1001},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1030},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266748,"byte_end":266762,"line_start":39,"line_end":39,"column_start":11,"column_end":25},"name":"QueryKindTrait","qualname":"::storage::types::QueryKindTrait","value":"QueryKindTrait<Value, OnEmpty>","parent":null,"children":[{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036}],"decl_id":null,"docs":" Trait implementing how the storage optional value is converted into the queried type.","sig":null,"attributes":[{"value":"/ Trait implementing how the storage optional value is converted into the queried type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266369,"byte_end":266458,"line_start":32,"line_end":32,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266459,"byte_end":266462,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ It is implemented by:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266463,"byte_end":266488,"line_start":34,"line_end":34,"column_start":1,"column_end":26}},{"value":"/ * `OptionQuery` which convert an optional value to an optional value, user when querying","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266489,"byte_end":266581,"line_start":35,"line_end":35,"column_start":1,"column_end":93}},{"value":"/   storage will get an optional value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266582,"byte_end":266623,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/ * `ValueQuery` which convert an optional value to a value, user when querying storage will get","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266624,"byte_end":266722,"line_start":37,"line_end":37,"column_start":1,"column_end":99}},{"value":"/   a value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266723,"byte_end":266737,"line_start":38,"line_end":38,"column_start":1,"column_end":15}}]},{"kind":"Const","id":{"krate":0,"index":1033},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266824,"byte_end":266832,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"METADATA","qualname":"::storage::types::QueryKindTrait::METADATA","value":"StorageEntryModifier","parent":{"krate":0,"index":1030},"children":[],"decl_id":null,"docs":" Metadata for the storage kind.\n","sig":null,"attributes":[{"value":"/ Metadata for the storage kind.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266782,"byte_end":266816,"line_start":40,"line_end":40,"column_start":2,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1034},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266891,"byte_end":266896,"line_start":44,"line_end":44,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::types::QueryKindTrait::Query","value":"type Query: FullCodec + 'static;","parent":{"krate":0,"index":1030},"children":[],"decl_id":null,"docs":" Type returned on query\n","sig":null,"attributes":[{"value":"/ Type returned on query","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266858,"byte_end":266884,"line_start":43,"line_end":43,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267031,"byte_end":267059,"line_start":48,"line_end":48,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::types::QueryKindTrait::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<Value>) -> Self::Query","parent":{"krate":0,"index":1030},"children":[],"decl_id":null,"docs":" Convert an optional value (i.e. some if trie contains the value or none otherwise) to the\n query.\n","sig":null,"attributes":[{"value":"/ Convert an optional value (i.e. some if trie contains the value or none otherwise) to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":266921,"byte_end":267014,"line_start":46,"line_end":46,"column_start":2,"column_end":95}},{"value":"/ query.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267016,"byte_end":267026,"line_start":47,"line_end":47,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267142,"byte_end":267170,"line_start":51,"line_end":51,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::types::QueryKindTrait::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<Value>","parent":{"krate":0,"index":1030},"children":[],"decl_id":null,"docs":" Convert a query to an optional value.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267096,"byte_end":267137,"line_start":50,"line_end":50,"column_start":2,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1037},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267481,"byte_end":267492,"line_start":59,"line_end":59,"column_start":12,"column_end":23},"name":"OptionQuery","qualname":"::storage::types::OptionQuery","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implement QueryKindTrait with query being `Option<Value>`","sig":null,"attributes":[{"value":"/ Implement QueryKindTrait with query being `Option<Value>`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267208,"byte_end":267269,"line_start":54,"line_end":54,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267270,"byte_end":267273,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ NOTE: it doesn't support a generic `OnEmpty`. This means only `None` can be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267274,"byte_end":267353,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/ returned when no value is found. To use another `OnEmpty` implementation, `ValueQuery` can be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267354,"byte_end":267451,"line_start":57,"line_end":57,"column_start":1,"column_end":98}},{"value":"/ used instead.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267452,"byte_end":267469,"line_start":58,"line_end":58,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1045},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":268009,"byte_end":268019,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"ValueQuery","qualname":"::storage::types::ValueQuery","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implement QueryKindTrait with query being `Value`\n","sig":null,"attributes":[{"value":"/ Implement QueryKindTrait with query being `Value`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267944,"byte_end":267997,"line_start":78,"line_end":78,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1081},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179496,"byte_end":179515,"line_start":80,"line_end":80,"column_start":8,"column_end":27},"name":"require_transaction","qualname":"::storage::require_transaction","value":"pub fn require_transaction()","parent":null,"children":[],"decl_id":null,"docs":" Assert this method is called within a storage transaction.\n This will **panic** if is not called within a storage transaction.","sig":null,"attributes":[{"value":"/ Assert this method is called within a storage transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179259,"byte_end":179321,"line_start":76,"line_end":76,"column_start":1,"column_end":63}},{"value":"/ This will **panic** if is not called within a storage transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179322,"byte_end":179392,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179393,"byte_end":179396,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ This assertion is enabled for native execution and when `debug_assertions` are enabled.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179397,"byte_end":179488,"line_start":79,"line_end":79,"column_start":1,"column_end":92}}]},{"kind":"Function","id":{"krate":0,"index":1082},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179925,"byte_end":179941,"line_start":91,"line_end":91,"column_start":8,"column_end":24},"name":"with_transaction","qualname":"::storage::with_transaction","value":"pub fn with_transaction<R, impl FnOnce() -> TransactionOutcome<R>: FnOnce() ->\n                        TransactionOutcome<R>>(impl FnOnce() -> TransactionOutcome<R>)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Execute the supplied function in a new storage transaction.","sig":null,"attributes":[{"value":"/ Execute the supplied function in a new storage transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179620,"byte_end":179683,"line_start":85,"line_end":85,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179684,"byte_end":179687,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ All changes to storage performed by the supplied function are discarded if the returned","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179688,"byte_end":179779,"line_start":87,"line_end":87,"column_start":1,"column_end":92}},{"value":"/ outcome is `TransactionOutcome::Rollback`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179780,"byte_end":179826,"line_start":88,"line_end":88,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179827,"byte_end":179830,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Transactions can be nested to any depth. Commits happen to the parent transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":179831,"byte_end":179917,"line_start":90,"line_end":90,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":1090},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180551,"byte_end":180563,"line_start":111,"line_end":111,"column_start":11,"column_end":23},"name":"StorageValue","qualname":"::storage::StorageValue","value":"StorageValue<T: FullCodec>","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1107},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1116}],"decl_id":null,"docs":" A trait for working with macro-generated storage values under the substrate storage API.","sig":null,"attributes":[{"value":"/ A trait for working with macro-generated storage values under the substrate storage API.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180369,"byte_end":180461,"line_start":108,"line_end":108,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180462,"byte_end":180465,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at [`generator::StorageValue`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180466,"byte_end":180540,"line_start":110,"line_end":110,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":1092},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180622,"byte_end":180627,"line_start":113,"line_end":113,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageValue::Query","value":"type Query;","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" The type that get/take return.\n","sig":null,"attributes":[{"value":"/ The type that get/take return.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180581,"byte_end":180615,"line_start":112,"line_end":112,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180660,"byte_end":180670,"line_start":116,"line_end":116,"column_start":5,"column_end":15},"name":"hashed_key","qualname":"::storage::StorageValue::hashed_key","value":"pub fn hashed_key() -> [u8; ]","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Get the storage key.\n","sig":null,"attributes":[{"value":"/ Get the storage key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180631,"byte_end":180655,"line_start":115,"line_end":115,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180742,"byte_end":180748,"line_start":119,"line_end":119,"column_start":5,"column_end":11},"name":"exists","qualname":"::storage::StorageValue::exists","value":"pub fn exists() -> bool","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180688,"byte_end":180737,"line_start":118,"line_end":118,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180821,"byte_end":180824,"line_start":122,"line_end":122,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageValue::get","value":"pub fn get() -> Self::Query","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Load the value from the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Load the value from the provided storage instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180762,"byte_end":180816,"line_start":121,"line_end":121,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180972,"byte_end":180979,"line_start":127,"line_end":127,"column_start":5,"column_end":12},"name":"try_get","qualname":"::storage::StorageValue::try_get","value":"pub fn try_get() -> Result<T, ()>","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Try to get the underlying value from the provided storage instance.","sig":null,"attributes":[{"value":"/ Try to get the underlying value from the provided storage instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180845,"byte_end":180916,"line_start":124,"line_end":124,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180918,"byte_end":180921,"line_start":125,"line_end":125,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":180923,"byte_end":180967,"line_start":126,"line_end":126,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181887,"byte_end":181896,"line_start":149,"line_end":149,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::StorageValue::translate","value":"pub fn translate<O: Decode, F: FnOnce(Option<O>) -> Option<T>>(F)\n-> Result<Option<T>, ()>","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Translate a value from some previous type (`O`) to the current type.","sig":null,"attributes":[{"value":"/ Translate a value from some previous type (`O`) to the current type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181002,"byte_end":181074,"line_start":129,"line_end":129,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181076,"byte_end":181079,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ `f: F` is the translation function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181081,"byte_end":181120,"line_start":131,"line_end":131,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181122,"byte_end":181125,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ Returns `Err` if the storage item could not be interpreted as the old type, and Ok, along","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181127,"byte_end":181220,"line_start":133,"line_end":133,"column_start":2,"column_end":95}},{"value":"/ with the new value if it could.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181222,"byte_end":181257,"line_start":134,"line_end":134,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181259,"byte_end":181262,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ NOTE: This operates from and to `Option<_>` types; no effort is made to respect the default","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181264,"byte_end":181359,"line_start":136,"line_end":136,"column_start":2,"column_end":97}},{"value":"/ value of the original type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181361,"byte_end":181392,"line_start":137,"line_end":137,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181394,"byte_end":181397,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181399,"byte_end":181412,"line_start":139,"line_end":139,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181414,"byte_end":181417,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181419,"byte_end":181512,"line_start":141,"line_end":141,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181514,"byte_end":181586,"line_start":142,"line_end":142,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181588,"byte_end":181591,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181593,"byte_end":181604,"line_start":144,"line_end":144,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181606,"byte_end":181609,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade, while","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181611,"byte_end":181707,"line_start":146,"line_end":146,"column_start":2,"column_end":98}},{"value":"/ ensuring **no usage of this storage are made before the call to `on_runtime_upgrade`**. (More","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181709,"byte_end":181806,"line_start":147,"line_end":147,"column_start":2,"column_end":99}},{"value":"/ precisely prior initialized modules doesn't make use of this storage).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181808,"byte_end":181882,"line_start":148,"line_end":148,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182050,"byte_end":182053,"line_start":152,"line_end":152,"column_start":5,"column_end":8},"name":"put","qualname":"::storage::StorageValue::put","value":"pub fn put<Arg: EncodeLike<T>>(Arg)","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":181977,"byte_end":182045,"line_start":151,"line_end":151,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182224,"byte_end":182227,"line_start":156,"line_end":156,"column_start":5,"column_end":8},"name":"set","qualname":"::storage::StorageValue::set","value":"pub fn set(Self::Query)","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance; this uses the query\n type rather than the underlying value.\n","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance; this uses the query","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182087,"byte_end":182175,"line_start":154,"line_end":154,"column_start":2,"column_end":90}},{"value":"/ type rather than the underlying value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182177,"byte_end":182219,"line_start":155,"line_end":155,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182274,"byte_end":182280,"line_start":159,"line_end":159,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageValue::mutate","value":"pub fn mutate<R, F: FnOnce(&mut Self::Query) -> R>(F) -> R","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Mutate the value\n","sig":null,"attributes":[{"value":"/ Mutate the value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182249,"byte_end":182269,"line_start":158,"line_end":158,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182381,"byte_end":182391,"line_start":162,"line_end":162,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageValue::try_mutate","value":"pub fn try_mutate<R, E, F: FnOnce(&mut Self::Query) -> Result<R, E>>(F)\n-> Result<R, E>","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Mutate the value if closure returns `Ok`\n","sig":null,"attributes":[{"value":"/ Mutate the value if closure returns `Ok`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182332,"byte_end":182376,"line_start":161,"line_end":161,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1111},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182501,"byte_end":182505,"line_start":165,"line_end":165,"column_start":5,"column_end":9},"name":"kill","qualname":"::storage::StorageValue::kill","value":"pub fn kill()","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Clear the storage value.\n","sig":null,"attributes":[{"value":"/ Clear the storage value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182468,"byte_end":182496,"line_start":164,"line_end":164,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182570,"byte_end":182574,"line_start":168,"line_end":168,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageValue::take","value":"pub fn take() -> Self::Query","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182511,"byte_end":182565,"line_start":167,"line_end":167,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182928,"byte_end":182934,"line_start":179,"line_end":179,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageValue::append","value":"pub fn append<Item, EncodeLikeItem>(EncodeLikeItem) where Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, T: StorageAppend<Item>","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182595,"byte_end":182649,"line_start":170,"line_end":170,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182651,"byte_end":182654,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ `T` is required to implement [`StorageAppend`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182656,"byte_end":182707,"line_start":172,"line_end":172,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182709,"byte_end":182712,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182714,"byte_end":182727,"line_start":174,"line_end":174,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182729,"byte_end":182732,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage item will be overwritten","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182734,"byte_end":182819,"line_start":176,"line_end":176,"column_start":2,"column_end":87}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182821,"byte_end":182904,"line_start":177,"line_end":177,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":182906,"byte_end":182923,"line_start":178,"line_end":178,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183494,"byte_end":183504,"line_start":196,"line_end":196,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageValue::decode_len","value":"pub fn decode_len() -> Option<usize> where T: StorageDecodeLength","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183066,"byte_end":183141,"line_start":185,"line_end":185,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183143,"byte_end":183146,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ `T` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183148,"byte_end":183205,"line_start":187,"line_end":187,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183207,"byte_end":183210,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183212,"byte_end":183298,"line_start":189,"line_end":189,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183300,"byte_end":183338,"line_start":190,"line_end":190,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183340,"byte_end":183343,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183345,"byte_end":183358,"line_start":192,"line_end":192,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183360,"byte_end":183363,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183365,"byte_end":183458,"line_start":194,"line_end":194,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183460,"byte_end":183489,"line_start":195,"line_end":195,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":1117},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183722,"byte_end":183732,"line_start":204,"line_end":204,"column_start":11,"column_end":21},"name":"StorageMap","qualname":"::storage::StorageMap","value":"StorageMap<K: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1123},{"krate":0,"index":1125},{"krate":0,"index":1127},{"krate":0,"index":1129},{"krate":0,"index":1132},{"krate":0,"index":1135},{"krate":0,"index":1137},{"krate":0,"index":1141},{"krate":0,"index":1146},{"krate":0,"index":1150},{"krate":0,"index":1155},{"krate":0,"index":1157},{"krate":0,"index":1161},{"krate":0,"index":1163},{"krate":0,"index":1166}],"decl_id":null,"docs":" A strongly-typed map in storage.","sig":null,"attributes":[{"value":"/ A strongly-typed map in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183598,"byte_end":183634,"line_start":201,"line_end":201,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183635,"byte_end":183638,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at [`generator::StorageMap`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183639,"byte_end":183711,"line_start":203,"line_end":203,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":1120},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183806,"byte_end":183811,"line_start":206,"line_end":206,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageMap::Query","value":"type Query;","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" The type that get/take return.\n","sig":null,"attributes":[{"value":"/ The type that get/take return.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183765,"byte_end":183799,"line_start":205,"line_end":205,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183898,"byte_end":183912,"line_start":209,"line_end":209,"column_start":5,"column_end":19},"name":"hashed_key_for","qualname":"::storage::StorageMap::hashed_key_for","value":"pub fn hashed_key_for<KeyArg: EncodeLike<K>>(KeyArg) -> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183815,"byte_end":183893,"line_start":208,"line_end":208,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184017,"byte_end":184029,"line_start":212,"line_end":212,"column_start":5,"column_end":17},"name":"contains_key","qualname":"::storage::StorageMap::contains_key","value":"pub fn contains_key<KeyArg: EncodeLike<K>>(KeyArg) -> bool","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":183963,"byte_end":184012,"line_start":211,"line_end":211,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184144,"byte_end":184147,"line_start":215,"line_end":215,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageMap::get","value":"pub fn get<KeyArg: EncodeLike<K>>(KeyArg) -> Self::Query","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184077,"byte_end":184139,"line_start":214,"line_end":214,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184314,"byte_end":184321,"line_start":220,"line_end":220,"column_start":5,"column_end":12},"name":"try_get","qualname":"::storage::StorageMap::try_get","value":"pub fn try_get<KeyArg: EncodeLike<K>>(KeyArg) -> Result<V, ()>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Try to get the value for the given key from the map.","sig":null,"attributes":[{"value":"/ Try to get the value for the given key from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184202,"byte_end":184258,"line_start":217,"line_end":217,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184260,"byte_end":184263,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184265,"byte_end":184309,"line_start":219,"line_end":219,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184415,"byte_end":184419,"line_start":223,"line_end":223,"column_start":5,"column_end":9},"name":"swap","qualname":"::storage::StorageMap::swap","value":"pub fn swap<KeyArg1: EncodeLike<K>, KeyArg2: EncodeLike<K>>(KeyArg1, KeyArg2)","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Swap the values of two keys.\n","sig":null,"attributes":[{"value":"/ Swap the values of two keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184378,"byte_end":184410,"line_start":222,"line_end":222,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184573,"byte_end":184579,"line_start":226,"line_end":226,"column_start":5,"column_end":11},"name":"insert","qualname":"::storage::StorageMap::insert","value":"pub fn insert<KeyArg: EncodeLike<K>, ValArg: EncodeLike<V>>(KeyArg, ValArg)","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Store a value to be associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given key from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184501,"byte_end":184568,"line_start":225,"line_end":225,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184693,"byte_end":184699,"line_start":229,"line_end":229,"column_start":5,"column_end":11},"name":"remove","qualname":"::storage::StorageMap::remove","value":"pub fn remove<KeyArg: EncodeLike<K>>(KeyArg)","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Remove the value under a key.\n","sig":null,"attributes":[{"value":"/ Remove the value under a key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184655,"byte_end":184688,"line_start":228,"line_end":228,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184777,"byte_end":184783,"line_start":232,"line_end":232,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageMap::mutate","value":"pub fn mutate<KeyArg: EncodeLike<K>, R, F: FnOnce(&mut Self::Query) ->\n              R>(KeyArg, F) -> R","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Mutate the value under a key.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184739,"byte_end":184772,"line_start":231,"line_end":231,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1141},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184931,"byte_end":184941,"line_start":235,"line_end":235,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageMap::try_mutate","value":"pub fn try_mutate<KeyArg: EncodeLike<K>, R, E, F: FnOnce(&mut Self::Query) ->\n                  Result<R, E>>(KeyArg, F) -> Result<R, E>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":184871,"byte_end":184926,"line_start":234,"line_end":234,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185151,"byte_end":185164,"line_start":243,"line_end":243,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::storage::StorageMap::mutate_exists","value":"pub fn mutate_exists<KeyArg: EncodeLike<K>, R, F: FnOnce(&mut Option<V>) ->\n                     R>(KeyArg, F) -> R","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Mutate the value under a key.","sig":null,"attributes":[{"value":"/ Mutate the value under a key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185062,"byte_end":185095,"line_start":240,"line_end":240,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185097,"byte_end":185100,"line_start":241,"line_end":241,"column_start":2,"column_end":5}},{"value":"/ Deletes the item if mutated to a `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185102,"byte_end":185146,"line_start":242,"line_end":242,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185351,"byte_end":185368,"line_start":246,"line_end":246,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::storage::StorageMap::try_mutate_exists","value":"pub fn try_mutate_exists<KeyArg: EncodeLike<K>, R, E,\n                         F: FnOnce(&mut Option<V>) -> Result<R, E>>(KeyArg, F)\n-> Result<R, E>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185250,"byte_end":185346,"line_start":245,"line_end":245,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185523,"byte_end":185527,"line_start":252,"line_end":252,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageMap::take","value":"pub fn take<KeyArg: EncodeLike<K>>(KeyArg) -> Self::Query","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Take the value under a key.\n","sig":null,"attributes":[{"value":"/ Take the value under a key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185487,"byte_end":185518,"line_start":251,"line_end":251,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185915,"byte_end":185921,"line_start":263,"line_end":263,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageMap::append","value":"pub fn append<Item, EncodeLikeItem,\n              EncodeLikeKey>(EncodeLikeKey, EncodeLikeItem) where\nEncodeLikeKey: EncodeLike<K>, Item: Encode, EncodeLikeItem: EncodeLike<Item>,\nV: StorageAppend<Item>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Append the given items to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given items to the value in the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185582,"byte_end":185637,"line_start":254,"line_end":254,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185639,"byte_end":185642,"line_start":255,"line_end":255,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement `codec::EncodeAppend`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185644,"byte_end":185699,"line_start":256,"line_end":256,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185701,"byte_end":185704,"line_start":257,"line_end":257,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185706,"byte_end":185719,"line_start":258,"line_end":258,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185721,"byte_end":185724,"line_start":259,"line_end":259,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185726,"byte_end":185806,"line_start":260,"line_end":260,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185808,"byte_end":185891,"line_start":261,"line_end":261,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":185893,"byte_end":185910,"line_start":262,"line_end":262,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186575,"byte_end":186585,"line_start":282,"line_end":282,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageMap::decode_len","value":"pub fn decode_len<KeyArg: EncodeLike<K>>(KeyArg) -> Option<usize> where\nV: StorageDecodeLength","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186120,"byte_end":186204,"line_start":270,"line_end":270,"column_start":2,"column_end":86}},{"value":"/ given `key`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186206,"byte_end":186222,"line_start":271,"line_end":271,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186224,"byte_end":186227,"line_start":272,"line_end":272,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186229,"byte_end":186286,"line_start":273,"line_end":273,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186288,"byte_end":186291,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186293,"byte_end":186379,"line_start":275,"line_end":275,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186381,"byte_end":186419,"line_start":276,"line_end":276,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186421,"byte_end":186424,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186426,"byte_end":186439,"line_start":278,"line_end":278,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186441,"byte_end":186444,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186446,"byte_end":186539,"line_start":280,"line_end":280,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186541,"byte_end":186570,"line_start":281,"line_end":281,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186912,"byte_end":186923,"line_start":291,"line_end":291,"column_start":5,"column_end":16},"name":"migrate_key","qualname":"::storage::StorageMap::migrate_key","value":"pub fn migrate_key<OldHasher: StorageHasher, KeyArg: EncodeLike<K>>(KeyArg)\n-> Option<V>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186723,"byte_end":186813,"line_start":288,"line_end":288,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186815,"byte_end":186818,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":186820,"byte_end":186907,"line_start":290,"line_end":290,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187191,"byte_end":187213,"line_start":296,"line_end":296,"column_start":5,"column_end":27},"name":"migrate_key_from_blake","qualname":"::storage::StorageMap::migrate_key_from_blake","value":"pub fn migrate_key_from_blake<KeyArg: EncodeLike<K>>(KeyArg) -> Option<V>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from a `blake2_256` hasher to the current hasher.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from a `blake2_256` hasher to the current hasher.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187002,"byte_end":187092,"line_start":293,"line_end":293,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187094,"byte_end":187097,"line_start":294,"line_end":294,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187099,"byte_end":187186,"line_start":295,"line_end":295,"column_start":2,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":1168},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187421,"byte_end":187439,"line_start":302,"line_end":302,"column_start":11,"column_end":29},"name":"IterableStorageMap","qualname":"::storage::IterableStorageMap","value":"IterableStorageMap<K: FullEncode, V: FullCodec>: StorageMap<K, V>","parent":null,"children":[{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174}],"decl_id":null,"docs":" A strongly-typed map in storage whose keys and values can be iterated over.\n","sig":null,"attributes":[{"value":"/ A strongly-typed map in storage whose keys and values can be iterated over.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187331,"byte_end":187410,"line_start":301,"line_end":301,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":1171},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187548,"byte_end":187556,"line_start":304,"line_end":304,"column_start":7,"column_end":15},"name":"Iterator","qualname":"::storage::IterableStorageMap::Iterator","value":"type Iterator: Iterator<Item = (K, V)>;","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key, value)`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187490,"byte_end":187541,"line_start":303,"line_end":303,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187725,"byte_end":187729,"line_start":308,"line_end":308,"column_start":5,"column_end":9},"name":"iter","qualname":"::storage::IterableStorageMap::iter","value":"pub fn iter() -> Self::Iterator","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order. If you alter the map while doing\n this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order. If you alter the map while doing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187585,"byte_end":187679,"line_start":306,"line_end":306,"column_start":2,"column_end":96}},{"value":"/ this, you'll get undefined results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187681,"byte_end":187720,"line_start":307,"line_end":307,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187927,"byte_end":187932,"line_start":312,"line_end":312,"column_start":5,"column_end":10},"name":"drain","qualname":"::storage::IterableStorageMap::drain","value":"pub fn drain() -> Self::Iterator","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order. If you\n add elements to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order. If you","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187753,"byte_end":187845,"line_start":310,"line_end":310,"column_start":2,"column_end":94}},{"value":"/ add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187847,"byte_end":187922,"line_start":311,"line_end":311,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188227,"byte_end":188236,"line_start":318,"line_end":318,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::IterableStorageMap::translate","value":"pub fn translate<O: Decode, F: FnMut(K, O) -> Option<V>>(F)","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187956,"byte_end":188050,"line_start":314,"line_end":314,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188052,"byte_end":188131,"line_start":315,"line_end":315,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188133,"byte_end":188136,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188138,"byte_end":188222,"line_start":317,"line_end":317,"column_start":2,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":1177},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188394,"byte_end":188418,"line_start":322,"line_end":322,"column_start":11,"column_end":35},"name":"IterableStorageDoubleMap","qualname":"::storage::IterableStorageDoubleMap","value":"IterableStorageDoubleMap<K1: FullCodec, K2: FullCodec, V: FullCodec>: StorageDoubleMap<K1, K2, V>","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1185},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189}],"decl_id":null,"docs":" A strongly-typed double map in storage whose secondary keys and values can be iterated over.\n","sig":null,"attributes":[{"value":"/ A strongly-typed double map in storage whose secondary keys and values can be iterated over.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188287,"byte_end":188383,"line_start":321,"line_end":321,"column_start":1,"column_end":97}}]},{"kind":"Type","id":{"krate":0,"index":1181},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188559,"byte_end":188573,"line_start":328,"line_end":328,"column_start":7,"column_end":21},"name":"PrefixIterator","qualname":"::storage::IterableStorageDoubleMap::PrefixIterator","value":"type PrefixIterator: Iterator<Item = (K2, V)>;","parent":{"krate":0,"index":1177},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key2, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key2, value)`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188500,"byte_end":188552,"line_start":327,"line_end":327,"column_start":2,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":1182},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188668,"byte_end":188676,"line_start":331,"line_end":331,"column_start":7,"column_end":15},"name":"Iterator","qualname":"::storage::IterableStorageDoubleMap::Iterator","value":"type Iterator: Iterator<Item = (K1, K2, V)>;","parent":{"krate":0,"index":1177},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key1, key2, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key1, key2, value)`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188603,"byte_end":188661,"line_start":330,"line_end":330,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188917,"byte_end":188928,"line_start":336,"line_end":336,"column_start":5,"column_end":16},"name":"iter_prefix","qualname":"::storage::IterableStorageDoubleMap::iter_prefix","value":"pub fn iter_prefix<impl EncodeLike<K1>: EncodeLike<K1>>(impl EncodeLike<K1>)\n-> Self::PrefixIterator","parent":{"krate":0,"index":1177},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with first key `k1` in no particular order. If you add or\n remove values whose first key is `k1` to the map while doing this, you'll get undefined\n results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with first key `k1` in no particular order. If you add or","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188710,"byte_end":188805,"line_start":333,"line_end":333,"column_start":2,"column_end":97}},{"value":"/ remove values whose first key is `k1` to the map while doing this, you'll get undefined","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188807,"byte_end":188898,"line_start":334,"line_end":334,"column_start":2,"column_end":93}},{"value":"/ results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188900,"byte_end":188912,"line_start":335,"line_end":335,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189200,"byte_end":189212,"line_start":341,"line_end":341,"column_start":5,"column_end":17},"name":"drain_prefix","qualname":"::storage::IterableStorageDoubleMap::drain_prefix","value":"pub fn drain_prefix<impl EncodeLike<K1>: EncodeLike<K1>>(impl EncodeLike<K1>)\n-> Self::PrefixIterator","parent":{"krate":0,"index":1177},"children":[],"decl_id":null,"docs":" Remove all elements from the map with first key `k1` and iterate through them in no\n particular order. If you add elements with first key `k1` to the map while doing this,\n you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map with first key `k1` and iterate through them in no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188981,"byte_end":189068,"line_start":338,"line_end":338,"column_start":2,"column_end":89}},{"value":"/ particular order. If you add elements with first key `k1` to the map while doing this,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189070,"byte_end":189160,"line_start":339,"line_end":339,"column_start":2,"column_end":92}},{"value":"/ you'll get undefined results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189162,"byte_end":189195,"line_start":340,"line_end":340,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189423,"byte_end":189427,"line_start":345,"line_end":345,"column_start":5,"column_end":9},"name":"iter","qualname":"::storage::IterableStorageDoubleMap::iter","value":"pub fn iter() -> Self::Iterator","parent":{"krate":0,"index":1177},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order. If you add or remove values to\n the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order. If you add or remove values to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189265,"byte_end":189357,"line_start":343,"line_end":343,"column_start":2,"column_end":94}},{"value":"/ the map while doing this, you'll get undefined results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189359,"byte_end":189418,"line_start":344,"line_end":344,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189625,"byte_end":189630,"line_start":349,"line_end":349,"column_start":5,"column_end":10},"name":"drain","qualname":"::storage::IterableStorageDoubleMap::drain","value":"pub fn drain() -> Self::Iterator","parent":{"krate":0,"index":1177},"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order. If you\n add elements to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order. If you","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189451,"byte_end":189543,"line_start":347,"line_end":347,"column_start":2,"column_end":94}},{"value":"/ add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189545,"byte_end":189620,"line_start":348,"line_end":348,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189925,"byte_end":189934,"line_start":355,"line_end":355,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::IterableStorageDoubleMap::translate","value":"pub fn translate<O: Decode, F: FnMut(K1, K2, O) -> Option<V>>(F)","parent":{"krate":0,"index":1177},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189654,"byte_end":189748,"line_start":351,"line_end":351,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189750,"byte_end":189829,"line_start":352,"line_end":352,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189831,"byte_end":189834,"line_start":353,"line_end":353,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189836,"byte_end":189920,"line_start":354,"line_end":354,"column_start":2,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":1192},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190240,"byte_end":190256,"line_start":364,"line_end":364,"column_start":11,"column_end":27},"name":"StorageDoubleMap","qualname":"::storage::StorageDoubleMap","value":"StorageDoubleMap<K1: FullEncode, K2: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1209},{"krate":0,"index":1212},{"krate":0,"index":1217},{"krate":0,"index":1221},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1228},{"krate":0,"index":1233},{"krate":0,"index":1239},{"krate":0,"index":1244},{"krate":0,"index":1250},{"krate":0,"index":1255},{"krate":0,"index":1258}],"decl_id":null,"docs":" An implementation of a map with a two keys.","sig":null,"attributes":[{"value":"/ An implementation of a map with a two keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":189990,"byte_end":190037,"line_start":358,"line_end":358,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190038,"byte_end":190041,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ It provides an important ability to efficiently remove all entries","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190042,"byte_end":190112,"line_start":360,"line_end":360,"column_start":1,"column_end":71}},{"value":"/ that have a common first key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190113,"byte_end":190146,"line_start":361,"line_end":361,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190147,"byte_end":190150,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at [`generator::StorageDoubleMap`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190151,"byte_end":190229,"line_start":363,"line_end":363,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":1196},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190348,"byte_end":190353,"line_start":366,"line_end":366,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageDoubleMap::Query","value":"type Query;","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190306,"byte_end":190341,"line_start":365,"line_end":365,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190440,"byte_end":190454,"line_start":369,"line_end":369,"column_start":5,"column_end":19},"name":"hashed_key_for","qualname":"::storage::StorageDoubleMap::hashed_key_for","value":"pub fn hashed_key_for<KArg1, KArg2>(KArg1, KArg2) -> Vec<u8> where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190357,"byte_end":190435,"line_start":368,"line_end":368,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190615,"byte_end":190627,"line_start":375,"line_end":375,"column_start":5,"column_end":17},"name":"contains_key","qualname":"::storage::StorageDoubleMap::contains_key","value":"pub fn contains_key<KArg1, KArg2>(KArg1, KArg2) -> bool where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190561,"byte_end":190610,"line_start":374,"line_end":374,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190805,"byte_end":190808,"line_start":381,"line_end":381,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageDoubleMap::get","value":"pub fn get<KArg1, KArg2>(KArg1, KArg2) -> Self::Query where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the double map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the double map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190731,"byte_end":190800,"line_start":380,"line_end":380,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":191038,"byte_end":191045,"line_start":389,"line_end":389,"column_start":5,"column_end":12},"name":"try_get","qualname":"::storage::StorageDoubleMap::try_get","value":"pub fn try_get<KArg1, KArg2>(KArg1, KArg2) -> Result<V, ()> where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Try to get the value for the given key from the double map.","sig":null,"attributes":[{"value":"/ Try to get the value for the given key from the double map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190919,"byte_end":190982,"line_start":386,"line_end":386,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190984,"byte_end":190987,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":190989,"byte_end":191033,"line_start":388,"line_end":388,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":191217,"byte_end":191221,"line_start":395,"line_end":395,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageDoubleMap::take","value":"pub fn take<KArg1, KArg2>(KArg1, KArg2) -> Self::Query where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":191158,"byte_end":191212,"line_start":394,"line_end":394,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":191374,"byte_end":191378,"line_start":401,"line_end":401,"column_start":5,"column_end":9},"name":"swap","qualname":"::storage::StorageDoubleMap::swap","value":"pub fn swap<XKArg1, XKArg2, YKArg1, YKArg2>(XKArg1, XKArg2, YKArg1, YKArg2)\nwhere XKArg1: EncodeLike<K1>, XKArg2: EncodeLike<K2>, YKArg1: EncodeLike<K1>,\nYKArg2: EncodeLike<K2>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Swap the values of two key-pairs.\n","sig":null,"attributes":[{"value":"/ Swap the values of two key-pairs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":191332,"byte_end":191369,"line_start":400,"line_end":400,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":191660,"byte_end":191666,"line_start":409,"line_end":409,"column_start":5,"column_end":11},"name":"insert","qualname":"::storage::StorageDoubleMap::insert","value":"pub fn insert<KArg1, KArg2, VArg>(KArg1, KArg2, VArg) where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, VArg: EncodeLike<V>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Store a value to be associated with the given keys from the double map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given keys from the double map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":191580,"byte_end":191655,"line_start":408,"line_end":408,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":191849,"byte_end":191855,"line_start":416,"line_end":416,"column_start":5,"column_end":11},"name":"remove","qualname":"::storage::StorageDoubleMap::remove","value":"pub fn remove<KArg1, KArg2>(KArg1, KArg2) where KArg1: EncodeLike<K1>,\nKArg2: EncodeLike<K2>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Remove the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Remove the value under the given keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":191802,"byte_end":191844,"line_start":415,"line_end":415,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":191998,"byte_end":192011,"line_start":422,"line_end":422,"column_start":5,"column_end":18},"name":"remove_prefix","qualname":"::storage::StorageDoubleMap::remove_prefix","value":"pub fn remove_prefix<KArg1: ?Sized>(KArg1) where KArg1: EncodeLike<K1>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Remove all values under the first key.\n","sig":null,"attributes":[{"value":"/ Remove all values under the first key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":191951,"byte_end":191993,"line_start":421,"line_end":421,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":192124,"byte_end":192142,"line_start":425,"line_end":425,"column_start":5,"column_end":23},"name":"iter_prefix_values","qualname":"::storage::StorageDoubleMap::iter_prefix_values","value":"pub fn iter_prefix_values<KArg1: ?Sized>(KArg1) -> PrefixIterator<V> where\nKArg1: EncodeLike<K1>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Iterate over values that share the first key.\n","sig":null,"attributes":[{"value":"/ Iterate over values that share the first key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":192070,"byte_end":192119,"line_start":424,"line_end":424,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":192271,"byte_end":192277,"line_start":429,"line_end":429,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageDoubleMap::mutate","value":"pub fn mutate<KArg1, KArg2, R, F>(KArg1, KArg2, F) -> R where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, F: FnOnce(&mut Self::Query) -> R","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Mutate the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":192224,"byte_end":192266,"line_start":428,"line_end":428,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":192503,"byte_end":192513,"line_start":436,"line_end":436,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageDoubleMap::try_mutate","value":"pub fn try_mutate<KArg1, KArg2, R, E, F>(KArg1, KArg2, F) -> Result<R, E>\nwhere KArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>,\nF: FnOnce(&mut Self::Query) -> Result<R, E>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Mutate the value under the given keys when the closure returns `Ok`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys when the closure returns `Ok`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":192426,"byte_end":192498,"line_start":435,"line_end":435,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":192775,"byte_end":192788,"line_start":443,"line_end":443,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::storage::StorageDoubleMap::mutate_exists","value":"pub fn mutate_exists<KArg1, KArg2, R, F>(KArg1, KArg2, F) -> R where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, F: FnOnce(&mut Option<V>) -> R","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Mutate the value under the given keys. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":192687,"byte_end":192770,"line_start":442,"line_end":442,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193036,"byte_end":193053,"line_start":450,"line_end":450,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::storage::StorageDoubleMap::try_mutate_exists","value":"pub fn try_mutate_exists<KArg1, KArg2, R, E, F>(KArg1, KArg2, F)\n-> Result<R, E> where KArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>,\nF: FnOnce(&mut Option<V>) -> Result<R, E>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":192935,"byte_end":193031,"line_start":449,"line_end":449,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193553,"byte_end":193559,"line_start":465,"line_end":465,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageDoubleMap::append","value":"pub fn append<Item, EncodeLikeItem, KArg1,\n              KArg2>(KArg1, KArg2, EncodeLikeItem) where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, V: StorageAppend<Item>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193225,"byte_end":193279,"line_start":456,"line_end":456,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193281,"byte_end":193284,"line_start":457,"line_end":457,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageAppend`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193286,"byte_end":193337,"line_start":458,"line_end":458,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193339,"byte_end":193342,"line_start":459,"line_end":459,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193344,"byte_end":193357,"line_start":460,"line_end":460,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193359,"byte_end":193362,"line_start":461,"line_end":461,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193364,"byte_end":193444,"line_start":462,"line_end":462,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193446,"byte_end":193529,"line_start":463,"line_end":463,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193531,"byte_end":193548,"line_start":464,"line_end":464,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194253,"byte_end":194263,"line_start":488,"line_end":488,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageDoubleMap::decode_len","value":"pub fn decode_len<KArg1, KArg2>(KArg1, KArg2) -> Option<usize> where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, V: StorageDecodeLength","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key1` and `key2`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193786,"byte_end":193870,"line_start":476,"line_end":476,"column_start":2,"column_end":86}},{"value":"/ given `key1` and `key2`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193872,"byte_end":193900,"line_start":477,"line_end":477,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193902,"byte_end":193905,"line_start":478,"line_end":478,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193907,"byte_end":193964,"line_start":479,"line_end":479,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193966,"byte_end":193969,"line_start":480,"line_end":480,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":193971,"byte_end":194057,"line_start":481,"line_end":481,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194059,"byte_end":194097,"line_start":482,"line_end":482,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194099,"byte_end":194102,"line_start":483,"line_end":483,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194104,"byte_end":194117,"line_start":484,"line_end":484,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194119,"byte_end":194122,"line_start":485,"line_end":485,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194124,"byte_end":194217,"line_start":486,"line_end":486,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194219,"byte_end":194248,"line_start":487,"line_end":487,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194690,"byte_end":194702,"line_start":501,"line_end":501,"column_start":5,"column_end":17},"name":"migrate_keys","qualname":"::storage::StorageDoubleMap::migrate_keys","value":"pub fn migrate_keys<OldHasher1: StorageHasher, OldHasher2: StorageHasher,\n                    KeyArg1: EncodeLike<K1>,\n                    KeyArg2: EncodeLike<K2>>(KeyArg1, KeyArg2) -> Option<V>","parent":{"krate":0,"index":1192},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and\n `OldHasher2` to the current hashers.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194467,"byte_end":194549,"line_start":497,"line_end":497,"column_start":2,"column_end":84}},{"value":"/ `OldHasher2` to the current hashers.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194551,"byte_end":194591,"line_start":498,"line_end":498,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194593,"byte_end":194596,"line_start":499,"line_end":499,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194598,"byte_end":194685,"line_start":500,"line_end":500,"column_start":2,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":1263},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":195019,"byte_end":195033,"line_start":512,"line_end":512,"column_start":12,"column_end":26},"name":"PrefixIterator","qualname":"::storage::PrefixIterator","value":"PrefixIterator {  }","parent":null,"children":[{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268}],"decl_id":null,"docs":" Iterate over a prefix and decode raw_key and raw_value into `T`.","sig":null,"attributes":[{"value":"/ Iterate over a prefix and decode raw_key and raw_value into `T`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194866,"byte_end":194934,"line_start":509,"line_end":509,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194935,"byte_end":194938,"line_start":510,"line_end":510,"column_start":1,"column_end":4}},{"value":"/ If any decoding fails it skips it and continues to the next key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":194939,"byte_end":195007,"line_start":511,"line_end":511,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1274},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196614,"byte_end":196632,"line_start":571,"line_end":571,"column_start":11,"column_end":29},"name":"StoragePrefixedMap","qualname":"::storage::StoragePrefixedMap","value":"StoragePrefixedMap<Value: FullCodec>","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1284}],"decl_id":null,"docs":" Trait for maps that store all its value after a unique prefix.","sig":null,"attributes":[{"value":"/ Trait for maps that store all its value after a unique prefix.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196418,"byte_end":196484,"line_start":565,"line_end":565,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196485,"byte_end":196488,"line_start":566,"line_end":566,"column_start":1,"column_end":4}},{"value":"/ By default the final prefix is:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196489,"byte_end":196524,"line_start":567,"line_end":567,"column_start":1,"column_end":36}},{"value":"/ ```nocompile","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196525,"byte_end":196541,"line_start":568,"line_end":568,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196542,"byte_end":196595,"line_start":569,"line_end":569,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196596,"byte_end":196603,"line_start":570,"line_end":570,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196708,"byte_end":196721,"line_start":573,"line_end":573,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::StoragePrefixedMap::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":1274},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196654,"byte_end":196703,"line_start":572,"line_end":572,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196799,"byte_end":196813,"line_start":576,"line_end":576,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::StoragePrefixedMap::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":1274},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196744,"byte_end":196794,"line_start":575,"line_end":575,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1278},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196886,"byte_end":196898,"line_start":579,"line_end":579,"column_start":5,"column_end":17},"name":"final_prefix","qualname":"::storage::StoragePrefixedMap::final_prefix","value":"pub fn final_prefix() -> [u8; ]","parent":{"krate":0,"index":1274},"children":[],"decl_id":null,"docs":" Final full prefix that prefixes all keys.\n","sig":null,"attributes":[{"value":"/ Final full prefix that prefixes all keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":196836,"byte_end":196881,"line_start":578,"line_end":578,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197158,"byte_end":197168,"line_start":587,"line_end":587,"column_start":5,"column_end":15},"name":"remove_all","qualname":"::storage::StoragePrefixedMap::remove_all","value":"pub fn remove_all()","parent":{"krate":0,"index":1274},"children":[],"decl_id":null,"docs":" Remove all value of the storage.\n","sig":null,"attributes":[{"value":"/ Remove all value of the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197117,"byte_end":197153,"line_start":586,"line_end":586,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197369,"byte_end":197380,"line_start":594,"line_end":594,"column_start":5,"column_end":16},"name":"iter_values","qualname":"::storage::StoragePrefixedMap::iter_values","value":"pub fn iter_values() -> PrefixIterator<Value>","parent":{"krate":0,"index":1274},"children":[],"decl_id":null,"docs":" Iter over all value of the storage.","sig":null,"attributes":[{"value":"/ Iter over all value of the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197232,"byte_end":197271,"line_start":591,"line_end":591,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197273,"byte_end":197276,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value failed to decode becaues storage is corrupted then it is skipped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197278,"byte_end":197364,"line_start":593,"line_end":593,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":198203,"byte_end":198219,"line_start":617,"line_end":617,"column_start":5,"column_end":21},"name":"translate_values","qualname":"::storage::StoragePrefixedMap::translate_values","value":"pub fn translate_values<OldValue: Decode, F: FnMut(OldValue) ->\n                        Option<Value>>(F)","parent":{"krate":0,"index":1274},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197623,"byte_end":197717,"line_start":604,"line_end":604,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197719,"byte_end":197798,"line_start":605,"line_end":605,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197800,"byte_end":197803,"line_start":606,"line_end":606,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197805,"byte_end":197889,"line_start":607,"line_end":607,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197891,"byte_end":197894,"line_start":608,"line_end":608,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197896,"byte_end":197909,"line_start":609,"line_end":609,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197911,"byte_end":197914,"line_start":610,"line_end":610,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":197916,"byte_end":198009,"line_start":611,"line_end":611,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":198011,"byte_end":198083,"line_start":612,"line_end":612,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":198085,"byte_end":198088,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":198090,"byte_end":198101,"line_start":614,"line_end":614,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":198103,"byte_end":198106,"line_start":615,"line_end":615,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":198108,"byte_end":198198,"line_start":616,"line_end":616,"column_start":2,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":1288},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199020,"byte_end":199033,"line_start":645,"line_end":645,"column_start":11,"column_end":24},"name":"StorageAppend","qualname":"::storage::StorageAppend","value":"StorageAppend<Item: Encode>: private::Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait that will be implemented for types that support the `storage::append` api.","sig":null,"attributes":[{"value":"/ Marker trait that will be implemented for types that support the `storage::append` api.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":198888,"byte_end":198979,"line_start":642,"line_end":642,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":198980,"byte_end":198983,"line_start":643,"line_end":643,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":198984,"byte_end":199009,"line_start":644,"line_end":644,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":1290},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199341,"byte_end":199360,"line_start":652,"line_end":652,"column_start":11,"column_end":30},"name":"StorageDecodeLength","qualname":"::storage::StorageDecodeLength","value":"StorageDecodeLength: private::Sealed + codec::DecodeLength","parent":null,"children":[{"krate":0,"index":1291}],"decl_id":null,"docs":" Marker trait that will be implemented for types that support to decode their length in an\n effificent way. It is expected that the length is at the beginning of the encoded object\n and that the length is a `Compact<u32>`.","sig":null,"attributes":[{"value":"/ Marker trait that will be implemented for types that support to decode their length in an","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199069,"byte_end":199162,"line_start":647,"line_end":647,"column_start":1,"column_end":94}},{"value":"/ effificent way. It is expected that the length is at the beginning of the encoded object","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199163,"byte_end":199255,"line_start":648,"line_end":648,"column_start":1,"column_end":93}},{"value":"/ and that the length is a `Compact<u32>`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199256,"byte_end":199300,"line_start":649,"line_end":649,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199301,"byte_end":199304,"line_start":650,"line_end":650,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199305,"byte_end":199330,"line_start":651,"line_end":651,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199665,"byte_end":199675,"line_start":659,"line_end":659,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageDecodeLength::decode_len","value":"pub fn decode_len(&[u8]) -> Option<usize>","parent":{"krate":0,"index":1290},"children":[],"decl_id":null,"docs":" Decode the length of the storage value at `key`.","sig":null,"attributes":[{"value":"/ Decode the length of the storage value at `key`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199403,"byte_end":199455,"line_start":653,"line_end":653,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199457,"byte_end":199460,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ This function assumes that the length is at the beginning of the encoded object","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199462,"byte_end":199545,"line_start":655,"line_end":655,"column_start":2,"column_end":85}},{"value":"/ and is a `Compact<u32>`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199547,"byte_end":199575,"line_start":656,"line_end":656,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199577,"byte_end":199580,"line_start":657,"line_end":657,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the storage value does not exist or the decoding failed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199582,"byte_end":199660,"line_start":658,"line_end":658,"column_start":2,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":1295},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":200101,"byte_end":200107,"line_start":673,"line_end":673,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::storage::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1315},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318170,"byte_end":318178,"line_start":25,"line_end":25,"column_start":11,"column_end":19},"name":"Hashable","qualname":"::hash::Hashable","value":"Hashable: Sized","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1323},{"krate":0,"index":1325},{"krate":0,"index":1326}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318192,"byte_end":318202,"line_start":26,"line_end":26,"column_start":5,"column_end":15},"name":"blake2_128","qualname":"::hash::Hashable::blake2_128","value":"pub fn blake2_128(&Self) -> [u8; ]","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318227,"byte_end":318237,"line_start":27,"line_end":27,"column_start":5,"column_end":15},"name":"blake2_256","qualname":"::hash::Hashable::blake2_256","value":"pub fn blake2_256(&Self) -> [u8; ]","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318262,"byte_end":318279,"line_start":28,"line_end":28,"column_start":5,"column_end":22},"name":"blake2_128_concat","qualname":"::hash::Hashable::blake2_128_concat","value":"pub fn blake2_128_concat(&Self) -> Vec<u8>","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318303,"byte_end":318311,"line_start":29,"line_end":29,"column_start":5,"column_end":13},"name":"twox_128","qualname":"::hash::Hashable::twox_128","value":"pub fn twox_128(&Self) -> [u8; ]","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318336,"byte_end":318344,"line_start":30,"line_end":30,"column_start":5,"column_end":13},"name":"twox_256","qualname":"::hash::Hashable::twox_256","value":"pub fn twox_256(&Self) -> [u8; ]","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318369,"byte_end":318383,"line_start":31,"line_end":31,"column_start":5,"column_end":19},"name":"twox_64_concat","qualname":"::hash::Hashable::twox_64_concat","value":"pub fn twox_64_concat(&Self) -> Vec<u8>","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318407,"byte_end":318415,"line_start":32,"line_end":32,"column_start":5,"column_end":13},"name":"identity","qualname":"::hash::Hashable::identity","value":"pub fn identity(&Self) -> Vec<u8>","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1340},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319038,"byte_end":319051,"line_start":58,"line_end":58,"column_start":11,"column_end":24},"name":"StorageHasher","qualname":"::hash::StorageHasher","value":"StorageHasher: 'static","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343}],"decl_id":null,"docs":" Hasher to use to hash keys to insert to storage.\n","sig":null,"attributes":[{"value":"/ Hasher to use to hash keys to insert to storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318975,"byte_end":319027,"line_start":57,"line_end":57,"column_start":1,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":1341},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319070,"byte_end":319078,"line_start":59,"line_end":59,"column_start":8,"column_end":16},"name":"METADATA","qualname":"::hash::StorageHasher::METADATA","value":"frame_metadata::StorageHasher","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1342},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319117,"byte_end":319123,"line_start":60,"line_end":60,"column_start":7,"column_end":13},"name":"Output","qualname":"::hash::StorageHasher::Output","value":"type Output: AsRef<[u8]>;","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319142,"byte_end":319146,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"hash","qualname":"::hash::StorageHasher::hash","value":"pub fn hash(&[u8]) -> Self::Output","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1344},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319309,"byte_end":319332,"line_start":67,"line_end":67,"column_start":11,"column_end":34},"name":"ReversibleStorageHasher","qualname":"::hash::ReversibleStorageHasher","value":"ReversibleStorageHasher: StorageHasher","parent":null,"children":[{"krate":0,"index":1345}],"decl_id":null,"docs":" Hasher to use to hash keys to insert to storage.","sig":null,"attributes":[{"value":"/ Hasher to use to hash keys to insert to storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319177,"byte_end":319229,"line_start":64,"line_end":64,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319230,"byte_end":319233,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Reversible hasher store the encoded key after the hash part.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319234,"byte_end":319298,"line_start":66,"line_end":66,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319472,"byte_end":319479,"line_start":71,"line_end":71,"column_start":5,"column_end":12},"name":"reverse","qualname":"::hash::ReversibleStorageHasher::reverse","value":"pub fn reverse(&[u8]) -> &[u8]","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Split the hash part out of the input.","sig":null,"attributes":[{"value":"/ Split the hash part out of the input.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319351,"byte_end":319392,"line_start":68,"line_end":68,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319394,"byte_end":319397,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ I.e. for input `&[hash ++ key ++ some]` returns `&[key ++ some]`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319399,"byte_end":319467,"line_start":70,"line_end":70,"column_start":2,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1346},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319542,"byte_end":319550,"line_start":75,"line_end":75,"column_start":12,"column_end":20},"name":"Identity","qualname":"::hash::Identity","value":"","parent":null,"children":[],"decl_id":null,"docs":" Store the key directly.\n","sig":null,"attributes":[{"value":"/ Store the key directly.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319503,"byte_end":319530,"line_start":74,"line_end":74,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":1354},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319902,"byte_end":319914,"line_start":90,"line_end":90,"column_start":12,"column_end":24},"name":"Twox64Concat","qualname":"::hash::Twox64Concat","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with `concat(twox64(key), key)`\n","sig":null,"attributes":[{"value":"/ Hash storage keys with `concat(twox64(key), key)`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319837,"byte_end":319890,"line_start":89,"line_end":89,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1362},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":320465,"byte_end":320481,"line_start":113,"line_end":113,"column_start":12,"column_end":28},"name":"Blake2_128Concat","qualname":"::hash::Blake2_128Concat","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with `concat(blake2_128(key), key)`\n","sig":null,"attributes":[{"value":"/ Hash storage keys with `concat(blake2_128(key), key)`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":320396,"byte_end":320453,"line_start":112,"line_end":112,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1370},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321029,"byte_end":321039,"line_start":136,"line_end":136,"column_start":12,"column_end":22},"name":"Blake2_128","qualname":"::hash::Blake2_128","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with blake2 128\n","sig":null,"attributes":[{"value":"/ Hash storage keys with blake2 128","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":320980,"byte_end":321017,"line_start":135,"line_end":135,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1378},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321298,"byte_end":321308,"line_start":146,"line_end":146,"column_start":12,"column_end":22},"name":"Blake2_256","qualname":"::hash::Blake2_256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with blake2 256\n","sig":null,"attributes":[{"value":"/ Hash storage keys with blake2 256","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321249,"byte_end":321286,"line_start":145,"line_end":145,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1386},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321565,"byte_end":321572,"line_start":156,"line_end":156,"column_start":12,"column_end":19},"name":"Twox128","qualname":"::hash::Twox128","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with twox 128\n","sig":null,"attributes":[{"value":"/ Hash storage keys with twox 128","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321518,"byte_end":321553,"line_start":155,"line_end":155,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1394},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321821,"byte_end":321828,"line_start":166,"line_end":166,"column_start":12,"column_end":19},"name":"Twox256","qualname":"::hash::Twox256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with twox 256\n","sig":null,"attributes":[{"value":"/ Hash storage keys with twox 256","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321774,"byte_end":321809,"line_start":165,"line_end":165,"column_start":1,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":1402},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/event.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"event","qualname":"::event","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/event.rs","parent":null,"children":[{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":7893}],"decl_id":null,"docs":" Macros that define an Event types. Events can be used to easily report changes or conditions\n in your runtime to external entities like users, chain explorers, or dApps.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1423,"byte_end":1435,"line_start":56,"line_end":56,"column_start":1,"column_end":13}},{"value":"/ Macros that define an Event types. Events can be used to easily report changes or conditions","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/event.rs","byte_start":323060,"byte_end":323156,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ in your runtime to external entities like users, chain explorers, or dApps.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/event.rs","byte_start":323157,"byte_end":323236,"line_start":19,"line_end":19,"column_start":1,"column_end":80}}]},{"kind":"Mod","id":{"krate":0,"index":1413},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"metadata","qualname":"::metadata","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/metadata.rs","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":7897},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":7905},{"krate":0,"index":1421},{"krate":0,"index":7907},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1451,"byte_end":1463,"line_start":58,"line_end":58,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1435},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/genesis_config.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"genesis_config","qualname":"::genesis_config","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/genesis_config.rs","parent":null,"children":[],"decl_id":null,"docs":" Macros for generating the runtime genesis config.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1482,"byte_end":1494,"line_start":60,"line_end":60,"column_start":1,"column_end":13}},{"value":"/ Macros for generating the runtime genesis config.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/genesis_config.rs","byte_start":362231,"byte_end":362284,"line_start":18,"line_end":18,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1438},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/inherent.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inherent","qualname":"::inherent","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/inherent.rs","parent":null,"children":[{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1519,"byte_end":1531,"line_start":62,"line_end":62,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1449},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/unsigned.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unsigned","qualname":"::unsigned","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/unsigned.rs","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1550,"byte_end":1562,"line_start":64,"line_end":64,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1457},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/error.rs","parent":null,"children":[{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":7949},{"krate":0,"index":1460},{"krate":0,"index":7951},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464}],"decl_id":null,"docs":" Macro for declaring a module error.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1581,"byte_end":1593,"line_start":66,"line_end":66,"column_start":1,"column_end":13}},{"value":"/ Macro for declaring a module error.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/error.rs","byte_start":377719,"byte_end":377758,"line_start":18,"line_end":18,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":1466},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"traits","qualname":"::traits","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","parent":null,"children":[{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":7961},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":7965},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":7971},{"krate":0,"index":1477},{"krate":0,"index":7973},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":8003},{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1520},{"krate":0,"index":1524},{"krate":0,"index":1535},{"krate":0,"index":1538},{"krate":0,"index":1541},{"krate":0,"index":1549},{"krate":0,"index":1554},{"krate":0,"index":1560},{"krate":0,"index":1565},{"krate":0,"index":1569},{"krate":0,"index":1573},{"krate":0,"index":1577},{"krate":0,"index":1581},{"krate":0,"index":2343},{"krate":0,"index":2345},{"krate":0,"index":2347},{"krate":0,"index":2350},{"krate":0,"index":2354},{"krate":0,"index":2359},{"krate":0,"index":2365},{"krate":0,"index":2372},{"krate":0,"index":2380},{"krate":0,"index":2389},{"krate":0,"index":2399},{"krate":0,"index":2410},{"krate":0,"index":2422},{"krate":0,"index":2435},{"krate":0,"index":2449},{"krate":0,"index":2464},{"krate":0,"index":2480},{"krate":0,"index":2497},{"krate":0,"index":2515},{"krate":0,"index":2534},{"krate":0,"index":2554},{"krate":0,"index":2575},{"krate":0,"index":2597},{"krate":0,"index":2620},{"krate":0,"index":2644},{"krate":0,"index":2669},{"krate":0,"index":2695},{"krate":0,"index":2722},{"krate":0,"index":2750},{"krate":0,"index":2779},{"krate":0,"index":2809},{"krate":0,"index":2840},{"krate":0,"index":1586},{"krate":0,"index":1606},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1619},{"krate":0,"index":1639},{"krate":0,"index":1643},{"krate":0,"index":1647},{"krate":0,"index":1651},{"krate":0,"index":1655},{"krate":0,"index":1657},{"krate":0,"index":1660},{"krate":0,"index":1663},{"krate":0,"index":1666},{"krate":0,"index":1671},{"krate":0,"index":2872},{"krate":0,"index":2875},{"krate":0,"index":2878},{"krate":0,"index":2882},{"krate":0,"index":2887},{"krate":0,"index":2893},{"krate":0,"index":2900},{"krate":0,"index":2908},{"krate":0,"index":2917},{"krate":0,"index":2927},{"krate":0,"index":2938},{"krate":0,"index":2950},{"krate":0,"index":2963},{"krate":0,"index":2977},{"krate":0,"index":2992},{"krate":0,"index":3008},{"krate":0,"index":3025},{"krate":0,"index":3043},{"krate":0,"index":3062},{"krate":0,"index":3082},{"krate":0,"index":3103},{"krate":0,"index":3125},{"krate":0,"index":3148},{"krate":0,"index":3172},{"krate":0,"index":3197},{"krate":0,"index":3223},{"krate":0,"index":3250},{"krate":0,"index":3278},{"krate":0,"index":3307},{"krate":0,"index":3337},{"krate":0,"index":3368},{"krate":0,"index":3400},{"krate":0,"index":3433},{"krate":0,"index":3436},{"krate":0,"index":3439},{"krate":0,"index":3443},{"krate":0,"index":3448},{"krate":0,"index":3454},{"krate":0,"index":3461},{"krate":0,"index":3469},{"krate":0,"index":3478},{"krate":0,"index":3488},{"krate":0,"index":3499},{"krate":0,"index":3511},{"krate":0,"index":3524},{"krate":0,"index":3538},{"krate":0,"index":3553},{"krate":0,"index":3569},{"krate":0,"index":3586},{"krate":0,"index":3604},{"krate":0,"index":3623},{"krate":0,"index":3643},{"krate":0,"index":3664},{"krate":0,"index":3686},{"krate":0,"index":3709},{"krate":0,"index":3733},{"krate":0,"index":3758},{"krate":0,"index":3784},{"krate":0,"index":3811},{"krate":0,"index":3839},{"krate":0,"index":3868},{"krate":0,"index":3898},{"krate":0,"index":3929},{"krate":0,"index":3961},{"krate":0,"index":1674},{"krate":0,"index":1679},{"krate":0,"index":1684},{"krate":0,"index":1688},{"krate":0,"index":1694},{"krate":0,"index":1700},{"krate":0,"index":1708},{"krate":0,"index":3994},{"krate":0,"index":4007},{"krate":0,"index":4005},{"krate":0,"index":4002},{"krate":0,"index":4003},{"krate":0,"index":3999},{"krate":0,"index":4000},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1730},{"krate":0,"index":1739},{"krate":0,"index":1746},{"krate":0,"index":1755},{"krate":0,"index":1763},{"krate":0,"index":4008},{"krate":0,"index":4033},{"krate":0,"index":4034},{"krate":0,"index":4030},{"krate":0,"index":4031},{"krate":0,"index":4028},{"krate":0,"index":4027},{"krate":0,"index":4021},{"krate":0,"index":4015},{"krate":0,"index":4013},{"krate":0,"index":1786},{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1803},{"krate":0,"index":4036},{"krate":0,"index":4064},{"krate":0,"index":4059},{"krate":0,"index":4058},{"krate":0,"index":4054},{"krate":0,"index":4055},{"krate":0,"index":4051},{"krate":0,"index":4052},{"krate":0,"index":4049},{"krate":0,"index":4043},{"krate":0,"index":4041},{"krate":0,"index":4038},{"krate":0,"index":4074},{"krate":0,"index":4083},{"krate":0,"index":4085},{"krate":0,"index":4087},{"krate":0,"index":4089},{"krate":0,"index":4091},{"krate":0,"index":4102},{"krate":0,"index":4105},{"krate":0,"index":4107},{"krate":0,"index":4110},{"krate":0,"index":4112},{"krate":0,"index":4115},{"krate":0,"index":4117},{"krate":0,"index":4120},{"krate":0,"index":4122},{"krate":0,"index":4125},{"krate":0,"index":4128},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1815},{"krate":0,"index":1817},{"krate":0,"index":1825},{"krate":0,"index":1831},{"krate":0,"index":1834},{"krate":0,"index":1837},{"krate":0,"index":1841},{"krate":0,"index":1843},{"krate":0,"index":1846},{"krate":0,"index":1849},{"krate":0,"index":1852},{"krate":0,"index":1855},{"krate":0,"index":4157},{"krate":0,"index":4171},{"krate":0,"index":4168},{"krate":0,"index":4169},{"krate":0,"index":4164},{"krate":0,"index":4165},{"krate":0,"index":4162},{"krate":0,"index":4160},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":4173},{"krate":0,"index":4176},{"krate":0,"index":4179},{"krate":0,"index":4183},{"krate":0,"index":4188},{"krate":0,"index":4194},{"krate":0,"index":4201},{"krate":0,"index":4209},{"krate":0,"index":4218},{"krate":0,"index":4228},{"krate":0,"index":4239},{"krate":0,"index":4251},{"krate":0,"index":4264},{"krate":0,"index":4278},{"krate":0,"index":4293},{"krate":0,"index":4309},{"krate":0,"index":4326},{"krate":0,"index":4344},{"krate":0,"index":4363},{"krate":0,"index":4383},{"krate":0,"index":4404},{"krate":0,"index":4426},{"krate":0,"index":4449},{"krate":0,"index":4473},{"krate":0,"index":4498},{"krate":0,"index":4524},{"krate":0,"index":4551},{"krate":0,"index":4579},{"krate":0,"index":4608},{"krate":0,"index":4638},{"krate":0,"index":4669},{"krate":0,"index":4701},{"krate":0,"index":1867},{"krate":0,"index":4734},{"krate":0,"index":4737},{"krate":0,"index":4741},{"krate":0,"index":4746},{"krate":0,"index":4752},{"krate":0,"index":4759},{"krate":0,"index":4767},{"krate":0,"index":4776},{"krate":0,"index":4786},{"krate":0,"index":4797},{"krate":0,"index":4809},{"krate":0,"index":4822},{"krate":0,"index":4836},{"krate":0,"index":4851},{"krate":0,"index":4867},{"krate":0,"index":4884},{"krate":0,"index":4902},{"krate":0,"index":4921},{"krate":0,"index":4941},{"krate":0,"index":4962},{"krate":0,"index":4984},{"krate":0,"index":5007},{"krate":0,"index":5031},{"krate":0,"index":5056},{"krate":0,"index":5082},{"krate":0,"index":5109},{"krate":0,"index":5137},{"krate":0,"index":5166},{"krate":0,"index":5196},{"krate":0,"index":5227},{"krate":0,"index":5259},{"krate":0,"index":5292},{"krate":0,"index":5294},{"krate":0,"index":5296},{"krate":0,"index":5299},{"krate":0,"index":5303},{"krate":0,"index":5308},{"krate":0,"index":5314},{"krate":0,"index":5321},{"krate":0,"index":5329},{"krate":0,"index":5338},{"krate":0,"index":5348},{"krate":0,"index":5359},{"krate":0,"index":5371},{"krate":0,"index":5384},{"krate":0,"index":5398},{"krate":0,"index":5413},{"krate":0,"index":5429},{"krate":0,"index":5446},{"krate":0,"index":5464},{"krate":0,"index":5483},{"krate":0,"index":5503},{"krate":0,"index":5524},{"krate":0,"index":5546},{"krate":0,"index":5569},{"krate":0,"index":5593},{"krate":0,"index":5618},{"krate":0,"index":5644},{"krate":0,"index":5671},{"krate":0,"index":5699},{"krate":0,"index":5728},{"krate":0,"index":5758},{"krate":0,"index":5789},{"krate":0,"index":1870},{"krate":0,"index":5821},{"krate":0,"index":5823},{"krate":0,"index":5826},{"krate":0,"index":5830},{"krate":0,"index":5835},{"krate":0,"index":5841},{"krate":0,"index":5848},{"krate":0,"index":5856},{"krate":0,"index":5865},{"krate":0,"index":5875},{"krate":0,"index":5886},{"krate":0,"index":5898},{"krate":0,"index":5911},{"krate":0,"index":5925},{"krate":0,"index":5940},{"krate":0,"index":5956},{"krate":0,"index":5973},{"krate":0,"index":5991},{"krate":0,"index":6010},{"krate":0,"index":6030},{"krate":0,"index":6051},{"krate":0,"index":6073},{"krate":0,"index":6096},{"krate":0,"index":6120},{"krate":0,"index":6145},{"krate":0,"index":6171},{"krate":0,"index":6198},{"krate":0,"index":6226},{"krate":0,"index":6255},{"krate":0,"index":6285},{"krate":0,"index":6316},{"krate":0,"index":6348},{"krate":0,"index":6351},{"krate":0,"index":6354},{"krate":0,"index":6358},{"krate":0,"index":6363},{"krate":0,"index":6369},{"krate":0,"index":6376},{"krate":0,"index":6384},{"krate":0,"index":6393},{"krate":0,"index":6403},{"krate":0,"index":6414},{"krate":0,"index":6426},{"krate":0,"index":6439},{"krate":0,"index":6453},{"krate":0,"index":6468},{"krate":0,"index":6484},{"krate":0,"index":6501},{"krate":0,"index":6519},{"krate":0,"index":6538},{"krate":0,"index":6558},{"krate":0,"index":6579},{"krate":0,"index":6601},{"krate":0,"index":6624},{"krate":0,"index":6648},{"krate":0,"index":6673},{"krate":0,"index":6699},{"krate":0,"index":6726},{"krate":0,"index":6754},{"krate":0,"index":6783},{"krate":0,"index":6813},{"krate":0,"index":6844},{"krate":0,"index":6876},{"krate":0,"index":1872},{"krate":0,"index":1898},{"krate":0,"index":1904},{"krate":0,"index":1907},{"krate":0,"index":1921},{"krate":0,"index":1927},{"krate":0,"index":1933},{"krate":0,"index":1935},{"krate":0,"index":1938},{"krate":0,"index":1940},{"krate":0,"index":1943},{"krate":0,"index":1947},{"krate":0,"index":1949},{"krate":0,"index":1951},{"krate":0,"index":1954},{"krate":0,"index":1956},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1970},{"krate":0,"index":1977},{"krate":0,"index":6951},{"krate":0,"index":6978},{"krate":0,"index":6975},{"krate":0,"index":6976},{"krate":0,"index":6971},{"krate":0,"index":6972},{"krate":0,"index":6965},{"krate":0,"index":6960},{"krate":0,"index":6958},{"krate":0,"index":6956},{"krate":0,"index":6955},{"krate":0,"index":1978},{"krate":0,"index":1988},{"krate":0,"index":1992}],"decl_id":null,"docs":" Traits for FRAME.","sig":null,"attributes":[{"value":"/ Traits for FRAME.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":383482,"byte_end":383503,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":383504,"byte_end":383507,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ NOTE: If you're looking for `parameter_types`, it has moved in to the top-level module.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":383508,"byte_end":383599,"line_start":20,"line_end":20,"column_start":1,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":1514},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384583,"byte_end":384595,"line_start":48,"line_end":48,"column_start":11,"column_end":23},"name":"ValidatorSet","qualname":"::traits::ValidatorSet","value":"ValidatorSet<AccountId>","parent":null,"children":[{"krate":0,"index":1516},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1519}],"decl_id":null,"docs":" A trait for online node inspection in a session.","sig":null,"attributes":[{"value":"/ A trait for online node inspection in a session.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384443,"byte_end":384495,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384496,"byte_end":384499,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Something that can give information about the current validator set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384500,"byte_end":384572,"line_start":47,"line_end":47,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":1516},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384669,"byte_end":384680,"line_start":50,"line_end":50,"column_start":7,"column_end":18},"name":"ValidatorId","qualname":"::traits::ValidatorSet::ValidatorId","value":"type ValidatorId: Parameter;","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":" Type for representing validator id in a session.\n","sig":null,"attributes":[{"value":"/ Type for representing validator id in a session.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384610,"byte_end":384662,"line_start":49,"line_end":49,"column_start":2,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":1517},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384756,"byte_end":384769,"line_start":52,"line_end":52,"column_start":7,"column_end":20},"name":"ValidatorIdOf","qualname":"::traits::ValidatorSet::ValidatorIdOf","value":"type ValidatorIdOf: Convert<AccountId, Option<Self::ValidatorId>>;","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":" A type for converting `AccountId` to `ValidatorId`.\n","sig":null,"attributes":[{"value":"/ A type for converting `AccountId` to `ValidatorId`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384694,"byte_end":384749,"line_start":51,"line_end":51,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384859,"byte_end":384872,"line_start":55,"line_end":55,"column_start":5,"column_end":18},"name":"session_index","qualname":"::traits::ValidatorSet::session_index","value":"pub fn session_index() -> SessionIndex","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":" Returns current session index.\n","sig":null,"attributes":[{"value":"/ Returns current session index.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384820,"byte_end":384854,"line_start":54,"line_end":54,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384940,"byte_end":384950,"line_start":58,"line_end":58,"column_start":5,"column_end":15},"name":"validators","qualname":"::traits::ValidatorSet::validators","value":"pub fn validators() -> Vec<Self::ValidatorId>","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":" Returns the active set of validators.\n","sig":null,"attributes":[{"value":"/ Returns the active set of validators.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384894,"byte_end":384935,"line_start":57,"line_end":57,"column_start":2,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":1520},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385047,"byte_end":385077,"line_start":62,"line_end":62,"column_start":11,"column_end":41},"name":"ValidatorSetWithIdentification","qualname":"::traits::ValidatorSetWithIdentification","value":"ValidatorSetWithIdentification<AccountId>: ValidatorSet<AccountId>","parent":null,"children":[{"krate":0,"index":1522},{"krate":0,"index":1523}],"decl_id":null,"docs":" [`ValidatorSet`] combined with an identification.\n","sig":null,"attributes":[{"value":"/ [`ValidatorSet`] combined with an identification.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":384983,"byte_end":385036,"line_start":61,"line_end":61,"column_start":1,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":1522},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385165,"byte_end":385179,"line_start":64,"line_end":64,"column_start":7,"column_end":21},"name":"Identification","qualname":"::traits::ValidatorSetWithIdentification::Identification","value":"type Identification: Parameter;","parent":{"krate":0,"index":1520},"children":[],"decl_id":null,"docs":" Full identification of `ValidatorId`.\n","sig":null,"attributes":[{"value":"/ Full identification of `ValidatorId`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385117,"byte_end":385158,"line_start":63,"line_end":63,"column_start":2,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":1523},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385260,"byte_end":385276,"line_start":66,"line_end":66,"column_start":7,"column_end":23},"name":"IdentificationOf","qualname":"::traits::ValidatorSetWithIdentification::IdentificationOf","value":"type IdentificationOf: Convert<Self::ValidatorId, Option<Self::Identification>>;","parent":{"krate":0,"index":1520},"children":[],"decl_id":null,"docs":" A type for converting `ValidatorId` to `Identification`.\n","sig":null,"attributes":[{"value":"/ A type for converting `ValidatorId` to `Identification`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385193,"byte_end":385253,"line_start":65,"line_end":65,"column_start":2,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":1524},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385394,"byte_end":385411,"line_start":70,"line_end":70,"column_start":11,"column_end":28},"name":"OneSessionHandler","qualname":"::traits::OneSessionHandler","value":"OneSessionHandler<ValidatorId>: BoundToRuntimeAppPublic","parent":null,"children":[{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1530},{"krate":0,"index":1533},{"krate":0,"index":1534}],"decl_id":null,"docs":" A session handler for specific key type.\n","sig":null,"attributes":[{"value":"/ A session handler for specific key type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385339,"byte_end":385383,"line_start":69,"line_end":69,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1526},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385486,"byte_end":385489,"line_start":72,"line_end":72,"column_start":7,"column_end":10},"name":"Key","qualname":"::traits::OneSessionHandler::Key","value":"type Key: Decode + Default + RuntimeAppPublic;","parent":{"krate":0,"index":1524},"children":[],"decl_id":null,"docs":" The key type expected.\n","sig":null,"attributes":[{"value":"/ The key type expected.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385453,"byte_end":385479,"line_start":71,"line_end":71,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385787,"byte_end":385805,"line_start":78,"line_end":78,"column_start":5,"column_end":23},"name":"on_genesis_session","qualname":"::traits::OneSessionHandler::on_genesis_session","value":"pub fn on_genesis_session<'a, I: 'a>(I) where I: Iterator<Item =\n(&'a ValidatorId, Self::Key)>, ValidatorId: 'a","parent":{"krate":0,"index":1524},"children":[],"decl_id":null,"docs":" The given validator set will be used for the genesis session.\n It is guaranteed that the given validator set will also be used\n for the second session, therefore the first call to `on_new_session`\n should provide the same validator set.\n","sig":null,"attributes":[{"value":"/ The given validator set will be used for the genesis session.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385530,"byte_end":385595,"line_start":74,"line_end":74,"column_start":2,"column_end":67}},{"value":"/ It is guaranteed that the given validator set will also be used","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385597,"byte_end":385664,"line_start":75,"line_end":75,"column_start":2,"column_end":69}},{"value":"/ for the second session, therefore the first call to `on_new_session`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385666,"byte_end":385738,"line_start":76,"line_end":76,"column_start":2,"column_end":74}},{"value":"/ should provide the same validator set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385740,"byte_end":385782,"line_start":77,"line_end":77,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386329,"byte_end":386343,"line_start":90,"line_end":90,"column_start":5,"column_end":19},"name":"on_new_session","qualname":"::traits::OneSessionHandler::on_new_session","value":"pub fn on_new_session<'a, I: 'a>(bool, I, I) where I: Iterator<Item =\n(&'a ValidatorId, Self::Key)>, ValidatorId: 'a","parent":{"krate":0,"index":1524},"children":[],"decl_id":null,"docs":" Session set has changed; act appropriately. Note that this can be called\n before initialization of your module.","sig":null,"attributes":[{"value":"/ Session set has changed; act appropriately. Note that this can be called","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385907,"byte_end":385983,"line_start":81,"line_end":81,"column_start":2,"column_end":78}},{"value":"/ before initialization of your module.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385985,"byte_end":386026,"line_start":82,"line_end":82,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386028,"byte_end":386031,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ `changed` is true when at least one of the session keys","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386033,"byte_end":386092,"line_start":84,"line_end":84,"column_start":2,"column_end":61}},{"value":"/ or the underlying economic identities/distribution behind one the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386094,"byte_end":386163,"line_start":85,"line_end":85,"column_start":2,"column_end":71}},{"value":"/ session keys has changed, false otherwise.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386165,"byte_end":386211,"line_start":86,"line_end":86,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386213,"byte_end":386216,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ The `validators` are the validators of the incoming session, and `queued_validators`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386218,"byte_end":386306,"line_start":88,"line_end":88,"column_start":2,"column_end":90}},{"value":"/ will follow.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386308,"byte_end":386324,"line_start":89,"line_end":89,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386666,"byte_end":386690,"line_start":100,"line_end":100,"column_start":5,"column_end":29},"name":"on_before_session_ending","qualname":"::traits::OneSessionHandler::on_before_session_ending","value":"pub fn on_before_session_ending()","parent":{"krate":0,"index":1524},"children":[],"decl_id":null,"docs":" A notification for end of the session.","sig":null,"attributes":[{"value":"/ A notification for end of the session.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386490,"byte_end":386532,"line_start":96,"line_end":96,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386534,"byte_end":386537,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ Note it is triggered before any `SessionManager::end_session` handlers,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386539,"byte_end":386614,"line_start":98,"line_end":98,"column_start":2,"column_end":77}},{"value":"/ so we can still affect the validator set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386616,"byte_end":386661,"line_start":99,"line_end":99,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386776,"byte_end":386787,"line_start":103,"line_end":103,"column_start":5,"column_end":16},"name":"on_disabled","qualname":"::traits::OneSessionHandler::on_disabled","value":"pub fn on_disabled(usize)","parent":{"krate":0,"index":1524},"children":[],"decl_id":null,"docs":" A validator got disabled. Act accordingly until a new session begins.\n","sig":null,"attributes":[{"value":"/ A validator got disabled. Act accordingly until a new session begins.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386698,"byte_end":386771,"line_start":102,"line_end":102,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1535},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386898,"byte_end":386904,"line_start":107,"line_end":107,"column_start":11,"column_end":17},"name":"Filter","qualname":"::traits::Filter","value":"Filter<T>","parent":null,"children":[{"krate":0,"index":1537}],"decl_id":null,"docs":" Simple trait for providing a filter over a reference to some type.\n","sig":null,"attributes":[{"value":"/ Simple trait for providing a filter over a reference to some type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386817,"byte_end":386887,"line_start":106,"line_end":106,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1537},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387008,"byte_end":387014,"line_start":109,"line_end":109,"column_start":5,"column_end":11},"name":"filter","qualname":"::traits::Filter::filter","value":"pub fn filter(&T) -> bool","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":" Determine if a given value should be allowed through the filter (returns `true`) or not.\n","sig":null,"attributes":[{"value":"/ Determine if a given value should be allowed through the filter (returns `true`) or not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":386911,"byte_end":387003,"line_start":108,"line_end":108,"column_start":2,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":1541},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387156,"byte_end":387167,"line_start":117,"line_end":117,"column_start":11,"column_end":22},"name":"FilterStack","qualname":"::traits::FilterStack","value":"FilterStack<T>: Filter<T>","parent":null,"children":[{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1548}],"decl_id":null,"docs":" Trait to add a constraint onto the filter.\n","sig":null,"attributes":[{"value":"/ Trait to add a constraint onto the filter.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387099,"byte_end":387145,"line_start":116,"line_end":116,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1543},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387231,"byte_end":387236,"line_start":119,"line_end":119,"column_start":7,"column_end":12},"name":"Stack","qualname":"::traits::FilterStack::Stack","value":"type Stack;","parent":{"krate":0,"index":1541},"children":[],"decl_id":null,"docs":" The type used to archive the stack.\n","sig":null,"attributes":[{"value":"/ The type used to archive the stack.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387185,"byte_end":387224,"line_start":118,"line_end":118,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387288,"byte_end":387292,"line_start":122,"line_end":122,"column_start":5,"column_end":9},"name":"push","qualname":"::traits::FilterStack::push","value":"pub fn push<impl Fn(&T) -> bool + 'static: Fn(&T) -> bool +\n            'static>(impl Fn(&T) -> bool + 'static)","parent":{"krate":0,"index":1541},"children":[],"decl_id":null,"docs":" Add a new `constraint` onto the filter.\n","sig":null,"attributes":[{"value":"/ Add a new `constraint` onto the filter.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387240,"byte_end":387283,"line_start":121,"line_end":121,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387429,"byte_end":387432,"line_start":125,"line_end":125,"column_start":5,"column_end":8},"name":"pop","qualname":"::traits::FilterStack::pop","value":"pub fn pop()","parent":{"krate":0,"index":1541},"children":[],"decl_id":null,"docs":" Removes the most recently pushed, and not-yet-popped, constraint from the filter.\n","sig":null,"attributes":[{"value":"/ Removes the most recently pushed, and not-yet-popped, constraint from the filter.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387339,"byte_end":387424,"line_start":124,"line_end":124,"column_start":2,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1547},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387522,"byte_end":387526,"line_start":128,"line_end":128,"column_start":5,"column_end":9},"name":"take","qualname":"::traits::FilterStack::take","value":"pub fn take() -> Self::Stack","parent":{"krate":0,"index":1541},"children":[],"decl_id":null,"docs":" Clear the filter, returning a value that may be used later to `restore` it.\n","sig":null,"attributes":[{"value":"/ Clear the filter, returning a value that may be used later to `restore` it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387438,"byte_end":387517,"line_start":127,"line_end":127,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1548},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387608,"byte_end":387615,"line_start":131,"line_end":131,"column_start":5,"column_end":12},"name":"restore","qualname":"::traits::FilterStack::restore","value":"pub fn restore(Self::Stack)","parent":{"krate":0,"index":1541},"children":[],"decl_id":null,"docs":" Restore the filter from a previous `take` operation.\n","sig":null,"attributes":[{"value":"/ Restore the filter from a previous `take` operation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387547,"byte_end":387603,"line_start":130,"line_end":130,"column_start":2,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1549},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387736,"byte_end":387752,"line_start":135,"line_end":135,"column_start":12,"column_end":28},"name":"FilterStackGuard","qualname":"::traits::FilterStackGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" Guard type for pushing a constraint to a `FilterStack` and popping when dropped.\n","sig":null,"attributes":[{"value":"/ Guard type for pushing a constraint to a `FilterStack` and popping when dropped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387640,"byte_end":387724,"line_start":134,"line_end":134,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1554},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387920,"byte_end":387936,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"ClearFilterGuard","qualname":"::traits::ClearFilterGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" Guard type for clearing all pushed constraints from a `FilterStack` and reinstating them when\n dropped.\n","sig":null,"attributes":[{"value":"/ Guard type for clearing all pushed constraints from a `FilterStack` and reinstating them when","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387798,"byte_end":387895,"line_start":137,"line_end":137,"column_start":1,"column_end":98}},{"value":"/ dropped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387896,"byte_end":387908,"line_start":138,"line_end":138,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1563},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388181,"byte_end":388184,"line_start":144,"line_end":144,"column_start":9,"column_end":12},"name":"new","qualname":"<FilterStackGuard<F, T>>::new","value":"pub fn new<impl Fn(&T) -> bool + 'static: Fn(&T) -> bool +\n           'static>(impl Fn(&T) -> bool + 'static) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when\n this instance is dropped.\n","sig":null,"attributes":[{"value":"/ Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388048,"byte_end":388141,"line_start":142,"line_end":142,"column_start":2,"column_end":95}},{"value":"/ this instance is dropped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388143,"byte_end":388172,"line_start":143,"line_end":143,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388574,"byte_end":388577,"line_start":159,"line_end":159,"column_start":9,"column_end":12},"name":"new","qualname":"<ClearFilterGuard<F, T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when\n this instance is dropped.\n","sig":null,"attributes":[{"value":"/ Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388441,"byte_end":388534,"line_start":157,"line_end":157,"column_start":2,"column_end":95}},{"value":"/ this instance is dropped.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388536,"byte_end":388565,"line_start":158,"line_end":158,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":1577},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388897,"byte_end":388911,"line_start":173,"line_end":173,"column_start":11,"column_end":25},"name":"InstanceFilter","qualname":"::traits::InstanceFilter","value":"InstanceFilter<T>: Sized + Send + Sync","parent":null,"children":[{"krate":0,"index":1579},{"krate":0,"index":1580}],"decl_id":null,"docs":" Simple trait for providing a filter over a reference to some type, given an instance of itself.\n","sig":null,"attributes":[{"value":"/ Simple trait for providing a filter over a reference to some type, given an instance of itself.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388787,"byte_end":388886,"line_start":172,"line_end":172,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":389036,"byte_end":389042,"line_start":175,"line_end":175,"column_start":5,"column_end":11},"name":"filter","qualname":"::traits::InstanceFilter::filter","value":"pub fn filter(&Self, &T) -> bool","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":" Determine if a given value should be allowed through the filter (returns `true`) or not.\n","sig":null,"attributes":[{"value":"/ Determine if a given value should be allowed through the filter (returns `true`) or not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388939,"byte_end":389031,"line_start":174,"line_end":174,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":389146,"byte_end":389157,"line_start":178,"line_end":178,"column_start":5,"column_end":16},"name":"is_superset","qualname":"::traits::InstanceFilter::is_superset","value":"pub fn is_superset(&Self, &Self) -> bool","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":" Determines whether `self` matches at least everything that `_o` does.\n","sig":null,"attributes":[{"value":"/ Determines whether `self` matches at least everything that `_o` does.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":389068,"byte_end":389141,"line_start":177,"line_end":177,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":2343},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":391638,"byte_end":391651,"line_start":265,"line_end":265,"column_start":11,"column_end":24},"name":"IntegrityTest","qualname":"::traits::IntegrityTest","value":"IntegrityTest","parent":null,"children":[{"krate":0,"index":2344}],"decl_id":null,"docs":" Type that provide some integrity tests.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2344},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":391759,"byte_end":391773,"line_start":269,"line_end":269,"column_start":5,"column_end":19},"name":"integrity_test","qualname":"::traits::IntegrityTest::integrity_test","value":"pub fn integrity_test()","parent":{"krate":0,"index":2343},"children":[],"decl_id":null,"docs":" Run integrity test.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1586},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":394447,"byte_end":394456,"line_start":366,"line_end":366,"column_start":11,"column_end":20},"name":"StoredMap","qualname":"::traits::StoredMap","value":"StoredMap<K, T: Default>","parent":null,"children":[{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":1594},{"krate":0,"index":1598},{"krate":0,"index":1602},{"krate":0,"index":1604}],"decl_id":null,"docs":" An abstraction of a value stored within storage, but possibly as part of a larger composite\n item.\n","sig":null,"attributes":[{"value":"/ An abstraction of a value stored within storage, but possibly as part of a larger composite","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":394331,"byte_end":394426,"line_start":364,"line_end":364,"column_start":1,"column_end":96}},{"value":"/ item.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":394427,"byte_end":394436,"line_start":365,"line_end":365,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":1589},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":394582,"byte_end":394585,"line_start":369,"line_end":369,"column_start":5,"column_end":8},"name":"get","qualname":"::traits::StoredMap::get","value":"pub fn get(&K) -> T","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Get the item, or its default if it doesn't yet exist; we make no distinction between the\n two.\n","sig":null,"attributes":[{"value":"/ Get the item, or its default if it doesn't yet exist; we make no distinction between the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":394475,"byte_end":394567,"line_start":367,"line_end":367,"column_start":2,"column_end":94}},{"value":"/ two.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":394569,"byte_end":394577,"line_start":368,"line_end":368,"column_start":2,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":394789,"byte_end":394806,"line_start":373,"line_end":373,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::traits::StoredMap::try_mutate_exists","value":"pub fn try_mutate_exists<R, E: From<StoredMapError>,\n                         impl FnOnce(&mut Option<T>) -> Result<R, E>: FnOnce(&mut Option<T>)\n                         ->\n                         Result<R,\n                                E>>(&K,\n                                    impl FnOnce(&mut Option<T>) -> Result<R, E>)\n-> Result<R, E>","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Maybe mutate the item only if an `Ok` value is returned from `f`. Do nothing if an `Err` is\n returned. It is removed or reset to default value if it has been mutated to `None`\n","sig":null,"attributes":[{"value":"/ Maybe mutate the item only if an `Ok` value is returned from `f`. Do nothing if an `Err` is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":394601,"byte_end":394696,"line_start":371,"line_end":371,"column_start":2,"column_end":97}},{"value":"/ returned. It is removed or reset to default value if it has been mutated to `None`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":394698,"byte_end":394784,"line_start":372,"line_end":372,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1594},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":394998,"byte_end":395004,"line_start":381,"line_end":381,"column_start":5,"column_end":11},"name":"mutate","qualname":"::traits::StoredMap::mutate","value":"pub fn mutate<R, impl FnOnce(&mut T) -> R: FnOnce(&mut T) ->\n              R>(&K, impl FnOnce(&mut T) -> R) -> Result<R, StoredMapError>","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Mutate the item.\n","sig":null,"attributes":[{"value":"/ Mutate the item.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":394973,"byte_end":394993,"line_start":380,"line_end":380,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":395483,"byte_end":395496,"line_start":396,"line_end":396,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::traits::StoredMap::mutate_exists","value":"pub fn mutate_exists<R,\n                     impl FnOnce(&mut Option<T>) -> R: FnOnce(&mut Option<T>)\n                     -> R>(&K, impl FnOnce(&mut Option<T>) -> R)\n-> Result<R, StoredMapError>","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Mutate the item, removing or resetting to default value if it has been mutated to `None`.","sig":null,"attributes":[{"value":"/ Mutate the item, removing or resetting to default value if it has been mutated to `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":395311,"byte_end":395404,"line_start":393,"line_end":393,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":395406,"byte_end":395409,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ This is infallible as long as the value does not get destroyed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":395411,"byte_end":395478,"line_start":395,"line_end":395,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1602},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":395703,"byte_end":395709,"line_start":404,"line_end":404,"column_start":5,"column_end":11},"name":"insert","qualname":"::traits::StoredMap::insert","value":"pub fn insert(&K, T) -> Result<(), StoredMapError>","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Set the item to something new.\n","sig":null,"attributes":[{"value":"/ Set the item to something new.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":395664,"byte_end":395698,"line_start":403,"line_end":403,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1604},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":395880,"byte_end":395886,"line_start":407,"line_end":407,"column_start":5,"column_end":11},"name":"remove","qualname":"::traits::StoredMap::remove","value":"pub fn remove(&K) -> Result<(), StoredMapError>","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Remove the item or otherwise replace it with its default value; we don't care which.\n","sig":null,"attributes":[{"value":"/ Remove the item or otherwise replace it with its default value; we don't care which.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":395787,"byte_end":395875,"line_start":406,"line_end":406,"column_start":2,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":1606},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396039,"byte_end":396053,"line_start":411,"line_end":411,"column_start":11,"column_end":25},"name":"HandleLifetime","qualname":"::traits::HandleLifetime","value":"HandleLifetime<T>","parent":null,"children":[{"krate":0,"index":1608},{"krate":0,"index":1609}],"decl_id":null,"docs":" A simple, generic one-parameter event notifier/handler.\n","sig":null,"attributes":[{"value":"/ A simple, generic one-parameter event notifier/handler.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":395969,"byte_end":396028,"line_start":410,"line_end":410,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1608},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396092,"byte_end":396099,"line_start":413,"line_end":413,"column_start":5,"column_end":12},"name":"created","qualname":"::traits::HandleLifetime::created","value":"pub fn created(&T) -> Result<(), StoredMapError>","parent":{"krate":0,"index":1606},"children":[],"decl_id":null,"docs":" An account was created.\n","sig":null,"attributes":[{"value":"/ An account was created.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396060,"byte_end":396087,"line_start":412,"line_end":412,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1609},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396182,"byte_end":396188,"line_start":416,"line_end":416,"column_start":5,"column_end":11},"name":"killed","qualname":"::traits::HandleLifetime::killed","value":"pub fn killed(&T) -> Result<(), StoredMapError>","parent":{"krate":0,"index":1606},"children":[],"decl_id":null,"docs":" An account was killed.\n","sig":null,"attributes":[{"value":"/ An account was killed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396151,"byte_end":396177,"line_start":415,"line_end":415,"column_start":2,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":1612},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":397181,"byte_end":397195,"line_start":432,"line_end":432,"column_start":12,"column_end":26},"name":"StorageMapShim","qualname":"::traits::StorageMapShim","value":"","parent":null,"children":[],"decl_id":null,"docs":" A shim for placing around a storage item in order to use it as a `StoredValue`. Ideally this\n wouldn't be needed as `StorageValue`s should blanket implement `StoredValue`s, however this\n would break the ability to have custom impls of `StoredValue`. The other workaround is to\n implement it directly in the macro.","sig":null,"attributes":[{"value":"/ A shim for placing around a storage item in order to use it as a `StoredValue`. Ideally this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396278,"byte_end":396374,"line_start":421,"line_end":421,"column_start":1,"column_end":97}},{"value":"/ wouldn't be needed as `StorageValue`s should blanket implement `StoredValue`s, however this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396375,"byte_end":396470,"line_start":422,"line_end":422,"column_start":1,"column_end":96}},{"value":"/ would break the ability to have custom impls of `StoredValue`. The other workaround is to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396471,"byte_end":396564,"line_start":423,"line_end":423,"column_start":1,"column_end":94}},{"value":"/ implement it directly in the macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396565,"byte_end":396604,"line_start":424,"line_end":424,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396605,"byte_end":396608,"line_start":425,"line_end":425,"column_start":1,"column_end":4}},{"value":"/ This form has the advantage that two additional types are provides, `Created` and `Removed`,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396609,"byte_end":396705,"line_start":426,"line_end":426,"column_start":1,"column_end":97}},{"value":"/ which are both generic events that can be tied to handlers to do something in the case of being","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396706,"byte_end":396805,"line_start":427,"line_end":427,"column_start":1,"column_end":100}},{"value":"/ about to create an account where one didn't previously exist (at all; not just where it used to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396806,"byte_end":396905,"line_start":428,"line_end":428,"column_start":1,"column_end":100}},{"value":"/ be the default value), or where the account is being removed or reset back to the default value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":396906,"byte_end":397005,"line_start":429,"line_end":429,"column_start":1,"column_end":100}},{"value":"/ where previously it did exist (though may have been in a default state). This works well with","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":397006,"byte_end":397103,"line_start":430,"line_end":430,"column_start":1,"column_end":98}},{"value":"/ system module's `CallOnCreatedAccount` and `CallKillAccount`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":397104,"byte_end":397169,"line_start":431,"line_end":431,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1639},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":398927,"byte_end":398954,"line_start":496,"line_end":496,"column_start":11,"column_end":38},"name":"EstimateNextSessionRotation","qualname":"::traits::EstimateNextSessionRotation","value":"EstimateNextSessionRotation<BlockNumber>","parent":null,"children":[{"krate":0,"index":1641},{"krate":0,"index":1642}],"decl_id":null,"docs":" Something that can estimate at which block the next session rotation will happen. This should\n be the same logical unit that dictates `ShouldEndSession` to the session module. No Assumptions\n are made about the scheduling of the sessions.\n","sig":null,"attributes":[{"value":"/ Something that can estimate at which block the next session rotation will happen. This should","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":398668,"byte_end":398765,"line_start":493,"line_end":493,"column_start":1,"column_end":98}},{"value":"/ be the same logical unit that dictates `ShouldEndSession` to the session module. No Assumptions","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":398766,"byte_end":398865,"line_start":494,"line_end":494,"column_start":1,"column_end":100}},{"value":"/ are made about the scheduling of the sessions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":398866,"byte_end":398916,"line_start":495,"line_end":495,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1641},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399141,"byte_end":399171,"line_start":500,"line_end":500,"column_start":5,"column_end":35},"name":"estimate_next_session_rotation","qualname":"::traits::EstimateNextSessionRotation::estimate_next_session_rotation","value":"pub fn estimate_next_session_rotation(BlockNumber) -> Option<BlockNumber>","parent":{"krate":0,"index":1639},"children":[],"decl_id":null,"docs":" Return the block number at which the next session rotation is estimated to happen.","sig":null,"attributes":[{"value":"/ Return the block number at which the next session rotation is estimated to happen.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":398971,"byte_end":399057,"line_start":497,"line_end":497,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399059,"byte_end":399062,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ None should be returned if the estimation fails to come to an answer","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399064,"byte_end":399136,"line_start":499,"line_end":499,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1642},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399286,"byte_end":399292,"line_start":503,"line_end":503,"column_start":5,"column_end":11},"name":"weight","qualname":"::traits::EstimateNextSessionRotation::weight","value":"pub fn weight(BlockNumber) -> Weight","parent":{"krate":0,"index":1639},"children":[],"decl_id":null,"docs":" Return the weight of calling `estimate_next_session_rotation`\n","sig":null,"attributes":[{"value":"/ Return the weight of calling `estimate_next_session_rotation`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399216,"byte_end":399281,"line_start":502,"line_end":502,"column_start":2,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":1647},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399710,"byte_end":399732,"line_start":518,"line_end":518,"column_start":11,"column_end":33},"name":"EstimateNextNewSession","qualname":"::traits::EstimateNextNewSession","value":"EstimateNextNewSession<BlockNumber>","parent":null,"children":[{"krate":0,"index":1649},{"krate":0,"index":1650}],"decl_id":null,"docs":" Something that can estimate at which block the next `new_session` will be triggered. This must\n always be implemented by the session module.\n","sig":null,"attributes":[{"value":"/ Something that can estimate at which block the next `new_session` will be triggered. This must","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399552,"byte_end":399650,"line_start":516,"line_end":516,"column_start":1,"column_end":99}},{"value":"/ always be implemented by the session module.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399651,"byte_end":399699,"line_start":517,"line_end":517,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1649},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399835,"byte_end":399860,"line_start":520,"line_end":520,"column_start":5,"column_end":30},"name":"estimate_next_new_session","qualname":"::traits::EstimateNextNewSession::estimate_next_new_session","value":"pub fn estimate_next_new_session(BlockNumber) -> Option<BlockNumber>","parent":{"krate":0,"index":1647},"children":[],"decl_id":null,"docs":" Return the block number at which the next new session is estimated to happen.\n","sig":null,"attributes":[{"value":"/ Return the block number at which the next new session is estimated to happen.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399749,"byte_end":399830,"line_start":519,"line_end":519,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1650},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399970,"byte_end":399976,"line_start":523,"line_end":523,"column_start":5,"column_end":11},"name":"weight","qualname":"::traits::EstimateNextNewSession::weight","value":"pub fn weight(BlockNumber) -> Weight","parent":{"krate":0,"index":1647},"children":[],"decl_id":null,"docs":" Return the weight of calling `estimate_next_new_session`\n","sig":null,"attributes":[{"value":"/ Return the weight of calling `estimate_next_new_session`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":399905,"byte_end":399965,"line_start":522,"line_end":522,"column_start":2,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":1655},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400283,"byte_end":400286,"line_start":537,"line_end":537,"column_start":11,"column_end":14},"name":"Len","qualname":"::traits::Len","value":"Len","parent":null,"children":[{"krate":0,"index":1656}],"decl_id":null,"docs":" Anything that can have a `::len()` method.\n","sig":null,"attributes":[{"value":"/ Anything that can have a `::len()` method.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400226,"byte_end":400272,"line_start":536,"line_end":536,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1656},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400330,"byte_end":400333,"line_start":539,"line_end":539,"column_start":5,"column_end":8},"name":"len","qualname":"::traits::Len::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":1655},"children":[],"decl_id":null,"docs":" Return the length of data type.\n","sig":null,"attributes":[{"value":"/ Return the length of data type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400290,"byte_end":400325,"line_start":538,"line_end":538,"column_start":2,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":1660},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400635,"byte_end":400638,"line_start":551,"line_end":551,"column_start":11,"column_end":14},"name":"Get","qualname":"::traits::Get","value":"Get<T>","parent":null,"children":[{"krate":0,"index":1662}],"decl_id":null,"docs":" A trait for querying a single value from a type.","sig":null,"attributes":[{"value":"/ A trait for querying a single value from a type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400517,"byte_end":400569,"line_start":548,"line_end":548,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400570,"byte_end":400573,"line_start":549,"line_end":549,"column_start":1,"column_end":4}},{"value":"/ It is not required that the value is constant.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400574,"byte_end":400624,"line_start":550,"line_end":550,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1662},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400679,"byte_end":400682,"line_start":553,"line_end":553,"column_start":5,"column_end":8},"name":"get","qualname":"::traits::Get::get","value":"pub fn get() -> T","parent":{"krate":0,"index":1660},"children":[],"decl_id":null,"docs":" Return the current value.\n","sig":null,"attributes":[{"value":"/ Return the current value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400645,"byte_end":400674,"line_start":552,"line_end":552,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":1666},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400846,"byte_end":400854,"line_start":561,"line_end":561,"column_start":11,"column_end":19},"name":"Contains","qualname":"::traits::Contains","value":"Contains<T: Ord>","parent":null,"children":[{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1670}],"decl_id":null,"docs":" A trait for querying whether a type can be said to \"contain\" a value.\n","sig":null,"attributes":[{"value":"/ A trait for querying whether a type can be said to \"contain\" a value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400762,"byte_end":400835,"line_start":560,"line_end":560,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1668},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400928,"byte_end":400936,"line_start":563,"line_end":563,"column_start":5,"column_end":13},"name":"contains","qualname":"::traits::Contains::contains","value":"pub fn contains(&T) -> bool","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Return `true` if this \"contains\" the given value `t`.\n","sig":null,"attributes":[{"value":"/ Return `true` if this \"contains\" the given value `t`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400866,"byte_end":400923,"line_start":562,"line_end":562,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1669},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401063,"byte_end":401077,"line_start":566,"line_end":566,"column_start":5,"column_end":19},"name":"sorted_members","qualname":"::traits::Contains::sorted_members","value":"pub fn sorted_members() -> Vec<T>","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Get a vector of all members in the set, ordered.\n","sig":null,"attributes":[{"value":"/ Get a vector of all members in the set, ordered.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401006,"byte_end":401058,"line_start":565,"line_end":565,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1670},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401137,"byte_end":401142,"line_start":569,"line_end":569,"column_start":5,"column_end":10},"name":"count","qualname":"::traits::Contains::count","value":"pub fn count() -> usize","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Get the number of items in the set.\n","sig":null,"attributes":[{"value":"/ Get the number of items in the set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401093,"byte_end":401132,"line_start":568,"line_end":568,"column_start":2,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":1671},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401542,"byte_end":401561,"line_start":580,"line_end":580,"column_start":11,"column_end":30},"name":"ContainsLengthBound","qualname":"::traits::ContainsLengthBound","value":"ContainsLengthBound","parent":null,"children":[{"krate":0,"index":1672},{"krate":0,"index":1673}],"decl_id":null,"docs":" A trait for querying bound for the length of an implementation of `Contains`\n","sig":null,"attributes":[{"value":"/ A trait for querying bound for the length of an implementation of `Contains`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401451,"byte_end":401531,"line_start":579,"line_end":579,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1672},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401610,"byte_end":401617,"line_start":582,"line_end":582,"column_start":5,"column_end":12},"name":"min_len","qualname":"::traits::ContainsLengthBound::min_len","value":"pub fn min_len() -> usize","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Minimum number of elements contained\n","sig":null,"attributes":[{"value":"/ Minimum number of elements contained","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401565,"byte_end":401605,"line_start":581,"line_end":581,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1673},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401676,"byte_end":401683,"line_start":584,"line_end":584,"column_start":5,"column_end":12},"name":"max_len","qualname":"::traits::ContainsLengthBound::max_len","value":"pub fn max_len() -> usize","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Maximum number of elements contained\n","sig":null,"attributes":[{"value":"/ Maximum number of elements contained","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401631,"byte_end":401671,"line_start":583,"line_end":583,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":2872},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401785,"byte_end":401797,"line_start":589,"line_end":589,"column_start":11,"column_end":23},"name":"OnNewAccount","qualname":"::traits::OnNewAccount","value":"OnNewAccount<AccountId>","parent":null,"children":[{"krate":0,"index":2874}],"decl_id":null,"docs":" Handler for when a new account has been created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2874},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401861,"byte_end":401875,"line_start":591,"line_end":591,"column_start":5,"column_end":19},"name":"on_new_account","qualname":"::traits::OnNewAccount::on_new_account","value":"pub fn on_new_account(&AccountId)","parent":{"krate":0,"index":2872},"children":[],"decl_id":null,"docs":" A new account `who` has been registered.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3433},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":401976,"byte_end":401991,"line_start":596,"line_end":596,"column_start":11,"column_end":26},"name":"OnKilledAccount","qualname":"::traits::OnKilledAccount","value":"OnKilledAccount<AccountId>","parent":null,"children":[{"krate":0,"index":3435}],"decl_id":null,"docs":" The account with the given id was reaped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3435},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402056,"byte_end":402073,"line_start":598,"line_end":598,"column_start":5,"column_end":22},"name":"on_killed_account","qualname":"::traits::OnKilledAccount::on_killed_account","value":"pub fn on_killed_account(&AccountId)","parent":{"krate":0,"index":3433},"children":[],"decl_id":null,"docs":" The account with the given id was reaped.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1674},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402217,"byte_end":402227,"line_start":603,"line_end":603,"column_start":11,"column_end":21},"name":"FindAuthor","qualname":"::traits::FindAuthor","value":"FindAuthor<Author>","parent":null,"children":[{"krate":0,"index":1676}],"decl_id":null,"docs":" A trait for finding the author of a block header based on the `PreRuntime` digests contained\n within it.\n","sig":null,"attributes":[{"value":"/ A trait for finding the author of a block header based on the `PreRuntime` digests contained","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402095,"byte_end":402191,"line_start":601,"line_end":601,"column_start":1,"column_end":97}},{"value":"/ within it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402192,"byte_end":402206,"line_start":602,"line_end":602,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1676},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402308,"byte_end":402319,"line_start":605,"line_end":605,"column_start":5,"column_end":16},"name":"find_author","qualname":"::traits::FindAuthor::find_author","value":"pub fn find_author<'a, I>(I) -> Option<Author> where I: 'a + IntoIterator<Item\n= (ConsensusEngineId, &'a [u8])>","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Find the author of a block based on the pre-runtime digests.\n","sig":null,"attributes":[{"value":"/ Find the author of a block based on the pre-runtime digests.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402239,"byte_end":402303,"line_start":604,"line_end":604,"column_start":2,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1684},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402663,"byte_end":402673,"line_start":618,"line_end":618,"column_start":11,"column_end":21},"name":"VerifySeal","qualname":"::traits::VerifySeal","value":"VerifySeal<Header, Author>","parent":null,"children":[{"krate":0,"index":1687}],"decl_id":null,"docs":" A trait for verifying the seal of a header and returning the author.\n","sig":null,"attributes":[{"value":"/ A trait for verifying the seal of a header and returning the author.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402580,"byte_end":402652,"line_start":617,"line_end":617,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402748,"byte_end":402759,"line_start":620,"line_end":620,"column_start":5,"column_end":16},"name":"verify_seal","qualname":"::traits::VerifySeal::verify_seal","value":"pub fn verify_seal(&Header) -> Result<Option<Author>, &'static str>","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" Verify a header and return the author, if any.\n","sig":null,"attributes":[{"value":"/ Verify a header and return the author, if any.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402693,"byte_end":402743,"line_start":619,"line_end":619,"column_start":2,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1688},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402969,"byte_end":402988,"line_start":626,"line_end":626,"column_start":11,"column_end":30},"name":"KeyOwnerProofSystem","qualname":"::traits::KeyOwnerProofSystem","value":"KeyOwnerProofSystem<Key>","parent":null,"children":[{"krate":0,"index":1690},{"krate":0,"index":1691},{"krate":0,"index":1692},{"krate":0,"index":1693}],"decl_id":null,"docs":" Something which can compute and check proofs of\n a historical key owner and return full identification data of that\n key owner.\n","sig":null,"attributes":[{"value":"/ Something which can compute and check proofs of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402821,"byte_end":402872,"line_start":623,"line_end":623,"column_start":1,"column_end":52}},{"value":"/ a historical key owner and return full identification data of that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402873,"byte_end":402943,"line_start":624,"line_end":624,"column_start":1,"column_end":71}},{"value":"/ key owner.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402944,"byte_end":402958,"line_start":625,"line_end":625,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":1690},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403039,"byte_end":403044,"line_start":628,"line_end":628,"column_start":7,"column_end":12},"name":"Proof","qualname":"::traits::KeyOwnerProofSystem::Proof","value":"type Proof: Codec;","parent":{"krate":0,"index":1688},"children":[],"decl_id":null,"docs":" The proof of membership itself.\n","sig":null,"attributes":[{"value":"/ The proof of membership itself.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":402997,"byte_end":403032,"line_start":627,"line_end":627,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":1691},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403126,"byte_end":403145,"line_start":630,"line_end":630,"column_start":7,"column_end":26},"name":"IdentificationTuple","qualname":"::traits::KeyOwnerProofSystem::IdentificationTuple","value":"type IdentificationTuple: Codec;","parent":{"krate":0,"index":1688},"children":[],"decl_id":null,"docs":" The full identification of a key owner and the stash account.\n","sig":null,"attributes":[{"value":"/ The full identification of a key owner and the stash account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403054,"byte_end":403119,"line_start":629,"line_end":629,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403437,"byte_end":403442,"line_start":639,"line_end":639,"column_start":5,"column_end":10},"name":"prove","qualname":"::traits::KeyOwnerProofSystem::prove","value":"pub fn prove(Key) -> Option<Self::Proof>","parent":{"krate":0,"index":1688},"children":[],"decl_id":null,"docs":" Prove membership of a key owner in the current block-state.","sig":null,"attributes":[{"value":"/ Prove membership of a key owner in the current block-state.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403156,"byte_end":403219,"line_start":632,"line_end":632,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403221,"byte_end":403224,"line_start":633,"line_end":633,"column_start":2,"column_end":5}},{"value":"/ This should typically only be called off-chain, since it may be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403226,"byte_end":403293,"line_start":634,"line_end":634,"column_start":2,"column_end":69}},{"value":"/ computationally heavy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403295,"byte_end":403321,"line_start":635,"line_end":635,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403323,"byte_end":403326,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ Returns `Some` iff the key owner referred to by the given `key` is a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403328,"byte_end":403400,"line_start":637,"line_end":637,"column_start":2,"column_end":74}},{"value":"/ member of the current set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403402,"byte_end":403432,"line_start":638,"line_end":638,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1693},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403595,"byte_end":403606,"line_start":643,"line_end":643,"column_start":5,"column_end":16},"name":"check_proof","qualname":"::traits::KeyOwnerProofSystem::check_proof","value":"pub fn check_proof(Key, Self::Proof) -> Option<Self::IdentificationTuple>","parent":{"krate":0,"index":1688},"children":[],"decl_id":null,"docs":" Check a proof of membership on-chain. Return `Some` iff the proof is\n valid and recent enough to check.\n","sig":null,"attributes":[{"value":"/ Check a proof of membership on-chain. Return `Some` iff the proof is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403479,"byte_end":403551,"line_start":641,"line_end":641,"column_start":2,"column_end":74}},{"value":"/ valid and recent enough to check.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":403553,"byte_end":403590,"line_start":642,"line_end":642,"column_start":2,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":1700},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404495,"byte_end":404507,"line_start":671,"line_end":671,"column_start":11,"column_end":23},"name":"OnUnbalanced","qualname":"::traits::OnUnbalanced","value":"OnUnbalanced<Imbalance: TryDrop>","parent":null,"children":[{"krate":0,"index":1702},{"krate":0,"index":1706},{"krate":0,"index":1707}],"decl_id":null,"docs":" Handler for when some currency \"account\" decreased in balance for\n some reason.","sig":null,"attributes":[{"value":"/ Handler for when some currency \"account\" decreased in balance for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404122,"byte_end":404191,"line_start":661,"line_end":661,"column_start":1,"column_end":70}},{"value":"/ some reason.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404192,"byte_end":404208,"line_start":662,"line_end":662,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404209,"byte_end":404212,"line_start":663,"line_end":663,"column_start":1,"column_end":4}},{"value":"/ The only reason at present for an increase would be for validator rewards, but","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404213,"byte_end":404295,"line_start":664,"line_end":664,"column_start":1,"column_end":83}},{"value":"/ there may be other reasons in the future or for other chains.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404296,"byte_end":404361,"line_start":665,"line_end":665,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404362,"byte_end":404365,"line_start":666,"line_end":666,"column_start":1,"column_end":4}},{"value":"/ Reasons for decreases include:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404366,"byte_end":404400,"line_start":667,"line_end":667,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404401,"byte_end":404404,"line_start":668,"line_end":668,"column_start":1,"column_end":4}},{"value":"/ - Someone got slashed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404405,"byte_end":404431,"line_start":669,"line_end":669,"column_start":1,"column_end":27}},{"value":"/ - Someone paid for a transaction to be included.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404432,"byte_end":404484,"line_start":670,"line_end":670,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404745,"byte_end":404759,"line_start":675,"line_end":675,"column_start":5,"column_end":19},"name":"on_unbalanceds","qualname":"::traits::OnUnbalanced::on_unbalanceds","value":"pub fn on_unbalanceds<B, impl Iterator<Item = Imbalance>: Iterator<Item =\n                      Imbalance>>(impl Iterator<Item = Imbalance>) where\nImbalance: crate::traits::Imbalance<B>","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":" Handler for some imbalances. The different imbalances might have different origins or\n meanings, dependent on the context. Will default to simply calling on_unbalanced for all\n of them. Infallible.\n","sig":null,"attributes":[{"value":"/ Handler for some imbalances. The different imbalances might have different origins or","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404531,"byte_end":404620,"line_start":672,"line_end":672,"column_start":2,"column_end":91}},{"value":"/ meanings, dependent on the context. Will default to simply calling on_unbalanced for all","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404622,"byte_end":404714,"line_start":673,"line_end":673,"column_start":2,"column_end":94}},{"value":"/ of them. Infallible.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404716,"byte_end":404740,"line_start":674,"line_end":674,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404977,"byte_end":404990,"line_start":680,"line_end":680,"column_start":5,"column_end":18},"name":"on_unbalanced","qualname":"::traits::OnUnbalanced::on_unbalanced","value":"pub fn on_unbalanced(Imbalance)","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":" Handler for some imbalance. Infallible.\n","sig":null,"attributes":[{"value":"/ Handler for some imbalance. Infallible.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":404929,"byte_end":404972,"line_start":679,"line_end":679,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1707},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405197,"byte_end":405218,"line_start":686,"line_end":686,"column_start":5,"column_end":26},"name":"on_nonzero_unbalanced","qualname":"::traits::OnUnbalanced::on_nonzero_unbalanced","value":"pub fn on_nonzero_unbalanced(Imbalance)","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":" Actually handle a non-zero imbalance. You probably want to implement this rather than\n `on_unbalanced`.\n","sig":null,"attributes":[{"value":"/ Actually handle a non-zero imbalance. You probably want to implement this rather than","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405081,"byte_end":405170,"line_start":684,"line_end":684,"column_start":2,"column_end":91}},{"value":"/ `on_unbalanced`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405172,"byte_end":405192,"line_start":685,"line_end":685,"column_start":2,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3995},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405708,"byte_end":405717,"line_start":698,"line_end":698,"column_start":2,"column_end":11},"name":"KeepAlive","qualname":"::traits::ExistenceRequirement::KeepAlive","value":"ExistenceRequirement::KeepAlive","parent":{"krate":0,"index":3994},"children":[],"decl_id":null,"docs":" Operation must not result in the account going out of existence.","sig":null,"attributes":[{"value":"/ Operation must not result in the account going out of existence.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405463,"byte_end":405531,"line_start":694,"line_end":694,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405533,"byte_end":405536,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ Note this implies that if the account never existed in the first place, then the operation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405538,"byte_end":405632,"line_start":696,"line_end":696,"column_start":2,"column_end":96}},{"value":"/ may legitimately leave the account unchanged and still non-existent.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405634,"byte_end":405706,"line_start":697,"line_end":697,"column_start":2,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3997},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405781,"byte_end":405791,"line_start":700,"line_end":700,"column_start":2,"column_end":12},"name":"AllowDeath","qualname":"::traits::ExistenceRequirement::AllowDeath","value":"ExistenceRequirement::AllowDeath","parent":{"krate":0,"index":3994},"children":[],"decl_id":null,"docs":" Operation may result in account going out of existence.\n","sig":null,"attributes":[{"value":"/ Operation may result in account going out of existence.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405720,"byte_end":405779,"line_start":699,"line_end":699,"column_start":2,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":3994},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405439,"byte_end":405459,"line_start":693,"line_end":693,"column_start":10,"column_end":30},"name":"ExistenceRequirement","qualname":"::traits::ExistenceRequirement","value":"pub enum ExistenceRequirement {\n\n    /// Operation must not result in the account going out of existence.\n    ///\n    /// Note this implies that if the account never existed in the first place, then the operation\n    /// may legitimately leave the account unchanged and still non-existent.\n    KeepAlive,\n\n    /// Operation may result in account going out of existence.\n    AllowDeath,\n}","parent":null,"children":[{"krate":0,"index":3995},{"krate":0,"index":3997}],"decl_id":null,"docs":" Simple boolean for whether an account needs to be kept in existence.\n","sig":null,"attributes":[{"value":"/ Simple boolean for whether an account needs to be kept in existence.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405319,"byte_end":405391,"line_start":691,"line_end":691,"column_start":1,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":1710},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405900,"byte_end":405907,"line_start":704,"line_end":704,"column_start":11,"column_end":18},"name":"TryDrop","qualname":"::traits::TryDrop","value":"TryDrop: Sized","parent":null,"children":[{"krate":0,"index":1711}],"decl_id":null,"docs":" A type for which some values make sense to be able to drop without further consideration.\n","sig":null,"attributes":[{"value":"/ A type for which some values make sense to be able to drop without further consideration.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405796,"byte_end":405889,"line_start":703,"line_end":703,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1711},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406003,"byte_end":406011,"line_start":706,"line_end":706,"column_start":5,"column_end":13},"name":"try_drop","qualname":"::traits::TryDrop::try_drop","value":"pub fn try_drop(Self) -> Result<(), Self>","parent":{"krate":0,"index":1710},"children":[],"decl_id":null,"docs":" Drop an instance cleanly. Only works if its value represents \"no-operation\".\n","sig":null,"attributes":[{"value":"/ Drop an instance cleanly. Only works if its value represents \"no-operation\".","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405918,"byte_end":405998,"line_start":705,"line_end":705,"column_start":2,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":1712},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407542,"byte_end":407551,"line_start":738,"line_end":738,"column_start":11,"column_end":20},"name":"Imbalance","qualname":"::traits::Imbalance","value":"Imbalance<Balance>: Sized + TryDrop","parent":null,"children":[{"krate":0,"index":1714},{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729}],"decl_id":null,"docs":" A trait for a not-quite Linear Type that tracks an imbalance.","sig":null,"attributes":[{"value":"/ A trait for a not-quite Linear Type that tracks an imbalance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406042,"byte_end":406107,"line_start":709,"line_end":709,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406108,"byte_end":406111,"line_start":710,"line_end":710,"column_start":1,"column_end":4}},{"value":"/ Functions that alter account balances return an object of this trait to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406112,"byte_end":406187,"line_start":711,"line_end":711,"column_start":1,"column_end":76}},{"value":"/ express how much account balances have been altered in aggregate. If","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406188,"byte_end":406260,"line_start":712,"line_end":712,"column_start":1,"column_end":73}},{"value":"/ dropped, the currency system will take some default steps to deal with","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406261,"byte_end":406335,"line_start":713,"line_end":713,"column_start":1,"column_end":75}},{"value":"/ the imbalance (`balances` module simply reduces or increases its","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406336,"byte_end":406404,"line_start":714,"line_end":714,"column_start":1,"column_end":69}},{"value":"/ total issuance). Your module should generally handle it in some way,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406405,"byte_end":406477,"line_start":715,"line_end":715,"column_start":1,"column_end":73}},{"value":"/ good practice is to do so in a configurable manner using an","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406478,"byte_end":406541,"line_start":716,"line_end":716,"column_start":1,"column_end":64}},{"value":"/ `OnUnbalanced` type for each situation in which your module needs to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406542,"byte_end":406614,"line_start":717,"line_end":717,"column_start":1,"column_end":73}},{"value":"/ handle an imbalance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406615,"byte_end":406639,"line_start":718,"line_end":718,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406640,"byte_end":406643,"line_start":719,"line_end":719,"column_start":1,"column_end":4}},{"value":"/ Imbalances can either be Positive (funds were added somewhere without","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406644,"byte_end":406717,"line_start":720,"line_end":720,"column_start":1,"column_end":74}},{"value":"/ being subtracted elsewhere - e.g. a reward) or Negative (funds deducted","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406718,"byte_end":406793,"line_start":721,"line_end":721,"column_start":1,"column_end":76}},{"value":"/ somewhere without an equal and opposite addition - e.g. a slash or","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406794,"byte_end":406864,"line_start":722,"line_end":722,"column_start":1,"column_end":71}},{"value":"/ system fee payment).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406865,"byte_end":406889,"line_start":723,"line_end":723,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406890,"byte_end":406893,"line_start":724,"line_end":724,"column_start":1,"column_end":4}},{"value":"/ Since they are unsigned, the actual type is always Positive or Negative.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406894,"byte_end":406970,"line_start":725,"line_end":725,"column_start":1,"column_end":77}},{"value":"/ The trait makes no distinction except to define the `Opposite` type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":406971,"byte_end":407043,"line_start":726,"line_end":726,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407044,"byte_end":407047,"line_start":727,"line_end":727,"column_start":1,"column_end":4}},{"value":"/ New instances of zero value can be created (`zero`) and destroyed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407048,"byte_end":407117,"line_start":728,"line_end":728,"column_start":1,"column_end":70}},{"value":"/ (`drop_zero`).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407118,"byte_end":407136,"line_start":729,"line_end":729,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407137,"byte_end":407140,"line_start":730,"line_end":730,"column_start":1,"column_end":4}},{"value":"/ Existing instances can be `split` and merged either consuming `self` with","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407141,"byte_end":407218,"line_start":731,"line_end":731,"column_start":1,"column_end":78}},{"value":"/ `merge` or mutating `self` with `subsume`. If the target is an `Option`,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407219,"byte_end":407295,"line_start":732,"line_end":732,"column_start":1,"column_end":77}},{"value":"/ then `maybe_merge` and `maybe_subsume` might work better. Instances can","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407296,"byte_end":407371,"line_start":733,"line_end":733,"column_start":1,"column_end":76}},{"value":"/ also be `offset` with an `Opposite` that is less than or equal to in value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407372,"byte_end":407451,"line_start":734,"line_end":734,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407452,"byte_end":407455,"line_start":735,"line_end":735,"column_start":1,"column_end":4}},{"value":"/ You can always retrieve the raw balance value using `peek`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407456,"byte_end":407519,"line_start":736,"line_end":736,"column_start":1,"column_end":64}},{"value":"must_use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407520,"byte_end":407531,"line_start":737,"line_end":737,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":1714},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407643,"byte_end":407651,"line_start":740,"line_end":740,"column_start":7,"column_end":15},"name":"Opposite","qualname":"::traits::Imbalance::Opposite","value":"type Opposite: Imbalance<Balance>;","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" The oppositely imbalanced type. They come in pairs.\n","sig":null,"attributes":[{"value":"/ The oppositely imbalanced type. They come in pairs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407581,"byte_end":407636,"line_start":739,"line_end":739,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1715},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407738,"byte_end":407742,"line_start":743,"line_end":743,"column_start":5,"column_end":9},"name":"zero","qualname":"::traits::Imbalance::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" The zero imbalance. Can be destroyed with `drop_zero`.\n","sig":null,"attributes":[{"value":"/ The zero imbalance. Can be destroyed with `drop_zero`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407675,"byte_end":407733,"line_start":742,"line_end":742,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407832,"byte_end":407841,"line_start":746,"line_end":746,"column_start":5,"column_end":14},"name":"drop_zero","qualname":"::traits::Imbalance::drop_zero","value":"pub fn drop_zero(Self) -> Result<(), Self>","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Drop an instance cleanly. Only works if its `self.value()` is zero.\n","sig":null,"attributes":[{"value":"/ Drop an instance cleanly. Only works if its `self.value()` is zero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407756,"byte_end":407827,"line_start":745,"line_end":745,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1717},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408022,"byte_end":408027,"line_start":750,"line_end":750,"column_start":5,"column_end":10},"name":"split","qualname":"::traits::Imbalance::split","value":"pub fn split(Self, Balance) -> (Self, Self)","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Consume `self` and return two independent instances; the first\n is guaranteed to be at most `amount` and the second will be the remainder.\n","sig":null,"attributes":[{"value":"/ Consume `self` and return two independent instances; the first","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407871,"byte_end":407937,"line_start":748,"line_end":748,"column_start":2,"column_end":68}},{"value":"/ is guaranteed to be at most `amount` and the second will be the remainder.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407939,"byte_end":408017,"line_start":749,"line_end":749,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408388,"byte_end":408394,"line_start":757,"line_end":757,"column_start":5,"column_end":11},"name":"ration","qualname":"::traits::Imbalance::ration","value":"pub fn ration(Self, u32, u32) -> (Self, Self) where Balance: From<u32> +\nSaturating + Div<Output = Balance>","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Consume `self` and return two independent instances; the amounts returned will be in\n approximately the same ratio as `first`:`second`.","sig":null,"attributes":[{"value":"/ Consume `self` and return two independent instances; the amounts returned will be in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408070,"byte_end":408158,"line_start":752,"line_end":752,"column_start":2,"column_end":90}},{"value":"/ approximately the same ratio as `first`:`second`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408160,"byte_end":408213,"line_start":753,"line_end":753,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408215,"byte_end":408218,"line_start":754,"line_end":754,"column_start":2,"column_end":5}},{"value":"/ NOTE: This requires up to `first + second` room for a multiply, and `first + second` should","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408220,"byte_end":408315,"line_start":755,"line_end":755,"column_start":2,"column_end":97}},{"value":"/ fit into a `u32`. Overflow will safely saturate in both cases.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408317,"byte_end":408383,"line_start":756,"line_end":756,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1719},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408857,"byte_end":408868,"line_start":769,"line_end":769,"column_start":5,"column_end":16},"name":"split_merge","qualname":"::traits::Imbalance::split_merge","value":"pub fn split_merge(Self, Balance, (Self, Self)) -> (Self, Self)","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the first component's balance,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the first component's balance,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408656,"byte_end":408742,"line_start":765,"line_end":765,"column_start":2,"column_end":88}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408744,"byte_end":408792,"line_start":766,"line_end":766,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408794,"byte_end":408797,"line_start":767,"line_end":767,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":408799,"byte_end":408852,"line_start":768,"line_end":768,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409211,"byte_end":409223,"line_start":778,"line_end":778,"column_start":5,"column_end":17},"name":"ration_merge","qualname":"::traits::Imbalance::ration_merge","value":"pub fn ration_merge(Self, u32, u32, (Self, Self)) -> (Self, Self) where\nBalance: From<u32> + Saturating + Div<Output = Balance>","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the ratio `first`:`second`,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the ratio `first`:`second`,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409013,"byte_end":409096,"line_start":774,"line_end":774,"column_start":2,"column_end":85}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409098,"byte_end":409146,"line_start":775,"line_end":775,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409148,"byte_end":409151,"line_start":776,"line_end":776,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409153,"byte_end":409206,"line_start":777,"line_end":777,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409656,"byte_end":409672,"line_start":789,"line_end":789,"column_start":5,"column_end":21},"name":"split_merge_into","qualname":"::traits::Imbalance::split_merge_into","value":"pub fn split_merge_into(Self, Balance, &mut (Self, Self))","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the first component's balance,\n element-wise into two pre-existing Imbalance refs.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the first component's balance,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409447,"byte_end":409533,"line_start":785,"line_end":785,"column_start":2,"column_end":88}},{"value":"/ element-wise into two pre-existing Imbalance refs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409535,"byte_end":409589,"line_start":786,"line_end":786,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409591,"byte_end":409594,"line_start":787,"line_end":787,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `subsume`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409596,"byte_end":409651,"line_start":788,"line_end":788,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410009,"byte_end":410026,"line_start":799,"line_end":799,"column_start":5,"column_end":22},"name":"ration_merge_into","qualname":"::traits::Imbalance::ration_merge_into","value":"pub fn ration_merge_into(Self, u32, u32, &mut (Self, Self)) where\nBalance: From<u32> + Saturating + Div<Output = Balance>","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the ratio `first`:`second`,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the ratio `first`:`second`,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409811,"byte_end":409894,"line_start":795,"line_end":795,"column_start":2,"column_end":85}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409896,"byte_end":409944,"line_start":796,"line_end":796,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409946,"byte_end":409949,"line_start":797,"line_end":797,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":409951,"byte_end":410004,"line_start":798,"line_end":798,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1723},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410332,"byte_end":410337,"line_start":809,"line_end":809,"column_start":5,"column_end":10},"name":"merge","qualname":"::traits::Imbalance::merge","value":"pub fn merge(Self, Self) -> Self","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Consume `self` and an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and an `other` to return a new instance that combines","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410244,"byte_end":410316,"line_start":807,"line_end":807,"column_start":2,"column_end":74}},{"value":"/ both.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410318,"byte_end":410327,"line_start":808,"line_end":808,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410489,"byte_end":410499,"line_start":813,"line_end":813,"column_start":5,"column_end":15},"name":"merge_into","qualname":"::traits::Imbalance::merge_into","value":"pub fn merge_into(Self, &mut Self)","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Consume self to mutate `other` so that it combines both. Just like `subsume`, only with\n reversed arguments.\n","sig":null,"attributes":[{"value":"/ Consume self to mutate `other` so that it combines both. Just like `subsume`, only with","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410368,"byte_end":410459,"line_start":811,"line_end":811,"column_start":2,"column_end":93}},{"value":"/ reversed arguments.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410461,"byte_end":410484,"line_start":812,"line_end":812,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410647,"byte_end":410658,"line_start":819,"line_end":819,"column_start":5,"column_end":16},"name":"maybe_merge","qualname":"::traits::Imbalance::maybe_merge","value":"pub fn maybe_merge(Self, Option<Self>) -> Self","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Consume `self` and maybe an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and maybe an `other` to return a new instance that combines","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410553,"byte_end":410631,"line_start":817,"line_end":817,"column_start":2,"column_end":80}},{"value":"/ both.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410633,"byte_end":410642,"line_start":818,"line_end":818,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410857,"byte_end":410864,"line_start":829,"line_end":829,"column_start":5,"column_end":12},"name":"subsume","qualname":"::traits::Imbalance::subsume","value":"pub fn subsume(&mut Self, Self)","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Consume an `other` to mutate `self` into a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume an `other` to mutate `self` into a new instance that combines","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410768,"byte_end":410841,"line_start":827,"line_end":827,"column_start":2,"column_end":75}},{"value":"/ both.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410843,"byte_end":410852,"line_start":828,"line_end":828,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1727},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410987,"byte_end":411000,"line_start":833,"line_end":833,"column_start":5,"column_end":18},"name":"maybe_subsume","qualname":"::traits::Imbalance::maybe_subsume","value":"pub fn maybe_subsume(&mut Self, Option<Self>)","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Maybe consume an `other` to mutate `self` into a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Maybe consume an `other` to mutate `self` into a new instance that combines","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410892,"byte_end":410971,"line_start":831,"line_end":831,"column_start":2,"column_end":81}},{"value":"/ both.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":410973,"byte_end":410982,"line_start":832,"line_end":832,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411447,"byte_end":411453,"line_start":846,"line_end":846,"column_start":5,"column_end":11},"name":"offset","qualname":"::traits::Imbalance::offset","value":"pub fn offset(Self, Self::Opposite) -> Result<Self, Self::Opposite>","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" Consume self and along with an opposite counterpart to return\n a combined result.","sig":null,"attributes":[{"value":"/ Consume self and along with an opposite counterpart to return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411090,"byte_end":411155,"line_start":839,"line_end":839,"column_start":2,"column_end":67}},{"value":"/ a combined result.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411157,"byte_end":411179,"line_start":840,"line_end":840,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411181,"byte_end":411184,"line_start":841,"line_end":841,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` along with a new instance of `Self` if this instance has a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411186,"byte_end":411261,"line_start":842,"line_end":842,"column_start":2,"column_end":77}},{"value":"/ greater value than the `other`. Otherwise returns `Err` with an instance of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411263,"byte_end":411342,"line_start":843,"line_end":843,"column_start":2,"column_end":81}},{"value":"/ the `Opposite`. In both cases the value represents the combination of `self`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411344,"byte_end":411424,"line_start":844,"line_end":844,"column_start":2,"column_end":82}},{"value":"/ and `other`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411426,"byte_end":411442,"line_start":845,"line_end":845,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1729},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411549,"byte_end":411553,"line_start":849,"line_end":849,"column_start":5,"column_end":9},"name":"peek","qualname":"::traits::Imbalance::peek","value":"pub fn peek(&Self) -> Balance","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" The raw value of self.\n","sig":null,"attributes":[{"value":"/ The raw value of self.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411518,"byte_end":411544,"line_start":848,"line_end":848,"column_start":2,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1733},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411742,"byte_end":411750,"line_start":855,"line_end":855,"column_start":2,"column_end":10},"name":"Positive","qualname":"::traits::SignedImbalance::Positive","value":"SignedImbalance::Positive(P)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" A positive imbalance (funds have been created but none destroyed).\n","sig":null,"attributes":[{"value":"/ A positive imbalance (funds have been created but none destroyed).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411670,"byte_end":411740,"line_start":854,"line_end":854,"column_start":2,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1736},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411828,"byte_end":411836,"line_start":857,"line_end":857,"column_start":2,"column_end":10},"name":"Negative","qualname":"::traits::SignedImbalance::Negative","value":"SignedImbalance::Negative(P::Opposite)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" A negative imbalance (funds have been destroyed but none created).\n","sig":null,"attributes":[{"value":"/ A negative imbalance (funds have been destroyed but none created).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411756,"byte_end":411826,"line_start":856,"line_end":856,"column_start":2,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":1730},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411632,"byte_end":411647,"line_start":853,"line_end":853,"column_start":10,"column_end":25},"name":"SignedImbalance","qualname":"::traits::SignedImbalance","value":"pub enum SignedImbalance<B, P: Imbalance<B>> {\n\n    /// A positive imbalance (funds have been created but none destroyed).\n    Positive(P),\n\n    /// A negative imbalance (funds have been destroyed but none created).\n    Negative(P::Opposite),\n}","parent":null,"children":[{"krate":0,"index":1733},{"krate":0,"index":1736}],"decl_id":null,"docs":" Either a positive or a negative imbalance.\n","sig":null,"attributes":[{"value":"/ Either a positive or a negative imbalance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":411576,"byte_end":411622,"line_start":852,"line_end":852,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1743},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":412045,"byte_end":412049,"line_start":865,"line_end":865,"column_start":9,"column_end":13},"name":"zero","qualname":"<SignedImbalance<B, P>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":412113,"byte_end":412122,"line_start":869,"line_end":869,"column_start":9,"column_end":18},"name":"drop_zero","qualname":"<SignedImbalance<B, P>>::drop_zero","value":"pub fn drop_zero(Self) -> Result<(), Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1745},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":412437,"byte_end":412442,"line_start":878,"line_end":878,"column_start":9,"column_end":14},"name":"merge","qualname":"<SignedImbalance<B, P>>::merge","value":"pub fn merge(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Consume `self` and an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and an `other` to return a new instance that combines","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":412345,"byte_end":412417,"line_start":876,"line_end":876,"column_start":2,"column_end":74}},{"value":"/ both.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":412419,"byte_end":412428,"line_start":877,"line_end":877,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1746},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":413150,"byte_end":413162,"line_start":896,"line_end":896,"column_start":12,"column_end":24},"name":"SplitTwoWays","qualname":"::traits::SplitTwoWays","value":"","parent":null,"children":[],"decl_id":null,"docs":" Split an unbalanced amount two ways between a common divisor.\n","sig":null,"attributes":[{"value":"/ Split an unbalanced amount two ways between a common divisor.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":413073,"byte_end":413138,"line_start":895,"line_end":895,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1763},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":413880,"byte_end":413888,"line_start":924,"line_end":924,"column_start":11,"column_end":19},"name":"Currency","qualname":"::traits::Currency","value":"Currency<AccountId>","parent":null,"children":[{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785}],"decl_id":null,"docs":" Abstraction over a fungible assets system.\n","sig":null,"attributes":[{"value":"/ Abstraction over a fungible assets system.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":413823,"byte_end":413869,"line_start":923,"line_end":923,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1765},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":413940,"byte_end":413947,"line_start":926,"line_end":926,"column_start":7,"column_end":14},"name":"Balance","qualname":"::traits::Currency::Balance","value":"type Balance: AtLeast32BitUnsigned + FullCodec + Copy + MaybeSerializeDeserialize + Debug +\n\t\tDefault;","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" The balance of an account.\n","sig":null,"attributes":[{"value":"/ The balance of an account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":413903,"byte_end":413933,"line_start":925,"line_end":925,"column_start":2,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":1766},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414201,"byte_end":414218,"line_start":931,"line_end":931,"column_start":7,"column_end":24},"name":"PositiveImbalance","qualname":"::traits::Currency::PositiveImbalance","value":"type PositiveImbalance: Imbalance<Self::Balance, Opposite=Self::NegativeImbalance>;","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" The opaque token type for an imbalance. This is returned by unbalanced operations\n and must be dealt with. It may be dropped but cannot be cloned.\n","sig":null,"attributes":[{"value":"/ The opaque token type for an imbalance. This is returned by unbalanced operations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414040,"byte_end":414125,"line_start":929,"line_end":929,"column_start":2,"column_end":87}},{"value":"/ and must be dealt with. It may be dropped but cannot be cloned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414127,"byte_end":414194,"line_start":930,"line_end":930,"column_start":2,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1767},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414443,"byte_end":414460,"line_start":935,"line_end":935,"column_start":7,"column_end":24},"name":"NegativeImbalance","qualname":"::traits::Currency::NegativeImbalance","value":"type NegativeImbalance: Imbalance<Self::Balance, Opposite=Self::PositiveImbalance>;","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" The opaque token type for an imbalance. This is returned by unbalanced operations\n and must be dealt with. It may be dropped but cannot be cloned.\n","sig":null,"attributes":[{"value":"/ The opaque token type for an imbalance. This is returned by unbalanced operations","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414282,"byte_end":414367,"line_start":933,"line_end":933,"column_start":2,"column_end":87}},{"value":"/ and must be dealt with. It may be dropped but cannot be cloned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414369,"byte_end":414436,"line_start":934,"line_end":934,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1768},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414586,"byte_end":414599,"line_start":940,"line_end":940,"column_start":5,"column_end":18},"name":"total_balance","qualname":"::traits::Currency::total_balance","value":"pub fn total_balance(&AccountId) -> Self::Balance","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" The combined balance of `who`.\n","sig":null,"attributes":[{"value":"/ The combined balance of `who`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414547,"byte_end":414581,"line_start":939,"line_end":939,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414827,"byte_end":414836,"line_start":944,"line_end":944,"column_start":5,"column_end":14},"name":"can_slash","qualname":"::traits::Currency::can_slash","value":"pub fn can_slash(&AccountId, Self::Balance) -> bool","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Same result as `slash(who, value)` (but without the side-effects) assuming there are no\n balance changes in the meantime and only the reserved balance is not taken into account.\n","sig":null,"attributes":[{"value":"/ Same result as `slash(who, value)` (but without the side-effects) assuming there are no","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414637,"byte_end":414728,"line_start":942,"line_end":942,"column_start":2,"column_end":93}},{"value":"/ balance changes in the meantime and only the reserved balance is not taken into account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414730,"byte_end":414822,"line_start":943,"line_end":943,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1770},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414939,"byte_end":414953,"line_start":947,"line_end":947,"column_start":5,"column_end":19},"name":"total_issuance","qualname":"::traits::Currency::total_issuance","value":"pub fn total_issuance() -> Self::Balance","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" The total amount of issuance in the system.\n","sig":null,"attributes":[{"value":"/ The total amount of issuance in the system.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414887,"byte_end":414934,"line_start":946,"line_end":946,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1771},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415106,"byte_end":415121,"line_start":951,"line_end":951,"column_start":5,"column_end":20},"name":"minimum_balance","qualname":"::traits::Currency::minimum_balance","value":"pub fn minimum_balance() -> Self::Balance","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" The minimum balance any single account may have. This is equivalent to the `Balances` module's\n `ExistentialDeposit`.\n","sig":null,"attributes":[{"value":"/ The minimum balance any single account may have. This is equivalent to the `Balances` module's","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":414976,"byte_end":415074,"line_start":949,"line_end":949,"column_start":2,"column_end":100}},{"value":"/ `ExistentialDeposit`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415076,"byte_end":415101,"line_start":950,"line_end":950,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415458,"byte_end":415462,"line_start":958,"line_end":958,"column_start":5,"column_end":9},"name":"burn","qualname":"::traits::Currency::burn","value":"pub fn burn(Self::Balance) -> Self::PositiveImbalance","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Reduce the total issuance by `amount` and return the according imbalance. The imbalance will\n typically be used to reduce an account by the same amount with e.g. `settle`.","sig":null,"attributes":[{"value":"/ Reduce the total issuance by `amount` and return the according imbalance. The imbalance will","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415144,"byte_end":415240,"line_start":953,"line_end":953,"column_start":2,"column_end":98}},{"value":"/ typically be used to reduce an account by the same amount with e.g. `settle`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415242,"byte_end":415323,"line_start":954,"line_end":954,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415325,"byte_end":415328,"line_start":955,"line_end":955,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is burnt, for example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415330,"byte_end":415422,"line_start":956,"line_end":956,"column_start":2,"column_end":94}},{"value":"/ in the case of underflow.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415424,"byte_end":415453,"line_start":957,"line_end":957,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415876,"byte_end":415881,"line_start":966,"line_end":966,"column_start":5,"column_end":10},"name":"issue","qualname":"::traits::Currency::issue","value":"pub fn issue(Self::Balance) -> Self::NegativeImbalance","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Increase the total issuance by `amount` and return the according imbalance. The imbalance\n will typically be used to increase an account by the same amount with e.g.\n `resolve_into_existing` or `resolve_creating`.","sig":null,"attributes":[{"value":"/ Increase the total issuance by `amount` and return the according imbalance. The imbalance","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415516,"byte_end":415609,"line_start":960,"line_end":960,"column_start":2,"column_end":95}},{"value":"/ will typically be used to increase an account by the same amount with e.g.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415611,"byte_end":415689,"line_start":961,"line_end":961,"column_start":2,"column_end":80}},{"value":"/ `resolve_into_existing` or `resolve_creating`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415691,"byte_end":415741,"line_start":962,"line_end":962,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415743,"byte_end":415746,"line_start":963,"line_end":963,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is issued, for example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415748,"byte_end":415841,"line_start":964,"line_end":964,"column_start":2,"column_end":95}},{"value":"/ in the case of overflow.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415843,"byte_end":415871,"line_start":965,"line_end":965,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416125,"byte_end":416129,"line_start":972,"line_end":972,"column_start":5,"column_end":9},"name":"pair","qualname":"::traits::Currency::pair","value":"pub fn pair(Self::Balance)\n-> (Self::PositiveImbalance, Self::NegativeImbalance)","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Produce a pair of imbalances that cancel each other out exactly.","sig":null,"attributes":[{"value":"/ Produce a pair of imbalances that cancel each other out exactly.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":415935,"byte_end":416003,"line_start":968,"line_end":968,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416005,"byte_end":416008,"line_start":969,"line_end":969,"column_start":2,"column_end":5}},{"value":"/ This is just the same as burning and issuing the same amount and has no effect on the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416010,"byte_end":416099,"line_start":970,"line_end":970,"column_start":2,"column_end":91}},{"value":"/ total issuance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416101,"byte_end":416120,"line_start":971,"line_end":971,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416804,"byte_end":416816,"line_start":985,"line_end":985,"column_start":5,"column_end":17},"name":"free_balance","qualname":"::traits::Currency::free_balance","value":"pub fn free_balance(&AccountId) -> Self::Balance","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" The 'free' balance of a given account.","sig":null,"attributes":[{"value":"/ The 'free' balance of a given account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416266,"byte_end":416308,"line_start":976,"line_end":976,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416310,"byte_end":416313,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ This is the only balance that matters in terms of most operations on tokens. It alone","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416315,"byte_end":416404,"line_start":978,"line_end":978,"column_start":2,"column_end":91}},{"value":"/ is used to determine the balance when in the contract execution environment. When this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416406,"byte_end":416496,"line_start":979,"line_end":979,"column_start":2,"column_end":92}},{"value":"/ balance falls below the value of `ExistentialDeposit`, then the 'current account' is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416498,"byte_end":416586,"line_start":980,"line_end":980,"column_start":2,"column_end":90}},{"value":"/ deleted: specifically `FreeBalance`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416588,"byte_end":416628,"line_start":981,"line_end":981,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416630,"byte_end":416633,"line_start":982,"line_end":982,"column_start":2,"column_end":5}},{"value":"/ `system::AccountNonce` is also deleted if `ReservedBalance` is also zero (it also gets","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416635,"byte_end":416725,"line_start":983,"line_end":983,"column_start":2,"column_end":92}},{"value":"/ collapsed to zero if it ever becomes less than `ExistentialDeposit`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416727,"byte_end":416799,"line_start":984,"line_end":984,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417069,"byte_end":417088,"line_start":991,"line_end":991,"column_start":5,"column_end":24},"name":"ensure_can_withdraw","qualname":"::traits::Currency::ensure_can_withdraw","value":"pub fn ensure_can_withdraw(&AccountId, Self::Balance, WithdrawReasons,\n                           Self::Balance) -> DispatchResult","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Returns `Ok` iff the account is able to make a withdrawal of the given amount\n for the given reason. Basically, it's just a dry-run of `withdraw`.","sig":null,"attributes":[{"value":"/ Returns `Ok` iff the account is able to make a withdrawal of the given amount","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416854,"byte_end":416935,"line_start":987,"line_end":987,"column_start":2,"column_end":83}},{"value":"/ for the given reason. Basically, it's just a dry-run of `withdraw`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":416937,"byte_end":417008,"line_start":988,"line_end":988,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417010,"byte_end":417013,"line_start":989,"line_end":989,"column_start":2,"column_end":5}},{"value":"/ `Err(...)` with the reason why not otherwise.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417015,"byte_end":417064,"line_start":990,"line_end":990,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417447,"byte_end":417455,"line_start":1004,"line_end":1004,"column_start":5,"column_end":13},"name":"transfer","qualname":"::traits::Currency::transfer","value":"pub fn transfer(&AccountId, &AccountId, Self::Balance, ExistenceRequirement)\n-> DispatchResult","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Transfer some liquid free balance to another staker.","sig":null,"attributes":[{"value":"/ Transfer some liquid free balance to another staker.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417250,"byte_end":417306,"line_start":1000,"line_end":1000,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417308,"byte_end":417311,"line_start":1001,"line_end":1001,"column_start":2,"column_end":5}},{"value":"/ This is a very high-level function. It will ensure all appropriate fees are paid","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417313,"byte_end":417397,"line_start":1002,"line_end":1002,"column_start":2,"column_end":86}},{"value":"/ and no imbalance in the system remains.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417399,"byte_end":417442,"line_start":1003,"line_end":1003,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417960,"byte_end":417965,"line_start":1018,"line_end":1018,"column_start":5,"column_end":10},"name":"slash","qualname":"::traits::Currency::slash","value":"pub fn slash(&AccountId, Self::Balance)\n-> (Self::NegativeImbalance, Self::Balance)","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Deducts up to `value` from the combined balance of `who`, preferring to deduct from the\n free balance. This function cannot fail.","sig":null,"attributes":[{"value":"/ Deducts up to `value` from the combined balance of `who`, preferring to deduct from the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417594,"byte_end":417685,"line_start":1011,"line_end":1011,"column_start":2,"column_end":93}},{"value":"/ free balance. This function cannot fail.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417687,"byte_end":417731,"line_start":1012,"line_end":1012,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417733,"byte_end":417736,"line_start":1013,"line_end":1013,"column_start":2,"column_end":5}},{"value":"/ The resulting imbalance is the first item of the tuple returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417738,"byte_end":417806,"line_start":1014,"line_end":1014,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417808,"byte_end":417811,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If this is less than `value`,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417813,"byte_end":417904,"line_start":1016,"line_end":1016,"column_start":2,"column_end":93}},{"value":"/ then a non-zero second item will be returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":417906,"byte_end":417955,"line_start":1017,"line_end":1017,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418182,"byte_end":418203,"line_start":1026,"line_end":1026,"column_start":5,"column_end":26},"name":"deposit_into_existing","qualname":"::traits::Currency::deposit_into_existing","value":"pub fn deposit_into_existing(&AccountId, Self::Balance)\n-> result::Result<Self::PositiveImbalance, DispatchError>","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Mints `value` to the free balance of `who`.","sig":null,"attributes":[{"value":"/ Mints `value` to the free balance of `who`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418059,"byte_end":418106,"line_start":1023,"line_end":1023,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418108,"byte_end":418111,"line_start":1024,"line_end":1024,"column_start":2,"column_end":5}},{"value":"/ If `who` doesn't exist, nothing is done and an Err returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418113,"byte_end":418177,"line_start":1025,"line_end":1025,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1780},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418420,"byte_end":418441,"line_start":1033,"line_end":1033,"column_start":5,"column_end":26},"name":"resolve_into_existing","qualname":"::traits::Currency::resolve_into_existing","value":"pub fn resolve_into_existing(&AccountId, Self::NegativeImbalance)\n-> result::Result<(), Self::NegativeImbalance>","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on\n success.\n","sig":null,"attributes":[{"value":"/ Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418311,"byte_end":418401,"line_start":1031,"line_end":1031,"column_start":2,"column_end":92}},{"value":"/ success.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418403,"byte_end":418415,"line_start":1032,"line_end":1032,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418818,"byte_end":418834,"line_start":1047,"line_end":1047,"column_start":5,"column_end":21},"name":"deposit_creating","qualname":"::traits::Currency::deposit_creating","value":"pub fn deposit_creating(&AccountId, Self::Balance) -> Self::PositiveImbalance","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Adds up to `value` to the free balance of `who`. If `who` doesn't exist, it is created.","sig":null,"attributes":[{"value":"/ Adds up to `value` to the free balance of `who`. If `who` doesn't exist, it is created.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418700,"byte_end":418791,"line_start":1044,"line_end":1044,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418793,"byte_end":418796,"line_start":1045,"line_end":1045,"column_start":2,"column_end":5}},{"value":"/ Infallible.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418798,"byte_end":418813,"line_start":1046,"line_end":1046,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419021,"byte_end":419037,"line_start":1054,"line_end":1054,"column_start":5,"column_end":21},"name":"resolve_creating","qualname":"::traits::Currency::resolve_creating","value":"pub fn resolve_creating(&AccountId, Self::NegativeImbalance)","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on\n success.\n","sig":null,"attributes":[{"value":"/ Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":418912,"byte_end":419002,"line_start":1052,"line_end":1052,"column_start":2,"column_end":92}},{"value":"/ success.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419004,"byte_end":419016,"line_start":1053,"line_end":1053,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419607,"byte_end":419615,"line_start":1070,"line_end":1070,"column_start":5,"column_end":13},"name":"withdraw","qualname":"::traits::Currency::withdraw","value":"pub fn withdraw(&AccountId, Self::Balance, WithdrawReasons,\n                ExistenceRequirement)\n-> result::Result<Self::NegativeImbalance, DispatchError>","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Removes some free balance from `who` account for `reason` if possible. If `liveness` is\n `KeepAlive`, then no less than `ExistentialDeposit` must be left remaining.","sig":null,"attributes":[{"value":"/ Removes some free balance from `who` account for `reason` if possible. If `liveness` is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419180,"byte_end":419271,"line_start":1062,"line_end":1062,"column_start":2,"column_end":93}},{"value":"/ `KeepAlive`, then no less than `ExistentialDeposit` must be left remaining.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419273,"byte_end":419352,"line_start":1063,"line_end":1063,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419354,"byte_end":419357,"line_start":1064,"line_end":1064,"column_start":2,"column_end":5}},{"value":"/ This checks any locks, vesting, and liquidity requirements. If the removal is not possible,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419359,"byte_end":419454,"line_start":1065,"line_end":1065,"column_start":2,"column_end":97}},{"value":"/ then it returns `Err`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419456,"byte_end":419482,"line_start":1066,"line_end":1066,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419484,"byte_end":419487,"line_start":1067,"line_end":1067,"column_start":2,"column_end":5}},{"value":"/ If the operation is successful, this will return `Ok` with a `NegativeImbalance` whose value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419489,"byte_end":419585,"line_start":1068,"line_end":1068,"column_start":2,"column_end":98}},{"value":"/ is `value`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419587,"byte_end":419602,"line_start":1069,"line_end":1069,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419882,"byte_end":419888,"line_start":1078,"line_end":1078,"column_start":5,"column_end":11},"name":"settle","qualname":"::traits::Currency::settle","value":"pub fn settle(&AccountId, Self::PositiveImbalance, WithdrawReasons,\n              ExistenceRequirement)\n-> result::Result<(), Self::PositiveImbalance>","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Similar to withdraw, only accepts a `PositiveImbalance` and returns nothing on success.\n","sig":null,"attributes":[{"value":"/ Similar to withdraw, only accepts a `PositiveImbalance` and returns nothing on success.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":419786,"byte_end":419877,"line_start":1077,"line_end":1077,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1785},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420470,"byte_end":420490,"line_start":1096,"line_end":1096,"column_start":5,"column_end":25},"name":"make_free_balance_be","qualname":"::traits::Currency::make_free_balance_be","value":"pub fn make_free_balance_be(&AccountId, Self::Balance)\n-> SignedImbalance<Self::Balance, Self::PositiveImbalance>","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Ensure an account's free balance equals some value; this will create the account\n if needed.","sig":null,"attributes":[{"value":"/ Ensure an account's free balance equals some value; this will create the account","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420215,"byte_end":420299,"line_start":1091,"line_end":1091,"column_start":2,"column_end":86}},{"value":"/ if needed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420301,"byte_end":420315,"line_start":1092,"line_end":1092,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420317,"byte_end":420320,"line_start":1093,"line_end":1093,"column_start":2,"column_end":5}},{"value":"/ Returns a signed imbalance and status to indicate if the account was successfully updated or update","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420322,"byte_end":420425,"line_start":1094,"line_end":1094,"column_start":2,"column_end":105}},{"value":"/ has led to killing of the account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420427,"byte_end":420465,"line_start":1095,"line_end":1095,"column_start":2,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4009},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420784,"byte_end":420788,"line_start":1106,"line_end":1106,"column_start":2,"column_end":6},"name":"Free","qualname":"::traits::BalanceStatus::Free","value":"BalanceStatus::Free","parent":{"krate":0,"index":4008},"children":[],"decl_id":null,"docs":" Funds are free, as corresponding to `free` item in Balances.\n","sig":null,"attributes":[{"value":"/ Funds are free, as corresponding to `free` item in Balances.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420718,"byte_end":420782,"line_start":1105,"line_end":1105,"column_start":2,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4011},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420865,"byte_end":420873,"line_start":1108,"line_end":1108,"column_start":2,"column_end":10},"name":"Reserved","qualname":"::traits::BalanceStatus::Reserved","value":"BalanceStatus::Reserved","parent":{"krate":0,"index":4008},"children":[],"decl_id":null,"docs":" Funds are reserved, as corresponding to `reserved` item in Balances.\n","sig":null,"attributes":[{"value":"/ Funds are reserved, as corresponding to `reserved` item in Balances.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420791,"byte_end":420863,"line_start":1107,"line_end":1107,"column_start":2,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":4008},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420701,"byte_end":420714,"line_start":1104,"line_end":1104,"column_start":10,"column_end":23},"name":"BalanceStatus","qualname":"::traits::BalanceStatus","value":"pub enum BalanceStatus {\n\n    /// Funds are free, as corresponding to `free` item in Balances.\n    Free,\n\n    /// Funds are reserved, as corresponding to `reserved` item in Balances.\n    Reserved,\n}","parent":null,"children":[{"krate":0,"index":4009},{"krate":0,"index":4011}],"decl_id":null,"docs":" Status of funds.\n","sig":null,"attributes":[{"value":"/ Status of funds.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420603,"byte_end":420623,"line_start":1102,"line_end":1102,"column_start":1,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":1786},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420946,"byte_end":420964,"line_start":1112,"line_end":1112,"column_start":11,"column_end":29},"name":"ReservableCurrency","qualname":"::traits::ReservableCurrency","value":"ReservableCurrency<AccountId>: Currency<AccountId>","parent":null,"children":[{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793}],"decl_id":null,"docs":" A currency where funds can be reserved from the user.\n","sig":null,"attributes":[{"value":"/ A currency where funds can be reserved from the user.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420878,"byte_end":420935,"line_start":1111,"line_end":1111,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421136,"byte_end":421147,"line_start":1115,"line_end":1115,"column_start":5,"column_end":16},"name":"can_reserve","qualname":"::traits::ReservableCurrency::can_reserve","value":"pub fn can_reserve(&AccountId, Self::Balance) -> bool","parent":{"krate":0,"index":1786},"children":[],"decl_id":null,"docs":" Same result as `reserve(who, value)` (but without the side-effects) assuming there\n are no balance changes in the meantime.\n","sig":null,"attributes":[{"value":"/ Same result as `reserve(who, value)` (but without the side-effects) assuming there","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421000,"byte_end":421086,"line_start":1113,"line_end":1113,"column_start":2,"column_end":88}},{"value":"/ are no balance changes in the meantime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421088,"byte_end":421131,"line_start":1114,"line_end":1114,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421460,"byte_end":421474,"line_start":1121,"line_end":1121,"column_start":5,"column_end":19},"name":"slash_reserved","qualname":"::traits::ReservableCurrency::slash_reserved","value":"pub fn slash_reserved(&AccountId, Self::Balance)\n-> (Self::NegativeImbalance, Self::Balance)","parent":{"krate":0,"index":1786},"children":[],"decl_id":null,"docs":" Deducts up to `value` from reserved balance of `who`. This function cannot fail.","sig":null,"attributes":[{"value":"/ Deducts up to `value` from reserved balance of `who`. This function cannot fail.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421198,"byte_end":421282,"line_start":1117,"line_end":1117,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421284,"byte_end":421287,"line_start":1118,"line_end":1118,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If the reserve balance of `who`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421289,"byte_end":421382,"line_start":1119,"line_end":1119,"column_start":2,"column_end":95}},{"value":"/ is less than `value`, then a non-zero second item will be returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421384,"byte_end":421455,"line_start":1120,"line_end":1120,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1790},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422212,"byte_end":422228,"line_start":1137,"line_end":1137,"column_start":5,"column_end":21},"name":"reserved_balance","qualname":"::traits::ReservableCurrency::reserved_balance","value":"pub fn reserved_balance(&AccountId) -> Self::Balance","parent":{"krate":0,"index":1786},"children":[],"decl_id":null,"docs":" The amount of the balance of a given account that is externally reserved; this can still get\n slashed, but gets slashed last of all.","sig":null,"attributes":[{"value":"/ The amount of the balance of a given account that is externally reserved; this can still get","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421568,"byte_end":421664,"line_start":1126,"line_end":1126,"column_start":2,"column_end":98}},{"value":"/ slashed, but gets slashed last of all.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421666,"byte_end":421708,"line_start":1127,"line_end":1127,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421710,"byte_end":421713,"line_start":1128,"line_end":1128,"column_start":2,"column_end":5}},{"value":"/ This balance is a 'reserve' balance that other subsystems use in order to set aside tokens","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421715,"byte_end":421809,"line_start":1129,"line_end":1129,"column_start":2,"column_end":96}},{"value":"/ that are still 'owned' by the account holder, but which are suspendable.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421811,"byte_end":421887,"line_start":1130,"line_end":1130,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421889,"byte_end":421892,"line_start":1131,"line_end":1131,"column_start":2,"column_end":5}},{"value":"/ When this balance falls below the value of `ExistentialDeposit`, then this 'reserve account'","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421894,"byte_end":421990,"line_start":1132,"line_end":1132,"column_start":2,"column_end":98}},{"value":"/ is deleted: specifically, `ReservedBalance`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":421992,"byte_end":422040,"line_start":1133,"line_end":1133,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422042,"byte_end":422045,"line_start":1134,"line_end":1134,"column_start":2,"column_end":5}},{"value":"/ `system::AccountNonce` is also deleted if `FreeBalance` is also zero (it also gets","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422047,"byte_end":422133,"line_start":1135,"line_end":1135,"column_start":2,"column_end":88}},{"value":"/ collapsed to zero if it ever becomes less than `ExistentialDeposit`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422135,"byte_end":422207,"line_start":1136,"line_end":1136,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422502,"byte_end":422509,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12},"name":"reserve","qualname":"::traits::ReservableCurrency::reserve","value":"pub fn reserve(&AccountId, Self::Balance) -> DispatchResult","parent":{"krate":0,"index":1786},"children":[],"decl_id":null,"docs":" Moves `value` from balance to reserved balance.","sig":null,"attributes":[{"value":"/ Moves `value` from balance to reserved balance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422266,"byte_end":422317,"line_start":1139,"line_end":1139,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422319,"byte_end":422322,"line_start":1140,"line_end":1140,"column_start":2,"column_end":5}},{"value":"/ If the free balance is lower than `value`, then no funds will be moved and an `Err` will","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422324,"byte_end":422416,"line_start":1141,"line_end":1141,"column_start":2,"column_end":94}},{"value":"/ be returned to notify of this. This is different behavior than `unreserve`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422418,"byte_end":422497,"line_start":1142,"line_end":1142,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423042,"byte_end":423051,"line_start":1155,"line_end":1155,"column_start":5,"column_end":14},"name":"unreserve","qualname":"::traits::ReservableCurrency::unreserve","value":"pub fn unreserve(&AccountId, Self::Balance) -> Self::Balance","parent":{"krate":0,"index":1786},"children":[],"decl_id":null,"docs":" Moves up to `value` from reserved balance to free balance. This function cannot fail.","sig":null,"attributes":[{"value":"/ Moves up to `value` from reserved balance to free balance. This function cannot fail.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422570,"byte_end":422659,"line_start":1145,"line_end":1145,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422661,"byte_end":422664,"line_start":1146,"line_end":1146,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be moved as possible. If the reserve balance of `who`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422666,"byte_end":422756,"line_start":1147,"line_end":1147,"column_start":2,"column_end":92}},{"value":"/ is less than `value`, then the remaining amount will be returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422758,"byte_end":422827,"line_start":1148,"line_end":1148,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422829,"byte_end":422832,"line_start":1149,"line_end":1149,"column_start":2,"column_end":5}},{"value":"/ # NOTES","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422834,"byte_end":422845,"line_start":1150,"line_end":1150,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422847,"byte_end":422850,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ - This is different from `reserve`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422852,"byte_end":422891,"line_start":1152,"line_end":1152,"column_start":2,"column_end":41}},{"value":"/ - If the remaining reserved balance is less than `ExistentialDeposit`, it will","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422893,"byte_end":422975,"line_start":1153,"line_end":1153,"column_start":2,"column_end":84}},{"value":"/ invoke `on_reserved_too_low` and could reap the account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":422977,"byte_end":423037,"line_start":1154,"line_end":1154,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1793},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423565,"byte_end":423584,"line_start":1164,"line_end":1164,"column_start":5,"column_end":24},"name":"repatriate_reserved","qualname":"::traits::ReservableCurrency::repatriate_reserved","value":"pub fn repatriate_reserved(&AccountId, &AccountId, Self::Balance,\n                           BalanceStatus)\n-> result::Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":1786},"children":[],"decl_id":null,"docs":" Moves up to `value` from reserved balance of account `slashed` to balance of account\n `beneficiary`. `beneficiary` must exist for this to succeed. If it does not, `Err` will be\n returned. Funds will be placed in either the `free` balance or the `reserved` balance,\n depending on the `status`.","sig":null,"attributes":[{"value":"/ Moves up to `value` from reserved balance of account `slashed` to balance of account","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423111,"byte_end":423199,"line_start":1157,"line_end":1157,"column_start":2,"column_end":90}},{"value":"/ `beneficiary`. `beneficiary` must exist for this to succeed. If it does not, `Err` will be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423201,"byte_end":423295,"line_start":1158,"line_end":1158,"column_start":2,"column_end":96}},{"value":"/ returned. Funds will be placed in either the `free` balance or the `reserved` balance,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423297,"byte_end":423387,"line_start":1159,"line_end":1159,"column_start":2,"column_end":92}},{"value":"/ depending on the `status`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423389,"byte_end":423419,"line_start":1160,"line_end":1160,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423421,"byte_end":423424,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If this is less than `value`,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423426,"byte_end":423517,"line_start":1162,"line_end":1162,"column_start":2,"column_end":93}},{"value":"/ then `Ok(non_zero)` will be returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423519,"byte_end":423560,"line_start":1163,"line_end":1163,"column_start":2,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":1794},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423877,"byte_end":423891,"line_start":1174,"line_end":1174,"column_start":10,"column_end":24},"name":"LockIdentifier","qualname":"::traits::LockIdentifier","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" An identifier for a lock. Used for disambiguating different locks so that\n they can be individually replaced or removed.\n","sig":null,"attributes":[{"value":"/ An identifier for a lock. Used for disambiguating different locks so that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423740,"byte_end":423817,"line_start":1172,"line_end":1172,"column_start":1,"column_end":78}},{"value":"/ they can be individually replaced or removed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423818,"byte_end":423867,"line_start":1173,"line_end":1173,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":1796},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423977,"byte_end":423993,"line_start":1177,"line_end":1177,"column_start":11,"column_end":27},"name":"LockableCurrency","qualname":"::traits::LockableCurrency","value":"LockableCurrency<AccountId>: Currency<AccountId>","parent":null,"children":[{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1802}],"decl_id":null,"docs":" A currency whose accounts can have liquidity restrictions.\n","sig":null,"attributes":[{"value":"/ A currency whose accounts can have liquidity restrictions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":423904,"byte_end":423966,"line_start":1176,"line_end":1176,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":1798},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424103,"byte_end":424109,"line_start":1179,"line_end":1179,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::LockableCurrency::Moment","value":"type Moment;","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" The quantity used to denote time; usually just a `BlockNumber`.\n","sig":null,"attributes":[{"value":"/ The quantity used to denote time; usually just a `BlockNumber`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424029,"byte_end":424096,"line_start":1178,"line_end":1178,"column_start":2,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1799},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424188,"byte_end":424196,"line_start":1182,"line_end":1182,"column_start":7,"column_end":15},"name":"MaxLocks","qualname":"::traits::LockableCurrency::MaxLocks","value":"type MaxLocks: Get<u32>;","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" The maximum number of locks a user should have on their account.\n","sig":null,"attributes":[{"value":"/ The maximum number of locks a user should have on their account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424113,"byte_end":424181,"line_start":1181,"line_end":1181,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424500,"byte_end":424508,"line_start":1190,"line_end":1190,"column_start":5,"column_end":13},"name":"set_lock","qualname":"::traits::LockableCurrency::set_lock","value":"pub fn set_lock(LockIdentifier, &AccountId, Self::Balance, WithdrawReasons)","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" Create a new balance lock on account `who`.","sig":null,"attributes":[{"value":"/ Create a new balance lock on account `who`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424210,"byte_end":424257,"line_start":1184,"line_end":1184,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424259,"byte_end":424262,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ If the new lock is valid (i.e. not already expired), it will push the struct to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424264,"byte_end":424347,"line_start":1186,"line_end":1186,"column_start":2,"column_end":85}},{"value":"/ the `Locks` vec in storage. Note that you can lock more funds than a user has.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424349,"byte_end":424431,"line_start":1187,"line_end":1187,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424433,"byte_end":424436,"line_start":1188,"line_end":1188,"column_start":2,"column_end":5}},{"value":"/ If the lock `id` already exists, this will update it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424438,"byte_end":424495,"line_start":1189,"line_end":1189,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1801},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425059,"byte_end":425070,"line_start":1205,"line_end":1205,"column_start":5,"column_end":16},"name":"extend_lock","qualname":"::traits::LockableCurrency::extend_lock","value":"pub fn extend_lock(LockIdentifier, &AccountId, Self::Balance, WithdrawReasons)","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" Changes a balance lock (selected by `id`) so that it becomes less liquid in all\n parameters or creates a new one if it does not exist.","sig":null,"attributes":[{"value":"/ Changes a balance lock (selected by `id`) so that it becomes less liquid in all","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424610,"byte_end":424693,"line_start":1197,"line_end":1197,"column_start":2,"column_end":85}},{"value":"/ parameters or creates a new one if it does not exist.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424695,"byte_end":424752,"line_start":1198,"line_end":1198,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424754,"byte_end":424757,"line_start":1199,"line_end":1199,"column_start":2,"column_end":5}},{"value":"/ Calling `extend_lock` on an existing lock `id` differs from `set_lock` in that it","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424759,"byte_end":424844,"line_start":1200,"line_end":1200,"column_start":2,"column_end":87}},{"value":"/ applies the most severe constraints of the two, while `set_lock` replaces the lock","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424846,"byte_end":424932,"line_start":1201,"line_end":1201,"column_start":2,"column_end":88}},{"value":"/ with the new parameters. As in, `extend_lock` will set:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424934,"byte_end":424993,"line_start":1202,"line_end":1202,"column_start":2,"column_end":61}},{"value":"/ - maximum `amount`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424995,"byte_end":425017,"line_start":1203,"line_end":1203,"column_start":2,"column_end":24}},{"value":"/ - bitwise mask of all `reasons`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425019,"byte_end":425054,"line_start":1204,"line_end":1204,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425205,"byte_end":425216,"line_start":1213,"line_end":1213,"column_start":5,"column_end":16},"name":"remove_lock","qualname":"::traits::LockableCurrency::remove_lock","value":"pub fn remove_lock(LockIdentifier, &AccountId)","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" Remove an existing lock.\n","sig":null,"attributes":[{"value":"/ Remove an existing lock.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425172,"byte_end":425200,"line_start":1212,"line_end":1212,"column_start":2,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":1803},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425392,"byte_end":425407,"line_start":1221,"line_end":1221,"column_start":11,"column_end":26},"name":"VestingSchedule","qualname":"::traits::VestingSchedule","value":"VestingSchedule<AccountId>","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809}],"decl_id":null,"docs":" A vesting schedule over a currency. This allows a particular currency to have vesting limits\n applied to it.\n","sig":null,"attributes":[{"value":"/ A vesting schedule over a currency. This allows a particular currency to have vesting limits","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425266,"byte_end":425362,"line_start":1219,"line_end":1219,"column_start":1,"column_end":97}},{"value":"/ applied to it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425363,"byte_end":425381,"line_start":1220,"line_end":1220,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":1805},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425496,"byte_end":425502,"line_start":1223,"line_end":1223,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::VestingSchedule::Moment","value":"type Moment;","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" The quantity used to denote time; usually just a `BlockNumber`.\n","sig":null,"attributes":[{"value":"/ The quantity used to denote time; usually just a `BlockNumber`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425422,"byte_end":425489,"line_start":1222,"line_end":1222,"column_start":2,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1806},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425560,"byte_end":425568,"line_start":1226,"line_end":1226,"column_start":7,"column_end":15},"name":"Currency","qualname":"::traits::VestingSchedule::Currency","value":"type Currency: Currency<AccountId>;","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" The currency that this schedule applies to.\n","sig":null,"attributes":[{"value":"/ The currency that this schedule applies to.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425506,"byte_end":425553,"line_start":1225,"line_end":1225,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1807},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425754,"byte_end":425769,"line_start":1230,"line_end":1230,"column_start":5,"column_end":20},"name":"vesting_balance","qualname":"::traits::VestingSchedule::vesting_balance","value":"pub fn vesting_balance(&AccountId)\n-> Option<<Self::Currency as Currency<AccountId>>::Balance>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Get the amount that is currently being vested and cannot be transferred out of this account.\n Returns `None` if the account has no vesting schedule.\n","sig":null,"attributes":[{"value":"/ Get the amount that is currently being vested and cannot be transferred out of this account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425593,"byte_end":425689,"line_start":1228,"line_end":1228,"column_start":2,"column_end":98}},{"value":"/ Returns `None` if the account has no vesting schedule.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425691,"byte_end":425749,"line_start":1229,"line_end":1229,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426153,"byte_end":426173,"line_start":1240,"line_end":1240,"column_start":5,"column_end":25},"name":"add_vesting_schedule","qualname":"::traits::VestingSchedule::add_vesting_schedule","value":"pub fn add_vesting_schedule(&AccountId,\n                            <Self::Currency as Currency<AccountId>>::Balance,\n                            <Self::Currency as Currency<AccountId>>::Balance,\n                            Self::Moment) -> DispatchResult","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Adds a vesting schedule to a given account.","sig":null,"attributes":[{"value":"/ Adds a vesting schedule to a given account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425850,"byte_end":425897,"line_start":1232,"line_end":1232,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425899,"byte_end":425902,"line_start":1233,"line_end":1233,"column_start":2,"column_end":5}},{"value":"/ If there already exists a vesting schedule for the given account, an `Err` is returned","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425904,"byte_end":425994,"line_start":1234,"line_end":1234,"column_start":2,"column_end":92}},{"value":"/ and nothing is updated.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":425996,"byte_end":426023,"line_start":1235,"line_end":1235,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426025,"byte_end":426028,"line_start":1236,"line_end":1236,"column_start":2,"column_end":5}},{"value":"/ Is a no-op if the amount to be vested is zero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426030,"byte_end":426080,"line_start":1237,"line_end":1237,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426082,"byte_end":426085,"line_start":1238,"line_end":1238,"column_start":2,"column_end":5}},{"value":"/ NOTE: This doesn't alter the free balance of the account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426087,"byte_end":426148,"line_start":1239,"line_end":1239,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1809},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426496,"byte_end":426519,"line_start":1250,"line_end":1250,"column_start":5,"column_end":28},"name":"remove_vesting_schedule","qualname":"::traits::VestingSchedule::remove_vesting_schedule","value":"pub fn remove_vesting_schedule(&AccountId)","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Remove a vesting schedule for a given account.","sig":null,"attributes":[{"value":"/ Remove a vesting schedule for a given account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426373,"byte_end":426423,"line_start":1247,"line_end":1247,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426425,"byte_end":426428,"line_start":1248,"line_end":1248,"column_start":2,"column_end":5}},{"value":"/ NOTE: This doesn't alter the free balance of the account.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426430,"byte_end":426491,"line_start":1249,"line_end":1249,"column_start":2,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":4036},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426641,"byte_end":426656,"line_start":1256,"line_end":1256,"column_start":13,"column_end":28},"name":"WithdrawReasons","qualname":"::traits::WithdrawReasons","value":"WithdrawReasons {  }","parent":null,"children":[{"krate":0,"index":4037}],"decl_id":null,"docs":" Reasons for moving funds out of an account.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4092},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426725,"byte_end":426744,"line_start":1258,"line_end":1258,"column_start":9,"column_end":28},"name":"TRANSACTION_PAYMENT","qualname":"::traits::WithdrawReasons::TRANSACTION_PAYMENT","value":"WithdrawReasons","parent":{"krate":0,"index":4091},"children":[],"decl_id":null,"docs":" In order to pay for (system) transaction costs.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4093},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426805,"byte_end":426813,"line_start":1260,"line_end":1260,"column_start":9,"column_end":17},"name":"TRANSFER","qualname":"::traits::WithdrawReasons::TRANSFER","value":"WithdrawReasons","parent":{"krate":0,"index":4091},"children":[],"decl_id":null,"docs":" In order to transfer ownership.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4094},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426909,"byte_end":426916,"line_start":1262,"line_end":1262,"column_start":9,"column_end":16},"name":"RESERVE","qualname":"::traits::WithdrawReasons::RESERVE","value":"WithdrawReasons","parent":{"krate":0,"index":4091},"children":[],"decl_id":null,"docs":" In order to reserve some funds for a later return or repatriation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4095},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":426993,"byte_end":426996,"line_start":1264,"line_end":1264,"column_start":9,"column_end":12},"name":"FEE","qualname":"::traits::WithdrawReasons::FEE","value":"WithdrawReasons","parent":{"krate":0,"index":4091},"children":[],"decl_id":null,"docs":" In order to pay some other (higher-level) fees.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4096},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427080,"byte_end":427083,"line_start":1266,"line_end":1266,"column_start":9,"column_end":12},"name":"TIP","qualname":"::traits::WithdrawReasons::TIP","value":"WithdrawReasons","parent":{"krate":0,"index":4091},"children":[],"decl_id":null,"docs":" In order to tip a validator for transaction inclusion.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427484,"byte_end":427490,"line_start":1282,"line_end":1282,"column_start":9,"column_end":15},"name":"except","qualname":"<WithdrawReasons>::except","value":"pub fn except(WithdrawReasons) -> WithdrawReasons","parent":null,"children":[],"decl_id":null,"docs":" Choose all variants except for `one`.","sig":null,"attributes":[{"value":"/ Choose all variants except for `one`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427128,"byte_end":427169,"line_start":1271,"line_end":1271,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427171,"byte_end":427174,"line_start":1272,"line_end":1272,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427176,"byte_end":427187,"line_start":1273,"line_end":1273,"column_start":2,"column_end":13}},{"value":"/ # use frame_support::traits::WithdrawReasons;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427189,"byte_end":427238,"line_start":1274,"line_end":1274,"column_start":2,"column_end":51}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427240,"byte_end":427257,"line_start":1275,"line_end":1275,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427259,"byte_end":427274,"line_start":1276,"line_end":1276,"column_start":2,"column_end":17}},{"value":"/ \tWithdrawReasons::FEE | WithdrawReasons::TRANSFER | WithdrawReasons::RESERVE | WithdrawReasons::TIP,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427276,"byte_end":427380,"line_start":1277,"line_end":1277,"column_start":2,"column_end":106}},{"value":"/ \tWithdrawReasons::except(WithdrawReasons::TRANSACTION_PAYMENT),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427382,"byte_end":427449,"line_start":1278,"line_end":1278,"column_start":2,"column_end":69}},{"value":"/\t);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427451,"byte_end":427457,"line_start":1279,"line_end":1279,"column_start":2,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427459,"byte_end":427466,"line_start":1280,"line_end":1280,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427468,"byte_end":427475,"line_start":1281,"line_end":1281,"column_start":2,"column_end":9}}]},{"kind":"Trait","id":{"krate":0,"index":1812},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427610,"byte_end":427614,"line_start":1289,"line_end":1289,"column_start":11,"column_end":15},"name":"Time","qualname":"::traits::Time","value":"Time","parent":null,"children":[{"krate":0,"index":1813},{"krate":0,"index":1814}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1813},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427623,"byte_end":427629,"line_start":1290,"line_end":1290,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::Time::Moment","value":"type Moment: AtLeast32Bit + Parameter + Default + Copy;","parent":{"krate":0,"index":1812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427679,"byte_end":427682,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8},"name":"now","qualname":"::traits::Time::now","value":"pub fn now() -> Self::Moment","parent":{"krate":0,"index":1812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1815},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427749,"byte_end":427757,"line_start":1296,"line_end":1296,"column_start":11,"column_end":19},"name":"UnixTime","qualname":"::traits::UnixTime","value":"UnixTime","parent":null,"children":[{"krate":0,"index":1816}],"decl_id":null,"docs":" Trait to deal with unix time.\n","sig":null,"attributes":[{"value":"/ Trait to deal with unix time.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427705,"byte_end":427738,"line_start":1295,"line_end":1295,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427817,"byte_end":427820,"line_start":1298,"line_end":1298,"column_start":5,"column_end":8},"name":"now","qualname":"::traits::UnixTime::now","value":"pub fn now() -> core::time::Duration","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":" Return duration since `SystemTime::UNIX_EPOCH`.\n","sig":null,"attributes":[{"value":"/ Return duration since `SystemTime::UNIX_EPOCH`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427761,"byte_end":427812,"line_start":1297,"line_end":1297,"column_start":2,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":1817},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427941,"byte_end":427954,"line_start":1302,"line_end":1302,"column_start":11,"column_end":24},"name":"ChangeMembers","qualname":"::traits::ChangeMembers","value":"ChangeMembers<AccountId: Clone + Ord>","parent":null,"children":[{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824}],"decl_id":null,"docs":" Trait for type that can handle incremental changes to a set of account IDs.\n","sig":null,"attributes":[{"value":"/ Trait for type that can handle incremental changes to a set of account IDs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427851,"byte_end":427930,"line_start":1301,"line_end":1301,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428187,"byte_end":428201,"line_start":1307,"line_end":1307,"column_start":5,"column_end":19},"name":"change_members","qualname":"::traits::ChangeMembers::change_members","value":"pub fn change_members(&[AccountId], &[AccountId], Vec<AccountId>)","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" A number of members `incoming` just joined the set and replaced some `outgoing` ones. The\n new set is given by `new`, and need not be sorted.","sig":null,"attributes":[{"value":"/ A number of members `incoming` just joined the set and replaced some `outgoing` ones. The","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427982,"byte_end":428075,"line_start":1303,"line_end":1303,"column_start":2,"column_end":95}},{"value":"/ new set is given by `new`, and need not be sorted.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428077,"byte_end":428131,"line_start":1304,"line_end":1304,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428133,"byte_end":428136,"line_start":1305,"line_end":1305,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428138,"byte_end":428182,"line_start":1306,"line_end":1306,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428666,"byte_end":428687,"line_start":1318,"line_end":1318,"column_start":5,"column_end":26},"name":"change_members_sorted","qualname":"::traits::ChangeMembers::change_members_sorted","value":"pub fn change_members_sorted(&[AccountId], &[AccountId], &[AccountId])","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" A number of members `_incoming` just joined the set and replaced some `_outgoing` ones. The\n new set is thus given by `sorted_new` and **must be sorted**.","sig":null,"attributes":[{"value":"/ A number of members `_incoming` just joined the set and replaced some `_outgoing` ones. The","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428357,"byte_end":428452,"line_start":1312,"line_end":1312,"column_start":2,"column_end":97}},{"value":"/ new set is thus given by `sorted_new` and **must be sorted**.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428454,"byte_end":428519,"line_start":1313,"line_end":1313,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428521,"byte_end":428524,"line_start":1314,"line_end":1314,"column_start":2,"column_end":5}},{"value":"/ NOTE: This is the only function that needs to be implemented in `ChangeMembers`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428526,"byte_end":428610,"line_start":1315,"line_end":1315,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428612,"byte_end":428615,"line_start":1316,"line_end":1316,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428617,"byte_end":428661,"line_start":1317,"line_end":1317,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1821},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428964,"byte_end":428982,"line_start":1328,"line_end":1328,"column_start":5,"column_end":23},"name":"set_members_sorted","qualname":"::traits::ChangeMembers::set_members_sorted","value":"pub fn set_members_sorted(&[AccountId], &[AccountId])","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" Set the new members; they **must already be sorted**. This will compute the diff and use it to\n call `change_members_sorted`.","sig":null,"attributes":[{"value":"/ Set the new members; they **must already be sorted**. This will compute the diff and use it to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428775,"byte_end":428873,"line_start":1324,"line_end":1324,"column_start":2,"column_end":100}},{"value":"/ call `change_members_sorted`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428875,"byte_end":428908,"line_start":1325,"line_end":1325,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428910,"byte_end":428913,"line_start":1326,"line_end":1326,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":428915,"byte_end":428959,"line_start":1327,"line_end":1327,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1822},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":429341,"byte_end":429368,"line_start":1336,"line_end":1336,"column_start":5,"column_end":32},"name":"compute_members_diff_sorted","qualname":"::traits::ChangeMembers::compute_members_diff_sorted","value":"pub fn compute_members_diff_sorted(&[AccountId], &[AccountId])\n-> (Vec<AccountId>, Vec<AccountId>)","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" Compute diff between new and old members; they **must already be sorted**.","sig":null,"attributes":[{"value":"/ Compute diff between new and old members; they **must already be sorted**.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":429209,"byte_end":429287,"line_start":1333,"line_end":1333,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":429289,"byte_end":429292,"line_start":1334,"line_end":1334,"column_start":2,"column_end":5}},{"value":"/ Returns incoming and outgoing members.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":429294,"byte_end":429336,"line_start":1335,"line_end":1335,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430231,"byte_end":430240,"line_start":1371,"line_end":1371,"column_start":5,"column_end":14},"name":"set_prime","qualname":"::traits::ChangeMembers::set_prime","value":"pub fn set_prime(Option<AccountId>)","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" Set the prime member.\n","sig":null,"attributes":[{"value":"/ Set the prime member.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430201,"byte_end":430226,"line_start":1370,"line_end":1370,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1824},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430304,"byte_end":430313,"line_start":1374,"line_end":1374,"column_start":5,"column_end":14},"name":"get_prime","qualname":"::traits::ChangeMembers::get_prime","value":"pub fn get_prime() -> Option<AccountId>","parent":{"krate":0,"index":1817},"children":[],"decl_id":null,"docs":" Get the current prime.\n","sig":null,"attributes":[{"value":"/ Get the current prime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430273,"byte_end":430299,"line_start":1373,"line_end":1373,"column_start":2,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":1831},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430675,"byte_end":430692,"line_start":1387,"line_end":1387,"column_start":11,"column_end":28},"name":"InitializeMembers","qualname":"::traits::InitializeMembers","value":"InitializeMembers<AccountId>","parent":null,"children":[{"krate":0,"index":1833}],"decl_id":null,"docs":" Trait for type that can handle the initialization of account IDs at genesis.\n","sig":null,"attributes":[{"value":"/ Trait for type that can handle the initialization of account IDs at genesis.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430584,"byte_end":430664,"line_start":1386,"line_end":1386,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1833},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430762,"byte_end":430780,"line_start":1389,"line_end":1389,"column_start":5,"column_end":23},"name":"initialize_members","qualname":"::traits::InitializeMembers::initialize_members","value":"pub fn initialize_members(&[AccountId])","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":" Initialize the members to the given `members`.\n","sig":null,"attributes":[{"value":"/ Initialize the members to the given `members`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430707,"byte_end":430757,"line_start":1388,"line_end":1388,"column_start":2,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1837},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430941,"byte_end":430951,"line_start":1397,"line_end":1397,"column_start":11,"column_end":21},"name":"Randomness","qualname":"::traits::Randomness","value":"Randomness<Output>","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1840}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431428,"byte_end":431434,"line_start":1407,"line_end":1407,"column_start":5,"column_end":11},"name":"random","qualname":"::traits::Randomness::random","value":"pub fn random(&[u8]) -> Output","parent":{"krate":0,"index":1837},"children":[],"decl_id":null,"docs":" Get a \"random\" value","sig":null,"attributes":[{"value":"/ Get a \"random\" value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430963,"byte_end":430987,"line_start":1398,"line_end":1398,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430989,"byte_end":430992,"line_start":1399,"line_end":1399,"column_start":2,"column_end":5}},{"value":"/ Being a deterministic blockchain, real randomness is difficult to come by. This gives you","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":430994,"byte_end":431087,"line_start":1400,"line_end":1400,"column_start":2,"column_end":95}},{"value":"/ something that approximates it. At best, this will be randomness which was","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431089,"byte_end":431167,"line_start":1401,"line_end":1401,"column_start":2,"column_end":80}},{"value":"/ hard to predict a long time ago, but that has become easy to predict recently.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431169,"byte_end":431251,"line_start":1402,"line_end":1402,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431253,"byte_end":431256,"line_start":1403,"line_end":1403,"column_start":2,"column_end":5}},{"value":"/ `subject` is a context identifier and allows you to get a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431258,"byte_end":431319,"line_start":1404,"line_end":1404,"column_start":2,"column_end":63}},{"value":"/ different result to other callers of this function; use it like","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431321,"byte_end":431388,"line_start":1405,"line_end":1405,"column_start":2,"column_end":69}},{"value":"/ `random(&b\"my context\"[..])`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431390,"byte_end":431423,"line_start":1406,"line_end":1406,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431727,"byte_end":431738,"line_start":1414,"line_end":1414,"column_start":5,"column_end":16},"name":"random_seed","qualname":"::traits::Randomness::random_seed","value":"pub fn random_seed() -> Output","parent":{"krate":0,"index":1837},"children":[],"decl_id":null,"docs":" Get the basic random seed.","sig":null,"attributes":[{"value":"/ Get the basic random seed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431464,"byte_end":431494,"line_start":1409,"line_end":1409,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431496,"byte_end":431499,"line_start":1410,"line_end":1410,"column_start":2,"column_end":5}},{"value":"/ In general you won't want to use this, but rather `Self::random` which allows you to give a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431501,"byte_end":431596,"line_start":1411,"line_end":1411,"column_start":2,"column_end":97}},{"value":"/ subject for the random result and whose value will be independently low-influence random","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431598,"byte_end":431690,"line_start":1412,"line_end":1412,"column_start":2,"column_end":94}},{"value":"/ from any other such seeds.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431692,"byte_end":431722,"line_start":1413,"line_end":1413,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1841},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431878,"byte_end":431892,"line_start":1420,"line_end":1420,"column_start":12,"column_end":26},"name":"TestRandomness","qualname":"::traits::TestRandomness","value":"","parent":null,"children":[],"decl_id":null,"docs":" Provides an implementation of [`Randomness`] that should only be used in tests!\n","sig":null,"attributes":[{"value":"/ Provides an implementation of [`Randomness`] that should only be used in tests!","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431783,"byte_end":431866,"line_start":1419,"line_end":1419,"column_start":1,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":1846},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432308,"byte_end":432316,"line_start":1431,"line_end":1431,"column_start":11,"column_end":19},"name":"Lateness","qualname":"::traits::Lateness","value":"Lateness<N>","parent":null,"children":[{"krate":0,"index":1848}],"decl_id":null,"docs":" Trait to be used by block producing consensus engine modules to determine\n how late the current block is (e.g. in a slot-based proposal mechanism how\n many slots were skipped since the previous block).\n","sig":null,"attributes":[{"value":"/ Trait to be used by block producing consensus engine modules to determine","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432086,"byte_end":432163,"line_start":1428,"line_end":1428,"column_start":1,"column_end":78}},{"value":"/ how late the current block is (e.g. in a slot-based proposal mechanism how","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432164,"byte_end":432242,"line_start":1429,"line_end":1429,"column_start":1,"column_end":79}},{"value":"/ many slots were skipped since the previous block).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432243,"byte_end":432297,"line_start":1430,"line_end":1430,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432419,"byte_end":432427,"line_start":1434,"line_end":1434,"column_start":5,"column_end":13},"name":"lateness","qualname":"::traits::Lateness::lateness","value":"pub fn lateness(&Self) -> N","parent":{"krate":0,"index":1846},"children":[],"decl_id":null,"docs":" Returns a generic measure of how late the current block is compared to\n its parent.\n","sig":null,"attributes":[{"value":"/ Returns a generic measure of how late the current block is compared to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432323,"byte_end":432397,"line_start":1432,"line_end":1432,"column_start":2,"column_end":76}},{"value":"/ its parent.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432399,"byte_end":432414,"line_start":1433,"line_end":1433,"column_start":2,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":1852},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432732,"byte_end":432753,"line_start":1445,"line_end":1445,"column_start":11,"column_end":32},"name":"ValidatorRegistration","qualname":"::traits::ValidatorRegistration","value":"ValidatorRegistration<ValidatorId>","parent":null,"children":[{"krate":0,"index":1854}],"decl_id":null,"docs":" Implementors of this trait provide information about whether or not some validator has\n been registered with them. The [Session module](../../pallet_session/index.html) is an implementor.\n","sig":null,"attributes":[{"value":"/ Implementors of this trait provide information about whether or not some validator has","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432527,"byte_end":432617,"line_start":1443,"line_end":1443,"column_start":1,"column_end":91}},{"value":"/ been registered with them. The [Session module](../../pallet_session/index.html) is an implementor.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432618,"byte_end":432721,"line_start":1444,"line_end":1444,"column_start":1,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432882,"byte_end":432895,"line_start":1448,"line_end":1448,"column_start":5,"column_end":18},"name":"is_registered","qualname":"::traits::ValidatorRegistration::is_registered","value":"pub fn is_registered(&ValidatorId) -> bool","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Returns true if the provided validator ID has been registered with the implementing runtime\n module\n","sig":null,"attributes":[{"value":"/ Returns true if the provided validator ID has been registered with the implementing runtime","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432770,"byte_end":432865,"line_start":1446,"line_end":1446,"column_start":2,"column_end":97}},{"value":"/ module","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432867,"byte_end":432877,"line_start":1447,"line_end":1447,"column_start":2,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1855},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433127,"byte_end":433137,"line_start":1455,"line_end":1455,"column_start":11,"column_end":21},"name":"PalletInfo","qualname":"::traits::PalletInfo","value":"PalletInfo","parent":null,"children":[{"krate":0,"index":1856},{"krate":0,"index":1858}],"decl_id":null,"docs":" Provides information about the pallet setup in the runtime.","sig":null,"attributes":[{"value":"/ Provides information about the pallet setup in the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432926,"byte_end":432989,"line_start":1451,"line_end":1451,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432990,"byte_end":432993,"line_start":1452,"line_end":1452,"column_start":1,"column_end":4}},{"value":"/ An implementor should be able to provide information about each pallet that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":432994,"byte_end":433073,"line_start":1453,"line_end":1453,"column_start":1,"column_end":80}},{"value":"/ is configured in `construct_runtime!`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433074,"byte_end":433116,"line_start":1454,"line_end":1454,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433223,"byte_end":433228,"line_start":1457,"line_end":1457,"column_start":5,"column_end":10},"name":"index","qualname":"::traits::PalletInfo::index","value":"pub fn index<P: 'static>() -> Option<usize>","parent":{"krate":0,"index":1855},"children":[],"decl_id":null,"docs":" Convert the given pallet `P` into its index as configured in the runtime.\n","sig":null,"attributes":[{"value":"/ Convert the given pallet `P` into its index as configured in the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433141,"byte_end":433218,"line_start":1456,"line_end":1456,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433343,"byte_end":433347,"line_start":1459,"line_end":1459,"column_start":5,"column_end":9},"name":"name","qualname":"::traits::PalletInfo::name","value":"pub fn name<P: 'static>() -> Option<&'static str>","parent":{"krate":0,"index":1855},"children":[],"decl_id":null,"docs":" Convert the given pallet `P` into its name as configured in the runtime.\n","sig":null,"attributes":[{"value":"/ Convert the given pallet `P` into its name as configured in the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433262,"byte_end":433338,"line_start":1458,"line_end":1458,"column_start":2,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":4157},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433502,"byte_end":433514,"line_start":1464,"line_end":1464,"column_start":12,"column_end":24},"name":"CallMetadata","qualname":"::traits::CallMetadata","value":"CallMetadata { function_name, pallet_name }","parent":null,"children":[{"krate":0,"index":4158},{"krate":0,"index":4159}],"decl_id":null,"docs":" The function and pallet name of the Call.\n","sig":null,"attributes":[{"value":"/ The function and pallet name of the Call.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433390,"byte_end":433435,"line_start":1462,"line_end":1462,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":4158},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433549,"byte_end":433562,"line_start":1466,"line_end":1466,"column_start":6,"column_end":19},"name":"function_name","qualname":"::traits::CallMetadata::function_name","value":"&'static str","parent":{"krate":0,"index":4157},"children":[],"decl_id":null,"docs":" Name of the function.\n","sig":null,"attributes":[{"value":"/ Name of the function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433518,"byte_end":433543,"line_start":1465,"line_end":1465,"column_start":2,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":4159},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433638,"byte_end":433649,"line_start":1468,"line_end":1468,"column_start":6,"column_end":17},"name":"pallet_name","qualname":"::traits::CallMetadata::pallet_name","value":"&'static str","parent":{"krate":0,"index":4157},"children":[],"decl_id":null,"docs":" Name of the pallet to which the function belongs.\n","sig":null,"attributes":[{"value":"/ Name of the pallet to which the function belongs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433579,"byte_end":433632,"line_start":1467,"line_end":1467,"column_start":2,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":1860},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433718,"byte_end":433729,"line_start":1472,"line_end":1472,"column_start":11,"column_end":22},"name":"GetCallName","qualname":"::traits::GetCallName","value":"GetCallName","parent":null,"children":[{"krate":0,"index":1861},{"krate":0,"index":1862}],"decl_id":null,"docs":" Gets the function name of the Call.\n","sig":null,"attributes":[{"value":"/ Gets the function name of the Call.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433668,"byte_end":433707,"line_start":1471,"line_end":1471,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1861},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433768,"byte_end":433782,"line_start":1474,"line_end":1474,"column_start":5,"column_end":19},"name":"get_call_names","qualname":"::traits::GetCallName::get_call_names","value":"pub fn get_call_names() -> &'static [&'static str]","parent":{"krate":0,"index":1860},"children":[],"decl_id":null,"docs":" Return all function names.\n","sig":null,"attributes":[{"value":"/ Return all function names.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433733,"byte_end":433763,"line_start":1473,"line_end":1473,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433860,"byte_end":433873,"line_start":1476,"line_end":1476,"column_start":5,"column_end":18},"name":"get_call_name","qualname":"::traits::GetCallName::get_call_name","value":"pub fn get_call_name(&Self) -> &'static str","parent":{"krate":0,"index":1860},"children":[],"decl_id":null,"docs":" Return the function name of the Call.\n","sig":null,"attributes":[{"value":"/ Return the function name of the Call.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433814,"byte_end":433855,"line_start":1475,"line_end":1475,"column_start":2,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":1863},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433979,"byte_end":433994,"line_start":1480,"line_end":1480,"column_start":11,"column_end":26},"name":"GetCallMetadata","qualname":"::traits::GetCallMetadata","value":"GetCallMetadata","parent":null,"children":[{"krate":0,"index":1864},{"krate":0,"index":1865},{"krate":0,"index":1866}],"decl_id":null,"docs":" Gets the metadata for the Call - function name and pallet name.\n","sig":null,"attributes":[{"value":"/ Gets the metadata for the Call - function name and pallet name.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433901,"byte_end":433968,"line_start":1479,"line_end":1479,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434031,"byte_end":434047,"line_start":1482,"line_end":1482,"column_start":5,"column_end":21},"name":"get_module_names","qualname":"::traits::GetCallMetadata::get_module_names","value":"pub fn get_module_names() -> &'static [&'static str]","parent":{"krate":0,"index":1863},"children":[],"decl_id":null,"docs":" Return all module names.\n","sig":null,"attributes":[{"value":"/ Return all module names.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":433998,"byte_end":434026,"line_start":1481,"line_end":1481,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434137,"byte_end":434151,"line_start":1484,"line_end":1484,"column_start":5,"column_end":19},"name":"get_call_names","qualname":"::traits::GetCallMetadata::get_call_names","value":"pub fn get_call_names(&str) -> &'static [&'static str]","parent":{"krate":0,"index":1863},"children":[],"decl_id":null,"docs":" Return all function names for the given `module`.\n","sig":null,"attributes":[{"value":"/ Return all function names for the given `module`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434079,"byte_end":434132,"line_start":1483,"line_end":1483,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1866},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434279,"byte_end":434296,"line_start":1486,"line_end":1486,"column_start":5,"column_end":22},"name":"get_call_metadata","qualname":"::traits::GetCallMetadata::get_call_metadata","value":"pub fn get_call_metadata(&Self) -> CallMetadata","parent":{"krate":0,"index":1863},"children":[],"decl_id":null,"docs":" Return a [`CallMetadata`], containing function and pallet name of the Call.\n","sig":null,"attributes":[{"value":"/ Return a [`CallMetadata`], containing function and pallet name of the Call.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434195,"byte_end":434274,"line_start":1485,"line_end":1485,"column_start":2,"column_end":81}}]},{"kind":"Trait","id":{"krate":0,"index":4173},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434495,"byte_end":434505,"line_start":1493,"line_end":1493,"column_start":11,"column_end":21},"name":"OnFinalize","qualname":"::traits::OnFinalize","value":"OnFinalize<BlockNumber>","parent":null,"children":[{"krate":0,"index":4175}],"decl_id":null,"docs":" The block finalization trait.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4175},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434717,"byte_end":434728,"line_start":1498,"line_end":1498,"column_start":5,"column_end":16},"name":"on_finalize","qualname":"::traits::OnFinalize::on_finalize","value":"pub fn on_finalize(BlockNumber)","parent":{"krate":0,"index":4173},"children":[],"decl_id":null,"docs":" The block is being finalized. Implement to have something happen.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1867},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434956,"byte_end":434968,"line_start":1505,"line_end":1505,"column_start":11,"column_end":23},"name":"OnInitialize","qualname":"::traits::OnInitialize","value":"OnInitialize<BlockNumber>","parent":null,"children":[{"krate":0,"index":1869}],"decl_id":null,"docs":" The block initialization trait.","sig":null,"attributes":[{"value":"/ The block initialization trait.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434752,"byte_end":434787,"line_start":1501,"line_end":1501,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434788,"byte_end":434791,"line_start":1502,"line_end":1502,"column_start":1,"column_end":4}},{"value":"/ Implementing this lets you express what should happen for your pallet when the block is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434792,"byte_end":434883,"line_start":1503,"line_end":1503,"column_start":1,"column_end":92}},{"value":"/ beginning (right before the first extrinsic is executed).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434884,"byte_end":434945,"line_start":1504,"line_end":1504,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1869},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":435369,"byte_end":435382,"line_start":1513,"line_end":1513,"column_start":5,"column_end":18},"name":"on_initialize","qualname":"::traits::OnInitialize::on_initialize","value":"pub fn on_initialize(BlockNumber) -> crate::weights::Weight","parent":{"krate":0,"index":1867},"children":[],"decl_id":null,"docs":" The block is being initialized. Implement to have something happen.","sig":null,"attributes":[{"value":"/ The block is being initialized. Implement to have something happen.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":434985,"byte_end":435056,"line_start":1506,"line_end":1506,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":435058,"byte_end":435061,"line_start":1507,"line_end":1507,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed in the block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":435063,"byte_end":435122,"line_start":1508,"line_end":1508,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":435124,"byte_end":435127,"line_start":1509,"line_end":1509,"column_start":2,"column_end":5}},{"value":"/ NOTE: This function is called BEFORE ANY extrinsic in a block is applied,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":435129,"byte_end":435206,"line_start":1510,"line_end":1510,"column_start":2,"column_end":79}},{"value":"/ including inherent extrinsics. Hence for instance, if you runtime includes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":435208,"byte_end":435286,"line_start":1511,"line_end":1511,"column_start":2,"column_end":80}},{"value":"/ `pallet_timestamp`, the `timestamp` is not yet up to date at this point.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":435288,"byte_end":435364,"line_start":1512,"line_end":1512,"column_start":2,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":5292},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436043,"byte_end":436052,"line_start":1531,"line_end":1531,"column_start":11,"column_end":20},"name":"OnGenesis","qualname":"::traits::OnGenesis","value":"OnGenesis","parent":null,"children":[{"krate":0,"index":5293}],"decl_id":null,"docs":" A trait that will be called at genesis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5293},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436105,"byte_end":436115,"line_start":1533,"line_end":1533,"column_start":5,"column_end":15},"name":"on_genesis","qualname":"::traits::OnGenesis::on_genesis","value":"pub fn on_genesis()","parent":{"krate":0,"index":5292},"children":[],"decl_id":null,"docs":" Something that should happen at genesis.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1870},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436304,"byte_end":436320,"line_start":1540,"line_end":1540,"column_start":11,"column_end":27},"name":"OnRuntimeUpgrade","qualname":"::traits::OnRuntimeUpgrade","value":"OnRuntimeUpgrade","parent":null,"children":[{"krate":0,"index":1871}],"decl_id":null,"docs":" The runtime upgrade trait.","sig":null,"attributes":[{"value":"/ The runtime upgrade trait.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436124,"byte_end":436154,"line_start":1536,"line_end":1536,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436155,"byte_end":436158,"line_start":1537,"line_end":1537,"column_start":1,"column_end":4}},{"value":"/ Implementing this lets you express what should happen when the runtime upgrades,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436159,"byte_end":436243,"line_start":1538,"line_end":1538,"column_start":1,"column_end":85}},{"value":"/ and changes may need to occur to your module.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436244,"byte_end":436293,"line_start":1539,"line_end":1539,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1871},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436669,"byte_end":436687,"line_start":1550,"line_end":1550,"column_start":5,"column_end":23},"name":"on_runtime_upgrade","qualname":"::traits::OnRuntimeUpgrade::on_runtime_upgrade","value":"pub fn on_runtime_upgrade() -> crate::weights::Weight","parent":{"krate":0,"index":1870},"children":[],"decl_id":null,"docs":" Perform a module upgrade.","sig":null,"attributes":[{"value":"/ Perform a module upgrade.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436324,"byte_end":436353,"line_start":1541,"line_end":1541,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436355,"byte_end":436358,"line_start":1542,"line_end":1542,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436360,"byte_end":436373,"line_start":1543,"line_end":1543,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436375,"byte_end":436378,"line_start":1544,"line_end":1544,"column_start":2,"column_end":5}},{"value":"/ This function will be called before we initialized any runtime state, aka `on_initialize`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436380,"byte_end":436473,"line_start":1545,"line_end":1545,"column_start":2,"column_end":95}},{"value":"/ wasn't called yet. So, information like the block number and any other","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436475,"byte_end":436549,"line_start":1546,"line_end":1546,"column_start":2,"column_end":76}},{"value":"/ block local data are not accessible.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436551,"byte_end":436591,"line_start":1547,"line_end":1547,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436593,"byte_end":436596,"line_start":1548,"line_end":1548,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed for runtime upgrade.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":436598,"byte_end":436664,"line_start":1549,"line_end":1549,"column_start":2,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":6348},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":437484,"byte_end":437498,"line_start":1573,"line_end":1573,"column_start":11,"column_end":25},"name":"OffchainWorker","qualname":"::traits::OffchainWorker","value":"OffchainWorker<BlockNumber>","parent":null,"children":[{"krate":0,"index":6350}],"decl_id":null,"docs":" Off-chain computation trait.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6350},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":437854,"byte_end":437869,"line_start":1580,"line_end":1580,"column_start":5,"column_end":20},"name":"offchain_worker","qualname":"::traits::OffchainWorker::offchain_worker","value":"pub fn offchain_worker(BlockNumber)","parent":{"krate":0,"index":6348},"children":[],"decl_id":null,"docs":" This function is being called after every block import (when fully synced).","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1872},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":437901,"byte_end":437909,"line_start":1583,"line_end":1583,"column_start":9,"column_end":17},"name":"schedule","qualname":"::traits::schedule","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","parent":null,"children":[{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1876},{"krate":0,"index":6909},{"krate":0,"index":6943},{"krate":0,"index":6936},{"krate":0,"index":6934},{"krate":0,"index":6931},{"krate":0,"index":6925},{"krate":0,"index":6927},{"krate":0,"index":6920},{"krate":0,"index":6922},{"krate":0,"index":6917},{"krate":0,"index":1877},{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":1880},{"krate":0,"index":1889}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1874},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438169,"byte_end":438175,"line_start":1589,"line_end":1589,"column_start":11,"column_end":17},"name":"Period","qualname":"::traits::schedule::Period","value":"(BlockNumber, u32)","parent":null,"children":[],"decl_id":null,"docs":" Information relating to the period of a scheduled task. First item is the length of the\n period and the second is the number of times it should be executed in total before the task\n is considered finished and removed.\n","sig":null,"attributes":[{"value":"/ Information relating to the period of a scheduled task. First item is the length of the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":437929,"byte_end":438020,"line_start":1586,"line_end":1586,"column_start":2,"column_end":93}},{"value":"/ period and the second is the number of times it should be executed in total before the task","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438022,"byte_end":438117,"line_start":1587,"line_end":1587,"column_start":2,"column_end":97}},{"value":"/ is considered finished and removed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438119,"byte_end":438158,"line_start":1588,"line_end":1588,"column_start":2,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1876},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438343,"byte_end":438351,"line_start":1593,"line_end":1593,"column_start":11,"column_end":19},"name":"Priority","qualname":"::traits::schedule::Priority","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Priority with which a call is scheduled. It's just a linear amount with lowest values meaning\n higher priority.\n","sig":null,"attributes":[{"value":"/ Priority with which a call is scheduled. It's just a linear amount with lowest values meaning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438213,"byte_end":438310,"line_start":1591,"line_end":1591,"column_start":2,"column_end":99}},{"value":"/ higher priority.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438312,"byte_end":438332,"line_start":1592,"line_end":1592,"column_start":2,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6911},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438538,"byte_end":438540,"line_start":1599,"line_end":1599,"column_start":3,"column_end":5},"name":"At","qualname":"::traits::schedule::DispatchTime::At","value":"DispatchTime::At(BlockNumber)","parent":{"krate":0,"index":6909},"children":[],"decl_id":null,"docs":" At specified block.\n","sig":null,"attributes":[{"value":"/ At specified block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438512,"byte_end":438535,"line_start":1598,"line_end":1598,"column_start":3,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6914},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438597,"byte_end":438602,"line_start":1601,"line_end":1601,"column_start":3,"column_end":8},"name":"After","qualname":"::traits::schedule::DispatchTime::After","value":"DispatchTime::After(BlockNumber)","parent":{"krate":0,"index":6909},"children":[],"decl_id":null,"docs":" After specified number of blocks.\n","sig":null,"attributes":[{"value":"/ After specified number of blocks.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438557,"byte_end":438594,"line_start":1600,"line_end":1600,"column_start":3,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":6909},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438482,"byte_end":438494,"line_start":1597,"line_end":1597,"column_start":11,"column_end":23},"name":"DispatchTime","qualname":"::traits::schedule::DispatchTime","value":"pub enum DispatchTime<BlockNumber> {\n\n    /// At specified block.\n    At(BlockNumber),\n\n    /// After specified number of blocks.\n    After(BlockNumber),\n}","parent":null,"children":[{"krate":0,"index":6911},{"krate":0,"index":6914}],"decl_id":null,"docs":" The dispatch time of a scheduled task.\n","sig":null,"attributes":[{"value":"/ The dispatch time of a scheduled task.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438360,"byte_end":438402,"line_start":1595,"line_end":1595,"column_start":2,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":1877},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438769,"byte_end":438785,"line_start":1606,"line_end":1606,"column_start":12,"column_end":28},"name":"HIGHEST_PRIORITY","qualname":"::traits::schedule::HIGHEST_PRIORITY","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" The highest priority. We invert the value so that normal sorting will place the highest\n priority at the beginning of the list.\n","sig":null,"attributes":[{"value":"/ The highest priority. We invert the value so that normal sorting will place the highest","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438622,"byte_end":438713,"line_start":1604,"line_end":1604,"column_start":2,"column_end":93}},{"value":"/ priority at the beginning of the list.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438715,"byte_end":438757,"line_start":1605,"line_end":1605,"column_start":2,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":1878},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438967,"byte_end":438980,"line_start":1609,"line_end":1609,"column_start":12,"column_end":25},"name":"HARD_DEADLINE","qualname":"::traits::schedule::HARD_DEADLINE","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" Anything of this value or lower will definitely be scheduled on the block that they ask for, even\n if it breaches the `MaximumWeight` limitation.\n","sig":null,"attributes":[{"value":"/ Anything of this value or lower will definitely be scheduled on the block that they ask for, even","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438802,"byte_end":438903,"line_start":1607,"line_end":1607,"column_start":2,"column_end":103}},{"value":"/ if it breaches the `MaximumWeight` limitation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438905,"byte_end":438955,"line_start":1608,"line_end":1608,"column_start":2,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":1879},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439068,"byte_end":439083,"line_start":1611,"line_end":1611,"column_start":12,"column_end":27},"name":"LOWEST_PRIORITY","qualname":"::traits::schedule::LOWEST_PRIORITY","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" The lowest priority. Most stuff should be around here.\n","sig":null,"attributes":[{"value":"/ The lowest priority. Most stuff should be around here.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":438998,"byte_end":439056,"line_start":1610,"line_end":1610,"column_start":2,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":1880},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439158,"byte_end":439162,"line_start":1614,"line_end":1614,"column_start":12,"column_end":16},"name":"Anon","qualname":"::traits::schedule::Anon","value":"Anon<BlockNumber, Call, Origin>","parent":null,"children":[{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1888}],"decl_id":null,"docs":" A type that can be used as a scheduler.\n","sig":null,"attributes":[{"value":"/ A type that can be used as a scheduler.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439103,"byte_end":439146,"line_start":1613,"line_end":1613,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1884},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439265,"byte_end":439272,"line_start":1616,"line_end":1616,"column_start":8,"column_end":15},"name":"Address","qualname":"::traits::schedule::Anon::Address","value":"type Address: Codec + Clone + Eq + EncodeLike + Debug;","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" An address which can be used for removing a scheduled task.\n","sig":null,"attributes":[{"value":"/ An address which can be used for removing a scheduled task.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439194,"byte_end":439257,"line_start":1615,"line_end":1615,"column_start":3,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439434,"byte_end":439442,"line_start":1621,"line_end":1621,"column_start":6,"column_end":14},"name":"schedule","qualname":"::traits::schedule::Anon::schedule","value":"pub fn schedule(DispatchTime<BlockNumber>, Option<Period<BlockNumber>>,\n                Priority, Origin, Call)\n-> Result<Self::Address, DispatchError>","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" Schedule a dispatch to happen at the beginning of some block in the future.","sig":null,"attributes":[{"value":"/ Schedule a dispatch to happen at the beginning of some block in the future.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439318,"byte_end":439397,"line_start":1618,"line_end":1618,"column_start":3,"column_end":82}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439400,"byte_end":439403,"line_start":1619,"line_end":1619,"column_start":3,"column_end":6}},{"value":"/ This is not named.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439406,"byte_end":439428,"line_start":1620,"line_end":1620,"column_start":3,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440164,"byte_end":440170,"line_start":1639,"line_end":1639,"column_start":6,"column_end":12},"name":"cancel","qualname":"::traits::schedule::Anon::cancel","value":"pub fn cancel(Self::Address) -> Result<(), ()>","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" Cancel a scheduled task. If periodic, then it will cancel all further instances of that,\n also.","sig":null,"attributes":[{"value":"/ Cancel a scheduled task. If periodic, then it will cancel all further instances of that,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439632,"byte_end":439724,"line_start":1629,"line_end":1629,"column_start":3,"column_end":95}},{"value":"/ also.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439727,"byte_end":439736,"line_start":1630,"line_end":1630,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439739,"byte_end":439742,"line_start":1631,"line_end":1631,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `address` is invalid.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439745,"byte_end":439798,"line_start":1632,"line_end":1632,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439801,"byte_end":439804,"line_start":1633,"line_end":1633,"column_start":3,"column_end":6}},{"value":"/ NOTE: This guaranteed to work only *before* the point that it is due to be executed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439807,"byte_end":439895,"line_start":1634,"line_end":1634,"column_start":3,"column_end":91}},{"value":"/ If it ends up being delayed beyond the point of execution, then it cannot be cancelled.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439898,"byte_end":439989,"line_start":1635,"line_end":1635,"column_start":3,"column_end":94}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439992,"byte_end":439995,"line_start":1636,"line_end":1636,"column_start":3,"column_end":6}},{"value":"/ NOTE2: This will not work to cancel periodic tasks after their initial execution. For","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":439998,"byte_end":440087,"line_start":1637,"line_end":1637,"column_start":3,"column_end":92}},{"value":"/ that, you must name the task explicitly using the `Named` trait.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440090,"byte_end":440158,"line_start":1638,"line_end":1638,"column_start":3,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440578,"byte_end":440588,"line_start":1647,"line_end":1647,"column_start":6,"column_end":16},"name":"reschedule","qualname":"::traits::schedule::Anon::reschedule","value":"pub fn reschedule(Self::Address, DispatchTime<BlockNumber>)\n-> Result<Self::Address, DispatchError>","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed\n only if it is executed *before* the currently scheduled block. For periodic tasks,\n this dispatch is guaranteed to succeed only before the *initial* execution; for\n others, use `reschedule_named`.","sig":null,"attributes":[{"value":"/ Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440217,"byte_end":440297,"line_start":1641,"line_end":1641,"column_start":3,"column_end":83}},{"value":"/ only if it is executed *before* the currently scheduled block. For periodic tasks,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440300,"byte_end":440386,"line_start":1642,"line_end":1642,"column_start":3,"column_end":89}},{"value":"/ this dispatch is guaranteed to succeed only before the *initial* execution; for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440389,"byte_end":440472,"line_start":1643,"line_end":1643,"column_start":3,"column_end":86}},{"value":"/ others, use `reschedule_named`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440475,"byte_end":440510,"line_start":1644,"line_end":1644,"column_start":3,"column_end":38}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440513,"byte_end":440516,"line_start":1645,"line_end":1645,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `address` is invalid.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440519,"byte_end":440572,"line_start":1646,"line_end":1646,"column_start":3,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440820,"byte_end":440838,"line_start":1655,"line_end":1655,"column_start":6,"column_end":24},"name":"next_dispatch_time","qualname":"::traits::schedule::Anon::next_dispatch_time","value":"pub fn next_dispatch_time(Self::Address) -> Result<BlockNumber, ()>","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" Return the next dispatch time for a given task.","sig":null,"attributes":[{"value":"/ Return the next dispatch time for a given task.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440701,"byte_end":440752,"line_start":1652,"line_end":1652,"column_start":3,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440755,"byte_end":440758,"line_start":1653,"line_end":1653,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `address` is invalid.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440761,"byte_end":440814,"line_start":1654,"line_end":1654,"column_start":3,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":1889},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440951,"byte_end":440956,"line_start":1659,"line_end":1659,"column_start":12,"column_end":17},"name":"Named","qualname":"::traits::schedule::Named","value":"Named<BlockNumber, Call, Origin>","parent":null,"children":[{"krate":0,"index":1893},{"krate":0,"index":1894},{"krate":0,"index":1895},{"krate":0,"index":1896},{"krate":0,"index":1897}],"decl_id":null,"docs":" A type that can be used as a scheduler.\n","sig":null,"attributes":[{"value":"/ A type that can be used as a scheduler.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440896,"byte_end":440939,"line_start":1658,"line_end":1658,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1893},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441059,"byte_end":441066,"line_start":1661,"line_end":1661,"column_start":8,"column_end":15},"name":"Address","qualname":"::traits::schedule::Named::Address","value":"type Address: Codec + Clone + Eq + EncodeLike + sp_std::fmt::Debug;","parent":{"krate":0,"index":1889},"children":[],"decl_id":null,"docs":" An address which can be used for removing a scheduled task.\n","sig":null,"attributes":[{"value":"/ An address which can be used for removing a scheduled task.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":440988,"byte_end":441051,"line_start":1660,"line_end":1660,"column_start":3,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441309,"byte_end":441323,"line_start":1666,"line_end":1666,"column_start":6,"column_end":20},"name":"schedule_named","qualname":"::traits::schedule::Named::schedule_named","value":"pub fn schedule_named(Vec<u8>, DispatchTime<BlockNumber>,\n                      Option<Period<BlockNumber>>, Priority, Origin, Call)\n-> Result<Self::Address, ()>","parent":{"krate":0,"index":1889},"children":[],"decl_id":null,"docs":" Schedule a dispatch to happen at the beginning of some block in the future.","sig":null,"attributes":[{"value":"/ Schedule a dispatch to happen at the beginning of some block in the future.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441125,"byte_end":441204,"line_start":1663,"line_end":1663,"column_start":3,"column_end":82}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441207,"byte_end":441210,"line_start":1664,"line_end":1664,"column_start":3,"column_end":6}},{"value":"/ - `id`: The identity of the task. This must be unique and will return an error if not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441213,"byte_end":441303,"line_start":1665,"line_end":1665,"column_start":3,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1895},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441883,"byte_end":441895,"line_start":1682,"line_end":1682,"column_start":6,"column_end":18},"name":"cancel_named","qualname":"::traits::schedule::Named::cancel_named","value":"pub fn cancel_named(Vec<u8>) -> Result<(), ()>","parent":{"krate":0,"index":1889},"children":[],"decl_id":null,"docs":" Cancel a scheduled, named task. If periodic, then it will cancel all further instances\n of that, also.","sig":null,"attributes":[{"value":"/ Cancel a scheduled, named task. If periodic, then it will cancel all further instances","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441518,"byte_end":441608,"line_start":1675,"line_end":1675,"column_start":3,"column_end":93}},{"value":"/ of that, also.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441611,"byte_end":441629,"line_start":1676,"line_end":1676,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441632,"byte_end":441635,"line_start":1677,"line_end":1677,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `id` is invalid.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441638,"byte_end":441686,"line_start":1678,"line_end":1678,"column_start":3,"column_end":51}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441689,"byte_end":441692,"line_start":1679,"line_end":1679,"column_start":3,"column_end":6}},{"value":"/ NOTE: This guaranteed to work only *before* the point that it is due to be executed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441695,"byte_end":441783,"line_start":1680,"line_end":1680,"column_start":3,"column_end":91}},{"value":"/ If it ends up being delayed beyond the point of execution, then it cannot be cancelled.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441786,"byte_end":441877,"line_start":1681,"line_end":1681,"column_start":3,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1896},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442086,"byte_end":442102,"line_start":1686,"line_end":1686,"column_start":6,"column_end":22},"name":"reschedule_named","qualname":"::traits::schedule::Named::reschedule_named","value":"pub fn reschedule_named(Vec<u8>, DispatchTime<BlockNumber>)\n-> Result<Self::Address, DispatchError>","parent":{"krate":0,"index":1889},"children":[],"decl_id":null,"docs":" Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed\n only if it is executed *before* the currently scheduled block.\n","sig":null,"attributes":[{"value":"/ Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":441931,"byte_end":442011,"line_start":1684,"line_end":1684,"column_start":3,"column_end":83}},{"value":"/ only if it is executed *before* the currently scheduled block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442014,"byte_end":442080,"line_start":1685,"line_end":1685,"column_start":3,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1897},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442318,"byte_end":442336,"line_start":1694,"line_end":1694,"column_start":6,"column_end":24},"name":"next_dispatch_time","qualname":"::traits::schedule::Named::next_dispatch_time","value":"pub fn next_dispatch_time(Vec<u8>) -> Result<BlockNumber, ()>","parent":{"krate":0,"index":1889},"children":[],"decl_id":null,"docs":" Return the next dispatch time for a given task.","sig":null,"attributes":[{"value":"/ Return the next dispatch time for a given task.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442204,"byte_end":442255,"line_start":1691,"line_end":1691,"column_start":3,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442258,"byte_end":442261,"line_start":1692,"line_end":1692,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `id` is invalid.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442264,"byte_end":442312,"line_start":1693,"line_end":1693,"column_start":3,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":1898},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442460,"byte_end":442472,"line_start":1699,"line_end":1699,"column_start":11,"column_end":23},"name":"EnsureOrigin","qualname":"::traits::EnsureOrigin","value":"EnsureOrigin<OuterOrigin>","parent":null,"children":[{"krate":0,"index":1900},{"krate":0,"index":1901},{"krate":0,"index":1903}],"decl_id":null,"docs":" Some sort of check on the origin is performed by this object.\n","sig":null,"attributes":[{"value":"/ Some sort of check on the origin is performed by this object.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442384,"byte_end":442449,"line_start":1698,"line_end":1698,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1900},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442514,"byte_end":442521,"line_start":1701,"line_end":1701,"column_start":7,"column_end":14},"name":"Success","qualname":"::traits::EnsureOrigin::Success","value":"type Success;","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":" A return type.\n","sig":null,"attributes":[{"value":"/ A return type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442489,"byte_end":442507,"line_start":1700,"line_end":1700,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1901},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442558,"byte_end":442571,"line_start":1703,"line_end":1703,"column_start":5,"column_end":18},"name":"ensure_origin","qualname":"::traits::EnsureOrigin::ensure_origin","value":"pub fn ensure_origin(OuterOrigin) -> result::Result<Self::Success, BadOrigin>","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":" Perform the origin check.\n","sig":null,"attributes":[{"value":"/ Perform the origin check.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442524,"byte_end":442553,"line_start":1702,"line_end":1702,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1903},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442717,"byte_end":442727,"line_start":1707,"line_end":1707,"column_start":5,"column_end":15},"name":"try_origin","qualname":"::traits::EnsureOrigin::try_origin","value":"pub fn try_origin(OuterOrigin) -> result::Result<Self::Success, OuterOrigin>","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":" Perform the origin check.\n","sig":null,"attributes":[{"value":"/ Perform the origin check.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442683,"byte_end":442712,"line_start":1706,"line_end":1706,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":1904},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443245,"byte_end":443267,"line_start":1720,"line_end":1720,"column_start":11,"column_end":33},"name":"UnfilteredDispatchable","qualname":"::traits::UnfilteredDispatchable","value":"UnfilteredDispatchable","parent":null,"children":[{"krate":0,"index":1905},{"krate":0,"index":1906}],"decl_id":null,"docs":" Type that can be dispatched with an origin but without checking the origin filter.","sig":null,"attributes":[{"value":"/ Type that can be dispatched with an origin but without checking the origin filter.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":442999,"byte_end":443085,"line_start":1716,"line_end":1716,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443086,"byte_end":443089,"line_start":1717,"line_end":1717,"column_start":1,"column_end":4}},{"value":"/ Implemented for pallet dispatchable type by `decl_module` and for runtime dispatchable by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443090,"byte_end":443183,"line_start":1718,"line_end":1718,"column_start":1,"column_end":94}},{"value":"/ `construct_runtime` and `impl_outer_dispatch`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443184,"byte_end":443234,"line_start":1719,"line_end":1719,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1905},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443352,"byte_end":443358,"line_start":1722,"line_end":1722,"column_start":7,"column_end":13},"name":"Origin","qualname":"::traits::UnfilteredDispatchable::Origin","value":"type Origin;","parent":{"krate":0,"index":1904},"children":[],"decl_id":null,"docs":" The origin type of the runtime, (i.e. `frame_system::Config::Origin`).\n","sig":null,"attributes":[{"value":"/ The origin type of the runtime, (i.e. `frame_system::Config::Origin`).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443271,"byte_end":443345,"line_start":1721,"line_end":1721,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443428,"byte_end":443450,"line_start":1725,"line_end":1725,"column_start":5,"column_end":27},"name":"dispatch_bypass_filter","qualname":"::traits::UnfilteredDispatchable::dispatch_bypass_filter","value":"pub fn dispatch_bypass_filter(Self, Self::Origin)\n-> crate::dispatch::DispatchResultWithPostInfo","parent":{"krate":0,"index":1904},"children":[],"decl_id":null,"docs":" Dispatch this call but do not check the filter in origin.\n","sig":null,"attributes":[{"value":"/ Dispatch this call but do not check the filter in origin.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443362,"byte_end":443423,"line_start":1724,"line_end":1724,"column_start":2,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":1907},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443597,"byte_end":443608,"line_start":1729,"line_end":1729,"column_start":11,"column_end":22},"name":"OriginTrait","qualname":"::traits::OriginTrait","value":"OriginTrait: Sized","parent":null,"children":[{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1913},{"krate":0,"index":1914},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920}],"decl_id":null,"docs":" Methods available on `frame_system::Config::Origin`.\n","sig":null,"attributes":[{"value":"/ Methods available on `frame_system::Config::Origin`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443530,"byte_end":443586,"line_start":1728,"line_end":1728,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":1908},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443683,"byte_end":443687,"line_start":1731,"line_end":1731,"column_start":7,"column_end":11},"name":"Call","qualname":"::traits::OriginTrait::Call","value":"type Call;","parent":{"krate":0,"index":1907},"children":[],"decl_id":null,"docs":" Runtime call type, as in `frame_system::Config::Call`\n","sig":null,"attributes":[{"value":"/ Runtime call type, as in `frame_system::Config::Call`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443619,"byte_end":443676,"line_start":1730,"line_end":1730,"column_start":2,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":1909},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443761,"byte_end":443774,"line_start":1734,"line_end":1734,"column_start":7,"column_end":20},"name":"PalletsOrigin","qualname":"::traits::OriginTrait::PalletsOrigin","value":"type PalletsOrigin;","parent":{"krate":0,"index":1907},"children":[],"decl_id":null,"docs":" The caller origin, overarching type of all pallets origins.\n","sig":null,"attributes":[{"value":"/ The caller origin, overarching type of all pallets origins.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443691,"byte_end":443754,"line_start":1733,"line_end":1733,"column_start":2,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":1910},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443826,"byte_end":443835,"line_start":1737,"line_end":1737,"column_start":7,"column_end":16},"name":"AccountId","qualname":"::traits::OriginTrait::AccountId","value":"type AccountId;","parent":{"krate":0,"index":1907},"children":[],"decl_id":null,"docs":" The AccountId used across the system.\n","sig":null,"attributes":[{"value":"/ The AccountId used across the system.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443778,"byte_end":443819,"line_start":1736,"line_end":1736,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1911},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443875,"byte_end":443885,"line_start":1740,"line_end":1740,"column_start":5,"column_end":15},"name":"add_filter","qualname":"::traits::OriginTrait::add_filter","value":"pub fn add_filter<impl Fn(&Self::Call) -> bool + 'static: Fn(&Self::Call) ->\n                  bool +\n                  'static>(&mut Self, impl Fn(&Self::Call) -> bool + 'static)","parent":{"krate":0,"index":1907},"children":[],"decl_id":null,"docs":" Add a filter to the origin.\n","sig":null,"attributes":[{"value":"/ Add a filter to the origin.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443839,"byte_end":443870,"line_start":1739,"line_end":1739,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1913},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444037,"byte_end":444049,"line_start":1743,"line_end":1743,"column_start":5,"column_end":17},"name":"reset_filter","qualname":"::traits::OriginTrait::reset_filter","value":"pub fn reset_filter(&mut Self)","parent":{"krate":0,"index":1907},"children":[],"decl_id":null,"docs":" Reset origin filters to default one, i.e `frame_system::Config::BaseCallFilter`.\n","sig":null,"attributes":[{"value":"/ Reset origin filters to default one, i.e `frame_system::Config::BaseCallFilter`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443948,"byte_end":444032,"line_start":1742,"line_end":1742,"column_start":2,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1914},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444125,"byte_end":444140,"line_start":1746,"line_end":1746,"column_start":5,"column_end":20},"name":"set_caller_from","qualname":"::traits::OriginTrait::set_caller_from","value":"pub fn set_caller_from<impl Into<Self>: Into<Self>>(&mut Self,\n                                                    impl Into<Self>)","parent":{"krate":0,"index":1907},"children":[],"decl_id":null,"docs":" Replace the caller with caller from the other origin\n","sig":null,"attributes":[{"value":"/ Replace the caller with caller from the other origin","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444064,"byte_end":444120,"line_start":1745,"line_end":1745,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1916},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444240,"byte_end":444251,"line_start":1749,"line_end":1749,"column_start":5,"column_end":16},"name":"filter_call","qualname":"::traits::OriginTrait::filter_call","value":"pub fn filter_call(&Self, &Self::Call) -> bool","parent":{"krate":0,"index":1907},"children":[],"decl_id":null,"docs":" Filter the call, if false then call is filtered out.\n","sig":null,"attributes":[{"value":"/ Filter the call, if false then call is filtered out.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444179,"byte_end":444235,"line_start":1748,"line_end":1748,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1917},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444313,"byte_end":444319,"line_start":1752,"line_end":1752,"column_start":5,"column_end":11},"name":"caller","qualname":"::traits::OriginTrait::caller","value":"pub fn caller(&Self) -> &Self::PalletsOrigin","parent":{"krate":0,"index":1907},"children":[],"decl_id":null,"docs":" Get the caller.\n","sig":null,"attributes":[{"value":"/ Get the caller.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444289,"byte_end":444308,"line_start":1751,"line_end":1751,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1918},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444437,"byte_end":444441,"line_start":1755,"line_end":1755,"column_start":5,"column_end":9},"name":"none","qualname":"::traits::OriginTrait::none","value":"pub fn none() -> Self","parent":{"krate":0,"index":1907},"children":[],"decl_id":null,"docs":" Create with system none origin and `frame-system::Config::BaseCallFilter`.\n","sig":null,"attributes":[{"value":"/ Create with system none origin and `frame-system::Config::BaseCallFilter`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444354,"byte_end":444432,"line_start":1754,"line_end":1754,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1919},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444509,"byte_end":444513,"line_start":1758,"line_end":1758,"column_start":5,"column_end":9},"name":"root","qualname":"::traits::OriginTrait::root","value":"pub fn root() -> Self","parent":{"krate":0,"index":1907},"children":[],"decl_id":null,"docs":" Create with system root origin and no filter.\n","sig":null,"attributes":[{"value":"/ Create with system root origin and no filter.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444455,"byte_end":444504,"line_start":1757,"line_end":1757,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1920},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444612,"byte_end":444618,"line_start":1761,"line_end":1761,"column_start":5,"column_end":11},"name":"signed","qualname":"::traits::OriginTrait::signed","value":"pub fn signed(Self::AccountId) -> Self","parent":{"krate":0,"index":1907},"children":[],"decl_id":null,"docs":" Create with system signed origin and `frame-system::Config::BaseCallFilter`.\n","sig":null,"attributes":[{"value":"/ Create with system signed origin and `frame-system::Config::BaseCallFilter`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444527,"byte_end":444607,"line_start":1760,"line_end":1760,"column_start":2,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":1921},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444805,"byte_end":444811,"line_start":1767,"line_end":1767,"column_start":11,"column_end":17},"name":"IsType","qualname":"::traits::IsType","value":"IsType<T>: Into<T> + From<T>","parent":null,"children":[{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926}],"decl_id":null,"docs":" Trait to be used when types are exactly same.","sig":null,"attributes":[{"value":"/ Trait to be used when types are exactly same.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444652,"byte_end":444701,"line_start":1764,"line_end":1764,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444702,"byte_end":444705,"line_start":1765,"line_end":1765,"column_start":1,"column_end":4}},{"value":"/ This allow to convert back and forth from type, a reference and a mutable reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444706,"byte_end":444794,"line_start":1766,"line_end":1766,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1923},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444861,"byte_end":444869,"line_start":1769,"line_end":1769,"column_start":5,"column_end":13},"name":"from_ref","qualname":"::traits::IsType::from_ref","value":"pub fn from_ref(&T) -> &Self","parent":{"krate":0,"index":1921},"children":[],"decl_id":null,"docs":" Cast reference.\n","sig":null,"attributes":[{"value":"/ Cast reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444837,"byte_end":444856,"line_start":1768,"line_end":1768,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1924},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444913,"byte_end":444921,"line_start":1772,"line_end":1772,"column_start":5,"column_end":13},"name":"into_ref","qualname":"::traits::IsType::into_ref","value":"pub fn into_ref(&Self) -> &T","parent":{"krate":0,"index":1921},"children":[],"decl_id":null,"docs":" Cast reference.\n","sig":null,"attributes":[{"value":"/ Cast reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444889,"byte_end":444908,"line_start":1771,"line_end":1771,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1925},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444970,"byte_end":444978,"line_start":1775,"line_end":1775,"column_start":5,"column_end":13},"name":"from_mut","qualname":"::traits::IsType::from_mut","value":"pub fn from_mut(&mut T) -> &mut Self","parent":{"krate":0,"index":1921},"children":[],"decl_id":null,"docs":" Cast mutable reference.\n","sig":null,"attributes":[{"value":"/ Cast mutable reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444938,"byte_end":444965,"line_start":1774,"line_end":1774,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445038,"byte_end":445046,"line_start":1778,"line_end":1778,"column_start":5,"column_end":13},"name":"into_mut","qualname":"::traits::IsType::into_mut","value":"pub fn into_mut(&mut Self) -> &mut T","parent":{"krate":0,"index":1921},"children":[],"decl_id":null,"docs":" Cast mutable reference.\n","sig":null,"attributes":[{"value":"/ Cast mutable reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445006,"byte_end":445033,"line_start":1777,"line_end":1777,"column_start":2,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":1933},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445552,"byte_end":445560,"line_start":1794,"line_end":1794,"column_start":11,"column_end":19},"name":"Instance","qualname":"::traits::Instance","value":"Instance: 'static","parent":null,"children":[{"krate":0,"index":1934}],"decl_id":null,"docs":" An instance of a pallet in the storage.","sig":null,"attributes":[{"value":"/ An instance of a pallet in the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445257,"byte_end":445300,"line_start":1788,"line_end":1788,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445301,"byte_end":445304,"line_start":1789,"line_end":1789,"column_start":1,"column_end":4}},{"value":"/ It is required that these instances are unique, to support multiple instances per pallet in the same runtime!","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445305,"byte_end":445418,"line_start":1790,"line_end":1790,"column_start":1,"column_end":114}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445419,"byte_end":445422,"line_start":1791,"line_end":1791,"column_start":1,"column_end":4}},{"value":"/ E.g. for module MyModule default instance will have prefix \"MyModule\" and other instances","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445423,"byte_end":445516,"line_start":1792,"line_end":1792,"column_start":1,"column_end":94}},{"value":"/ \"InstanceNMyModule\".","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445517,"byte_end":445541,"line_start":1793,"line_end":1793,"column_start":1,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":1934},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445645,"byte_end":445651,"line_start":1796,"line_end":1796,"column_start":8,"column_end":14},"name":"PREFIX","qualname":"::traits::Instance::PREFIX","value":"&'static str","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" Unique module prefix. E.g. \"InstanceNMyModule\" or \"MyModule\"\n","sig":null,"attributes":[{"value":"/ Unique module prefix. E.g. \"InstanceNMyModule\" or \"MyModule\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445573,"byte_end":445637,"line_start":1795,"line_end":1795,"column_start":2,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1935},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446113,"byte_end":446128,"line_start":1807,"line_end":1807,"column_start":11,"column_end":26},"name":"StorageInstance","qualname":"::traits::StorageInstance","value":"StorageInstance","parent":null,"children":[{"krate":0,"index":1936},{"krate":0,"index":1937}],"decl_id":null,"docs":" An instance of a storage in a pallet.","sig":null,"attributes":[{"value":"/ An instance of a storage in a pallet.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445670,"byte_end":445711,"line_start":1799,"line_end":1799,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445712,"byte_end":445715,"line_start":1800,"line_end":1800,"column_start":1,"column_end":4}},{"value":"/ Define an instance for an individual storage inside a pallet.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445716,"byte_end":445781,"line_start":1801,"line_end":1801,"column_start":1,"column_end":66}},{"value":"/ The pallet prefix is used to isolate the storage between pallets, and the storage prefix is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445782,"byte_end":445877,"line_start":1802,"line_end":1802,"column_start":1,"column_end":96}},{"value":"/ used to isolate storages inside a pallet.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445878,"byte_end":445923,"line_start":1803,"line_end":1803,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445924,"byte_end":445927,"line_start":1804,"line_end":1804,"column_start":1,"column_end":4}},{"value":"/ NOTE: These information can be used to define storages in pallet such as a `StorageMap` which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445928,"byte_end":446025,"line_start":1805,"line_end":1805,"column_start":1,"column_end":98}},{"value":"/ can use keys after `twox_128(pallet_prefix())++twox_128(STORAGE_PREFIX)`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446026,"byte_end":446102,"line_start":1806,"line_end":1806,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446193,"byte_end":446206,"line_start":1809,"line_end":1809,"column_start":5,"column_end":18},"name":"pallet_prefix","qualname":"::traits::StorageInstance::pallet_prefix","value":"pub fn pallet_prefix() -> &'static str","parent":{"krate":0,"index":1935},"children":[],"decl_id":null,"docs":" Prefix of a pallet to isolate it from other pallets.\n","sig":null,"attributes":[{"value":"/ Prefix of a pallet to isolate it from other pallets.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446132,"byte_end":446188,"line_start":1808,"line_end":1808,"column_start":2,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":1937},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446311,"byte_end":446325,"line_start":1812,"line_end":1812,"column_start":8,"column_end":22},"name":"STORAGE_PREFIX","qualname":"::traits::StorageInstance::STORAGE_PREFIX","value":"&'static str","parent":{"krate":0,"index":1935},"children":[],"decl_id":null,"docs":" Prefix given to a storage to isolate from other storages in the pallet.\n","sig":null,"attributes":[{"value":"/ Prefix given to a storage to isolate from other storages in the pallet.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446228,"byte_end":446303,"line_start":1811,"line_end":1811,"column_start":2,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1938},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446432,"byte_end":446442,"line_start":1816,"line_end":1816,"column_start":12,"column_end":22},"name":"GetDefault","qualname":"::traits::GetDefault","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implement Get by returning Default for any type that implements Default.\n","sig":null,"attributes":[{"value":"/ Implement Get by returning Default for any type that implements Default.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446344,"byte_end":446420,"line_start":1815,"line_end":1815,"column_start":1,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":1943},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447191,"byte_end":447205,"line_start":1835,"line_end":1835,"column_start":11,"column_end":25},"name":"CurrencyToVote","qualname":"::traits::CurrencyToVote","value":"CurrencyToVote<B>","parent":null,"children":[{"krate":0,"index":1945},{"krate":0,"index":1946}],"decl_id":null,"docs":" A trait similar to `Convert` to convert values from `B` an abstract balance type\n into u64 and back from u128. (This conversion is used in election and other places where complex\n calculation over balance type is needed)","sig":null,"attributes":[{"value":"/ A trait similar to `Convert` to convert values from `B` an abstract balance type","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446538,"byte_end":446622,"line_start":1823,"line_end":1823,"column_start":1,"column_end":85}},{"value":"/ into u64 and back from u128. (This conversion is used in election and other places where complex","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446623,"byte_end":446723,"line_start":1824,"line_end":1824,"column_start":1,"column_end":101}},{"value":"/ calculation over balance type is needed)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446724,"byte_end":446768,"line_start":1825,"line_end":1825,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446769,"byte_end":446772,"line_start":1826,"line_end":1826,"column_start":1,"column_end":4}},{"value":"/ Total issuance of the currency is passed in, but an implementation of this trait may or may not","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446773,"byte_end":446872,"line_start":1827,"line_end":1827,"column_start":1,"column_end":100}},{"value":"/ use it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446873,"byte_end":446884,"line_start":1828,"line_end":1828,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446885,"byte_end":446888,"line_start":1829,"line_end":1829,"column_start":1,"column_end":4}},{"value":"/ # WARNING","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446889,"byte_end":446902,"line_start":1830,"line_end":1830,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446903,"byte_end":446906,"line_start":1831,"line_end":1831,"column_start":1,"column_end":4}},{"value":"/ the total issuance being passed in implies that the implementation must be aware of the fact","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446907,"byte_end":447003,"line_start":1832,"line_end":1832,"column_start":1,"column_end":97}},{"value":"/ that its values can affect the outcome. This implies that if the vote value is dependent on the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447004,"byte_end":447103,"line_start":1833,"line_end":1833,"column_start":1,"column_end":100}},{"value":"/ total issuance, it should never ber written to storage for later re-use.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447104,"byte_end":447180,"line_start":1834,"line_end":1834,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1945},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447244,"byte_end":447251,"line_start":1837,"line_end":1837,"column_start":5,"column_end":12},"name":"to_vote","qualname":"::traits::CurrencyToVote::to_vote","value":"pub fn to_vote(B, B) -> u64","parent":{"krate":0,"index":1943},"children":[],"decl_id":null,"docs":" Convert balance to u64.\n","sig":null,"attributes":[{"value":"/ Convert balance to u64.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447212,"byte_end":447239,"line_start":1836,"line_end":1836,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1946},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447318,"byte_end":447329,"line_start":1840,"line_end":1840,"column_start":5,"column_end":16},"name":"to_currency","qualname":"::traits::CurrencyToVote::to_currency","value":"pub fn to_currency(u128, B) -> B","parent":{"krate":0,"index":1943},"children":[],"decl_id":null,"docs":" Convert u128 to balance.\n","sig":null,"attributes":[{"value":"/ Convert u128 to balance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447285,"byte_end":447313,"line_start":1839,"line_end":1839,"column_start":2,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1947},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448009,"byte_end":448027,"line_start":1854,"line_end":1854,"column_start":12,"column_end":30},"name":"U128CurrencyToVote","qualname":"::traits::U128CurrencyToVote","value":"","parent":null,"children":[],"decl_id":null,"docs":" An implementation of `CurrencyToVote` tailored for chain's that have a balance type of u128.","sig":null,"attributes":[{"value":"/ An implementation of `CurrencyToVote` tailored for chain's that have a balance type of u128.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447365,"byte_end":447461,"line_start":1843,"line_end":1843,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447462,"byte_end":447465,"line_start":1844,"line_end":1844,"column_start":1,"column_end":4}},{"value":"/ The factor is the `(total_issuance / u64::max()).max(1)`, represented as u64. Let's look at the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447466,"byte_end":447565,"line_start":1845,"line_end":1845,"column_start":1,"column_end":100}},{"value":"/ important cases:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447566,"byte_end":447586,"line_start":1846,"line_end":1846,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447587,"byte_end":447590,"line_start":1847,"line_end":1847,"column_start":1,"column_end":4}},{"value":"/ If the chain's total issuance is less than u64::max(), this will always be 1, which means that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447591,"byte_end":447689,"line_start":1848,"line_end":1848,"column_start":1,"column_end":99}},{"value":"/ the factor will not have any effect. In this case, any account's balance is also less. Thus,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447690,"byte_end":447786,"line_start":1849,"line_end":1849,"column_start":1,"column_end":97}},{"value":"/ both of the conversions are basically an `as`; Any balance can fit in u64.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447787,"byte_end":447865,"line_start":1850,"line_end":1850,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447866,"byte_end":447869,"line_start":1851,"line_end":1851,"column_start":1,"column_end":4}},{"value":"/ If the chain's total issuance is more than 2*u64::max(), then a factor might be multiplied and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447870,"byte_end":447968,"line_start":1852,"line_end":1852,"column_start":1,"column_end":99}},{"value":"/ divided upon conversion.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":447969,"byte_end":447997,"line_start":1853,"line_end":1853,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1954},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448633,"byte_end":448657,"line_start":1878,"line_end":1878,"column_start":12,"column_end":36},"name":"SaturatingCurrencyToVote","qualname":"::traits::SaturatingCurrencyToVote","value":"","parent":null,"children":[],"decl_id":null,"docs":" A naive implementation of `CurrencyConvert` that simply saturates all conversions.","sig":null,"attributes":[{"value":"/ A naive implementation of `CurrencyConvert` that simply saturates all conversions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448412,"byte_end":448498,"line_start":1873,"line_end":1873,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448499,"byte_end":448502,"line_start":1874,"line_end":1874,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448503,"byte_end":448516,"line_start":1875,"line_end":1875,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448517,"byte_end":448520,"line_start":1876,"line_end":1876,"column_start":1,"column_end":4}},{"value":"/ This is designed to be used mostly for testing. Use with care, and think about the consequences.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448521,"byte_end":448621,"line_start":1877,"line_end":1877,"column_start":1,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":1960},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450062,"byte_end":450071,"line_start":1932,"line_end":1932,"column_start":11,"column_end":20},"name":"IsSubType","qualname":"::traits::IsSubType","value":"IsSubType<T>","parent":null,"children":[{"krate":0,"index":1962}],"decl_id":null,"docs":" Something that can be checked to be a of sub type `T`.","sig":null,"attributes":[{"value":"/ Something that can be checked to be a of sub type `T`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448926,"byte_end":448984,"line_start":1890,"line_end":1890,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448985,"byte_end":448988,"line_start":1891,"line_end":1891,"column_start":1,"column_end":4}},{"value":"/ This is useful for enums where each variant encapsulates a different sub type, and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448989,"byte_end":449075,"line_start":1892,"line_end":1892,"column_start":1,"column_end":87}},{"value":"/ you need access to these sub types.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449076,"byte_end":449115,"line_start":1893,"line_end":1893,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449116,"byte_end":449119,"line_start":1894,"line_end":1894,"column_start":1,"column_end":4}},{"value":"/ For example, in FRAME, this trait is implemented for the runtime `Call` enum. Pallets use this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449120,"byte_end":449218,"line_start":1895,"line_end":1895,"column_start":1,"column_end":99}},{"value":"/ to check if a certain call is an instance of the local pallet's `Call` enum.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449219,"byte_end":449299,"line_start":1896,"line_end":1896,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449300,"byte_end":449303,"line_start":1897,"line_end":1897,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449304,"byte_end":449317,"line_start":1898,"line_end":1898,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449318,"byte_end":449321,"line_start":1899,"line_end":1899,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449322,"byte_end":449329,"line_start":1900,"line_end":1900,"column_start":1,"column_end":8}},{"value":"/ # use frame_support::traits::IsSubType;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449330,"byte_end":449373,"line_start":1901,"line_end":1901,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449374,"byte_end":449377,"line_start":1902,"line_end":1902,"column_start":1,"column_end":4}},{"value":"/ enum Test {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449378,"byte_end":449393,"line_start":1903,"line_end":1903,"column_start":1,"column_end":16}},{"value":"/     String(String),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449394,"byte_end":449417,"line_start":1904,"line_end":1904,"column_start":1,"column_end":24}},{"value":"/     U32(u32),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449418,"byte_end":449435,"line_start":1905,"line_end":1905,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449436,"byte_end":449441,"line_start":1906,"line_end":1906,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449442,"byte_end":449445,"line_start":1907,"line_end":1907,"column_start":1,"column_end":4}},{"value":"/ impl IsSubType<String> for Test {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449446,"byte_end":449483,"line_start":1908,"line_end":1908,"column_start":1,"column_end":38}},{"value":"/     fn is_sub_type(&self) -> Option<&String> {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449484,"byte_end":449534,"line_start":1909,"line_end":1909,"column_start":1,"column_end":51}},{"value":"/         match self {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449535,"byte_end":449559,"line_start":1910,"line_end":1910,"column_start":1,"column_end":25}},{"value":"/             Self::String(ref r) => Some(r),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449560,"byte_end":449607,"line_start":1911,"line_end":1911,"column_start":1,"column_end":48}},{"value":"/             _ => None,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449608,"byte_end":449634,"line_start":1912,"line_end":1912,"column_start":1,"column_end":27}},{"value":"/         }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449635,"byte_end":449648,"line_start":1913,"line_end":1913,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449649,"byte_end":449658,"line_start":1914,"line_end":1914,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449659,"byte_end":449664,"line_start":1915,"line_end":1915,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449665,"byte_end":449668,"line_start":1916,"line_end":1916,"column_start":1,"column_end":4}},{"value":"/ impl IsSubType<u32> for Test {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449669,"byte_end":449703,"line_start":1917,"line_end":1917,"column_start":1,"column_end":35}},{"value":"/     fn is_sub_type(&self) -> Option<&u32> {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449704,"byte_end":449751,"line_start":1918,"line_end":1918,"column_start":1,"column_end":48}},{"value":"/         match self {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449752,"byte_end":449776,"line_start":1919,"line_end":1919,"column_start":1,"column_end":25}},{"value":"/             Self::U32(ref r) => Some(r),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449777,"byte_end":449821,"line_start":1920,"line_end":1920,"column_start":1,"column_end":45}},{"value":"/             _ => None,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449822,"byte_end":449848,"line_start":1921,"line_end":1921,"column_start":1,"column_end":27}},{"value":"/         }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449849,"byte_end":449862,"line_start":1922,"line_end":1922,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449863,"byte_end":449872,"line_start":1923,"line_end":1923,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449873,"byte_end":449878,"line_start":1924,"line_end":1924,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449879,"byte_end":449882,"line_start":1925,"line_end":1925,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449883,"byte_end":449898,"line_start":1926,"line_end":1926,"column_start":1,"column_end":16}},{"value":"/     let data = Test::String(\"test\".into());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449899,"byte_end":449946,"line_start":1927,"line_end":1927,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449947,"byte_end":449950,"line_start":1928,"line_end":1928,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(\"test\", IsSubType::<String>::is_sub_type(&data).unwrap().as_str());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":449951,"byte_end":450037,"line_start":1929,"line_end":1929,"column_start":1,"column_end":87}},{"value":"/ }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450038,"byte_end":450043,"line_start":1930,"line_end":1930,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450044,"byte_end":450051,"line_start":1931,"line_end":1931,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1962},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450146,"byte_end":450157,"line_start":1934,"line_end":1934,"column_start":5,"column_end":16},"name":"is_sub_type","qualname":"::traits::IsSubType::is_sub_type","value":"pub fn is_sub_type(&Self) -> Option<&T>","parent":{"krate":0,"index":1960},"children":[],"decl_id":null,"docs":" Returns `Some(_)` if `self` is an instance of sub type `T`.\n","sig":null,"attributes":[{"value":"/ Returns `Some(_)` if `self` is an instance of sub type `T`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450078,"byte_end":450141,"line_start":1933,"line_end":1933,"column_start":2,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":1963},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450279,"byte_end":450284,"line_start":1938,"line_end":1938,"column_start":11,"column_end":16},"name":"Hooks","qualname":"::traits::Hooks","value":"Hooks<BlockNumber>","parent":null,"children":[{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969}],"decl_id":null,"docs":" The pallet hooks trait. Implementing this lets you express some logic to execute.\n","sig":null,"attributes":[{"value":"/ The pallet hooks trait. Implementing this lets you express some logic to execute.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450183,"byte_end":450268,"line_start":1937,"line_end":1937,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1965},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450375,"byte_end":450386,"line_start":1940,"line_end":1940,"column_start":5,"column_end":16},"name":"on_finalize","qualname":"::traits::Hooks::on_finalize","value":"pub fn on_finalize(BlockNumber)","parent":{"krate":0,"index":1963},"children":[],"decl_id":null,"docs":" The block is being finalized. Implement to have something happen.\n","sig":null,"attributes":[{"value":"/ The block is being finalized. Implement to have something happen.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450301,"byte_end":450370,"line_start":1939,"line_end":1939,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450551,"byte_end":450564,"line_start":1945,"line_end":1945,"column_start":5,"column_end":18},"name":"on_initialize","qualname":"::traits::Hooks::on_initialize","value":"pub fn on_initialize(BlockNumber) -> crate::weights::Weight","parent":{"krate":0,"index":1963},"children":[],"decl_id":null,"docs":" The block is being initialized. Implement to have something happen.","sig":null,"attributes":[{"value":"/ The block is being initialized. Implement to have something happen.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450409,"byte_end":450480,"line_start":1942,"line_end":1942,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450482,"byte_end":450485,"line_start":1943,"line_end":1943,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed in the block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450487,"byte_end":450546,"line_start":1944,"line_end":1944,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451258,"byte_end":451276,"line_start":1961,"line_end":1961,"column_start":5,"column_end":23},"name":"on_runtime_upgrade","qualname":"::traits::Hooks::on_runtime_upgrade","value":"pub fn on_runtime_upgrade() -> crate::weights::Weight","parent":{"krate":0,"index":1963},"children":[],"decl_id":null,"docs":" Perform a module upgrade.","sig":null,"attributes":[{"value":"/ Perform a module upgrade.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450616,"byte_end":450645,"line_start":1947,"line_end":1947,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450647,"byte_end":450650,"line_start":1948,"line_end":1948,"column_start":2,"column_end":5}},{"value":"/ NOTE: this doesn't include all pallet logic triggered on runtime upgrade. For instance it","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450652,"byte_end":450745,"line_start":1949,"line_end":1949,"column_start":2,"column_end":95}},{"value":"/ doesn't include the write of the pallet version in storage. The final complete logic","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450747,"byte_end":450835,"line_start":1950,"line_end":1950,"column_start":2,"column_end":90}},{"value":"/ triggered on runtime upgrade is given by implementation of `OnRuntimeUpgrade` trait by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450837,"byte_end":450927,"line_start":1951,"line_end":1951,"column_start":2,"column_end":92}},{"value":"/ `Pallet`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450929,"byte_end":450942,"line_start":1952,"line_end":1952,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450944,"byte_end":450947,"line_start":1953,"line_end":1953,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450949,"byte_end":450962,"line_start":1954,"line_end":1954,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450964,"byte_end":450967,"line_start":1955,"line_end":1955,"column_start":2,"column_end":5}},{"value":"/ This function will be called before we initialized any runtime state, aka `on_initialize`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":450969,"byte_end":451062,"line_start":1956,"line_end":1956,"column_start":2,"column_end":95}},{"value":"/ wasn't called yet. So, information like the block number and any other","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451064,"byte_end":451138,"line_start":1957,"line_end":1957,"column_start":2,"column_end":76}},{"value":"/ block local data are not accessible.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451140,"byte_end":451180,"line_start":1958,"line_end":1958,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451182,"byte_end":451185,"line_start":1959,"line_end":1959,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed for runtime upgrade.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451187,"byte_end":451253,"line_start":1960,"line_end":1960,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452125,"byte_end":452140,"line_start":1978,"line_end":1978,"column_start":5,"column_end":20},"name":"offchain_worker","qualname":"::traits::Hooks::offchain_worker","value":"pub fn offchain_worker(BlockNumber)","parent":{"krate":0,"index":1963},"children":[],"decl_id":null,"docs":" Implementing this function on a module allows you to perform long-running tasks\n that make (by default) validators generate transactions that feed results\n of those long-running computations back on chain.","sig":null,"attributes":[{"value":"/ Implementing this function on a module allows you to perform long-running tasks","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451313,"byte_end":451396,"line_start":1963,"line_end":1963,"column_start":2,"column_end":85}},{"value":"/ that make (by default) validators generate transactions that feed results","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451398,"byte_end":451475,"line_start":1964,"line_end":1964,"column_start":2,"column_end":79}},{"value":"/ of those long-running computations back on chain.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451477,"byte_end":451530,"line_start":1965,"line_end":1965,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451532,"byte_end":451535,"line_start":1966,"line_end":1966,"column_start":2,"column_end":5}},{"value":"/ NOTE: This function runs off-chain, so it can access the block state,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451537,"byte_end":451610,"line_start":1967,"line_end":1967,"column_start":2,"column_end":75}},{"value":"/ but cannot preform any alterations. More specifically alterations are","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451612,"byte_end":451685,"line_start":1968,"line_end":1968,"column_start":2,"column_end":75}},{"value":"/ not forbidden, but they are not persisted in any way after the worker","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451687,"byte_end":451760,"line_start":1969,"line_end":1969,"column_start":2,"column_end":75}},{"value":"/ has finished.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451762,"byte_end":451779,"line_start":1970,"line_end":1970,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451781,"byte_end":451784,"line_start":1971,"line_end":1971,"column_start":2,"column_end":5}},{"value":"/ This function is being called after every block import (when fully synced).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451786,"byte_end":451865,"line_start":1972,"line_end":1972,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451867,"byte_end":451870,"line_start":1973,"line_end":1973,"column_start":2,"column_end":5}},{"value":"/ Implement this and use any of the `Offchain` `sp_io` set of APIs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451872,"byte_end":451940,"line_start":1974,"line_end":1974,"column_start":2,"column_end":70}},{"value":"/ to perform off-chain computations, calls and submit transactions","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":451942,"byte_end":452010,"line_start":1975,"line_end":1975,"column_start":2,"column_end":70}},{"value":"/ with results to trigger any on-chain changes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452012,"byte_end":452061,"line_start":1976,"line_end":1976,"column_start":2,"column_end":51}},{"value":"/ Any state alterations are lost and are not persisted.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452063,"byte_end":452120,"line_start":1977,"line_end":1977,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1969},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452267,"byte_end":452281,"line_start":1983,"line_end":1983,"column_start":5,"column_end":19},"name":"integrity_test","qualname":"::traits::Hooks::integrity_test","value":"pub fn integrity_test()","parent":{"krate":0,"index":1963},"children":[],"decl_id":null,"docs":" Run integrity test.","sig":null,"attributes":[{"value":"/ Run integrity test.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452163,"byte_end":452186,"line_start":1980,"line_end":1980,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452188,"byte_end":452191,"line_start":1981,"line_end":1981,"column_start":2,"column_end":5}},{"value":"/ The test is not executed in a externalities provided environment.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452193,"byte_end":452262,"line_start":1982,"line_end":1982,"column_start":2,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":1970},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452452,"byte_end":452464,"line_start":1989,"line_end":1989,"column_start":11,"column_end":23},"name":"GenesisBuild","qualname":"::traits::GenesisBuild","value":"GenesisBuild<T, I = ()>: Default + MaybeSerializeDeserialize","parent":null,"children":[{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1975}],"decl_id":null,"docs":" A trait to define the build function of a genesis config, T and I are placeholder for pallet\n trait and pallet instance.\n","sig":null,"attributes":[{"value":"/ A trait to define the build function of a genesis config, T and I are placeholder for pallet","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452290,"byte_end":452386,"line_start":1986,"line_end":1986,"column_start":1,"column_end":97}},{"value":"/ trait and pallet instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452387,"byte_end":452417,"line_start":1987,"line_end":1987,"column_start":1,"column_end":31}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452418,"byte_end":452441,"line_start":1988,"line_end":1988,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452664,"byte_end":452669,"line_start":1992,"line_end":1992,"column_start":5,"column_end":10},"name":"build","qualname":"::traits::GenesisBuild::build","value":"pub fn build(&Self)","parent":{"krate":0,"index":1970},"children":[],"decl_id":null,"docs":" The build function is called within an externalities allowing storage APIs.\n Thus one can write to storage using regular pallet storages.\n","sig":null,"attributes":[{"value":"/ The build function is called within an externalities allowing storage APIs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452514,"byte_end":452593,"line_start":1990,"line_end":1990,"column_start":2,"column_end":81}},{"value":"/ Thus one can write to storage using regular pallet storages.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452595,"byte_end":452659,"line_start":1991,"line_end":1991,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452744,"byte_end":452757,"line_start":1995,"line_end":1995,"column_start":5,"column_end":18},"name":"build_storage","qualname":"::traits::GenesisBuild::build_storage","value":"pub fn build_storage(&Self) -> Result<sp_runtime::Storage, String>","parent":{"krate":0,"index":1970},"children":[],"decl_id":null,"docs":" Build the storage using `build` inside default storage.\n","sig":null,"attributes":[{"value":"/ Build the storage using `build` inside default storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452680,"byte_end":452739,"line_start":1994,"line_end":1994,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452982,"byte_end":453000,"line_start":2002,"line_end":2002,"column_start":5,"column_end":23},"name":"assimilate_storage","qualname":"::traits::GenesisBuild::assimilate_storage","value":"pub fn assimilate_storage(&Self, &mut sp_runtime::Storage)\n-> Result<(), String>","parent":{"krate":0,"index":1970},"children":[],"decl_id":null,"docs":" Assimilate the storage for this module into pre-existing overlays.\n","sig":null,"attributes":[{"value":"/ Assimilate the storage for this module into pre-existing overlays.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452907,"byte_end":452977,"line_start":2001,"line_end":2001,"column_start":2,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":1977},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453407,"byte_end":453441,"line_start":2014,"line_end":2014,"column_start":11,"column_end":45},"name":"PALLET_VERSION_STORAGE_KEY_POSTFIX","qualname":"::traits::PALLET_VERSION_STORAGE_KEY_POSTFIX","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":" The storage key postfix that is used to store the [`PalletVersion`] per pallet.","sig":null,"attributes":[{"value":"/ The storage key postfix that is used to store the [`PalletVersion`] per pallet.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453180,"byte_end":453263,"line_start":2010,"line_end":2010,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453264,"byte_end":453267,"line_start":2011,"line_end":2011,"column_start":1,"column_end":4}},{"value":"/ The full storage key is built by using:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453268,"byte_end":453311,"line_start":2012,"line_end":2012,"column_start":1,"column_end":44}},{"value":"/ Twox128([`PalletInfo::name`]) ++ Twox128([`PALLET_VERSION_STORAGE_KEY_POSTFIX`])","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453312,"byte_end":453396,"line_start":2013,"line_end":2013,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":6951},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453734,"byte_end":453747,"line_start":2021,"line_end":2021,"column_start":12,"column_end":25},"name":"PalletVersion","qualname":"::traits::PalletVersion","value":"PalletVersion { major, minor, patch }","parent":null,"children":[{"krate":0,"index":6952},{"krate":0,"index":6953},{"krate":0,"index":6954}],"decl_id":null,"docs":" The version of a pallet.","sig":null,"attributes":[{"value":"/ The version of a pallet.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453477,"byte_end":453505,"line_start":2016,"line_end":2016,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453506,"byte_end":453509,"line_start":2017,"line_end":2017,"column_start":1,"column_end":4}},{"value":"/ Each pallet version is stored in the state under a fixed key. See","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453510,"byte_end":453579,"line_start":2018,"line_end":2018,"column_start":1,"column_end":70}},{"value":"/ [`PALLET_VERSION_STORAGE_KEY_POSTFIX`] for how this key is built.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453580,"byte_end":453649,"line_start":2019,"line_end":2019,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":6952},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453793,"byte_end":453798,"line_start":2023,"line_end":2023,"column_start":6,"column_end":11},"name":"major","qualname":"::traits::PalletVersion::major","value":"u16","parent":{"krate":0,"index":6951},"children":[],"decl_id":null,"docs":" The major version of the pallet.\n","sig":null,"attributes":[{"value":"/ The major version of the pallet.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453751,"byte_end":453787,"line_start":2022,"line_end":2022,"column_start":2,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":6953},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453848,"byte_end":453853,"line_start":2025,"line_end":2025,"column_start":6,"column_end":11},"name":"minor","qualname":"::traits::PalletVersion::minor","value":"u8","parent":{"krate":0,"index":6951},"children":[],"decl_id":null,"docs":" The minor version of the pallet.\n","sig":null,"attributes":[{"value":"/ The minor version of the pallet.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453806,"byte_end":453842,"line_start":2024,"line_end":2024,"column_start":2,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":6954},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453902,"byte_end":453907,"line_start":2027,"line_end":2027,"column_start":6,"column_end":11},"name":"patch","qualname":"::traits::PalletVersion::patch","value":"u8","parent":{"krate":0,"index":6951},"children":[],"decl_id":null,"docs":" The patch version of the pallet.\n","sig":null,"attributes":[{"value":"/ The patch version of the pallet.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453860,"byte_end":453896,"line_start":2026,"line_end":2026,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453984,"byte_end":453987,"line_start":2032,"line_end":2032,"column_start":9,"column_end":12},"name":"new","qualname":"<PalletVersion>::new","value":"pub fn new(u16, u8, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of `Self`.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of `Self`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453938,"byte_end":453975,"line_start":2031,"line_end":2031,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1980},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454315,"byte_end":454326,"line_start":2046,"line_end":2046,"column_start":9,"column_end":20},"name":"storage_key","qualname":"<PalletVersion>::storage_key","value":"pub fn storage_key<PI: PalletInfo, Pallet: 'static>() -> Option<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the storage key for a pallet version.","sig":null,"attributes":[{"value":"/ Returns the storage key for a pallet version.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454080,"byte_end":454129,"line_start":2040,"line_end":2040,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454131,"byte_end":454134,"line_start":2041,"line_end":2041,"column_start":2,"column_end":5}},{"value":"/ See [`PALLET_VERSION_STORAGE_KEY_POSTFIX`] on how this key is built.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454136,"byte_end":454208,"line_start":2042,"line_end":2042,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454210,"byte_end":454213,"line_start":2043,"line_end":2043,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the given `PI` returned a `None` as name for the given","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454215,"byte_end":454291,"line_start":2044,"line_end":2044,"column_start":2,"column_end":78}},{"value":"/ `Pallet`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454293,"byte_end":454306,"line_start":2045,"line_end":2045,"column_start":2,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455198,"byte_end":455214,"line_start":2071,"line_end":2071,"column_start":9,"column_end":25},"name":"put_into_storage","qualname":"<PalletVersion>::put_into_storage","value":"pub fn put_into_storage<PI: PalletInfo, Pallet: 'static>(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Put this pallet version into the storage.","sig":null,"attributes":[{"value":"/ Put this pallet version into the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454728,"byte_end":454773,"line_start":2059,"line_end":2059,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454775,"byte_end":454778,"line_start":2060,"line_end":2060,"column_start":2,"column_end":5}},{"value":"/ It will use the storage key that is associated with the given `Pallet`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454780,"byte_end":454855,"line_start":2061,"line_end":2061,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454857,"byte_end":454860,"line_start":2062,"line_end":2062,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454862,"byte_end":454874,"line_start":2063,"line_end":2063,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454876,"byte_end":454879,"line_start":2064,"line_end":2064,"column_start":2,"column_end":5}},{"value":"/ This function will panic iff `Pallet` can not be found by `PalletInfo`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454881,"byte_end":454956,"line_start":2065,"line_end":2065,"column_start":2,"column_end":77}},{"value":"/ In a runtime that is put together using","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":454958,"byte_end":455001,"line_start":2066,"line_end":2066,"column_start":2,"column_end":45}},{"value":"/ [`construct_runtime!`](crate::construct_runtime) this should never happen.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455003,"byte_end":455081,"line_start":2067,"line_end":2067,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455083,"byte_end":455086,"line_start":2068,"line_end":2068,"column_start":2,"column_end":5}},{"value":"/ It will also panic if this function isn't executed in an externalities","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455088,"byte_end":455162,"line_start":2069,"line_end":2069,"column_start":2,"column_end":76}},{"value":"/ provided environment.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455164,"byte_end":455189,"line_start":2070,"line_end":2070,"column_start":2,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":1992},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456008,"byte_end":456024,"line_start":2098,"line_end":2098,"column_start":11,"column_end":27},"name":"GetPalletVersion","qualname":"::traits::GetPalletVersion","value":"GetPalletVersion","parent":null,"children":[{"krate":0,"index":1993},{"krate":0,"index":1994}],"decl_id":null,"docs":" Provides version information about a pallet.","sig":null,"attributes":[{"value":"/ Provides version information about a pallet.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455717,"byte_end":455765,"line_start":2093,"line_end":2093,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455766,"byte_end":455769,"line_start":2094,"line_end":2094,"column_start":1,"column_end":4}},{"value":"/ This trait provides two functions for returning the version of a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455770,"byte_end":455838,"line_start":2095,"line_end":2095,"column_start":1,"column_end":69}},{"value":"/ pallet. There is a state where both functions can return distinct versions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455839,"byte_end":455918,"line_start":2096,"line_end":2096,"column_start":1,"column_end":80}},{"value":"/ See [`GetPalletVersion::storage_version`] for more information about this.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455919,"byte_end":455997,"line_start":2097,"line_end":2097,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1993},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456079,"byte_end":456094,"line_start":2100,"line_end":2100,"column_start":5,"column_end":20},"name":"current_version","qualname":"::traits::GetPalletVersion::current_version","value":"pub fn current_version() -> PalletVersion","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Returns the current version of the pallet.\n","sig":null,"attributes":[{"value":"/ Returns the current version of the pallet.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456028,"byte_end":456074,"line_start":2099,"line_end":2099,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456701,"byte_end":456716,"line_start":2116,"line_end":2116,"column_start":5,"column_end":20},"name":"storage_version","qualname":"::traits::GetPalletVersion::storage_version","value":"pub fn storage_version() -> Option<PalletVersion>","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Returns the version of the pallet that is stored in storage.","sig":null,"attributes":[{"value":"/ Returns the version of the pallet that is stored in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456117,"byte_end":456181,"line_start":2102,"line_end":2102,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456183,"byte_end":456186,"line_start":2103,"line_end":2103,"column_start":2,"column_end":5}},{"value":"/ Most of the time this will return the exact same version as","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456188,"byte_end":456251,"line_start":2104,"line_end":2104,"column_start":2,"column_end":65}},{"value":"/ [`GetPalletVersion::current_version`]. Only when being in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456253,"byte_end":456314,"line_start":2105,"line_end":2105,"column_start":2,"column_end":63}},{"value":"/ a state after a runtime upgrade happened and the pallet did","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456316,"byte_end":456379,"line_start":2106,"line_end":2106,"column_start":2,"column_end":65}},{"value":"/ not yet updated its version in storage, this will return a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456381,"byte_end":456443,"line_start":2107,"line_end":2107,"column_start":2,"column_end":64}},{"value":"/ different(the previous, seen from the time of calling) version.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456445,"byte_end":456512,"line_start":2108,"line_end":2108,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456514,"byte_end":456517,"line_start":2109,"line_end":2109,"column_start":2,"column_end":5}},{"value":"/ See [`PalletVersion`] for more information.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456519,"byte_end":456566,"line_start":2110,"line_end":2110,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456568,"byte_end":456571,"line_start":2111,"line_end":2111,"column_start":2,"column_end":5}},{"value":"/ # Note","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456573,"byte_end":456583,"line_start":2112,"line_end":2112,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456585,"byte_end":456588,"line_start":2113,"line_end":2113,"column_start":2,"column_end":5}},{"value":"/ If there was no previous version of the pallet stored in the state,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456590,"byte_end":456661,"line_start":2114,"line_end":2114,"column_start":2,"column_end":73}},{"value":"/ this function returns `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":456663,"byte_end":456696,"line_start":2115,"line_end":2115,"column_start":2,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":1995},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weights","qualname":"::weights","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","parent":null,"children":[{"krate":0,"index":1996},{"krate":0,"index":1997},{"krate":0,"index":8039},{"krate":0,"index":1998},{"krate":0,"index":8041},{"krate":0,"index":1999},{"krate":0,"index":2000},{"krate":0,"index":8043},{"krate":0,"index":2001},{"krate":0,"index":8045},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2023},{"krate":0,"index":2024},{"krate":0,"index":2033},{"krate":0,"index":2036},{"krate":0,"index":2039},{"krate":0,"index":7008},{"krate":0,"index":7034},{"krate":0,"index":7033},{"krate":0,"index":7030},{"krate":0,"index":7031},{"krate":0,"index":7027},{"krate":0,"index":7028},{"krate":0,"index":7025},{"krate":0,"index":7019},{"krate":0,"index":7013},{"krate":0,"index":2042},{"krate":0,"index":7036},{"krate":0,"index":7107},{"krate":0,"index":7066},{"krate":0,"index":7063},{"krate":0,"index":7064},{"krate":0,"index":7060},{"krate":0,"index":7061},{"krate":0,"index":7058},{"krate":0,"index":7057},{"krate":0,"index":7051},{"krate":0,"index":7045},{"krate":0,"index":7043},{"krate":0,"index":2044},{"krate":0,"index":2046},{"krate":0,"index":2049},{"krate":0,"index":2053},{"krate":0,"index":2056},{"krate":0,"index":2060},{"krate":0,"index":7113},{"krate":0,"index":7140},{"krate":0,"index":7139},{"krate":0,"index":7136},{"krate":0,"index":7137},{"krate":0,"index":7132},{"krate":0,"index":7133},{"krate":0,"index":7130},{"krate":0,"index":7128},{"krate":0,"index":7122},{"krate":0,"index":7117},{"krate":0,"index":2071},{"krate":0,"index":7142},{"krate":0,"index":7168},{"krate":0,"index":7167},{"krate":0,"index":7164},{"krate":0,"index":7165},{"krate":0,"index":7160},{"krate":0,"index":7161},{"krate":0,"index":7158},{"krate":0,"index":7156},{"krate":0,"index":7150},{"krate":0,"index":7145},{"krate":0,"index":2073},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2080},{"krate":0,"index":2082},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2088},{"krate":0,"index":2090},{"krate":0,"index":2093},{"krate":0,"index":2096},{"krate":0,"index":2099},{"krate":0,"index":2102},{"krate":0,"index":2105},{"krate":0,"index":2108},{"krate":0,"index":2111},{"krate":0,"index":2114},{"krate":0,"index":2117},{"krate":0,"index":2120},{"krate":0,"index":2123},{"krate":0,"index":2126},{"krate":0,"index":2129},{"krate":0,"index":2137},{"krate":0,"index":2142},{"krate":0,"index":2148},{"krate":0,"index":2153},{"krate":0,"index":2159},{"krate":0,"index":2164},{"krate":0,"index":2170},{"krate":0,"index":2176},{"krate":0,"index":2181},{"krate":0,"index":7170},{"krate":0,"index":7196},{"krate":0,"index":7195},{"krate":0,"index":7192},{"krate":0,"index":7193},{"krate":0,"index":7188},{"krate":0,"index":7189},{"krate":0,"index":7186},{"krate":0,"index":7184},{"krate":0,"index":7178},{"krate":0,"index":7173},{"krate":0,"index":2185},{"krate":0,"index":7198},{"krate":0,"index":7218},{"krate":0,"index":7210},{"krate":0,"index":7204},{"krate":0,"index":2189},{"krate":0,"index":2192},{"krate":0,"index":2197},{"krate":0,"index":2201},{"krate":0,"index":7221},{"krate":0,"index":7257},{"krate":0,"index":7252},{"krate":0,"index":7254},{"krate":0,"index":7246},{"krate":0,"index":7248},{"krate":0,"index":7243},{"krate":0,"index":7240},{"krate":0,"index":7232},{"krate":0,"index":7226},{"krate":0,"index":2205},{"krate":0,"index":2211},{"krate":0,"index":2215}],"decl_id":null,"docs":" # Primitives for transaction weighting.","sig":null,"attributes":[{"value":"/ # Primitives for transaction weighting.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":458392,"byte_end":458435,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":458436,"byte_end":458439,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Every dispatchable function is responsible for providing `#[weight = $x]` attribute. In this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":458440,"byte_end":458536,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"/ snipped, `$x` can be any user provided struct that implements the following traits:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":458537,"byte_end":458624,"line_start":21,"line_end":21,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":458625,"byte_end":458628,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - [`WeighData`]: the weight amount.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":458629,"byte_end":458668,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - [`ClassifyDispatch`]: class of the dispatch.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":458669,"byte_end":458719,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/ - [`PaysFee`]: weather this weight should be translated to fee and deducted upon dispatch.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":458720,"byte_end":458814,"line_start":25,"line_end":25,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":458815,"byte_end":458818,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Substrate then bundles the output information of the three traits into [`DispatchInfo`] struct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":458819,"byte_end":458917,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ and provides it by implementing the [`GetDispatchInfo`] for all `Call` both inner and outer call","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":458918,"byte_end":459018,"line_start":28,"line_end":28,"column_start":1,"column_end":101}},{"value":"/ types.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459019,"byte_end":459029,"line_start":29,"line_end":29,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459030,"byte_end":459033,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Substrate provides two pre-defined ways to annotate weight:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459034,"byte_end":459097,"line_start":31,"line_end":31,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459098,"byte_end":459101,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ### 1. Fixed values","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459102,"byte_end":459125,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459126,"byte_end":459129,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ This can only be used when all 3 traits can be resolved statically. You have 3 degrees of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459130,"byte_end":459223,"line_start":35,"line_end":35,"column_start":1,"column_end":94}},{"value":"/ configuration:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459224,"byte_end":459242,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459243,"byte_end":459246,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ 1. Define only weight, **in which case `ClassifyDispatch` will be `Normal` and `PaysFee` will be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459247,"byte_end":459347,"line_start":38,"line_end":38,"column_start":1,"column_end":101}},{"value":"/    `Yes`**.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459348,"byte_end":459363,"line_start":39,"line_end":39,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459364,"byte_end":459367,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459368,"byte_end":459375,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Config;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459376,"byte_end":459407,"line_start":42,"line_end":42,"column_start":1,"column_end":32}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459408,"byte_end":459441,"line_start":43,"line_end":43,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Config> for enum Call where origin: T::Origin {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459442,"byte_end":459518,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/         #[weight = 1000]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459519,"byte_end":459547,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459548,"byte_end":459603,"line_start":46,"line_end":46,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459604,"byte_end":459613,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459614,"byte_end":459619,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459620,"byte_end":459638,"line_start":49,"line_end":49,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459639,"byte_end":459646,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459647,"byte_end":459650,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ 2.1 Define weight and class, **in which case `PaysFee` would be `Yes`**.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459651,"byte_end":459727,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459728,"byte_end":459731,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459732,"byte_end":459739,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Config;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459740,"byte_end":459771,"line_start":55,"line_end":55,"column_start":1,"column_end":32}},{"value":"/ # use frame_support::weights::DispatchClass;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459772,"byte_end":459820,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459821,"byte_end":459854,"line_start":57,"line_end":57,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Config> for enum Call where origin: T::Origin {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459855,"byte_end":459931,"line_start":58,"line_end":58,"column_start":1,"column_end":77}},{"value":"/         #[weight = (1000, DispatchClass::Operational)]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459932,"byte_end":459990,"line_start":59,"line_end":59,"column_start":1,"column_end":59}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":459991,"byte_end":460046,"line_start":60,"line_end":60,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460047,"byte_end":460056,"line_start":61,"line_end":61,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460057,"byte_end":460062,"line_start":62,"line_end":62,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460063,"byte_end":460081,"line_start":63,"line_end":63,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460082,"byte_end":460089,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460090,"byte_end":460093,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ 2.2 Define weight and `PaysFee`, **in which case `ClassifyDispatch` would be `Normal`**.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460094,"byte_end":460186,"line_start":66,"line_end":66,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460187,"byte_end":460190,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460191,"byte_end":460198,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Config;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460199,"byte_end":460230,"line_start":69,"line_end":69,"column_start":1,"column_end":32}},{"value":"/ # use frame_support::weights::Pays;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460231,"byte_end":460270,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460271,"byte_end":460304,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Config> for enum Call where origin: T::Origin {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460305,"byte_end":460381,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"/         #[weight = (1000, Pays::No)]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460382,"byte_end":460422,"line_start":73,"line_end":73,"column_start":1,"column_end":41}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460423,"byte_end":460478,"line_start":74,"line_end":74,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460479,"byte_end":460488,"line_start":75,"line_end":75,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460489,"byte_end":460494,"line_start":76,"line_end":76,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460495,"byte_end":460513,"line_start":77,"line_end":77,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460514,"byte_end":460521,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460522,"byte_end":460525,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ 3. Define all 3 parameters.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460526,"byte_end":460557,"line_start":80,"line_end":80,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460558,"byte_end":460561,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460562,"byte_end":460569,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Config;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460570,"byte_end":460601,"line_start":83,"line_end":83,"column_start":1,"column_end":32}},{"value":"/ # use frame_support::weights::{DispatchClass, Pays};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460602,"byte_end":460658,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460659,"byte_end":460692,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Config> for enum Call where origin: T::Origin {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460693,"byte_end":460769,"line_start":86,"line_end":86,"column_start":1,"column_end":77}},{"value":"/         #[weight = (1000, DispatchClass::Operational, Pays::No)]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460770,"byte_end":460838,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460839,"byte_end":460894,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460895,"byte_end":460904,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460905,"byte_end":460910,"line_start":90,"line_end":90,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460911,"byte_end":460929,"line_start":91,"line_end":91,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460930,"byte_end":460937,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460938,"byte_end":460941,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ### 2. Define weights as a function of input arguments using `FunctionOf` tuple struct.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":460942,"byte_end":461033,"line_start":94,"line_end":94,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461034,"byte_end":461037,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ This struct works in a similar manner as above. 3 items must be provided and each can be either","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461038,"byte_end":461137,"line_start":96,"line_end":96,"column_start":1,"column_end":100}},{"value":"/ a fixed value or a function/closure with the same parameters list as the dispatchable function","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461138,"byte_end":461236,"line_start":97,"line_end":97,"column_start":1,"column_end":99}},{"value":"/ itself, wrapper in a tuple.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461237,"byte_end":461268,"line_start":98,"line_end":98,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461269,"byte_end":461272,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ Using this only makes sense if you want to use a function for at least one of the elements. If","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461273,"byte_end":461371,"line_start":100,"line_end":100,"column_start":1,"column_end":99}},{"value":"/ all 3 are static values, providing a raw tuple is easier.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461372,"byte_end":461433,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461434,"byte_end":461437,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461438,"byte_end":461445,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Config;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461446,"byte_end":461477,"line_start":104,"line_end":104,"column_start":1,"column_end":32}},{"value":"/ # use frame_support::weights::{DispatchClass, FunctionOf, Pays};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461478,"byte_end":461546,"line_start":105,"line_end":105,"column_start":1,"column_end":69}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461547,"byte_end":461580,"line_start":106,"line_end":106,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Config> for enum Call where origin: T::Origin {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461581,"byte_end":461657,"line_start":107,"line_end":107,"column_start":1,"column_end":77}},{"value":"/         #[weight = FunctionOf(","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461658,"byte_end":461692,"line_start":108,"line_end":108,"column_start":1,"column_end":35}},{"value":"/ \t\t\t// weight, function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461693,"byte_end":461720,"line_start":109,"line_end":109,"column_start":1,"column_end":28}},{"value":"/ \t\t\t|args: (&u32, &u64)| *args.0 as u64 + args.1,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461721,"byte_end":461773,"line_start":110,"line_end":110,"column_start":1,"column_end":53}},{"value":"/ \t\t\t// class, fixed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461774,"byte_end":461797,"line_start":111,"line_end":111,"column_start":1,"column_end":24}},{"value":"/ \t\t\tDispatchClass::Operational,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461798,"byte_end":461832,"line_start":112,"line_end":112,"column_start":1,"column_end":35}},{"value":"/ \t\t\t// pays fee, function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461833,"byte_end":461862,"line_start":113,"line_end":113,"column_start":1,"column_end":30}},{"value":"/ \t\t\t|args: (&u32, &u64)| if *args.0 > 1000 { Pays::Yes } else { Pays::No },","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461863,"byte_end":461941,"line_start":114,"line_end":114,"column_start":1,"column_end":79}},{"value":"/ \t\t)]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461942,"byte_end":461950,"line_start":115,"line_end":115,"column_start":1,"column_end":9}},{"value":"/         fn dispatching(origin, a: u32, b: u64) { unimplemented!() }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":461951,"byte_end":462022,"line_start":116,"line_end":116,"column_start":1,"column_end":72}},{"value":"/     }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462023,"byte_end":462032,"line_start":117,"line_end":117,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462033,"byte_end":462038,"line_start":118,"line_end":118,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462039,"byte_end":462057,"line_start":119,"line_end":119,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462058,"byte_end":462065,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/ FRAME assumes a weight of `1_000_000_000_000` equals 1 second of compute on a standard machine.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462066,"byte_end":462165,"line_start":121,"line_end":121,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462166,"byte_end":462169,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ Latest machine specification used to benchmark are:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462170,"byte_end":462225,"line_start":123,"line_end":123,"column_start":1,"column_end":56}},{"value":"/ - Digital Ocean: ubuntu-s-2vcpu-4gb-ams3-01","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462226,"byte_end":462273,"line_start":124,"line_end":124,"column_start":1,"column_end":48}},{"value":"/ - 2x Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462274,"byte_end":462324,"line_start":125,"line_end":125,"column_start":1,"column_end":51}},{"value":"/ - 4GB RAM","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462325,"byte_end":462338,"line_start":126,"line_end":126,"column_start":1,"column_end":14}},{"value":"/ - Ubuntu 19.10 (GNU/Linux 5.3.0-18-generic x86_64)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462339,"byte_end":462393,"line_start":127,"line_end":127,"column_start":1,"column_end":55}},{"value":"/ - rustc 1.42.0 (b8cedc004 2020-03-09)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462394,"byte_end":462435,"line_start":128,"line_end":128,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":2023},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":463039,"byte_end":463045,"line_start":147,"line_end":147,"column_start":10,"column_end":16},"name":"Weight","qualname":"::weights::Weight","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Numeric range of a transaction weight.\n","sig":null,"attributes":[{"value":"/ Numeric range of a transaction weight.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":462987,"byte_end":463029,"line_start":146,"line_end":146,"column_start":1,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":2024},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":463247,"byte_end":463256,"line_start":151,"line_end":151,"column_start":9,"column_end":18},"name":"constants","qualname":"::weights::constants","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","parent":null,"children":[{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":6980},{"krate":0,"index":6982},{"krate":0,"index":6984},{"krate":0,"index":6987},{"krate":0,"index":6989},{"krate":0,"index":6991},{"krate":0,"index":6994},{"krate":0,"index":6996},{"krate":0,"index":6998},{"krate":0,"index":7001},{"krate":0,"index":7003},{"krate":0,"index":7005}],"decl_id":null,"docs":" These constants are specific to FRAME, and the current implementation of its various components.\n For example: FRAME System, FRAME Executive, our FRAME support libraries, etc...\n","sig":null,"attributes":[{"value":"/ These constants are specific to FRAME, and the current implementation of its various components.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":463054,"byte_end":463154,"line_start":149,"line_end":149,"column_start":1,"column_end":101}},{"value":"/ For example: FRAME System, FRAME Executive, our FRAME support libraries, etc...","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":463155,"byte_end":463238,"line_start":150,"line_end":150,"column_start":1,"column_end":84}}]},{"kind":"Const","id":{"krate":0,"index":2029},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":463339,"byte_end":463356,"line_start":155,"line_end":155,"column_start":12,"column_end":29},"name":"WEIGHT_PER_SECOND","qualname":"::weights::constants::WEIGHT_PER_SECOND","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2030},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":463397,"byte_end":463414,"line_start":156,"line_end":156,"column_start":12,"column_end":29},"name":"WEIGHT_PER_MILLIS","qualname":"::weights::constants::WEIGHT_PER_MILLIS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2031},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":463479,"byte_end":463496,"line_start":157,"line_end":157,"column_start":12,"column_end":29},"name":"WEIGHT_PER_MICROS","qualname":"::weights::constants::WEIGHT_PER_MICROS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2032},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":463557,"byte_end":463573,"line_start":158,"line_end":158,"column_start":12,"column_end":28},"name":"WEIGHT_PER_NANOS","qualname":"::weights::constants::WEIGHT_PER_NANOS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6980},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":463700,"byte_end":463720,"line_start":162,"line_end":162,"column_start":13,"column_end":33},"name":"BlockExecutionWeight","qualname":"::weights::constants::BlockExecutionWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" Importing a block with 0 txs takes ~5 ms\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6987},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":463855,"byte_end":463874,"line_start":164,"line_end":164,"column_start":13,"column_end":32},"name":"ExtrinsicBaseWeight","qualname":"::weights::constants::ExtrinsicBaseWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" Executing 10,000 System remarks (no-op) txs takes ~1.26 seconds -> ~125 µs per tx\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6994},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":464026,"byte_end":464039,"line_start":167,"line_end":167,"column_start":13,"column_end":26},"name":"RocksDbWeight","qualname":"::weights::constants::RocksDbWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" By default, Substrate uses RocksDB, so this will be the weight used throughout\n the runtime.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7001},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":464400,"byte_end":464414,"line_start":173,"line_end":173,"column_start":13,"column_end":27},"name":"ParityDbWeight","qualname":"::weights::constants::ParityDbWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" ParityDB can be enabled with a feature flag, but is still experimental. These weights\n are available for brave runtime engineers who may want to try this out as default.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2033},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":464652,"byte_end":464661,"line_start":181,"line_end":181,"column_start":11,"column_end":20},"name":"WeighData","qualname":"::weights::WeighData","value":"WeighData<T>","parent":null,"children":[{"krate":0,"index":2035}],"decl_id":null,"docs":" Means of weighing some particular kind of data (`T`).\n","sig":null,"attributes":[{"value":"/ Means of weighing some particular kind of data (`T`).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":464584,"byte_end":464641,"line_start":180,"line_end":180,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2035},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":464838,"byte_end":464848,"line_start":184,"line_end":184,"column_start":5,"column_end":15},"name":"weigh_data","qualname":"::weights::WeighData::weigh_data","value":"pub fn weigh_data(&Self, T) -> Weight","parent":{"krate":0,"index":2033},"children":[],"decl_id":null,"docs":" Weigh the data `T` given by `target`. When implementing this for a dispatchable, `T` will be\n a tuple of all arguments given to the function (except origin).\n","sig":null,"attributes":[{"value":"/ Weigh the data `T` given by `target`. When implementing this for a dispatchable, `T` will be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":464668,"byte_end":464764,"line_start":182,"line_end":182,"column_start":2,"column_end":98}},{"value":"/ a tuple of all arguments given to the function (except origin).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":464766,"byte_end":464833,"line_start":183,"line_end":183,"column_start":2,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":2036},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":464941,"byte_end":464957,"line_start":188,"line_end":188,"column_start":11,"column_end":27},"name":"ClassifyDispatch","qualname":"::weights::ClassifyDispatch","value":"ClassifyDispatch<T>","parent":null,"children":[{"krate":0,"index":2038}],"decl_id":null,"docs":" Means of classifying a dispatchable function.\n","sig":null,"attributes":[{"value":"/ Means of classifying a dispatchable function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":464881,"byte_end":464930,"line_start":187,"line_end":187,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2038},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465174,"byte_end":465191,"line_start":192,"line_end":192,"column_start":5,"column_end":22},"name":"classify_dispatch","qualname":"::weights::ClassifyDispatch::classify_dispatch","value":"pub fn classify_dispatch(&Self, T) -> DispatchClass","parent":{"krate":0,"index":2036},"children":[],"decl_id":null,"docs":" Classify the dispatch function based on input data `target` of type `T`. When implementing\n this for a dispatchable, `T` will be a tuple of all arguments given to the function (except\n origin).\n","sig":null,"attributes":[{"value":"/ Classify the dispatch function based on input data `target` of type `T`. When implementing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":464964,"byte_end":465058,"line_start":189,"line_end":189,"column_start":2,"column_end":96}},{"value":"/ this for a dispatchable, `T` will be a tuple of all arguments given to the function (except","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465060,"byte_end":465155,"line_start":190,"line_end":190,"column_start":2,"column_end":97}},{"value":"/ origin).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465157,"byte_end":465169,"line_start":191,"line_end":191,"column_start":2,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":2039},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465389,"byte_end":465396,"line_start":197,"line_end":197,"column_start":11,"column_end":18},"name":"PaysFee","qualname":"::weights::PaysFee","value":"PaysFee<T>","parent":null,"children":[{"krate":0,"index":2041}],"decl_id":null,"docs":" Indicates if dispatch function should pay fees or not.\n If set to `Pays::No`, the block resource limits are applied, yet no fee is deducted.\n","sig":null,"attributes":[{"value":"/ Indicates if dispatch function should pay fees or not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465231,"byte_end":465289,"line_start":195,"line_end":195,"column_start":1,"column_end":59}},{"value":"/ If set to `Pays::No`, the block resource limits are applied, yet no fee is deducted.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465290,"byte_end":465378,"line_start":196,"line_end":196,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2041},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465406,"byte_end":465414,"line_start":198,"line_end":198,"column_start":5,"column_end":13},"name":"pays_fee","qualname":"::weights::PaysFee::pays_fee","value":"pub fn pays_fee(&Self, T) -> Pays","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7009},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465632,"byte_end":465635,"line_start":205,"line_end":205,"column_start":2,"column_end":5},"name":"Yes","qualname":"::weights::Pays::Yes","value":"Pays::Yes","parent":{"krate":0,"index":7008},"children":[],"decl_id":null,"docs":" Transactor will pay related fees.\n","sig":null,"attributes":[{"value":"/ Transactor will pay related fees.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465593,"byte_end":465630,"line_start":204,"line_end":204,"column_start":2,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7011},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465681,"byte_end":465683,"line_start":207,"line_end":207,"column_start":2,"column_end":4},"name":"No","qualname":"::weights::Pays::No","value":"Pays::No","parent":{"krate":0,"index":7008},"children":[],"decl_id":null,"docs":" Transactor will NOT pay related fees.\n","sig":null,"attributes":[{"value":"/ Transactor will NOT pay related fees.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465638,"byte_end":465679,"line_start":206,"line_end":206,"column_start":2,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":7008},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465585,"byte_end":465589,"line_start":203,"line_end":203,"column_start":10,"column_end":14},"name":"Pays","qualname":"::weights::Pays","value":"pub enum Pays {\n\n    /// Transactor will pay related fees.\n    Yes,\n\n    /// Transactor will NOT pay related fees.\n    No,\n}","parent":null,"children":[{"krate":0,"index":7009},{"krate":0,"index":7011}],"decl_id":null,"docs":" Explicit enum to denote if a transaction pays fee or not.\n","sig":null,"attributes":[{"value":"/ Explicit enum to denote if a transaction pays fee or not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465446,"byte_end":465507,"line_start":201,"line_end":201,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7037},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466182,"byte_end":466188,"line_start":225,"line_end":225,"column_start":2,"column_end":8},"name":"Normal","qualname":"::weights::DispatchClass::Normal","value":"DispatchClass::Normal","parent":{"krate":0,"index":7036},"children":[],"decl_id":null,"docs":" A normal dispatch.\n","sig":null,"attributes":[{"value":"/ A normal dispatch.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466158,"byte_end":466180,"line_start":224,"line_end":224,"column_start":2,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7039},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466221,"byte_end":466232,"line_start":227,"line_end":227,"column_start":2,"column_end":13},"name":"Operational","qualname":"::weights::DispatchClass::Operational","value":"DispatchClass::Operational","parent":{"krate":0,"index":7036},"children":[],"decl_id":null,"docs":" An operational dispatch.\n","sig":null,"attributes":[{"value":"/ An operational dispatch.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466191,"byte_end":466219,"line_start":226,"line_end":226,"column_start":2,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7041},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467133,"byte_end":467142,"line_start":240,"line_end":240,"column_start":2,"column_end":11},"name":"Mandatory","qualname":"::weights::DispatchClass::Mandatory","value":"DispatchClass::Mandatory","parent":{"krate":0,"index":7036},"children":[],"decl_id":null,"docs":" A mandatory dispatch. These kinds of dispatch are always included regardless of their\n weight, therefore it is critical that they are separately validated to ensure that a\n malicious validator cannot craft a valid but impossibly heavy block. Usually this just means\n ensuring that the extrinsic can only be included once and that it is always very light.","sig":null,"attributes":[{"value":"/ A mandatory dispatch. These kinds of dispatch are always included regardless of their","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466235,"byte_end":466324,"line_start":228,"line_end":228,"column_start":2,"column_end":91}},{"value":"/ weight, therefore it is critical that they are separately validated to ensure that a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466326,"byte_end":466414,"line_start":229,"line_end":229,"column_start":2,"column_end":90}},{"value":"/ malicious validator cannot craft a valid but impossibly heavy block. Usually this just means","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466416,"byte_end":466512,"line_start":230,"line_end":230,"column_start":2,"column_end":98}},{"value":"/ ensuring that the extrinsic can only be included once and that it is always very light.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466514,"byte_end":466605,"line_start":231,"line_end":231,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466607,"byte_end":466610,"line_start":232,"line_end":232,"column_start":2,"column_end":5}},{"value":"/ Do *NOT* use it for extrinsics that can be heavy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466612,"byte_end":466665,"line_start":233,"line_end":233,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466667,"byte_end":466670,"line_start":234,"line_end":234,"column_start":2,"column_end":5}},{"value":"/ The only real use case for this is inherent extrinsics that are required to execute in a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466672,"byte_end":466764,"line_start":235,"line_end":235,"column_start":2,"column_end":94}},{"value":"/ block for the block to be valid, and it solves the issue in the case that the block","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466766,"byte_end":466853,"line_start":236,"line_end":236,"column_start":2,"column_end":89}},{"value":"/ initialization is sufficiently heavy to mean that those inherents do not fit into the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466855,"byte_end":466944,"line_start":237,"line_end":237,"column_start":2,"column_end":91}},{"value":"/ block. Essentially, we assume that in these exceptional circumstances, it is better to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466946,"byte_end":467036,"line_start":238,"line_end":238,"column_start":2,"column_end":92}},{"value":"/ allow an overweight block to be created than to not allow any block at all to be created.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467038,"byte_end":467131,"line_start":239,"line_end":239,"column_start":2,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":7036},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466141,"byte_end":466154,"line_start":223,"line_end":223,"column_start":10,"column_end":23},"name":"DispatchClass","qualname":"::weights::DispatchClass","value":"pub enum DispatchClass {\n\n    /// A normal dispatch.\n    Normal,\n\n    /// An operational dispatch.\n    Operational,\n\n    /// A mandatory dispatch. These kinds of dispatch are always included regardless of their\n    /// weight, therefore it is critical that they are separately validated to ensure that a\n    /// malicious validator cannot craft a valid but impossibly heavy block. Usually this just means\n    /// ensuring that the extrinsic can only be included once and that it is always very light.\n    ///\n    /// Do *NOT* use it for extrinsics that can be heavy.\n    ///\n    /// The only real use case for this is inherent extrinsics that are required to execute in a\n    /// block for the block to be valid, and it solves the issue in the case that the block\n    /// initialization is sufficiently heavy to mean that those inherents do not fit into the\n    /// block. Essentially, we assume that in these exceptional circumstances, it is better to\n    /// allow an overweight block to be created than to not allow any block at all to be created.\n    Mandatory,\n}","parent":null,"children":[{"krate":0,"index":7037},{"krate":0,"index":7039},{"krate":0,"index":7041}],"decl_id":null,"docs":" A generalized group of dispatch types.","sig":null,"attributes":[{"value":"/ A generalized group of dispatch types.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465754,"byte_end":465796,"line_start":216,"line_end":216,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465797,"byte_end":465800,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ NOTE whenever upgrading the enum make sure to also update","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465801,"byte_end":465862,"line_start":218,"line_end":218,"column_start":1,"column_end":62}},{"value":"/ [DispatchClass::all] and [DispatchClass::non_mandatory] helper functions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465863,"byte_end":465940,"line_start":219,"line_end":219,"column_start":1,"column_end":78}},{"value":"serde(rename_all = \"camelCase\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":466030,"byte_end":466061,"line_start":221,"line_end":221,"column_start":29,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2047},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467309,"byte_end":467312,"line_start":251,"line_end":251,"column_start":9,"column_end":12},"name":"all","qualname":"<DispatchClass>::all","value":"pub fn all() -> &'static [DispatchClass]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing all dispatch classes.\n","sig":null,"attributes":[{"value":"/ Returns an array containing all dispatch classes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467247,"byte_end":467300,"line_start":250,"line_end":250,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2048},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467504,"byte_end":467517,"line_start":256,"line_end":256,"column_start":9,"column_end":22},"name":"non_mandatory","qualname":"<DispatchClass>::non_mandatory","value":"pub fn non_mandatory() -> &'static [DispatchClass]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array of all dispatch classes except `Mandatory`.\n","sig":null,"attributes":[{"value":"/ Returns an array of all dispatch classes except `Mandatory`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467431,"byte_end":467495,"line_start":255,"line_end":255,"column_start":2,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":2049},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467800,"byte_end":467809,"line_start":265,"line_end":265,"column_start":11,"column_end":20},"name":"OneOrMany","qualname":"::weights::OneOrMany","value":"OneOrMany<T>","parent":null,"children":[{"krate":0,"index":2051},{"krate":0,"index":2052}],"decl_id":null,"docs":" A trait that represents one or many values of given type.","sig":null,"attributes":[{"value":"/ A trait that represents one or many values of given type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467611,"byte_end":467672,"line_start":261,"line_end":261,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467673,"byte_end":467676,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ Useful to accept as parameter type to let the caller pass either a single value directly","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467677,"byte_end":467769,"line_start":263,"line_end":263,"column_start":1,"column_end":93}},{"value":"/ or an iterator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467770,"byte_end":467789,"line_start":264,"line_end":264,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":2051},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467845,"byte_end":467849,"line_start":267,"line_end":267,"column_start":7,"column_end":11},"name":"Iter","qualname":"::weights::OneOrMany::Iter","value":"type Iter: Iterator<Item = T>;","parent":{"krate":0,"index":2049},"children":[],"decl_id":null,"docs":" The iterator type.\n","sig":null,"attributes":[{"value":"/ The iterator type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467816,"byte_end":467838,"line_start":266,"line_end":266,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2052},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467916,"byte_end":467925,"line_start":269,"line_end":269,"column_start":5,"column_end":14},"name":"into_iter","qualname":"::weights::OneOrMany::into_iter","value":"pub fn into_iter(Self) -> Self::Iter","parent":{"krate":0,"index":2049},"children":[],"decl_id":null,"docs":" Convert this item into an iterator.\n","sig":null,"attributes":[{"value":"/ Convert this item into an iterator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467872,"byte_end":467911,"line_start":268,"line_end":268,"column_start":2,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":2060},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":468387,"byte_end":468395,"line_start":283,"line_end":283,"column_start":9,"column_end":17},"name":"priority","qualname":"::weights::priority","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","parent":null,"children":[{"krate":0,"index":2061},{"krate":0,"index":2062},{"krate":0,"index":2069}],"decl_id":null,"docs":" Primitives related to priority management of Frame.\n","sig":null,"attributes":[{"value":"/ Primitives related to priority management of Frame.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":468323,"byte_end":468378,"line_start":282,"line_end":282,"column_start":1,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":2061},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":468491,"byte_end":468496,"line_start":285,"line_end":285,"column_start":12,"column_end":17},"name":"LIMIT","qualname":"::weights::priority::LIMIT","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" The starting point of all Operational transactions. 3/4 of u64::max_value().\n","sig":null,"attributes":[{"value":"/ The starting point of all Operational transactions. 3/4 of u64::max_value().","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":468399,"byte_end":468479,"line_start":284,"line_end":284,"column_start":2,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2063},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":468756,"byte_end":468762,"line_start":292,"line_end":292,"column_start":3,"column_end":9},"name":"Normal","qualname":"::weights::priority::FrameTransactionPriority::Normal","value":"FrameTransactionPriority::Normal(u64)","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2066},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":468771,"byte_end":468782,"line_start":293,"line_end":293,"column_start":3,"column_end":14},"name":"Operational","qualname":"::weights::priority::FrameTransactionPriority::Operational","value":"FrameTransactionPriority::Operational(u64)","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2062},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":468727,"byte_end":468751,"line_start":291,"line_end":291,"column_start":11,"column_end":35},"name":"FrameTransactionPriority","qualname":"::weights::priority::FrameTransactionPriority","value":"pub enum FrameTransactionPriority { Normal(u64), Operational(u64), }","parent":null,"children":[{"krate":0,"index":2063},{"krate":0,"index":2066}],"decl_id":null,"docs":" Wrapper for priority of different dispatch classes.","sig":null,"attributes":[{"value":"/ Wrapper for priority of different dispatch classes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":468538,"byte_end":468593,"line_start":287,"line_end":287,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":468595,"byte_end":468598,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ This only makes sure that any value created for the operational dispatch class is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":468600,"byte_end":468685,"line_start":289,"line_end":289,"column_start":2,"column_end":87}},{"value":"/ incremented by [`LIMIT`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":468687,"byte_end":468716,"line_start":290,"line_end":290,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7113},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469237,"byte_end":469249,"line_start":308,"line_end":308,"column_start":12,"column_end":24},"name":"DispatchInfo","qualname":"::weights::DispatchInfo","value":"DispatchInfo { weight, class, pays_fee }","parent":null,"children":[{"krate":0,"index":7114},{"krate":0,"index":7115},{"krate":0,"index":7116}],"decl_id":null,"docs":" A bundle of static information collected from the `#[weight = $x]` attributes.\n","sig":null,"attributes":[{"value":"/ A bundle of static information collected from the `#[weight = $x]` attributes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469066,"byte_end":469148,"line_start":306,"line_end":306,"column_start":1,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":7114},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469290,"byte_end":469296,"line_start":310,"line_end":310,"column_start":6,"column_end":12},"name":"weight","qualname":"::weights::DispatchInfo::weight","value":"u64","parent":{"krate":0,"index":7113},"children":[],"decl_id":null,"docs":" Weight of this transaction.\n","sig":null,"attributes":[{"value":"/ Weight of this transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469253,"byte_end":469284,"line_start":309,"line_end":309,"column_start":2,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":7115},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469343,"byte_end":469348,"line_start":312,"line_end":312,"column_start":6,"column_end":11},"name":"class","qualname":"::weights::DispatchInfo::class","value":"weights::DispatchClass","parent":{"krate":0,"index":7113},"children":[],"decl_id":null,"docs":" Class of this transaction.\n","sig":null,"attributes":[{"value":"/ Class of this transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469307,"byte_end":469337,"line_start":311,"line_end":311,"column_start":2,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7116},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469407,"byte_end":469415,"line_start":314,"line_end":314,"column_start":6,"column_end":14},"name":"pays_fee","qualname":"::weights::DispatchInfo::pays_fee","value":"weights::Pays","parent":{"krate":0,"index":7113},"children":[],"decl_id":null,"docs":" Does this transaction pay fees.\n","sig":null,"attributes":[{"value":"/ Does this transaction pay fees.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469366,"byte_end":469401,"line_start":313,"line_end":313,"column_start":2,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":2071},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469575,"byte_end":469590,"line_start":319,"line_end":319,"column_start":11,"column_end":26},"name":"GetDispatchInfo","qualname":"::weights::GetDispatchInfo","value":"GetDispatchInfo","parent":null,"children":[{"krate":0,"index":2072}],"decl_id":null,"docs":" A `Dispatchable` function (aka transaction) that can carry some static information along with\n it, using the `#[weight]` attribute.\n","sig":null,"attributes":[{"value":"/ A `Dispatchable` function (aka transaction) that can carry some static information along with","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469426,"byte_end":469523,"line_start":317,"line_end":317,"column_start":1,"column_end":98}},{"value":"/ it, using the `#[weight]` attribute.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469524,"byte_end":469564,"line_start":318,"line_end":318,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469735,"byte_end":469752,"line_start":323,"line_end":323,"column_start":5,"column_end":22},"name":"get_dispatch_info","qualname":"::weights::GetDispatchInfo::get_dispatch_info","value":"pub fn get_dispatch_info(&Self) -> DispatchInfo","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Return a `DispatchInfo`, containing relevant information of this dispatch.","sig":null,"attributes":[{"value":"/ Return a `DispatchInfo`, containing relevant information of this dispatch.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469594,"byte_end":469672,"line_start":320,"line_end":320,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469674,"byte_end":469677,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ This is done independently of its encoded size.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469679,"byte_end":469730,"line_start":322,"line_end":322,"column_start":2,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":7142},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470007,"byte_end":470023,"line_start":329,"line_end":329,"column_start":12,"column_end":28},"name":"PostDispatchInfo","qualname":"::weights::PostDispatchInfo","value":"PostDispatchInfo { actual_weight, pays_fee }","parent":null,"children":[{"krate":0,"index":7143},{"krate":0,"index":7144}],"decl_id":null,"docs":" Weight information that is only available post dispatch.\n NOTE: This can only be used to reduce the weight or fee, not increase it.\n","sig":null,"attributes":[{"value":"/ Weight information that is only available post dispatch.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469780,"byte_end":469840,"line_start":326,"line_end":326,"column_start":1,"column_end":61}},{"value":"/ NOTE: This can only be used to reduce the weight or fee, not increase it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":469841,"byte_end":469918,"line_start":327,"line_end":327,"column_start":1,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":7143},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470126,"byte_end":470139,"line_start":331,"line_end":331,"column_start":6,"column_end":19},"name":"actual_weight","qualname":"::weights::PostDispatchInfo::actual_weight","value":"std::option::Option<u64>","parent":{"krate":0,"index":7142},"children":[],"decl_id":null,"docs":" Actual weight consumed by a call or `None` which stands for the worst case static weight.\n","sig":null,"attributes":[{"value":"/ Actual weight consumed by a call or `None` which stands for the worst case static weight.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470027,"byte_end":470120,"line_start":330,"line_end":330,"column_start":2,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":7144},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470235,"byte_end":470243,"line_start":333,"line_end":333,"column_start":6,"column_end":14},"name":"pays_fee","qualname":"::weights::PostDispatchInfo::pays_fee","value":"weights::Pays","parent":{"krate":0,"index":7142},"children":[],"decl_id":null,"docs":" Whether this transaction should pay fees when all is said and done.\n","sig":null,"attributes":[{"value":"/ Whether this transaction should pay fees when all is said and done.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470158,"byte_end":470229,"line_start":332,"line_end":332,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470362,"byte_end":470374,"line_start":338,"line_end":338,"column_start":9,"column_end":21},"name":"calc_unspent","qualname":"<PostDispatchInfo>::calc_unspent","value":"pub fn calc_unspent(&Self, &DispatchInfo) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Calculate how much (if any) weight was not used by the `Dispatchable`.\n","sig":null,"attributes":[{"value":"/ Calculate how much (if any) weight was not used by the `Dispatchable`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470279,"byte_end":470353,"line_start":337,"line_end":337,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2075},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470546,"byte_end":470564,"line_start":343,"line_end":343,"column_start":9,"column_end":27},"name":"calc_actual_weight","qualname":"<PostDispatchInfo>::calc_actual_weight","value":"pub fn calc_actual_weight(&Self, &DispatchInfo) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Calculate how much weight was actually spent by the `Dispatchable`.\n","sig":null,"attributes":[{"value":"/ Calculate how much weight was actually spent by the `Dispatchable`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470466,"byte_end":470537,"line_start":342,"line_end":342,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2076},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470809,"byte_end":470817,"line_start":352,"line_end":352,"column_start":9,"column_end":17},"name":"pays_fee","qualname":"<PostDispatchInfo>::pays_fee","value":"pub fn pays_fee(&Self, &DispatchInfo) -> Pays","parent":null,"children":[],"decl_id":null,"docs":" Determine if user should actually pay fees at the end of the dispatch.\n","sig":null,"attributes":[{"value":"/ Determine if user should actually pay fees at the end of the dispatch.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470726,"byte_end":470800,"line_start":351,"line_end":351,"column_start":2,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":2077},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":471336,"byte_end":471357,"line_start":367,"line_end":367,"column_start":8,"column_end":29},"name":"extract_actual_weight","qualname":"::weights::extract_actual_weight","value":"pub fn extract_actual_weight(&DispatchResultWithPostInfo, &DispatchInfo)\n-> Weight","parent":null,"children":[],"decl_id":null,"docs":" Extract the actual weight from a dispatch result if any or fall back to the default weight.\n","sig":null,"attributes":[{"value":"/ Extract the actual weight from a dispatch result if any or fall back to the default weight.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":471233,"byte_end":471328,"line_start":366,"line_end":366,"column_start":1,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":2088},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472687,"byte_end":472707,"line_start":428,"line_end":428,"column_start":11,"column_end":31},"name":"WithPostDispatchInfo","qualname":"::weights::WithPostDispatchInfo","value":"WithPostDispatchInfo","parent":null,"children":[{"krate":0,"index":2089}],"decl_id":null,"docs":" Allows easy conversion from `DispatchError` to `DispatchErrorWithPostInfo` for dispatchables\n that want to return a custom a posterior weight on error.\n","sig":null,"attributes":[{"value":"/ Allows easy conversion from `DispatchError` to `DispatchErrorWithPostInfo` for dispatchables","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472518,"byte_end":472614,"line_start":426,"line_end":426,"column_start":1,"column_end":97}},{"value":"/ that want to return a custom a posterior weight on error.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472615,"byte_end":472676,"line_start":427,"line_end":427,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2089},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472994,"byte_end":473005,"line_start":437,"line_end":437,"column_start":5,"column_end":16},"name":"with_weight","qualname":"::weights::WithPostDispatchInfo::with_weight","value":"pub fn with_weight(Self, Weight) -> DispatchErrorWithPostInfo","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" Call this on your modules custom errors type in order to return a custom weight on error.","sig":null,"attributes":[{"value":"/ Call this on your modules custom errors type in order to return a custom weight on error.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472711,"byte_end":472804,"line_start":429,"line_end":429,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472806,"byte_end":472809,"line_start":430,"line_end":430,"column_start":2,"column_end":5}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472811,"byte_end":472824,"line_start":431,"line_end":431,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472826,"byte_end":472829,"line_start":432,"line_end":432,"column_start":2,"column_end":5}},{"value":"/ ```ignore","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472831,"byte_end":472844,"line_start":433,"line_end":433,"column_start":2,"column_end":15}},{"value":"/ let who = ensure_signed(origin).map_err(|e| e.with_weight(100))?;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472846,"byte_end":472915,"line_start":434,"line_end":434,"column_start":2,"column_end":71}},{"value":"/ ensure!(who == me, Error::<T>::NotMe.with_weight(200_000));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472917,"byte_end":472980,"line_start":435,"line_end":435,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472982,"byte_end":472989,"line_start":436,"line_end":436,"column_start":2,"column_end":9}}]},{"kind":"Struct","id":{"krate":0,"index":2129},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475436,"byte_end":475446,"line_start":536,"line_end":536,"column_start":12,"column_end":22},"name":"FunctionOf","qualname":"::weights::FunctionOf","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct to represent a weight which is a function of the input arguments. The given items have\n the following types:","sig":null,"attributes":[{"value":"/ A struct to represent a weight which is a function of the input arguments. The given items have","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":474722,"byte_end":474821,"line_start":526,"line_end":526,"column_start":1,"column_end":100}},{"value":"/ the following types:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":474822,"byte_end":474846,"line_start":527,"line_end":527,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":474847,"byte_end":474850,"line_start":528,"line_end":528,"column_start":1,"column_end":4}},{"value":"/ - `WD`: a raw `Weight` value or a closure that returns a `Weight` with the same","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":474851,"byte_end":474934,"line_start":529,"line_end":529,"column_start":1,"column_end":84}},{"value":"/   argument list as the dispatched, wrapped in a tuple.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":474935,"byte_end":474993,"line_start":530,"line_end":530,"column_start":1,"column_end":59}},{"value":"/ - `CD`: a raw `DispatchClass` value or a closure that returns a `DispatchClass`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":474994,"byte_end":475077,"line_start":531,"line_end":531,"column_start":1,"column_end":84}},{"value":"/   with the same argument list as the dispatched, wrapped in a tuple.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475078,"byte_end":475150,"line_start":532,"line_end":532,"column_start":1,"column_end":73}},{"value":"/ - `PF`: a `Pays` variant for whether this dispatch pays fee or not or a closure that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475151,"byte_end":475239,"line_start":533,"line_end":533,"column_start":1,"column_end":89}},{"value":"/   returns a `Pays` variant with the same argument list as the dispatched, wrapped in a tuple.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475240,"byte_end":475337,"line_start":534,"line_end":534,"column_start":1,"column_end":98}},{"value":"deprecated =\n  \"Function arguments are available directly inside the annotation now.\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475338,"byte_end":475424,"line_start":535,"line_end":535,"column_start":1,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":2134},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475459,"byte_end":475465,"line_start":536,"line_end":536,"column_start":35,"column_end":41},"name":"0","qualname":"::weights::FunctionOf::0","value":"WD","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2135},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475467,"byte_end":475473,"line_start":536,"line_end":536,"column_start":43,"column_end":49},"name":"1","qualname":"::weights::FunctionOf::1","value":"CD","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2136},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475475,"byte_end":475481,"line_start":536,"line_end":536,"column_start":51,"column_end":57},"name":"2","qualname":"::weights::FunctionOf::2","value":"PF","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7170},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477782,"byte_end":477797,"line_start":630,"line_end":630,"column_start":12,"column_end":27},"name":"RuntimeDbWeight","qualname":"::weights::RuntimeDbWeight","value":"RuntimeDbWeight { read, write }","parent":null,"children":[{"krate":0,"index":7171},{"krate":0,"index":7172}],"decl_id":null,"docs":" The weight of database operations that the runtime can invoke.\n","sig":null,"attributes":[{"value":"/ The weight of database operations that the runtime can invoke.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477627,"byte_end":477693,"line_start":628,"line_end":628,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":7171},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477805,"byte_end":477809,"line_start":631,"line_end":631,"column_start":6,"column_end":10},"name":"read","qualname":"::weights::RuntimeDbWeight::read","value":"u64","parent":{"krate":0,"index":7170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7172},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477824,"byte_end":477829,"line_start":632,"line_end":632,"column_start":6,"column_end":11},"name":"write","qualname":"::weights::RuntimeDbWeight::write","value":"u64","parent":{"krate":0,"index":7170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2186},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477873,"byte_end":477878,"line_start":636,"line_end":636,"column_start":9,"column_end":14},"name":"reads","qualname":"<RuntimeDbWeight>::reads","value":"pub fn reads(Self, Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2187},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477950,"byte_end":477956,"line_start":640,"line_end":640,"column_start":9,"column_end":15},"name":"writes","qualname":"<RuntimeDbWeight>::writes","value":"pub fn writes(Self, Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478029,"byte_end":478041,"line_start":644,"line_end":644,"column_start":9,"column_end":21},"name":"reads_writes","qualname":"<RuntimeDbWeight>::reads_writes","value":"pub fn reads_writes(Self, Weight, Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7198},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478594,"byte_end":478616,"line_start":662,"line_end":662,"column_start":12,"column_end":34},"name":"WeightToFeeCoefficient","qualname":"::weights::WeightToFeeCoefficient","value":"WeightToFeeCoefficient { coeff_integer, coeff_frac, negative, degree }","parent":null,"children":[{"krate":0,"index":7200},{"krate":0,"index":7201},{"krate":0,"index":7202},{"krate":0,"index":7203}],"decl_id":null,"docs":" One coefficient and its position in the `WeightToFeePolynomial`.","sig":null,"attributes":[{"value":"/ One coefficient and its position in the `WeightToFeePolynomial`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478231,"byte_end":478299,"line_start":651,"line_end":651,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478300,"byte_end":478303,"line_start":652,"line_end":652,"column_start":1,"column_end":4}},{"value":"/ One term of polynomial is calculated as:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478304,"byte_end":478348,"line_start":653,"line_end":653,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478349,"byte_end":478352,"line_start":654,"line_end":654,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478353,"byte_end":478366,"line_start":655,"line_end":655,"column_start":1,"column_end":14}},{"value":"/ coeff_integer * x^(degree) + coeff_frac * x^(degree)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478367,"byte_end":478423,"line_start":656,"line_end":656,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478424,"byte_end":478431,"line_start":657,"line_end":657,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478432,"byte_end":478435,"line_start":658,"line_end":658,"column_start":1,"column_end":4}},{"value":"/ The `negative` value encodes whether the term is added or substracted from the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478436,"byte_end":478518,"line_start":659,"line_end":659,"column_start":1,"column_end":83}},{"value":"/ overall polynomial result.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478519,"byte_end":478549,"line_start":660,"line_end":660,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":7200},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478676,"byte_end":478689,"line_start":664,"line_end":664,"column_start":6,"column_end":19},"name":"coeff_integer","qualname":"::weights::WeightToFeeCoefficient::coeff_integer","value":"Balance","parent":{"krate":0,"index":7198},"children":[],"decl_id":null,"docs":" The integral part of the coefficient.\n","sig":null,"attributes":[{"value":"/ The integral part of the coefficient.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478629,"byte_end":478670,"line_start":663,"line_end":663,"column_start":2,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":7201},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478750,"byte_end":478760,"line_start":666,"line_end":666,"column_start":6,"column_end":16},"name":"coeff_frac","qualname":"::weights::WeightToFeeCoefficient::coeff_frac","value":"sp_runtime::Perbill","parent":{"krate":0,"index":7198},"children":[],"decl_id":null,"docs":" The fractional part of the coefficient.\n","sig":null,"attributes":[{"value":"/ The fractional part of the coefficient.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478701,"byte_end":478744,"line_start":665,"line_end":665,"column_start":2,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":7202},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478841,"byte_end":478849,"line_start":668,"line_end":668,"column_start":6,"column_end":14},"name":"negative","qualname":"::weights::WeightToFeeCoefficient::negative","value":"bool","parent":{"krate":0,"index":7198},"children":[],"decl_id":null,"docs":" True iff the coefficient should be interpreted as negative.\n","sig":null,"attributes":[{"value":"/ True iff the coefficient should be interpreted as negative.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478772,"byte_end":478835,"line_start":667,"line_end":667,"column_start":2,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":7203},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478896,"byte_end":478902,"line_start":670,"line_end":670,"column_start":6,"column_end":12},"name":"degree","qualname":"::weights::WeightToFeeCoefficient::degree","value":"u8","parent":{"krate":0,"index":7198},"children":[],"decl_id":null,"docs":" Degree/exponent of the term.\n","sig":null,"attributes":[{"value":"/ Degree/exponent of the term.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478858,"byte_end":478890,"line_start":669,"line_end":669,"column_start":2,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":2189},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478978,"byte_end":479001,"line_start":674,"line_end":674,"column_start":10,"column_end":33},"name":"WeightToFeeCoefficients","qualname":"::weights::WeightToFeeCoefficients","value":"SmallVec<[WeightToFeeCoefficient<T>; ]>","parent":null,"children":[],"decl_id":null,"docs":" A list of coefficients that represent one polynomial.\n","sig":null,"attributes":[{"value":"/ A list of coefficients that represent one polynomial.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":478911,"byte_end":478968,"line_start":673,"line_end":673,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":2192},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479204,"byte_end":479225,"line_start":679,"line_end":679,"column_start":11,"column_end":32},"name":"WeightToFeePolynomial","qualname":"::weights::WeightToFeePolynomial","value":"WeightToFeePolynomial","parent":null,"children":[{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2195}],"decl_id":null,"docs":" A trait that describes the weight to fee calculation as polynomial.","sig":null,"attributes":[{"value":"/ A trait that describes the weight to fee calculation as polynomial.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479050,"byte_end":479121,"line_start":676,"line_end":676,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479122,"byte_end":479125,"line_start":677,"line_end":677,"column_start":1,"column_end":4}},{"value":"/ An implementor should only implement the `polynomial` function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479126,"byte_end":479193,"line_start":678,"line_end":678,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":2193},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479303,"byte_end":479310,"line_start":681,"line_end":681,"column_start":7,"column_end":14},"name":"Balance","qualname":"::weights::WeightToFeePolynomial::Balance","value":"type Balance: BaseArithmetic + From<u32> + Copy + Unsigned;","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":" The type that is returned as result from polynomial evaluation.\n","sig":null,"attributes":[{"value":"/ The type that is returned as result from polynomial evaluation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479229,"byte_end":479296,"line_start":680,"line_end":680,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479763,"byte_end":479773,"line_start":689,"line_end":689,"column_start":5,"column_end":15},"name":"polynomial","qualname":"::weights::WeightToFeePolynomial::polynomial","value":"pub fn polynomial() -> WeightToFeeCoefficients<Self::Balance>","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":" Returns a polynomial that describes the weight to fee conversion.","sig":null,"attributes":[{"value":"/ Returns a polynomial that describes the weight to fee conversion.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479360,"byte_end":479429,"line_start":683,"line_end":683,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479431,"byte_end":479434,"line_start":684,"line_end":684,"column_start":2,"column_end":5}},{"value":"/ This is the only function that should be manually implemented. Please note","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479436,"byte_end":479514,"line_start":685,"line_end":685,"column_start":2,"column_end":80}},{"value":"/ that all calculation is done in the probably unsigned `Balance` type. This means","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479516,"byte_end":479600,"line_start":686,"line_end":686,"column_start":2,"column_end":86}},{"value":"/ that the order of coefficients is important as putting the negative coefficients","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479602,"byte_end":479686,"line_start":687,"line_end":687,"column_start":2,"column_end":86}},{"value":"/ first will most likely saturate the result to zero mid evaluation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479688,"byte_end":479758,"line_start":688,"line_end":688,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2195},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":480064,"byte_end":480068,"line_start":695,"line_end":695,"column_start":5,"column_end":9},"name":"calc","qualname":"::weights::WeightToFeePolynomial::calc","value":"pub fn calc(&Weight) -> Self::Balance","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":" Calculates the fee from the passed `weight` according to the `polynomial`.","sig":null,"attributes":[{"value":"/ Calculates the fee from the passed `weight` according to the `polynomial`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479821,"byte_end":479899,"line_start":691,"line_end":691,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479901,"byte_end":479904,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ This should not be overriden in most circumstances. Calculation is done in the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479906,"byte_end":479988,"line_start":693,"line_end":693,"column_start":2,"column_end":84}},{"value":"/ `Balance` type and never overflows. All evaluation is saturating.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":479990,"byte_end":480059,"line_start":694,"line_end":694,"column_start":2,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":2197},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":480817,"byte_end":480828,"line_start":718,"line_end":718,"column_start":12,"column_end":23},"name":"IdentityFee","qualname":"::weights::IdentityFee","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementor of `WeightToFeePolynomial` that maps one unit of weight to one unit of fee.\n","sig":null,"attributes":[{"value":"/ Implementor of `WeightToFeePolynomial` that maps one unit of weight to one unit of fee.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":480714,"byte_end":480805,"line_start":717,"line_end":717,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":7221},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":481333,"byte_end":481349,"line_start":737,"line_end":737,"column_start":12,"column_end":28},"name":"PerDispatchClass","qualname":"::weights::PerDispatchClass","value":"PerDispatchClass {  }","parent":null,"children":[{"krate":0,"index":7223},{"krate":0,"index":7224},{"krate":0,"index":7225}],"decl_id":null,"docs":" A struct holding value for each `DispatchClass`.\n","sig":null,"attributes":[{"value":"/ A struct holding value for each `DispatchClass`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":481198,"byte_end":481250,"line_start":735,"line_end":735,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2207},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":481628,"byte_end":481631,"line_start":748,"line_end":748,"column_start":9,"column_end":12},"name":"new","qualname":"<PerDispatchClass<T>>::new","value":"pub fn new<impl Fn(DispatchClass) -> T: Fn(DispatchClass) ->\n           T>(impl Fn(DispatchClass) -> T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `PerDispatchClass` with the same value for every class.\n","sig":null,"attributes":[{"value":"/ Create new `PerDispatchClass` with the same value for every class.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":481549,"byte_end":481619,"line_start":747,"line_end":747,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2209},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":481896,"byte_end":481903,"line_start":757,"line_end":757,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<PerDispatchClass<T>>::get_mut","value":"pub fn get_mut(&mut Self, DispatchClass) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to current value of given class.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to current value of given class.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":481827,"byte_end":481887,"line_start":756,"line_end":756,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2210},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482175,"byte_end":482178,"line_start":766,"line_end":766,"column_start":9,"column_end":12},"name":"get","qualname":"<PerDispatchClass<T>>::get","value":"pub fn get(&Self, DispatchClass) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get current value for given class.\n","sig":null,"attributes":[{"value":"/ Get current value for given class.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482128,"byte_end":482166,"line_start":765,"line_end":765,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2213},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482464,"byte_end":482467,"line_start":777,"line_end":777,"column_start":9,"column_end":12},"name":"set","qualname":"<PerDispatchClass<T>>::set","value":"pub fn set<impl OneOrMany<DispatchClass>: OneOrMany<DispatchClass>>(&mut Self,\n                                                                    T,\n                                                                    impl OneOrMany<DispatchClass>)","parent":null,"children":[],"decl_id":null,"docs":" Set the value of given class.\n","sig":null,"attributes":[{"value":"/ Set the value of given class.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482422,"byte_end":482455,"line_start":776,"line_end":776,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482722,"byte_end":482727,"line_start":786,"line_end":786,"column_start":9,"column_end":14},"name":"total","qualname":"<PerDispatchClass<Weight>>::total","value":"pub fn total(&Self) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Returns the total weight consumed by all extrinsics in the block.\n","sig":null,"attributes":[{"value":"/ Returns the total weight consumed by all extrinsics in the block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482644,"byte_end":482713,"line_start":785,"line_end":785,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2217},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482971,"byte_end":482974,"line_start":795,"line_end":795,"column_start":9,"column_end":12},"name":"add","qualname":"<PerDispatchClass<Weight>>::add","value":"pub fn add(&mut Self, Weight, DispatchClass)","parent":null,"children":[],"decl_id":null,"docs":" Add some weight of a specific dispatch class, saturating at the numeric bounds of `Weight`.\n","sig":null,"attributes":[{"value":"/ Add some weight of a specific dispatch class, saturating at the numeric bounds of `Weight`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482867,"byte_end":482962,"line_start":794,"line_end":794,"column_start":2,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2218},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":483220,"byte_end":483231,"line_start":802,"line_end":802,"column_start":9,"column_end":20},"name":"checked_add","qualname":"<PerDispatchClass<Weight>>::checked_add","value":"pub fn checked_add(&mut Self, Weight, DispatchClass) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Try to add some weight of a specific dispatch class, returning Err(()) if overflow would\n occur.\n","sig":null,"attributes":[{"value":"/ Try to add some weight of a specific dispatch class, returning Err(()) if overflow would","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":483107,"byte_end":483199,"line_start":800,"line_end":800,"column_start":2,"column_end":94}},{"value":"/ occur.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":483201,"byte_end":483211,"line_start":801,"line_end":801,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2219},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":483513,"byte_end":483516,"line_start":810,"line_end":810,"column_start":9,"column_end":12},"name":"sub","qualname":"<PerDispatchClass<Weight>>::sub","value":"pub fn sub(&mut Self, Weight, DispatchClass)","parent":null,"children":[],"decl_id":null,"docs":" Subtract some weight of a specific dispatch class, saturating at the numeric bounds of\n `Weight`.\n","sig":null,"attributes":[{"value":"/ Subtract some weight of a specific dispatch class, saturating at the numeric bounds of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":483399,"byte_end":483489,"line_start":808,"line_end":808,"column_start":2,"column_end":92}},{"value":"/ `Weight`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":483491,"byte_end":483504,"line_start":809,"line_end":809,"column_start":2,"column_end":15}}]},{"kind":"Mod","id":{"krate":0,"index":2220},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"instances","qualname":"::instances","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","parent":null,"children":[{"krate":0,"index":7260},{"krate":0,"index":7272},{"krate":0,"index":7271},{"krate":0,"index":7268},{"krate":0,"index":7269},{"krate":0,"index":7265},{"krate":0,"index":7266},{"krate":0,"index":7262},{"krate":0,"index":7274},{"krate":0,"index":7286},{"krate":0,"index":7285},{"krate":0,"index":7282},{"krate":0,"index":7283},{"krate":0,"index":7279},{"krate":0,"index":7280},{"krate":0,"index":7276},{"krate":0,"index":7288},{"krate":0,"index":7300},{"krate":0,"index":7299},{"krate":0,"index":7296},{"krate":0,"index":7297},{"krate":0,"index":7293},{"krate":0,"index":7294},{"krate":0,"index":7290},{"krate":0,"index":7302},{"krate":0,"index":7314},{"krate":0,"index":7313},{"krate":0,"index":7310},{"krate":0,"index":7311},{"krate":0,"index":7307},{"krate":0,"index":7308},{"krate":0,"index":7304},{"krate":0,"index":7316},{"krate":0,"index":7328},{"krate":0,"index":7327},{"krate":0,"index":7324},{"krate":0,"index":7325},{"krate":0,"index":7321},{"krate":0,"index":7322},{"krate":0,"index":7318},{"krate":0,"index":7330},{"krate":0,"index":7342},{"krate":0,"index":7341},{"krate":0,"index":7338},{"krate":0,"index":7339},{"krate":0,"index":7335},{"krate":0,"index":7336},{"krate":0,"index":7332},{"krate":0,"index":7344},{"krate":0,"index":7356},{"krate":0,"index":7355},{"krate":0,"index":7352},{"krate":0,"index":7353},{"krate":0,"index":7349},{"krate":0,"index":7350},{"krate":0,"index":7346},{"krate":0,"index":7358},{"krate":0,"index":7370},{"krate":0,"index":7369},{"krate":0,"index":7366},{"krate":0,"index":7367},{"krate":0,"index":7363},{"krate":0,"index":7364},{"krate":0,"index":7360},{"krate":0,"index":7372},{"krate":0,"index":7384},{"krate":0,"index":7383},{"krate":0,"index":7380},{"krate":0,"index":7381},{"krate":0,"index":7377},{"krate":0,"index":7378},{"krate":0,"index":7374},{"krate":0,"index":7386},{"krate":0,"index":7398},{"krate":0,"index":7397},{"krate":0,"index":7394},{"krate":0,"index":7395},{"krate":0,"index":7391},{"krate":0,"index":7392},{"krate":0,"index":7388},{"krate":0,"index":7400},{"krate":0,"index":7412},{"krate":0,"index":7411},{"krate":0,"index":7408},{"krate":0,"index":7409},{"krate":0,"index":7405},{"krate":0,"index":7406},{"krate":0,"index":7402},{"krate":0,"index":7414},{"krate":0,"index":7426},{"krate":0,"index":7425},{"krate":0,"index":7422},{"krate":0,"index":7423},{"krate":0,"index":7419},{"krate":0,"index":7420},{"krate":0,"index":7416},{"krate":0,"index":7428},{"krate":0,"index":7440},{"krate":0,"index":7439},{"krate":0,"index":7436},{"krate":0,"index":7437},{"krate":0,"index":7433},{"krate":0,"index":7434},{"krate":0,"index":7430},{"krate":0,"index":7442},{"krate":0,"index":7454},{"krate":0,"index":7453},{"krate":0,"index":7450},{"krate":0,"index":7451},{"krate":0,"index":7447},{"krate":0,"index":7448},{"krate":0,"index":7444},{"krate":0,"index":7456},{"krate":0,"index":7468},{"krate":0,"index":7467},{"krate":0,"index":7464},{"krate":0,"index":7465},{"krate":0,"index":7461},{"krate":0,"index":7462},{"krate":0,"index":7458},{"krate":0,"index":7470},{"krate":0,"index":7482},{"krate":0,"index":7481},{"krate":0,"index":7478},{"krate":0,"index":7479},{"krate":0,"index":7475},{"krate":0,"index":7476},{"krate":0,"index":7472}],"decl_id":null,"docs":" Some instance placeholder to be used in [`frame_support::pallet`] attribute macro.","sig":null,"attributes":[{"value":"/ Some instance placeholder to be used in [`frame_support::pallet`] attribute macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490185,"byte_end":490271,"line_start":18,"line_end":18,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490272,"byte_end":490275,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [`frame_support::pallet`] attribute macro does only requires the instance generic `I` to be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490276,"byte_end":490371,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ static (contrary to `decl_*` macro which requires instance generic to implement","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490372,"byte_end":490455,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ [`frame_support::traits::Instance`]).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490456,"byte_end":490497,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490498,"byte_end":490501,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Thus support provides some instance types to be used, This allow some instantiable pallet to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490502,"byte_end":490598,"line_start":24,"line_end":24,"column_start":1,"column_end":97}},{"value":"/ depend on specific instance of another:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490599,"byte_end":490642,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490643,"byte_end":490650,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ # mod another_pallet { pub trait Config<I: 'static = ()> {} }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490651,"byte_end":490716,"line_start":27,"line_end":27,"column_start":1,"column_end":66}},{"value":"/ pub trait Config<I: 'static = ()>: another_pallet::Config<I> {}","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490717,"byte_end":490784,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490785,"byte_end":490792,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490793,"byte_end":490796,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ NOTE: [`frame_support::pallet`] will reexport them inside the module, in order to make them","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490797,"byte_end":490892,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"/ accessible to [`frame_support::construct_runtime`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490893,"byte_end":490948,"line_start":32,"line_end":32,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":7260},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491104,"byte_end":491113,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"Instance0","qualname":"::instances::Instance0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance0 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance0 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":490950,"byte_end":491026,"line_start":34,"line_end":34,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7274},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491270,"byte_end":491279,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"Instance1","qualname":"::instances::Instance1","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance1 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance1 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491116,"byte_end":491192,"line_start":38,"line_end":38,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7288},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491436,"byte_end":491445,"line_start":44,"line_end":44,"column_start":12,"column_end":21},"name":"Instance2","qualname":"::instances::Instance2","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance2 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance2 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491282,"byte_end":491358,"line_start":42,"line_end":42,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7302},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491602,"byte_end":491611,"line_start":48,"line_end":48,"column_start":12,"column_end":21},"name":"Instance3","qualname":"::instances::Instance3","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance3 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance3 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491448,"byte_end":491524,"line_start":46,"line_end":46,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7316},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491768,"byte_end":491777,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"Instance4","qualname":"::instances::Instance4","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance4 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance4 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491614,"byte_end":491690,"line_start":50,"line_end":50,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7330},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491934,"byte_end":491943,"line_start":56,"line_end":56,"column_start":12,"column_end":21},"name":"Instance5","qualname":"::instances::Instance5","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance5 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance5 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491780,"byte_end":491856,"line_start":54,"line_end":54,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7344},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492100,"byte_end":492109,"line_start":60,"line_end":60,"column_start":12,"column_end":21},"name":"Instance6","qualname":"::instances::Instance6","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance6 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance6 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":491946,"byte_end":492022,"line_start":58,"line_end":58,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7358},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492266,"byte_end":492275,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"Instance7","qualname":"::instances::Instance7","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance7 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance7 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492112,"byte_end":492188,"line_start":62,"line_end":62,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7372},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492432,"byte_end":492441,"line_start":68,"line_end":68,"column_start":12,"column_end":21},"name":"Instance8","qualname":"::instances::Instance8","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance8 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance8 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492278,"byte_end":492354,"line_start":66,"line_end":66,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7386},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492598,"byte_end":492607,"line_start":72,"line_end":72,"column_start":12,"column_end":21},"name":"Instance9","qualname":"::instances::Instance9","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance9 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance9 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492444,"byte_end":492520,"line_start":70,"line_end":70,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7400},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492765,"byte_end":492775,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"Instance10","qualname":"::instances::Instance10","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance10 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance10 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492610,"byte_end":492687,"line_start":74,"line_end":74,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":7414},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492933,"byte_end":492943,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"name":"Instance11","qualname":"::instances::Instance11","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance11 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance11 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492778,"byte_end":492855,"line_start":78,"line_end":78,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":7428},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":493101,"byte_end":493111,"line_start":84,"line_end":84,"column_start":12,"column_end":22},"name":"Instance12","qualname":"::instances::Instance12","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance12 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance12 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":492946,"byte_end":493023,"line_start":82,"line_end":82,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":7442},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":493269,"byte_end":493279,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"Instance13","qualname":"::instances::Instance13","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance13 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance13 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":493114,"byte_end":493191,"line_start":86,"line_end":86,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":7456},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":493437,"byte_end":493447,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"Instance14","qualname":"::instances::Instance14","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance14 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance14 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":493282,"byte_end":493359,"line_start":90,"line_end":90,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":7470},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":493605,"byte_end":493615,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"Instance15","qualname":"::instances::Instance15","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance15 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance15 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/instances.rs","byte_start":493450,"byte_end":493527,"line_start":94,"line_end":94,"column_start":1,"column_end":78}}]},{"kind":"Enum","id":{"krate":0,"index":7484},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":2181,"byte_end":2186,"line_start":85,"line_end":85,"column_start":10,"column_end":15},"name":"Never","qualname":"::Never","value":"pub enum Never { }","parent":null,"children":[],"decl_id":null,"docs":" A type that cannot be instantiated.\n","sig":null,"attributes":[{"value":"/ A type that cannot be instantiated.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":2093,"byte_end":2132,"line_start":83,"line_end":83,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":2273},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":29851,"byte_end":29865,"line_start":1045,"line_end":1045,"column_start":9,"column_end":23},"name":"pallet_prelude","qualname":"::pallet_prelude","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2274},{"krate":0,"index":8153},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":2282},{"krate":0,"index":8167},{"krate":0,"index":2283},{"krate":0,"index":8169},{"krate":0,"index":2284},{"krate":0,"index":8171},{"krate":0,"index":2285},{"krate":0,"index":8173},{"krate":0,"index":2286},{"krate":0,"index":8175},{"krate":0,"index":2287},{"krate":0,"index":8177},{"krate":0,"index":2288},{"krate":0,"index":8179},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2297},{"krate":0,"index":2298},{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2301},{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2304},{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2307},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2310},{"krate":0,"index":2311},{"krate":0,"index":8217},{"krate":0,"index":2312},{"krate":0,"index":8219},{"krate":0,"index":2313},{"krate":0,"index":2314},{"krate":0,"index":8221},{"krate":0,"index":2315},{"krate":0,"index":8223},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2320},{"krate":0,"index":2321},{"krate":0,"index":2322},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2325},{"krate":0,"index":2326},{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334}],"decl_id":null,"docs":" Prelude to be used alongside pallet macro, for ease of use.\n","sig":null,"attributes":[{"value":"/ Prelude to be used alongside pallet macro, for ease of use.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":29779,"byte_end":29842,"line_start":1044,"line_end":1044,"column_start":1,"column_end":64}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73571,"byte_end":73584,"line_start":161,"line_end":161,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":74235,"byte_end":74248,"line_start":186,"line_end":186,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93700,"byte_end":93701,"line_start":65,"line_end":65,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":228550,"byte_end":228568,"line_start":105,"line_end":105,"column_start":16,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":229380,"byte_end":229381,"line_start":139,"line_end":139,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":230970,"byte_end":230971,"line_start":197,"line_end":197,"column_start":86,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":337},{"krate":0,"index":339},{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":353},{"krate":0,"index":358},{"krate":0,"index":363},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":242163,"byte_end":242164,"line_start":127,"line_end":127,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":441},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":459},{"krate":0,"index":465},{"krate":0,"index":471},{"krate":0,"index":477},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":248004,"byte_end":248005,"line_start":338,"line_end":338,"column_start":52,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":256258,"byte_end":256259,"line_start":56,"line_end":56,"column_start":69,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":554},{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":259545,"byte_end":259560,"line_start":33,"line_end":33,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":260398,"byte_end":260413,"line_start":56,"line_end":56,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":261327,"byte_end":261345,"line_start":91,"line_end":91,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":262237,"byte_end":262255,"line_start":115,"line_end":115,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":270462,"byte_end":270474,"line_start":41,"line_end":41,"column_start":2,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271130,"byte_end":271142,"line_start":63,"line_end":63,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":679},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":685},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":275434,"byte_end":275446,"line_start":182,"line_end":182,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":280366,"byte_end":280376,"line_start":51,"line_end":51,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":281182,"byte_end":281192,"line_start":77,"line_end":77,"column_start":2,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":757},{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":281751,"byte_end":281761,"line_start":95,"line_end":95,"column_start":2,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":786},{"krate":0,"index":791},{"krate":0,"index":795},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287674,"byte_end":287684,"line_start":258,"line_end":258,"column_start":2,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":289340,"byte_end":289350,"line_start":302,"line_end":302,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":297427,"byte_end":297443,"line_start":56,"line_end":56,"column_start":2,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":298368,"byte_end":298384,"line_start":86,"line_end":86,"column_start":2,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":299060,"byte_end":299076,"line_start":106,"line_end":106,"column_start":2,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":927},{"krate":0,"index":932},{"krate":0,"index":936},{"krate":0,"index":939},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":948},{"krate":0,"index":954},{"krate":0,"index":959},{"krate":0,"index":965},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306894,"byte_end":306910,"line_start":335,"line_end":335,"column_start":2,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309655,"byte_end":309671,"line_start":399,"line_end":399,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267559,"byte_end":267570,"line_start":60,"line_end":60,"column_start":66,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":268077,"byte_end":268087,"line_start":80,"line_end":80,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":268692,"byte_end":268705,"line_start":101,"line_end":101,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":268870,"byte_end":268883,"line_start":107,"line_end":107,"column_start":66,"column_end":79},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":268968,"byte_end":268981,"line_start":108,"line_end":108,"column_start":66,"column_end":79},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":178674,"byte_end":178695,"line_start":51,"line_end":51,"column_start":16,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":195389,"byte_end":195403,"line_start":522,"line_end":522,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1271},{"krate":0,"index":1272}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":200140,"byte_end":200143,"line_start":675,"line_end":675,"column_start":29,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":200181,"byte_end":200187,"line_start":676,"line_end":676,"column_start":32,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":200237,"byte_end":200240,"line_start":679,"line_end":679,"column_start":38,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":200287,"byte_end":200290,"line_start":680,"line_end":680,"column_start":41,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":200604,"byte_end":200610,"line_start":685,"line_end":685,"column_start":56,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318466,"byte_end":318467,"line_start":35,"line_end":35,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1329},{"krate":0,"index":1331},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1339}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319575,"byte_end":319583,"line_start":76,"line_end":76,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319783,"byte_end":319791,"line_start":83,"line_end":83,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319939,"byte_end":319951,"line_start":91,"line_end":91,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":320228,"byte_end":320240,"line_start":102,"line_end":102,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":320506,"byte_end":320522,"line_start":114,"line_end":114,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":320806,"byte_end":320822,"line_start":125,"line_end":125,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1369}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321064,"byte_end":321074,"line_start":137,"line_end":137,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321333,"byte_end":321343,"line_start":147,"line_end":147,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321597,"byte_end":321604,"line_start":157,"line_end":157,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321853,"byte_end":321860,"line_start":167,"line_end":167,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388022,"byte_end":388038,"line_start":141,"line_end":141,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1563}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388323,"byte_end":388339,"line_start":150,"line_end":150,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388415,"byte_end":388431,"line_start":156,"line_end":156,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388669,"byte_end":388685,"line_start":164,"line_end":164,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":397374,"byte_end":397388,"line_start":438,"line_end":438,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1630},{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400393,"byte_end":400394,"line_start":542,"line_end":542,"column_start":40,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":412013,"byte_end":412028,"line_start":864,"line_end":864,"column_start":3,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":413481,"byte_end":413493,"line_start":912,"line_end":912,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427109,"byte_end":427124,"line_start":1270,"line_end":1270,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1811}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431949,"byte_end":431963,"line_start":1422,"line_end":1422,"column_start":55,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1845}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445094,"byte_end":445095,"line_start":1781,"line_end":1781,"column_start":23,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1932}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446487,"byte_end":446497,"line_start":1817,"line_end":1817,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1942}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448035,"byte_end":448053,"line_start":1856,"line_end":1856,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448176,"byte_end":448194,"line_start":1862,"line_end":1862,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1952},{"krate":0,"index":1953}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448744,"byte_end":448768,"line_start":1880,"line_end":1880,"column_start":85,"column_end":109},"value":"","parent":null,"children":[{"krate":0,"index":1958},{"krate":0,"index":1959}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453921,"byte_end":453934,"line_start":2030,"line_end":2030,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1985}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455454,"byte_end":455467,"line_start":2079,"line_end":2079,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1989}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465705,"byte_end":465709,"line_start":210,"line_end":210,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2043}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467164,"byte_end":467177,"line_start":243,"line_end":243,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2045}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467230,"byte_end":467243,"line_start":249,"line_end":249,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2047},{"krate":0,"index":2048}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467984,"byte_end":467997,"line_start":272,"line_end":272,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2054},{"krate":0,"index":2055}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470259,"byte_end":470275,"line_start":336,"line_end":336,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":471574,"byte_end":471590,"line_start":374,"line_end":374,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2079}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":471776,"byte_end":471792,"line_start":384,"line_end":384,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2081}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":471916,"byte_end":471932,"line_start":393,"line_end":393,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2083}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472073,"byte_end":472089,"line_start":402,"line_end":402,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2085}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472233,"byte_end":472249,"line_start":411,"line_end":411,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2087}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":473101,"byte_end":473102,"line_start":440,"line_end":440,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2092}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":473412,"byte_end":473418,"line_start":454,"line_end":454,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2095}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":473514,"byte_end":473520,"line_start":460,"line_end":460,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2098}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":473630,"byte_end":473636,"line_start":466,"line_end":466,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2101}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475575,"byte_end":475585,"line_start":540,"line_end":540,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2141}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475754,"byte_end":475764,"line_start":548,"line_end":548,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2147}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475983,"byte_end":475993,"line_start":558,"line_end":558,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":476199,"byte_end":476209,"line_start":566,"line_end":566,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2158}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":476431,"byte_end":476441,"line_start":576,"line_end":576,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2163}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":476600,"byte_end":476610,"line_start":584,"line_end":584,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2169}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":476822,"byte_end":476840,"line_start":594,"line_end":594,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2175}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477112,"byte_end":477128,"line_start":606,"line_end":606,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2180}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477412,"byte_end":477418,"line_start":617,"line_end":617,"column_start":76,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":2184}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477847,"byte_end":477862,"line_start":635,"line_end":635,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2188}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":480900,"byte_end":480911,"line_start":720,"line_end":720,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2203},{"krate":0,"index":2204}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":481526,"byte_end":481542,"line_start":746,"line_end":746,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2207},{"krate":0,"index":2209},{"krate":0,"index":2210}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482399,"byte_end":482415,"line_start":775,"line_end":775,"column_start":16,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2213}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482616,"byte_end":482632,"line_start":784,"line_end":784,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1333,"byte_end":1338,"line_start":49,"line_end":49,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":16}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1386,"byte_end":1394,"line_start":53,"line_end":53,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":50}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1404,"byte_end":1411,"line_start":54,"line_end":54,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":118}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":178147,"byte_end":178155,"line_start":26,"line_end":26,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":133}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":178165,"byte_end":178171,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":166}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":178181,"byte_end":178186,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":222}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":178211,"byte_end":178220,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":268}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":178230,"byte_end":178239,"line_start":31,"line_end":31,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":565}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":178249,"byte_end":178254,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":624}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1444,"byte_end":1449,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1402}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1472,"byte_end":1480,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1413}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1503,"byte_end":1517,"line_start":61,"line_end":61,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":1435}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1540,"byte_end":1548,"line_start":63,"line_end":63,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1438}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1571,"byte_end":1579,"line_start":65,"line_end":65,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1449}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1602,"byte_end":1607,"line_start":67,"line_end":67,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1457}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1617,"byte_end":1623,"line_start":68,"line_end":68,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1466}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1633,"byte_end":1640,"line_start":69,"line_end":69,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1995}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/lib.rs","byte_start":1650,"byte_end":1659,"line_start":70,"line_end":70,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2220}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":73571,"byte_end":73584,"line_start":161,"line_end":161,"column_start":6,"column_end":19},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":39},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/debug.rs","byte_start":74235,"byte_end":74248,"line_start":186,"line_end":186,"column_start":19,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":39},"to":{"krate":50,"index":146}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93630,"byte_end":93635,"line_start":64,"line_end":64,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":20,"index":135},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93638,"byte_end":93648,"line_start":64,"line_end":64,"column_start":30,"column_end":40},"kind":"SuperTrait","from":{"krate":20,"index":699},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93651,"byte_end":93656,"line_start":64,"line_end":64,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1762},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93659,"byte_end":93661,"line_start":64,"line_end":64,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1795},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93669,"byte_end":93674,"line_start":64,"line_end":64,"column_start":61,"column_end":66},"kind":"SuperTrait","from":{"krate":2,"index":6831},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/dispatch.rs","byte_start":93700,"byte_end":93701,"line_start":65,"line_end":65,"column_start":23,"column_end":24},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":109},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":228550,"byte_end":228568,"line_start":105,"line_end":105,"column_start":16,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":300},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":229380,"byte_end":229381,"line_start":139,"line_end":139,"column_start":41,"column_end":42},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":318},"to":{"krate":0,"index":1168}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/map.rs","byte_start":230970,"byte_end":230971,"line_start":197,"line_end":197,"column_start":86,"column_end":87},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":330},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":242163,"byte_end":242164,"line_start":127,"line_end":127,"column_start":61,"column_end":62},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":419},"to":{"krate":0,"index":1192}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/double_map.rs","byte_start":248004,"byte_end":248005,"line_start":338,"line_end":338,"column_start":52,"column_end":53},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":492},"to":{"krate":0,"index":1177}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/generator/value.rs","byte_start":256258,"byte_end":256259,"line_start":56,"line_end":56,"column_start":69,"column_end":70},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":534},"to":{"krate":0,"index":1090}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":259545,"byte_end":259560,"line_start":33,"line_end":33,"column_start":9,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":260398,"byte_end":260413,"line_start":56,"line_end":56,"column_start":38,"column_end":53},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":574},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":261327,"byte_end":261345,"line_start":91,"line_end":91,"column_start":40,"column_end":58},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/migration.rs","byte_start":262237,"byte_end":262255,"line_start":115,"line_end":115,"column_start":6,"column_end":24},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":590},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":270462,"byte_end":270474,"line_start":41,"line_end":41,"column_start":2,"column_end":14},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":649},"to":{"krate":0,"index":522}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":271130,"byte_end":271142,"line_start":63,"line_end":63,"column_start":41,"column_end":53},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":649},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/value.rs","byte_start":275434,"byte_end":275446,"line_start":182,"line_end":182,"column_start":6,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":649},"to":{"krate":0,"index":695}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":280366,"byte_end":280376,"line_start":51,"line_end":51,"column_start":6,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":728},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":281182,"byte_end":281192,"line_start":77,"line_end":77,"column_start":2,"column_end":12},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":728},"to":{"krate":0,"index":1274}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":281751,"byte_end":281761,"line_start":95,"line_end":95,"column_start":2,"column_end":12},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":287674,"byte_end":287684,"line_start":258,"line_end":258,"column_start":2,"column_end":12},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/map.rs","byte_start":289340,"byte_end":289350,"line_start":302,"line_end":302,"column_start":6,"column_end":16},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":728},"to":{"krate":0,"index":828}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":297427,"byte_end":297443,"line_start":56,"line_end":56,"column_start":2,"column_end":18},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":398}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":298368,"byte_end":298384,"line_start":86,"line_end":86,"column_start":2,"column_end":18},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":1274}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":299060,"byte_end":299076,"line_start":106,"line_end":106,"column_start":2,"column_end":18},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":306894,"byte_end":306910,"line_start":335,"line_end":335,"column_start":2,"column_end":18},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/double_map.rs","byte_start":309655,"byte_end":309671,"line_start":399,"line_end":399,"column_start":6,"column_end":22},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":1001}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":267559,"byte_end":267570,"line_start":60,"line_end":60,"column_start":66,"column_end":77},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1037},"to":{"krate":0,"index":1030}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":268077,"byte_end":268087,"line_start":80,"line_end":80,"column_start":57,"column_end":67},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1045},"to":{"krate":0,"index":1030}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":268692,"byte_end":268705,"line_start":101,"line_end":101,"column_start":6,"column_end":19},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1055},"to":{"krate":188,"index":69}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":268870,"byte_end":268883,"line_start":107,"line_end":107,"column_start":66,"column_end":79},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":2071}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/types/mod.rs","byte_start":268968,"byte_end":268981,"line_start":108,"line_end":108,"column_start":66,"column_end":79},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":2083}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":178674,"byte_end":178695,"line_start":51,"line_end":51,"column_start":16,"column_end":37},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1074},"to":{"krate":2,"index":2295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":187470,"byte_end":187480,"line_start":302,"line_end":302,"column_start":60,"column_end":70},"kind":"SuperTrait","from":{"krate":0,"index":1117},"to":{"krate":0,"index":1168}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":188469,"byte_end":188485,"line_start":326,"line_end":326,"column_start":4,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":1192},"to":{"krate":0,"index":1177}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":195389,"byte_end":195403,"line_start":522,"line_end":522,"column_start":22,"column_end":36},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199058,"byte_end":199064,"line_start":645,"line_end":645,"column_start":49,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":1295},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199371,"byte_end":199377,"line_start":652,"line_end":652,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":1295},"to":{"krate":0,"index":1290}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":199387,"byte_end":199399,"line_start":652,"line_end":652,"column_start":57,"column_end":69},"kind":"SuperTrait","from":{"krate":20,"index":125},"to":{"krate":0,"index":1290}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":200140,"byte_end":200143,"line_start":675,"line_end":675,"column_start":29,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":5,"index":4841},"to":{"krate":0,"index":1295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":200181,"byte_end":200187,"line_start":676,"line_end":676,"column_start":32,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":189,"index":2085},"to":{"krate":0,"index":1295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":200237,"byte_end":200240,"line_start":679,"line_end":679,"column_start":38,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":5,"index":4841},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":200287,"byte_end":200290,"line_start":680,"line_end":680,"column_start":41,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":5,"index":4841},"to":{"krate":0,"index":1290}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/storage/mod.rs","byte_start":200604,"byte_end":200610,"line_start":685,"line_end":685,"column_start":56,"column_end":62},"kind":{"Impl":{"id":37}},"from":{"krate":189,"index":2085},"to":{"krate":0,"index":1288}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318180,"byte_end":318185,"line_start":25,"line_end":25,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":318466,"byte_end":318467,"line_start":35,"line_end":35,"column_start":29,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1328},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319334,"byte_end":319347,"line_start":67,"line_end":67,"column_start":36,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":1340},"to":{"krate":0,"index":1344}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319575,"byte_end":319583,"line_start":76,"line_end":76,"column_start":24,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1346},"to":{"krate":0,"index":1340}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319783,"byte_end":319791,"line_start":83,"line_end":83,"column_start":34,"column_end":42},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1346},"to":{"krate":0,"index":1344}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":319939,"byte_end":319951,"line_start":91,"line_end":91,"column_start":24,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1354},"to":{"krate":0,"index":1340}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":320228,"byte_end":320240,"line_start":102,"line_end":102,"column_start":34,"column_end":46},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1354},"to":{"krate":0,"index":1344}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":320506,"byte_end":320522,"line_start":114,"line_end":114,"column_start":24,"column_end":40},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1362},"to":{"krate":0,"index":1340}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":320806,"byte_end":320822,"line_start":125,"line_end":125,"column_start":34,"column_end":50},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1362},"to":{"krate":0,"index":1344}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321064,"byte_end":321074,"line_start":137,"line_end":137,"column_start":24,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1370},"to":{"krate":0,"index":1340}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321333,"byte_end":321343,"line_start":147,"line_end":147,"column_start":24,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1378},"to":{"krate":0,"index":1340}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321597,"byte_end":321604,"line_start":157,"line_end":157,"column_start":24,"column_end":31},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1386},"to":{"krate":0,"index":1340}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/hash.rs","byte_start":321853,"byte_end":321860,"line_start":167,"line_end":167,"column_start":24,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1394},"to":{"krate":0,"index":1340}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385090,"byte_end":385102,"line_start":62,"line_end":62,"column_start":54,"column_end":66},"kind":"SuperTrait","from":{"krate":0,"index":1514},"to":{"krate":0,"index":1520}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":385426,"byte_end":385449,"line_start":70,"line_end":70,"column_start":43,"column_end":66},"kind":"SuperTrait","from":{"krate":190,"index":145},"to":{"krate":0,"index":1524}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":387172,"byte_end":387178,"line_start":117,"line_end":117,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1535},"to":{"krate":0,"index":1541}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388022,"byte_end":388038,"line_start":141,"line_end":141,"column_start":28,"column_end":44},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1549},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388323,"byte_end":388339,"line_start":150,"line_end":150,"column_start":37,"column_end":53},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1549},"to":{"krate":2,"index":2295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388415,"byte_end":388431,"line_start":156,"line_end":156,"column_start":28,"column_end":44},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388669,"byte_end":388685,"line_start":164,"line_end":164,"column_start":37,"column_end":53},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1554},"to":{"krate":2,"index":2295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388916,"byte_end":388921,"line_start":173,"line_end":173,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":1577}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388924,"byte_end":388928,"line_start":173,"line_end":173,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2071},"to":{"krate":0,"index":1577}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":388931,"byte_end":388935,"line_start":173,"line_end":173,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":2083},"to":{"krate":0,"index":1577}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":397374,"byte_end":397388,"line_start":438,"line_end":438,"column_start":23,"column_end":37},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1612},"to":{"krate":0,"index":1586}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":400393,"byte_end":400394,"line_start":542,"line_end":542,"column_start":40,"column_end":41},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1658},"to":{"krate":0,"index":1655}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":405909,"byte_end":405914,"line_start":704,"line_end":704,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":1710}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407562,"byte_end":407567,"line_start":738,"line_end":738,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":1712}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":407570,"byte_end":407577,"line_start":738,"line_end":738,"column_start":39,"column_end":46},"kind":"SuperTrait","from":{"krate":0,"index":1710},"to":{"krate":0,"index":1712}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":412013,"byte_end":412028,"line_start":864,"line_end":864,"column_start":3,"column_end":18},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":413481,"byte_end":413493,"line_start":912,"line_end":912,"column_start":23,"column_end":35},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1746},"to":{"krate":0,"index":1700}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":420977,"byte_end":420985,"line_start":1112,"line_end":1112,"column_start":42,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":1763},"to":{"krate":0,"index":1786}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":424006,"byte_end":424014,"line_start":1177,"line_end":1177,"column_start":40,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":1763},"to":{"krate":0,"index":1796}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":427109,"byte_end":427124,"line_start":1270,"line_end":1270,"column_start":6,"column_end":21},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":4036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":431949,"byte_end":431963,"line_start":1422,"line_end":1422,"column_start":55,"column_end":69},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1841},"to":{"krate":0,"index":1837}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":443610,"byte_end":443615,"line_start":1729,"line_end":1729,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":1907}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444816,"byte_end":444820,"line_start":1767,"line_end":1767,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1986},"to":{"krate":0,"index":1921}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":444826,"byte_end":444830,"line_start":1767,"line_end":1767,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1989},"to":{"krate":0,"index":1921}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":445094,"byte_end":445095,"line_start":1781,"line_end":1781,"column_start":23,"column_end":24},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1928},"to":{"krate":0,"index":1921}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":446487,"byte_end":446497,"line_start":1817,"line_end":1817,"column_start":44,"column_end":54},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1938},"to":{"krate":0,"index":1660}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448035,"byte_end":448053,"line_start":1856,"line_end":1856,"column_start":6,"column_end":24},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448176,"byte_end":448194,"line_start":1862,"line_end":1862,"column_start":31,"column_end":49},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1947},"to":{"krate":0,"index":1943}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":448744,"byte_end":448768,"line_start":1880,"line_end":1880,"column_start":85,"column_end":109},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1954},"to":{"krate":0,"index":1943}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452475,"byte_end":452482,"line_start":1989,"line_end":1989,"column_start":34,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2059},"to":{"krate":0,"index":1970}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":452485,"byte_end":452510,"line_start":1989,"line_end":1989,"column_start":44,"column_end":69},"kind":"SuperTrait","from":{"krate":189,"index":3015},"to":{"krate":0,"index":1970}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":453921,"byte_end":453934,"line_start":2030,"line_end":2030,"column_start":6,"column_end":19},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":6951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/traits.rs","byte_start":455454,"byte_end":455467,"line_start":2079,"line_end":2079,"column_start":34,"column_end":47},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":1833}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":465705,"byte_end":465709,"line_start":210,"line_end":210,"column_start":18,"column_end":22},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":7008},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467164,"byte_end":467177,"line_start":243,"line_end":243,"column_start":18,"column_end":31},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":7036},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467230,"byte_end":467243,"line_start":249,"line_end":249,"column_start":6,"column_end":19},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":7036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":467984,"byte_end":467997,"line_start":272,"line_end":272,"column_start":35,"column_end":48},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":7036},"to":{"krate":0,"index":2049}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":470259,"byte_end":470275,"line_start":336,"line_end":336,"column_start":6,"column_end":22},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":7142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":471574,"byte_end":471590,"line_start":374,"line_end":374,"column_start":39,"column_end":55},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":7142},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":471776,"byte_end":471792,"line_start":384,"line_end":384,"column_start":21,"column_end":37},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":7142},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":471916,"byte_end":471932,"line_start":393,"line_end":393,"column_start":31,"column_end":47},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":7142},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472073,"byte_end":472089,"line_start":402,"line_end":402,"column_start":19,"column_end":35},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":7142},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":472233,"byte_end":472249,"line_start":411,"line_end":411,"column_start":40,"column_end":56},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":7142},"to":{"krate":189,"index":1214}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":473101,"byte_end":473102,"line_start":440,"line_end":440,"column_start":34,"column_end":35},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2091},"to":{"krate":0,"index":2088}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":473412,"byte_end":473418,"line_start":454,"line_end":454,"column_start":26,"column_end":32},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2023},"to":{"krate":0,"index":2033}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":473514,"byte_end":473520,"line_start":460,"line_end":460,"column_start":33,"column_end":39},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2023},"to":{"krate":0,"index":2036}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":473630,"byte_end":473636,"line_start":466,"line_end":466,"column_start":24,"column_end":30},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2023},"to":{"krate":0,"index":2039}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475575,"byte_end":475585,"line_start":540,"line_end":540,"column_start":40,"column_end":50},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2129},"to":{"krate":0,"index":2033}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475754,"byte_end":475764,"line_start":548,"line_end":548,"column_start":44,"column_end":54},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2129},"to":{"krate":0,"index":2033}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":475983,"byte_end":475993,"line_start":558,"line_end":558,"column_start":47,"column_end":57},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2129},"to":{"krate":0,"index":2036}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":476199,"byte_end":476209,"line_start":566,"line_end":566,"column_start":51,"column_end":61},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2129},"to":{"krate":0,"index":2036}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":476431,"byte_end":476441,"line_start":576,"line_end":576,"column_start":38,"column_end":48},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2129},"to":{"krate":0,"index":2039}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":476600,"byte_end":476610,"line_start":584,"line_end":584,"column_start":42,"column_end":52},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2129},"to":{"krate":0,"index":2039}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":476822,"byte_end":476840,"line_start":594,"line_end":594,"column_start":6,"column_end":24},"kind":{"Impl":{"id":121}},"from":{"krate":189,"index":1586},"to":{"krate":0,"index":2071}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477112,"byte_end":477128,"line_start":606,"line_end":606,"column_start":6,"column_end":22},"kind":{"Impl":{"id":122}},"from":{"krate":189,"index":1697},"to":{"krate":0,"index":2071}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477412,"byte_end":477418,"line_start":617,"line_end":617,"column_start":76,"column_end":82},"kind":{"Impl":{"id":123}},"from":{"krate":189,"index":2759},"to":{"krate":0,"index":2071}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":477847,"byte_end":477862,"line_start":635,"line_end":635,"column_start":6,"column_end":21},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":7170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":480900,"byte_end":480911,"line_start":720,"line_end":720,"column_start":35,"column_end":46},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2197},"to":{"krate":0,"index":2192}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":481526,"byte_end":481542,"line_start":746,"line_end":746,"column_start":9,"column_end":25},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":7221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482399,"byte_end":482415,"line_start":775,"line_end":775,"column_start":16,"column_end":32},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":7221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-3.0.0/src/weights.rs","byte_start":482616,"byte_end":482632,"line_start":784,"line_end":784,"column_start":6,"column_end":22},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":7221},"to":{"krate":4294967295,"index":4294967295}}]}