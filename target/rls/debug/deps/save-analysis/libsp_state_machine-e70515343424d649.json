{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0","program":"/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","sp_state_machine","--edition=2018","/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"log\"","--cfg","feature=\"parking_lot\"","--cfg","feature=\"rand\"","--cfg","feature=\"sp-panic-handler\"","--cfg","feature=\"std\"","--cfg","feature=\"thiserror\"","-C","metadata=e70515343424d649","-C","extra-filename=-e70515343424d649","--out-dir","/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","-L","dependency=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","--extern","hash_db=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libhash_db-d38c1365a7005e89.rmeta","--extern","log=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/liblog-5304c8458a68373a.rmeta","--extern","num_traits=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libnum_traits-7944ee15958dbfe1.rmeta","--extern","codec=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libparity_scale_codec-b38ed3f0a4e0f6cc.rmeta","--extern","parking_lot=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libparking_lot-afb3a92a685d414f.rmeta","--extern","rand=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/librand-fa7aeccaab79dc34.rmeta","--extern","smallvec=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsmallvec-8544fa198532a31d.rmeta","--extern","sp_core=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_core-cba9ce4ea9a4c43e.rmeta","--extern","sp_externalities=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_externalities-117c7a5eddfa86db.rmeta","--extern","sp_panic_handler=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_panic_handler-2a34f96b5a802df3.rmeta","--extern","sp_std=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_std-0142de4e2fb49a91.rmeta","--extern","sp_trie=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_trie-14978a44031bdc1d.rmeta","--extern","thiserror=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libthiserror-d9d70d078273db88.rmeta","--extern","trie_db=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libtrie_db-9594c6d0f2a83cba.rmeta","--extern","trie_root=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libtrie_root-5db713cd291f85a1.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_state_machine-e70515343424d649.rmeta"},"prelude":{"crate_id":{"name":"sp_state_machine","disambiguator":[8742579675119555660,12103213563172048341]},"crate_root":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src","external_crates":[{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":18,"id":{"name":"hash_db","disambiguator":[16222527159578958881,15417756680510520186]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":19,"id":{"name":"parity_scale_codec","disambiguator":[8513279373943582847,10751956381400254447]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":20,"id":{"name":"parity_scale_codec_derive","disambiguator":[3988632595002997288,5128307631409362997]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":21,"id":{"name":"arrayvec","disambiguator":[1943503948824698767,8928204549588057885]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":22,"id":{"name":"byte_slice_cast","disambiguator":[11971851078352766489,17994270080533667189]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":23,"id":{"name":"serde","disambiguator":[9329802083187344169,15516913349122290357]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":24,"id":{"name":"serde_derive","disambiguator":[9132577773600900999,13098957011468639310]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":25,"id":{"name":"sp_core","disambiguator":[482245497719965997,4446364731874136958]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":26,"id":{"name":"sp_runtime_interface","disambiguator":[8486305343948881103,18310204470691800149]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":27,"id":{"name":"sp_wasm_interface","disambiguator":[12654239842700216049,8433569663077031038]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":28,"id":{"name":"sp_std","disambiguator":[9770677728196279493,12510806215599864837]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":29,"id":{"name":"impl_trait_for_tuples","disambiguator":[9660762680991374145,8791689571548580469]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":30,"id":{"name":"wasmi","disambiguator":[6918656205759776739,8549698197006326748]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":31,"id":{"name":"memory_units","disambiguator":[4446909059691065796,8711733259455937782]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":32,"id":{"name":"parity_wasm","disambiguator":[2746304515579433884,15008885245026691101]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":33,"id":{"name":"wasmi_validation","disambiguator":[12503892293425695562,631775191906383592]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":34,"id":{"name":"num_rational","disambiguator":[8002101714546462564,7774992686627339530]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":35,"id":{"name":"num_bigint","disambiguator":[8324002608551350377,6864858279968498277]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":36,"id":{"name":"num_integer","disambiguator":[5126256796491658918,13702474337812182890]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build.rs","num":37,"id":{"name":"num_traits","disambiguator":[12449281939908862398,945796103035123006]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":38,"id":{"name":"libc","disambiguator":[7953600248772063458,1989307123664392873]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":39,"id":{"name":"sp_tracing","disambiguator":[9619578780568606008,17901182021480941559]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":40,"id":{"name":"tracing_core","disambiguator":[11735089163411024588,17388945486717174255]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":41,"id":{"name":"lazy_static","disambiguator":[4038955093903438243,10998562936998939215]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":42,"id":{"name":"tracing","disambiguator":[12634947417058916823,13964040762799800002]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":43,"id":{"name":"cfg_if","disambiguator":[11748229077813686416,18120593503603249335]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":44,"id":{"name":"pin_project_lite","disambiguator":[10940599627664034505,1256839874217548822]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":45,"id":{"name":"tracing_subscriber","disambiguator":[2737517103962892138,6007003846142012037]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":46,"id":{"name":"regex","disambiguator":[15379754631532878358,1305285703807680371]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":47,"id":{"name":"aho_corasick","disambiguator":[15808597861067690095,17129261582138448034]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":48,"id":{"name":"memchr","disambiguator":[1157675088820504487,7216068552727726090]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":49,"id":{"name":"regex_syntax","disambiguator":[15754485282953042439,939955947925160166]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":50,"id":{"name":"thread_local","disambiguator":[4515805766320255868,12702638825636986852]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":51,"id":{"name":"once_cell","disambiguator":[12659116934471307003,7435940676996991787]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","num":52,"id":{"name":"parking_lot","disambiguator":[18159808056392103160,16155596511951534654]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":53,"id":{"name":"instant","disambiguator":[6707731622692707509,11541478860689369278]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":54,"id":{"name":"lock_api","disambiguator":[117164551345877035,12793837009537715804]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":55,"id":{"name":"scopeguard","disambiguator":[6745301356711570827,8805850024978740077]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":56,"id":{"name":"parking_lot_core","disambiguator":[13491894724313637548,4430950099799626494]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","num":57,"id":{"name":"smallvec","disambiguator":[12123569432201045790,1609040209808900757]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":58,"id":{"name":"matchers","disambiguator":[11196127239289206652,8821764124139599593]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":59,"id":{"name":"regex_automata","disambiguator":[1356799715280784519,12525503415491810456]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":60,"id":{"name":"byteorder","disambiguator":[16743341458239395833,5344541827637086529]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":61,"id":{"name":"ansi_term","disambiguator":[13348744980724887879,5052188682016064389]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":62,"id":{"name":"tracing_log","disambiguator":[2517198273552123748,17355328636754591651]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/prune.rs","num":63,"id":{"name":"log","disambiguator":[3545289885770114131,433247333334147900]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":64,"id":{"name":"serde_json","disambiguator":[2535307572117126142,15340677427040480041]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":65,"id":{"name":"itoa","disambiguator":[1783620119987649435,3821505174059274534]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":66,"id":{"name":"ryu","disambiguator":[4560945869205572345,5209367066204268501]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":67,"id":{"name":"tracing_serde","disambiguator":[4562426333319122918,15922045924750474936]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":68,"id":{"name":"sharded_slab","disambiguator":[17401401532503036136,1601036186833089112]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":69,"id":{"name":"chrono","disambiguator":[17126090541689444332,1886024564587297196]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":70,"id":{"name":"sp_runtime_interface_proc_macro","disambiguator":[18335766830024536561,5137992637639085820]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","num":71,"id":{"name":"sp_externalities","disambiguator":[15346619557778524113,15546321444447335287]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":72,"id":{"name":"sp_storage","disambiguator":[12236995375180460119,10483812130181742021]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":73,"id":{"name":"sp_debug_derive","disambiguator":[1127781656639809926,12270005864681690604]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":74,"id":{"name":"ref_cast","disambiguator":[3109219419575014207,1073703474336682823]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":75,"id":{"name":"ref_cast_impl","disambiguator":[548036109860010999,5849971523560802531]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":76,"id":{"name":"impl_serde","disambiguator":[807954869803654047,4716339343125958352]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":77,"id":{"name":"environmental","disambiguator":[12825357754638386979,7940730235394234995]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":78,"id":{"name":"primitive_types","disambiguator":[11755663010420176922,11551187208533645918]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":79,"id":{"name":"fixed_hash","disambiguator":[761001719887353079,113272237603088689]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":80,"id":{"name":"static_assertions","disambiguator":[17267408535625969050,4632693660215762815]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":81,"id":{"name":"rustc_hex","disambiguator":[8252233264516824388,17670331916333253350]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":82,"id":{"name":"rand","disambiguator":[8754712101818231124,439968306620514562]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":83,"id":{"name":"rand_core","disambiguator":[17249439947178837211,16150054665629866134]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":84,"id":{"name":"getrandom","disambiguator":[5295995297352709213,7943019062197219340]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":85,"id":{"name":"uint","disambiguator":[249403627217210170,66937591079663351]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":86,"id":{"name":"hex","disambiguator":[5817943069691027302,2071035837552761178]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":87,"id":{"name":"crunchy","disambiguator":[16496986770395509475,10742896350538019007]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":88,"id":{"name":"impl_codec","disambiguator":[18061770301012622754,8940897700826662907]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":89,"id":{"name":"blake2_rfc","disambiguator":[11744292092095819415,9801326368370969682]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":90,"id":{"name":"arrayvec","disambiguator":[14648713630236782063,9849397673914679400]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":91,"id":{"name":"nodrop","disambiguator":[11522295318034127309,11770490405937775818]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":92,"id":{"name":"constant_time_eq","disambiguator":[11542931171304914434,3999952699895281030]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":93,"id":{"name":"sha2","disambiguator":[6501481284549552844,10223970258463939953]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":94,"id":{"name":"block_buffer","disambiguator":[13966198174714371443,9733068092495573015]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":95,"id":{"name":"generic_array","disambiguator":[17630325060485713573,8632611388700851125]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":96,"id":{"name":"typenum","disambiguator":[8726524992263171078,2989859816024006970]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":97,"id":{"name":"digest","disambiguator":[3267007905718091736,6472354886699068987]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":98,"id":{"name":"opaque_debug","disambiguator":[6572339997394954866,9498658499336361599]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":99,"id":{"name":"cpuid_bool","disambiguator":[6205407880030392451,6093553700822162471]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":100,"id":{"name":"tiny_keccak","disambiguator":[6907276523880939152,15806809385348513789]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":101,"id":{"name":"twox_hash","disambiguator":[4843776605774432337,16933932808593462508]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":102,"id":{"name":"cfg_if","disambiguator":[10021299859095236603,9970654228449935443]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","num":103,"id":{"name":"rand","disambiguator":[746826575780793851,4471793012143423394]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":104,"id":{"name":"rand_core","disambiguator":[3238620688790230140,13462498439867285351]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":105,"id":{"name":"getrandom","disambiguator":[16958247650847020380,5385242026854871367]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":106,"id":{"name":"rand_chacha","disambiguator":[441716931807972491,17272912142872802949]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":107,"id":{"name":"ppv_lite86","disambiguator":[5486910781073359264,15253540615556416119]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":108,"id":{"name":"rand_pcg","disambiguator":[3160627028304066158,11293307244701815743]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":109,"id":{"name":"base58","disambiguator":[3369462119818718244,8362136954819660540]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":110,"id":{"name":"zeroize","disambiguator":[10556093639355727955,15809428849932923722]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":111,"id":{"name":"zeroize_derive","disambiguator":[5655268509516224944,6725263168993598751]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":112,"id":{"name":"secrecy","disambiguator":[16459322919098341897,12171937217720544940]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":113,"id":{"name":"ed25519_dalek","disambiguator":[11398848187809677205,7856143361522293917]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":114,"id":{"name":"ed25519","disambiguator":[17719961624066905290,3692275665346932817]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":115,"id":{"name":"signature","disambiguator":[8760395504805049851,3413849478659787523]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":116,"id":{"name":"curve25519_dalek","disambiguator":[4071595552511680062,1824077030073052835]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":117,"id":{"name":"subtle","disambiguator":[17934521912222352306,18444245334094816619]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":118,"id":{"name":"substrate_bip39","disambiguator":[1792972643475504061,2284854317310986267]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":119,"id":{"name":"sha2","disambiguator":[6031437354618425809,1156418039787797982]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":120,"id":{"name":"block_buffer","disambiguator":[17013019169273939082,8694242993449314512]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":121,"id":{"name":"block_padding","disambiguator":[12027653930546257504,11934247384914869959]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":122,"id":{"name":"byte_tools","disambiguator":[11700157176403723246,15042745078268532608]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":123,"id":{"name":"generic_array","disambiguator":[8154424454435046820,8305875546402162267]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":124,"id":{"name":"fake_simd","disambiguator":[14036491710765223056,16121027988084704970]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":125,"id":{"name":"opaque_debug","disambiguator":[15355801993192592970,15368723170800198628]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":126,"id":{"name":"digest","disambiguator":[18028793442622875312,8404934643691058449]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":127,"id":{"name":"hmac","disambiguator":[2398036106222558641,12747122617455590906]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":128,"id":{"name":"crypto_mac","disambiguator":[13559926310032573477,17050896233749691016]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":129,"id":{"name":"subtle","disambiguator":[10946190608180335518,5756656367206348154]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":130,"id":{"name":"pbkdf2","disambiguator":[18045263582543352373,3198099767612698545]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":131,"id":{"name":"schnorrkel","disambiguator":[1001073668430333559,14191689993495040953]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":132,"id":{"name":"arrayref","disambiguator":[16818885780591367818,9624370045344091841]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":133,"id":{"name":"curve25519_dalek","disambiguator":[11182327997470844279,2917915551897756157]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":134,"id":{"name":"merlin","disambiguator":[10995490140485953775,3078541580170789468]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":135,"id":{"name":"keccak","disambiguator":[8402286363173856787,11033165844963027687]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":136,"id":{"name":"bip39","disambiguator":[14654181774436755031,16150481678645946358]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","num":137,"id":{"name":"thiserror","disambiguator":[11211909712945309034,1462899715189146714]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":138,"id":{"name":"thiserror_impl","disambiguator":[12140497728656256834,17536753507674282886]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":139,"id":{"name":"rustc_hash","disambiguator":[18120138039320172856,5174853055526042934]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":140,"id":{"name":"anyhow","disambiguator":[17455878141675706397,15024690126878403217]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":141,"id":{"name":"unicode_normalization","disambiguator":[7319256477008403990,850912555204041804]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":142,"id":{"name":"tinyvec","disambiguator":[13757798832981975562,16448938864586428141]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":143,"id":{"name":"tinyvec_macros","disambiguator":[6971095827479815106,2369805349969581398]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":144,"id":{"name":"hmac","disambiguator":[17433356495996038620,7849656493985933521]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":145,"id":{"name":"crypto_mac","disambiguator":[16952472478491170049,5748167897379155211]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":146,"id":{"name":"pbkdf2","disambiguator":[7649781412603123506,9859389210053091319]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":147,"id":{"name":"secp256k1","disambiguator":[16737428765420032088,13773206920855754217]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":148,"id":{"name":"hmac_drbg","disambiguator":[17404808929730230210,16695580170234810369]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":149,"id":{"name":"hash256_std_hasher","disambiguator":[14242029744627902613,3090809591287000861]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":150,"id":{"name":"parity_util_mem","disambiguator":[5692800706026385981,13988503766425499944]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":151,"id":{"name":"parity_util_mem_derive","disambiguator":[3916493160687366221,3998416894547474512]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":152,"id":{"name":"hashbrown","disambiguator":[15858687212683710517,10679103842408037307]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":153,"id":{"name":"ahash","disambiguator":[11000207869931019655,11365772628104082715]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":154,"id":{"name":"dyn_clonable","disambiguator":[1160672861310717368,179577393650705180]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":155,"id":{"name":"dyn_clone","disambiguator":[153351459397055590,2262572122976187853]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":156,"id":{"name":"dyn_clonable_impl","disambiguator":[8143725291046252364,3517763874786058099]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":157,"id":{"name":"futures","disambiguator":[3463592966268286824,7540824572693008632]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":158,"id":{"name":"futures_core","disambiguator":[1741251118759805826,11401665632333816338]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":159,"id":{"name":"futures_util","disambiguator":[3438948224063739788,15492469175479036624]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":160,"id":{"name":"pin_utils","disambiguator":[6148991665019902715,7706982228305245343]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":161,"id":{"name":"proc_macro_hack","disambiguator":[18107074244595300940,7254669559897049488]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":162,"id":{"name":"futures_task","disambiguator":[7625991371478830382,1732980289896795878]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":163,"id":{"name":"futures_sink","disambiguator":[8661685636113034652,10637809691106661968]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":164,"id":{"name":"futures_channel","disambiguator":[9340365945153326119,16413412677825364759]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":165,"id":{"name":"slab","disambiguator":[10964154642823013274,18136006732140345220]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":166,"id":{"name":"futures_io","disambiguator":[1719766009174806638,1918012058549137250]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":167,"id":{"name":"futures_macro","disambiguator":[83206124768939847,1707592736898867711]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":168,"id":{"name":"futures_executor","disambiguator":[7121268507423420993,8515073597681227929]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","num":169,"id":{"name":"num_cpus","disambiguator":[12520181572928967600,156566489628191520]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","num":170,"id":{"name":"sp_trie","disambiguator":[13118048614907196054,1322344655374896753]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","num":171,"id":{"name":"trie_db","disambiguator":[45886576227001508,916380512454680783]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","num":172,"id":{"name":"trie_root","disambiguator":[10825234960134104556,2662406007426998997]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","num":173,"id":{"name":"memory_db","disambiguator":[632864180048084116,11252723647111274025]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","num":174,"id":{"name":"sp_panic_handler","disambiguator":[5416557423676215538,14720217030722033865]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","num":175,"id":{"name":"backtrace","disambiguator":[4616807196884616560,3593374161003727633]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","num":176,"id":{"name":"rustc_demangle","disambiguator":[9678936452046898147,13376131821060520602]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","num":177,"id":{"name":"addr2line","disambiguator":[13179013064549937275,4522599632718693230]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","num":178,"id":{"name":"gimli","disambiguator":[6269171323339485423,8607067438569868048]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","num":179,"id":{"name":"object","disambiguator":[6940909019048410244,13242167454319359684]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","num":180,"id":{"name":"miniz_oxide","disambiguator":[18262343450495648065,5536561149793384440]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","num":181,"id":{"name":"adler","disambiguator":[159802053453029657,12486606382973290645]}}],"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":686,"byte_end":43671,"line_start":18,"line_end":1574,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":1216,"byte_end":1217,"line_start":44,"line_end":44,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"ChangesTrieCacheAction, TrieMut, ChangesTrieState, DBValue, ChangesTrieBlockNumber, MemoryDB, create_proof_check_backend, StorageProof","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":1263,"byte_end":1264,"line_start":47,"line_end":47,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"ChangesTrieTransaction, InMemoryBackend","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":63,"index":14},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":1304,"byte_end":1309,"line_start":49,"line_end":49,"column_start":15,"column_end":20},"alias_span":null,"name":"debug","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":63,"index":12},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":1311,"byte_end":1315,"line_start":49,"line_end":49,"column_start":22,"column_end":26},"alias_span":null,"name":"warn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":63,"index":15},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":1317,"byte_end":1322,"line_start":49,"line_end":49,"column_start":28,"column_end":33},"alias_span":null,"name":"trace","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":63,"index":11},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":1324,"byte_end":1329,"line_start":49,"line_end":49,"column_start":35,"column_end":40},"alias_span":null,"name":"log_error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2431},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2737,"byte_end":2753,"line_start":119,"line_end":119,"column_start":2,"column_end":18},"alias_span":null,"name":"OverlayedChanges","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1221},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2755,"byte_end":2765,"line_start":119,"line_end":119,"column_start":20,"column_end":30},"alias_span":null,"name":"StorageKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1222},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2767,"byte_end":2779,"line_start":119,"line_end":119,"column_start":32,"column_end":44},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1223},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2782,"byte_end":2799,"line_start":120,"line_end":120,"column_start":2,"column_end":19},"alias_span":null,"name":"StorageCollection","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1224},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2801,"byte_end":2823,"line_start":120,"line_end":120,"column_start":21,"column_end":43},"alias_span":null,"name":"ChildStorageCollection","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1230},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2826,"byte_end":2840,"line_start":121,"line_end":121,"column_start":2,"column_end":16},"alias_span":null,"name":"StorageChanges","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1245},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2842,"byte_end":2865,"line_start":121,"line_end":121,"column_start":18,"column_end":41},"alias_span":null,"name":"StorageTransactionCache","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1225},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2868,"byte_end":2893,"line_start":122,"line_end":122,"column_start":2,"column_end":27},"alias_span":null,"name":"OffchainChangesCollection","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2406},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2896,"byte_end":2920,"line_start":123,"line_end":123,"column_start":2,"column_end":26},"alias_span":null,"name":"OffchainOverlayedChanges","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":23},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2949,"byte_end":2956,"line_start":125,"line_end":125,"column_start":25,"column_end":32},"alias_span":null,"name":"Backend","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1696},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2996,"byte_end":3014,"line_start":126,"line_end":126,"column_start":39,"column_end":57},"alias_span":null,"name":"TrieBackendStorage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1616},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":3016,"byte_end":3023,"line_start":126,"line_end":126,"column_start":59,"column_end":66},"alias_span":null,"name":"Storage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1528},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":3055,"byte_end":3066,"line_start":127,"line_end":127,"column_start":30,"column_end":41},"alias_span":null,"name":"TrieBackend","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2452},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":3091,"byte_end":3100,"line_start":128,"line_end":128,"column_start":24,"column_end":33},"alias_span":null,"name":"UsageInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2443},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":3102,"byte_end":3111,"line_start":128,"line_end":128,"column_start":35,"column_end":44},"alias_span":null,"name":"UsageUnit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2467},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":3113,"byte_end":3130,"line_start":128,"line_end":128,"column_start":46,"column_end":63},"alias_span":null,"name":"StateMachineStats","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":726},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":3149,"byte_end":3154,"line_start":129,"line_end":129,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2298},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":3156,"byte_end":3170,"line_start":129,"line_end":129,"column_start":24,"column_end":38},"alias_span":null,"name":"ExecutionError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":781},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":3193,"byte_end":3196,"line_start":130,"line_end":130,"column_start":21,"column_end":24},"alias_span":null,"name":"Ext","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":686,"byte_end":43671,"line_start":18,"line_end":1574,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":135},{"krate":0,"index":192},{"krate":0,"index":724},{"krate":0,"index":729},{"krate":0,"index":885},{"krate":0,"index":983},{"krate":0,"index":1080},{"krate":0,"index":1376},{"krate":0,"index":1497},{"krate":0,"index":1580},{"krate":0,"index":1732},{"krate":0,"index":1745},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1895}],"decl_id":null,"docs":" Substrate state machine implementation.\n","sig":null,"attributes":[{"value":"/ Substrate state machine implementation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":686,"byte_end":729,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"warn(missing_docs)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":731,"byte_end":753,"line_start":20,"line_end":20,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"backend","qualname":"::backend","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":2535},{"krate":0,"index":7},{"krate":0,"index":2537},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":78},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":116},{"krate":0,"index":122},{"krate":0,"index":128}],"decl_id":null,"docs":" State machine backends. These manage the code and storage of contracts.\n","sig":null,"attributes":[{"value":"/ State machine backends. These manage the code and storage of contracts.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":44359,"byte_end":44434,"line_start":18,"line_end":18,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":23},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":44972,"byte_end":44979,"line_start":38,"line_end":38,"column_start":11,"column_end":18},"name":"Backend","qualname":"::backend::Backend","value":"Backend<H: Hasher>: sp_std::fmt::Debug","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" A state backend is used to read state data and can have changes committed\n to it.","sig":null,"attributes":[{"value":"/ A state backend is used to read state data and can have changes committed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":44811,"byte_end":44888,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ to it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":44889,"byte_end":44899,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":44900,"byte_end":44903,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The clone operation (if implemented) should be cheap.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":44904,"byte_end":44961,"line_start":37,"line_end":37,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":25},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45074,"byte_end":45079,"line_start":40,"line_end":40,"column_start":7,"column_end":12},"name":"Error","qualname":"::backend::Backend::Error","value":"type Error: super::Error;","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" An error type when fetching data is not possible.\n","sig":null,"attributes":[{"value":"/ An error type when fetching data is not possible.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45014,"byte_end":45067,"line_start":39,"line_end":39,"column_start":2,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":26},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45151,"byte_end":45162,"line_start":43,"line_end":43,"column_start":7,"column_end":18},"name":"Transaction","qualname":"::backend::Backend::Transaction","value":"type Transaction: Consolidate + Default + Send;","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Storage changes to be applied if committing\n","sig":null,"attributes":[{"value":"/ Storage changes to be applied if committing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45097,"byte_end":45144,"line_start":42,"line_end":42,"column_start":2,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":27},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45236,"byte_end":45254,"line_start":46,"line_end":46,"column_start":7,"column_end":25},"name":"TrieBackendStorage","qualname":"::backend::Backend::TrieBackendStorage","value":"type TrieBackendStorage: TrieBackendStorage<H>;","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Type of trie backend storage.\n","sig":null,"attributes":[{"value":"/ Type of trie backend storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45196,"byte_end":45229,"line_start":45,"line_end":45,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45347,"byte_end":45354,"line_start":49,"line_end":49,"column_start":5,"column_end":12},"name":"storage","qualname":"::backend::Backend::storage","value":"pub fn storage(&Self, &[u8]) -> Result<Option<StorageValue>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get keyed storage or None if there is nothing associated.\n","sig":null,"attributes":[{"value":"/ Get keyed storage or None if there is nothing associated.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45281,"byte_end":45342,"line_start":48,"line_end":48,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45499,"byte_end":45511,"line_start":52,"line_end":52,"column_start":5,"column_end":17},"name":"storage_hash","qualname":"::backend::Backend::storage_hash","value":"pub fn storage_hash(&Self, &[u8]) -> Result<Option<H::Out>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get keyed storage value hash or None if there is nothing associated.\n","sig":null,"attributes":[{"value":"/ Get keyed storage value hash or None if there is nothing associated.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45422,"byte_end":45494,"line_start":51,"line_end":51,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45701,"byte_end":45714,"line_start":57,"line_end":57,"column_start":5,"column_end":18},"name":"child_storage","qualname":"::backend::Backend::child_storage","value":"pub fn child_storage(&Self, &ChildInfo, &[u8])\n-> Result<Option<StorageValue>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get keyed child storage or None if there is nothing associated.\n","sig":null,"attributes":[{"value":"/ Get keyed child storage or None if there is nothing associated.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45629,"byte_end":45696,"line_start":56,"line_end":56,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45899,"byte_end":45917,"line_start":64,"line_end":64,"column_start":5,"column_end":23},"name":"child_storage_hash","qualname":"::backend::Backend::child_storage_hash","value":"pub fn child_storage_hash(&Self, &ChildInfo, &[u8])\n-> Result<Option<H::Out>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get child keyed storage value hash or None if there is nothing associated.\n","sig":null,"attributes":[{"value":"/ Get child keyed storage value hash or None if there is nothing associated.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45816,"byte_end":45894,"line_start":63,"line_end":63,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":46128,"byte_end":46142,"line_start":73,"line_end":73,"column_start":5,"column_end":19},"name":"exists_storage","qualname":"::backend::Backend::exists_storage","value":"pub fn exists_storage(&Self, &[u8]) -> Result<bool, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" true if a key exists in storage.\n","sig":null,"attributes":[{"value":"/ true if a key exists in storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":46087,"byte_end":46123,"line_start":72,"line_end":72,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":46280,"byte_end":46300,"line_start":78,"line_end":78,"column_start":5,"column_end":25},"name":"exists_child_storage","qualname":"::backend::Backend::exists_child_storage","value":"pub fn exists_child_storage(&Self, &ChildInfo, &[u8])\n-> Result<bool, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" true if a key exists in child storage.\n","sig":null,"attributes":[{"value":"/ true if a key exists in child storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":46233,"byte_end":46275,"line_start":77,"line_end":77,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":46537,"byte_end":46553,"line_start":87,"line_end":87,"column_start":5,"column_end":21},"name":"next_storage_key","qualname":"::backend::Backend::next_storage_key","value":"pub fn next_storage_key(&Self, &[u8])\n-> Result<Option<StorageKey>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Return the next key in storage in lexicographic order or `None` if there is no value.\n","sig":null,"attributes":[{"value":"/ Return the next key in storage in lexicographic order or `None` if there is no value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":46443,"byte_end":46532,"line_start":86,"line_end":86,"column_start":2,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":46719,"byte_end":46741,"line_start":90,"line_end":90,"column_start":5,"column_end":27},"name":"next_child_storage_key","qualname":"::backend::Backend::next_child_storage_key","value":"pub fn next_child_storage_key(&Self, &ChildInfo, &[u8])\n-> Result<Option<StorageKey>, Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Return the next key in child storage in lexicographic order or `None` if there is no value.\n","sig":null,"attributes":[{"value":"/ Return the next key in child storage in lexicographic order or `None` if there is no value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":46619,"byte_end":46714,"line_start":89,"line_end":89,"column_start":2,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":46970,"byte_end":46995,"line_start":98,"line_end":98,"column_start":5,"column_end":30},"name":"apply_to_child_keys_while","qualname":"::backend::Backend::apply_to_child_keys_while","value":"pub fn apply_to_child_keys_while<F: FnMut(&[u8]) ->\n                                 bool>(&Self, &ChildInfo, F)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Retrieve all entries keys of child storage and call `f` for each of those keys.\n Aborts as soon as `f` returns false.\n","sig":null,"attributes":[{"value":"/ Retrieve all entries keys of child storage and call `f` for each of those keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":46840,"byte_end":46923,"line_start":96,"line_end":96,"column_start":2,"column_end":85}},{"value":"/ Aborts as soon as `f` returns false.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":46925,"byte_end":46965,"line_start":97,"line_end":97,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47181,"byte_end":47201,"line_start":106,"line_end":106,"column_start":5,"column_end":25},"name":"for_keys_with_prefix","qualname":"::backend::Backend::for_keys_with_prefix","value":"pub fn for_keys_with_prefix<F: FnMut(&[u8]) -> ()>(&Self, &[u8], F)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Retrieve all entries keys which start with the given prefix and\n call `f` for each of those keys.\n","sig":null,"attributes":[{"value":"/ Retrieve all entries keys which start with the given prefix and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47071,"byte_end":47138,"line_start":104,"line_end":104,"column_start":2,"column_end":69}},{"value":"/ call `f` for each of those keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47140,"byte_end":47176,"line_start":105,"line_end":105,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47438,"byte_end":47464,"line_start":112,"line_end":112,"column_start":5,"column_end":31},"name":"for_key_values_with_prefix","qualname":"::backend::Backend::for_key_values_with_prefix","value":"pub fn for_key_values_with_prefix<F: FnMut(&[u8], &[u8]) ->\n                                  ()>(&Self, &[u8], F)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Retrieve all entries keys and values of which start with the given prefix and\n call `f` for each of those keys.\n","sig":null,"attributes":[{"value":"/ Retrieve all entries keys and values of which start with the given prefix and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47314,"byte_end":47395,"line_start":110,"line_end":110,"column_start":2,"column_end":83}},{"value":"/ call `f` for each of those keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47397,"byte_end":47433,"line_start":111,"line_end":111,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47637,"byte_end":47663,"line_start":117,"line_end":117,"column_start":5,"column_end":31},"name":"for_child_keys_with_prefix","qualname":"::backend::Backend::for_child_keys_with_prefix","value":"pub fn for_child_keys_with_prefix<F: FnMut(&[u8]) ->\n                                  ()>(&Self, &ChildInfo, &[u8], F)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Retrieve all child entries keys which start with the given prefix and\n call `f` for each of those keys.\n","sig":null,"attributes":[{"value":"/ Retrieve all child entries keys which start with the given prefix and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47521,"byte_end":47594,"line_start":115,"line_end":115,"column_start":2,"column_end":75}},{"value":"/ call `f` for each of those keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47596,"byte_end":47632,"line_start":116,"line_end":116,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47951,"byte_end":47963,"line_start":127,"line_end":127,"column_start":5,"column_end":17},"name":"storage_root","qualname":"::backend::Backend::storage_root","value":"pub fn storage_root<'a,\n                    impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>: Iterator<Item\n                    =\n                    (&'a [u8],\n                     Option<&'a [u8]>)>>(&Self,\n                                         impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>)\n-> (H::Out, Self::Transaction) where H::Out: Ord","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Calculate the storage root, with given delta over what is already stored in\n the backend, and produce a \"transaction\" that can be used to commit.\n Does not include child storage updates.\n","sig":null,"attributes":[{"value":"/ Calculate the storage root, with given delta over what is already stored in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47748,"byte_end":47827,"line_start":124,"line_end":124,"column_start":2,"column_end":81}},{"value":"/ the backend, and produce a \"transaction\" that can be used to commit.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47829,"byte_end":47901,"line_start":125,"line_end":125,"column_start":2,"column_end":74}},{"value":"/ Does not include child storage updates.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":47903,"byte_end":47946,"line_start":126,"line_end":126,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":48340,"byte_end":48358,"line_start":135,"line_end":135,"column_start":5,"column_end":23},"name":"child_storage_root","qualname":"::backend::Backend::child_storage_root","value":"pub fn child_storage_root<'a,\n                          impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>: Iterator<Item\n                          =\n                          (&'a [u8],\n                           Option<&'a [u8]>)>>(&Self, &ChildInfo,\n                                               impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>)\n-> (H::Out, bool, Self::Transaction) where H::Out: Ord","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Calculate the child storage root, with given delta over what is already stored in\n the backend, and produce a \"transaction\" that can be used to commit. The second argument\n is true if child storage root equals default storage root.\n","sig":null,"attributes":[{"value":"/ Calculate the child storage root, with given delta over what is already stored in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":48092,"byte_end":48177,"line_start":132,"line_end":132,"column_start":2,"column_end":87}},{"value":"/ the backend, and produce a \"transaction\" that can be used to commit. The second argument","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":48179,"byte_end":48271,"line_start":133,"line_end":133,"column_start":2,"column_end":94}},{"value":"/ is true if child storage root equals default storage root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":48273,"byte_end":48335,"line_start":134,"line_end":134,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":48563,"byte_end":48568,"line_start":142,"line_end":142,"column_start":5,"column_end":10},"name":"pairs","qualname":"::backend::Backend::pairs","value":"pub fn pairs(&Self) -> Vec<(StorageKey, StorageValue)>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get all key/value pairs into a Vec.\n","sig":null,"attributes":[{"value":"/ Get all key/value pairs into a Vec.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":48519,"byte_end":48558,"line_start":141,"line_end":141,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":48653,"byte_end":48657,"line_start":145,"line_end":145,"column_start":5,"column_end":9},"name":"keys","qualname":"::backend::Backend::keys","value":"pub fn keys(&Self, &[u8]) -> Vec<StorageKey>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get all keys with given prefix\n","sig":null,"attributes":[{"value":"/ Get all keys with given prefix","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":48614,"byte_end":48648,"line_start":144,"line_end":144,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":48859,"byte_end":48869,"line_start":152,"line_end":152,"column_start":5,"column_end":15},"name":"child_keys","qualname":"::backend::Backend::child_keys","value":"pub fn child_keys(&Self, &ChildInfo, &[u8]) -> Vec<StorageKey>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get all keys of child storage with given prefix\n","sig":null,"attributes":[{"value":"/ Get all keys of child storage with given prefix","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":48803,"byte_end":48854,"line_start":151,"line_end":151,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":49106,"byte_end":49121,"line_start":163,"line_end":163,"column_start":5,"column_end":20},"name":"as_trie_backend","qualname":"::backend::Backend::as_trie_backend","value":"pub fn as_trie_backend(&mut Self)\n-> Option<&TrieBackend<Self::TrieBackendStorage, H>>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Try convert into trie backend.\n","sig":null,"attributes":[{"value":"/ Try convert into trie backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":49067,"byte_end":49101,"line_start":162,"line_end":162,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":49399,"byte_end":49416,"line_start":170,"line_end":170,"column_start":5,"column_end":22},"name":"full_storage_root","qualname":"::backend::Backend::full_storage_root","value":"pub fn full_storage_root<'a,\n                         impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>: Iterator<Item\n                         = (&'a [u8], Option<&'a [u8]>)>,\n                         impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>: Iterator<Item\n                         = (&'a [u8], Option<&'a [u8]>)>,\n                         impl Iterator<Item =\n              (&'a ChildInfo,\n               impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>)>: Iterator<Item\n                         =\n                         (&'a ChildInfo,\n                          impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>)>>(&Self,\n                                                                                impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>,\n                                                                                impl Iterator<Item =\n              (&'a ChildInfo,\n               impl Iterator<Item = (&'a [u8], Option<&'a [u8]>)>)>)\n-> (H::Out, Self::Transaction) where H::Out: Ord + Encode","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Calculate the storage root, with given delta over what is already stored\n in the backend, and produce a \"transaction\" that can be used to commit.\n Does include child storage updates.\n","sig":null,"attributes":[{"value":"/ Calculate the storage root, with given delta over what is already stored","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":49200,"byte_end":49276,"line_start":167,"line_end":167,"column_start":2,"column_end":78}},{"value":"/ in the backend, and produce a \"transaction\" that can be used to commit.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":49278,"byte_end":49353,"line_start":168,"line_end":168,"column_start":2,"column_end":77}},{"value":"/ Does include child storage updates.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":49355,"byte_end":49394,"line_start":169,"line_end":169,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50581,"byte_end":50603,"line_start":207,"line_end":207,"column_start":5,"column_end":27},"name":"register_overlay_stats","qualname":"::backend::Backend::register_overlay_stats","value":"pub fn register_overlay_stats(&mut Self, &crate::stats::StateMachineStats)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Register stats from overlay of state machine.","sig":null,"attributes":[{"value":"/ Register stats from overlay of state machine.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50483,"byte_end":50532,"line_start":204,"line_end":204,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50534,"byte_end":50537,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ By default nothing is registered.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50539,"byte_end":50576,"line_start":206,"line_end":206,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50847,"byte_end":50857,"line_start":213,"line_end":213,"column_start":5,"column_end":15},"name":"usage_info","qualname":"::backend::Backend::usage_info","value":"pub fn usage_info(&Self) -> UsageInfo","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Query backend usage statistics (i/o, memory)","sig":null,"attributes":[{"value":"/ Query backend usage statistics (i/o, memory)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50660,"byte_end":50708,"line_start":209,"line_end":209,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50710,"byte_end":50713,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ Not all implementations are expected to be able to do this. In the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50715,"byte_end":50785,"line_start":211,"line_end":211,"column_start":2,"column_end":72}},{"value":"/ case when they don't, empty statistics is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50787,"byte_end":50842,"line_start":212,"line_end":212,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50914,"byte_end":50918,"line_start":216,"line_end":216,"column_start":5,"column_end":9},"name":"wipe","qualname":"::backend::Backend::wipe","value":"pub fn wipe(&Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Wipe the state database.\n","sig":null,"attributes":[{"value":"/ Wipe the state database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50881,"byte_end":50909,"line_start":215,"line_end":215,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":51024,"byte_end":51030,"line_start":221,"line_end":221,"column_start":5,"column_end":11},"name":"commit","qualname":"::backend::Backend::commit","value":"pub fn commit(&Self, H::Out, Self::Transaction, StorageCollection,\n              ChildStorageCollection) -> Result<(), Self::Error>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Commit given transaction to storage.\n","sig":null,"attributes":[{"value":"/ Commit given transaction to storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":50979,"byte_end":51019,"line_start":220,"line_end":220,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":51230,"byte_end":51246,"line_start":232,"line_end":232,"column_start":5,"column_end":21},"name":"read_write_count","qualname":"::backend::Backend::read_write_count","value":"pub fn read_write_count(&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get the read/write count of the db\n","sig":null,"attributes":[{"value":"/ Get the read/write count of the db","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":51187,"byte_end":51225,"line_start":231,"line_end":231,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":51347,"byte_end":51369,"line_start":237,"line_end":237,"column_start":5,"column_end":27},"name":"reset_read_write_count","qualname":"::backend::Backend::reset_read_write_count","value":"pub fn reset_read_write_count(&Self)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get the read/write count of the db\n","sig":null,"attributes":[{"value":"/ Get the read/write count of the db","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":51304,"byte_end":51342,"line_start":236,"line_end":236,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":51458,"byte_end":51471,"line_start":242,"line_end":242,"column_start":5,"column_end":18},"name":"get_whitelist","qualname":"::backend::Backend::get_whitelist","value":"pub fn get_whitelist(&Self) -> Vec<TrackedStorageKey>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Get the whitelist for tracking db reads/writes\n","sig":null,"attributes":[{"value":"/ Get the whitelist for tracking db reads/writes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":51403,"byte_end":51453,"line_start":241,"line_end":241,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":51591,"byte_end":51604,"line_start":247,"line_end":247,"column_start":5,"column_end":18},"name":"set_whitelist","qualname":"::backend::Backend::set_whitelist","value":"pub fn set_whitelist(&Self, Vec<TrackedStorageKey>)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Update the whitelist for tracking db reads/writes\n","sig":null,"attributes":[{"value":"/ Update the whitelist for tracking db reads/writes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":51533,"byte_end":51586,"line_start":246,"line_end":246,"column_start":2,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":106},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":53681,"byte_end":53692,"line_start":331,"line_end":331,"column_start":11,"column_end":22},"name":"Consolidate","qualname":"::backend::Consolidate","value":"Consolidate","parent":null,"children":[{"krate":0,"index":107}],"decl_id":null,"docs":" Trait that allows consolidate two transactions together.\n","sig":null,"attributes":[{"value":"/ Trait that allows consolidate two transactions together.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":53610,"byte_end":53670,"line_start":330,"line_end":330,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":53743,"byte_end":53754,"line_start":333,"line_end":333,"column_start":5,"column_end":16},"name":"consolidate","qualname":"::backend::Consolidate::consolidate","value":"pub fn consolidate(&mut Self, Self)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Consolidate two transactions into one.\n","sig":null,"attributes":[{"value":"/ Consolidate two transactions into one.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":53696,"byte_end":53738,"line_start":332,"line_end":332,"column_start":2,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":116},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":54893,"byte_end":54911,"line_start":382,"line_end":382,"column_start":12,"column_end":30},"name":"BackendRuntimeCode","qualname":"::backend::BackendRuntimeCode","value":"BackendRuntimeCode {  }","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121}],"decl_id":null,"docs":" Wrapper to create a [`RuntimeCode`] from a type that implements [`Backend`].\n","sig":null,"attributes":[{"value":"/ Wrapper to create a [`RuntimeCode`] from a type that implements [`Backend`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":54777,"byte_end":54857,"line_start":380,"line_end":380,"column_start":1,"column_end":81}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":54858,"byte_end":54881,"line_start":381,"line_end":381,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":55419,"byte_end":55422,"line_start":399,"line_end":399,"column_start":9,"column_end":12},"name":"new","qualname":"<BackendRuntimeCode>::new","value":"pub fn new(&'a B) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance.\n","sig":null,"attributes":[{"value":"/ Create a new instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":55384,"byte_end":55410,"line_start":398,"line_end":398,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":55590,"byte_end":55602,"line_start":407,"line_end":407,"column_start":9,"column_end":21},"name":"runtime_code","qualname":"<BackendRuntimeCode>::runtime_code","value":"pub fn runtime_code(&Self) -> Result<RuntimeCode, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Return the [`RuntimeCode`] build from the wrapped `backend`.\n","sig":null,"attributes":[{"value":"/ Return the [`RuntimeCode`] build from the wrapped `backend`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":55517,"byte_end":55581,"line_start":406,"line_end":406,"column_start":2,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":154},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":57064,"byte_end":57074,"line_start":30,"line_end":30,"column_start":8,"column_end":18},"name":"new_in_mem","qualname":"::in_memory_backend::new_in_mem","value":"pub fn new_in_mem<H: Hasher>() -> TrieBackend<MemoryDB<H>, H> where\nH::Out: Codec + Ord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty instance of in-memory backend.\n","sig":null,"attributes":[{"value":"/ Create a new empty instance of in-memory backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":57003,"byte_end":57056,"line_start":29,"line_end":29,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":57361,"byte_end":57367,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"name":"update","qualname":"<TrieBackend<MemoryDB<H>, H>>::update","value":"pub fn update<T: IntoIterator<Item =\n              (Option<ChildInfo>, StorageCollection)>>(&Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Copy the state, with applied updates\n","sig":null,"attributes":[{"value":"/ Copy the state, with applied updates","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":57312,"byte_end":57352,"line_start":42,"line_end":42,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":57589,"byte_end":57595,"line_start":55,"line_end":55,"column_start":9,"column_end":15},"name":"insert","qualname":"<TrieBackend<MemoryDB<H>, H>>::insert","value":"pub fn insert<T: IntoIterator<Item =\n              (Option<ChildInfo>, StorageCollection)>>(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Insert values into backend trie.\n","sig":null,"attributes":[{"value":"/ Insert values into backend trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":57544,"byte_end":57580,"line_start":54,"line_end":54,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":58139,"byte_end":58153,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"update_backend","qualname":"<TrieBackend<MemoryDB<H>, H>>::update_backend","value":"pub fn update_backend(&Self, H::Out, MemoryDB<H>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Merge trie nodes into this backend.\n","sig":null,"attributes":[{"value":"/ Merge trie nodes into this backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":58091,"byte_end":58130,"line_start":73,"line_end":73,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":58410,"byte_end":58427,"line_start":81,"line_end":81,"column_start":9,"column_end":26},"name":"apply_transaction","qualname":"<TrieBackend<MemoryDB<H>, H>>::apply_transaction","value":"pub fn apply_transaction(&mut Self, H::Out, MemoryDB<H>)","parent":null,"children":[],"decl_id":null,"docs":" Apply the given transaction to this backend and set the root to the given value.\n","sig":null,"attributes":[{"value":"/ Apply the given transaction to this backend and set the root to the given value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":58317,"byte_end":58401,"line_start":80,"line_end":80,"column_start":2,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":58624,"byte_end":58626,"line_start":87,"line_end":87,"column_start":9,"column_end":11},"name":"eq","qualname":"<TrieBackend<MemoryDB<H>, H>>::eq","value":"pub fn eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compare with another in-memory backend.\n","sig":null,"attributes":[{"value":"/ Compare with another in-memory backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":58572,"byte_end":58615,"line_start":86,"line_end":86,"column_start":2,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":279},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":107199,"byte_end":107209,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"BuildCache","qualname":"::changes_trie::build_cache::BuildCache","value":"BuildCache {  }","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283}],"decl_id":null,"docs":" Changes trie build cache.","sig":null,"attributes":[{"value":"/ Changes trie build cache.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":106524,"byte_end":106553,"line_start":25,"line_end":25,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":106554,"byte_end":106557,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Helps to avoid read of changes tries from the database when digest trie","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":106558,"byte_end":106633,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ is built. It holds changed keys for every block (indexed by changes trie","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":106634,"byte_end":106710,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/ root) that could be referenced by future digest items. For digest entries","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":106711,"byte_end":106788,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ it also holds keys covered by this digest. Entries for top level digests","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":106789,"byte_end":106865,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ are never created, because they'll never be used to build other digests.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":106866,"byte_end":106942,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":106943,"byte_end":106946,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Entries are pruned from the cache once digest block that is using this entry","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":106947,"byte_end":107027,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ is inserted (because digest block will includes all keys from this entry).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":107028,"byte_end":107106,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ When there's a fork, entries are pruned when first changes trie is inserted.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":107107,"byte_end":107187,"line_start":35,"line_end":35,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2057},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":107944,"byte_end":107958,"line_start":50,"line_end":50,"column_start":2,"column_end":16},"name":"CacheBuildData","qualname":"::changes_trie::build_cache::CacheAction::CacheBuildData","value":"CacheAction::CacheBuildData(CachedBuildData<H, N>)","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":" Cache data that has been collected when CT has been built.\n","sig":null,"attributes":[{"value":"/ Cache data that has been collected when CT has been built.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":107880,"byte_end":107942,"line_start":49,"line_end":49,"column_start":2,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2060},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":108028,"byte_end":108033,"line_start":52,"line_end":52,"column_start":2,"column_end":7},"name":"Clear","qualname":"::changes_trie::build_cache::CacheAction::Clear","value":"CacheAction::Clear","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":" Clear cache from all existing entries.\n","sig":null,"attributes":[{"value":"/ Clear cache from all existing entries.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":107984,"byte_end":108026,"line_start":51,"line_end":51,"column_start":2,"column_end":44}}]},{"kind":"Enum","id":{"krate":0,"index":2054},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":107859,"byte_end":107870,"line_start":48,"line_end":48,"column_start":10,"column_end":21},"name":"CacheAction","qualname":"::changes_trie::build_cache::CacheAction","value":"pub enum CacheAction<H, N> {\n\n    /// Cache data that has been collected when CT has been built.\n    CacheBuildData(CachedBuildData<H, N>),\n\n    /// Clear cache from all existing entries.\n    Clear,\n}","parent":null,"children":[{"krate":0,"index":2057},{"krate":0,"index":2060}],"decl_id":null,"docs":" The action to perform when block-with-changes-trie is imported.\n","sig":null,"attributes":[{"value":"/ The action to perform when block-with-changes-trie is imported.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":107754,"byte_end":107821,"line_start":46,"line_end":46,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2074},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":108141,"byte_end":108156,"line_start":57,"line_end":57,"column_start":12,"column_end":27},"name":"CachedBuildData","qualname":"::changes_trie::build_cache::CachedBuildData","value":"CachedBuildData {  }","parent":null,"children":[{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2080}],"decl_id":null,"docs":" The data that has been cached during changes trie building.\n","sig":null,"attributes":[{"value":"/ The data that has been cached during changes trie building.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":108038,"byte_end":108101,"line_start":55,"line_end":55,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":109030,"byte_end":109033,"line_start":86,"line_end":86,"column_start":9,"column_end":12},"name":"new","qualname":"<BuildCache<H, N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new changes trie build cache.\n","sig":null,"attributes":[{"value":"/ Create new changes trie build cache.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":108981,"byte_end":109021,"line_start":85,"line_end":85,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":109209,"byte_end":109212,"line_start":94,"line_end":94,"column_start":9,"column_end":12},"name":"get","qualname":"<BuildCache<H, N>>::get","value":"pub fn get(&Self, &H)\n-> Option<&HashMap<Option<PrefixedStorageKey>, HashSet<StorageKey>>>","parent":null,"children":[],"decl_id":null,"docs":" Get cached changed keys for changes trie with given root.\n","sig":null,"attributes":[{"value":"/ Get cached changed keys for changes trie with given root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":109139,"byte_end":109200,"line_start":93,"line_end":93,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":109476,"byte_end":109493,"line_start":100,"line_end":100,"column_start":9,"column_end":26},"name":"with_changed_keys","qualname":"<BuildCache<H, N>>::with_changed_keys","value":"pub fn with_changed_keys(&Self, &H,\n                         &mut FnMut(&HashMap<Option<PrefixedStorageKey>,\n                                             HashSet<StorageKey>>) -> ())\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Execute given functor with cached entry for given block.\n Returns true if the functor has been called and false otherwise.\n","sig":null,"attributes":[{"value":"/ Execute given functor with cached entry for given block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":109337,"byte_end":109397,"line_start":98,"line_end":98,"column_start":2,"column_end":62}},{"value":"/ Returns true if the functor has been called and false otherwise.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":109399,"byte_end":109467,"line_start":99,"line_end":99,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":109786,"byte_end":109793,"line_start":115,"line_end":115,"column_start":9,"column_end":16},"name":"perform","qualname":"<BuildCache<H, N>>::perform","value":"pub fn perform(&mut Self, CacheAction<H, N>)","parent":null,"children":[],"decl_id":null,"docs":" Insert data into cache.\n","sig":null,"attributes":[{"value":"/ Insert data into cache.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":109750,"byte_end":109777,"line_start":114,"line_end":114,"column_start":2,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":361},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":129576,"byte_end":129587,"line_start":39,"line_end":39,"column_start":8,"column_end":19},"name":"key_changes","qualname":"::changes_trie::changes_iterator::key_changes","value":"pub fn key_changes<'a, H: Hasher,\n                   Number: BlockNumber>(ConfigurationRange,\n                                        &'a Storage<H, Number>, Number,\n                                        &'a AnchorBlockId<H::Out, Number>,\n                                        Number,\n                                        Option<&'a PrefixedStorageKey>,\n                                        &'a [u8])\n-> Result<DrilldownIterator, String>","parent":null,"children":[],"decl_id":null,"docs":" Return changes of given key at given blocks range.\n `max` is the number of best known block.\n Changes are returned in descending order (i.e. last block comes first).\n","sig":null,"attributes":[{"value":"/ Return changes of given key at given blocks range.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":129393,"byte_end":129447,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ `max` is the number of best known block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":129448,"byte_end":129492,"line_start":37,"line_end":37,"column_start":1,"column_end":45}},{"value":"/ Changes are returned in descending order (i.e. last block comes first).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":129493,"byte_end":129568,"line_start":38,"line_end":38,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":365},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":130537,"byte_end":130554,"line_start":78,"line_end":78,"column_start":8,"column_end":25},"name":"key_changes_proof","qualname":"::changes_trie::changes_iterator::key_changes_proof","value":"pub fn key_changes_proof<'a, H: Hasher,\n                         Number: BlockNumber>(ConfigurationRange,\n                                              &Storage<H, Number>, Number,\n                                              &AnchorBlockId<H::Out, Number>,\n                                              Number,\n                                              Option<&PrefixedStorageKey>,\n                                              &[u8])\n-> Result<Vec<Vec<u8>>, String> where H::Out: Codec","parent":null,"children":[],"decl_id":null,"docs":" Returns proof of changes of given key at given blocks range.\n `max` is the number of best known block.\n","sig":null,"attributes":[{"value":"/ Returns proof of changes of given key at given blocks range.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":130420,"byte_end":130484,"line_start":76,"line_end":76,"column_start":1,"column_end":65}},{"value":"/ `max` is the number of best known block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":130485,"byte_end":130529,"line_start":77,"line_end":77,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":369},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":131747,"byte_end":131770,"line_start":125,"line_end":125,"column_start":8,"column_end":31},"name":"key_changes_proof_check","qualname":"::changes_trie::changes_iterator::key_changes_proof_check","value":"pub fn key_changes_proof_check<'a, H: Hasher,\n                               Number: BlockNumber>(ConfigurationRange,\n                                                    &RootsStorage<H, Number>,\n                                                    Vec<Vec<u8>>, Number,\n                                                    &AnchorBlockId<H::Out,\n                                                                   Number>,\n                                                    Number,\n                                                    Option<&PrefixedStorageKey>,\n                                                    &[u8])\n-> Result<Vec<(Number, u32)>, String> where H::Out: Encode","parent":null,"children":[],"decl_id":null,"docs":" Check key changes proof and return changes of the key at given blocks range.\n `max` is the number of best known block.\n Changes are returned in descending order (i.e. last block comes first).\n","sig":null,"attributes":[{"value":"/ Check key changes proof and return changes of the key at given blocks range.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":131538,"byte_end":131618,"line_start":122,"line_end":122,"column_start":1,"column_end":81}},{"value":"/ `max` is the number of best known block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":131619,"byte_end":131663,"line_start":123,"line_end":123,"column_start":1,"column_end":45}},{"value":"/ Changes are returned in descending order (i.e. last block comes first).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":131664,"byte_end":131739,"line_start":124,"line_end":124,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":373},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":132355,"byte_end":132386,"line_start":148,"line_end":148,"column_start":8,"column_end":39},"name":"key_changes_proof_check_with_db","qualname":"::changes_trie::changes_iterator::key_changes_proof_check_with_db","value":"pub fn key_changes_proof_check_with_db<'a, H: Hasher,\n                                       Number: BlockNumber>(ConfigurationRange,\n                                                            &RootsStorage<H,\n                                                                          Number>,\n                                                            &InMemoryStorage<H,\n                                                                             Number>,\n                                                            Number,\n                                                            &AnchorBlockId<H::Out,\n                                                                           Number>,\n                                                            Number,\n                                                            Option<&PrefixedStorageKey>,\n                                                            &[u8])\n-> Result<Vec<(Number, u32)>, String> where H::Out: Encode","parent":null,"children":[],"decl_id":null,"docs":" Similar to the `key_changes_proof_check` function, but works with prepared proof storage.\n","sig":null,"attributes":[{"value":"/ Similar to the `key_changes_proof_check` function, but works with prepared proof storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":132254,"byte_end":132347,"line_start":147,"line_end":147,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":411},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":137618,"byte_end":137635,"line_start":312,"line_end":312,"column_start":12,"column_end":29},"name":"DrilldownIterator","qualname":"::changes_trie::changes_iterator::DrilldownIterator","value":"DrilldownIterator {  }","parent":null,"children":[{"krate":0,"index":415}],"decl_id":null,"docs":" Exploring drilldown operator.\n","sig":null,"attributes":[{"value":"/ Exploring drilldown operator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":137573,"byte_end":137606,"line_start":311,"line_end":311,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/prune.rs","byte_start":155970,"byte_end":155975,"line_start":35,"line_end":35,"column_start":8,"column_end":13},"name":"prune","qualname":"::changes_trie::prune::prune","value":"pub fn prune<H: Hasher, Number: BlockNumber, F: FnMut(H::Out) ->\n             ()>(&Storage<H, Number>, Number, Number,\n                 &AnchorBlockId<H::Out, Number>, F) where H::Out: Codec","parent":null,"children":[],"decl_id":null,"docs":" Prune obsolete changes tries. Pruning happens at the same block, where highest\n level digest is created. Pruning guarantees to save changes tries for last\n `min_blocks_to_keep` blocks. We only prune changes tries at `max_digest_interval`\n ranges.\n","sig":null,"attributes":[{"value":"/ Prune obsolete changes tries. Pruning happens at the same block, where highest","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/prune.rs","byte_start":155703,"byte_end":155785,"line_start":31,"line_end":31,"column_start":1,"column_end":83}},{"value":"/ level digest is created. Pruning guarantees to save changes tries for last","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/prune.rs","byte_start":155786,"byte_end":155864,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ `min_blocks_to_keep` blocks. We only prune changes tries at `max_digest_interval`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/prune.rs","byte_start":155865,"byte_end":155950,"line_start":33,"line_end":33,"column_start":1,"column_end":86}},{"value":"/ ranges.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/prune.rs","byte_start":155951,"byte_end":155962,"line_start":34,"line_end":34,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":546},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":162165,"byte_end":162180,"line_start":38,"line_end":38,"column_start":12,"column_end":27},"name":"InMemoryStorage","qualname":"::changes_trie::storage::InMemoryStorage","value":"InMemoryStorage {  }","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550}],"decl_id":null,"docs":" In-memory implementation of changes trie storage.\n","sig":null,"attributes":[{"value":"/ In-memory implementation of changes trie storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":162100,"byte_end":162153,"line_start":37,"line_end":37,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":162779,"byte_end":162786,"line_start":56,"line_end":56,"column_start":9,"column_end":16},"name":"with_db","qualname":"<InMemoryStorage<H, Number>>::with_db","value":"pub fn with_db(MemoryDB<H>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates storage from given in-memory database.\n","sig":null,"attributes":[{"value":"/ Creates storage from given in-memory database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":162720,"byte_end":162770,"line_start":55,"line_end":55,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":162998,"byte_end":163001,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"new","qualname":"<InMemoryStorage<H, Number>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates storage with empty database.\n","sig":null,"attributes":[{"value":"/ Creates storage with empty database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":162949,"byte_end":162989,"line_start":66,"line_end":66,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":163101,"byte_end":163111,"line_start":72,"line_end":72,"column_start":9,"column_end":19},"name":"with_proof","qualname":"<InMemoryStorage<H, Number>>::with_proof","value":"pub fn with_proof(Vec<Vec<u8>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates storage with given proof.\n","sig":null,"attributes":[{"value":"/ Creates storage with given proof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":163055,"byte_end":163092,"line_start":71,"line_end":71,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":163354,"byte_end":163363,"line_start":83,"line_end":83,"column_start":9,"column_end":18},"name":"cache_mut","qualname":"<InMemoryStorage<H, Number>>::cache_mut","value":"pub fn cache_mut(&mut Self) -> &mut BuildCache<H::Out, Number>","parent":null,"children":[],"decl_id":null,"docs":" Get mutable cache reference.\n","sig":null,"attributes":[{"value":"/ Get mutable cache reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":163313,"byte_end":163345,"line_start":82,"line_end":82,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":163485,"byte_end":163496,"line_start":88,"line_end":88,"column_start":9,"column_end":20},"name":"with_blocks","qualname":"<InMemoryStorage<H, Number>>::with_blocks","value":"pub fn with_blocks(Vec<(Number, H::Out)>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the storage with given blocks.\n","sig":null,"attributes":[{"value":"/ Create the storage with given blocks.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":163435,"byte_end":163476,"line_start":87,"line_end":87,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":165347,"byte_end":165353,"line_start":159,"line_end":159,"column_start":9,"column_end":15},"name":"insert","qualname":"<InMemoryStorage<H, Number>>::insert","value":"pub fn insert(&Self, Number, H::Out, MemoryDB<H>)","parent":null,"children":[],"decl_id":null,"docs":" Insert changes trie for given block.\n","sig":null,"attributes":[{"value":"/ Insert changes trie for given block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":165298,"byte_end":165338,"line_start":158,"line_end":158,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":664},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65539,"byte_end":65550,"line_start":89,"line_end":89,"column_start":11,"column_end":22},"name":"BlockNumber","qualname":"::changes_trie::BlockNumber","value":"BlockNumber: Send + Sync + 'static + std::fmt::Display + Clone + From<u32> + TryInto<u32> +\nOne + Zero + PartialEq + Ord + std::hash::Hash + std::ops::Add<Self, Output =\nSelf> + ::std::ops::Sub<Self, Output = Self> + std::ops::Mul<Self, Output =\nSelf> + ::std::ops::Div<Self, Output = Self> + std::ops::Rem<Self, Output =\nSelf> + std::ops::AddAssign<Self> + num_traits::CheckedMul +\nnum_traits::CheckedSub + Decode + Encode","parent":null,"children":[],"decl_id":null,"docs":" Requirements for block number that can be used with changes tries.\n","sig":null,"attributes":[{"value":"/ Requirements for block number that can be used with changes tries.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65458,"byte_end":65528,"line_start":88,"line_end":88,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":2279},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66523,"byte_end":66536,"line_start":121,"line_end":121,"column_start":12,"column_end":25},"name":"AnchorBlockId","qualname":"::changes_trie::AnchorBlockId","value":"AnchorBlockId { hash, number }","parent":null,"children":[{"krate":0,"index":2282},{"krate":0,"index":2283}],"decl_id":null,"docs":" Block identifier that could be used to determine fork of this block.\n","sig":null,"attributes":[{"value":"/ Block identifier that could be used to determine fork of this block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66422,"byte_end":66494,"line_start":119,"line_end":119,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2282},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66613,"byte_end":66617,"line_start":123,"line_end":123,"column_start":6,"column_end":10},"name":"hash","qualname":"::changes_trie::AnchorBlockId::hash","value":"Hash","parent":{"krate":0,"index":2279},"children":[],"decl_id":null,"docs":" Hash of this block.\n","sig":null,"attributes":[{"value":"/ Hash of this block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66584,"byte_end":66607,"line_start":122,"line_end":122,"column_start":2,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2283},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66657,"byte_end":66663,"line_start":125,"line_end":125,"column_start":6,"column_end":12},"name":"number","qualname":"::changes_trie::AnchorBlockId::number","value":"Number","parent":{"krate":0,"index":2279},"children":[],"decl_id":null,"docs":" Number of this block.\n","sig":null,"attributes":[{"value":"/ Number of this block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66626,"byte_end":66651,"line_start":124,"line_end":124,"column_start":2,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":667},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66726,"byte_end":66731,"line_start":129,"line_end":129,"column_start":12,"column_end":17},"name":"State","qualname":"::changes_trie::State","value":"State { config, zero, storage }","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673}],"decl_id":null,"docs":" Changes tries state at some block.\n","sig":null,"attributes":[{"value":"/ Changes tries state at some block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66676,"byte_end":66714,"line_start":128,"line_end":128,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":671},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66804,"byte_end":66810,"line_start":131,"line_end":131,"column_start":6,"column_end":12},"name":"config","qualname":"::changes_trie::State::config","value":"sp_core::ChangesTrieConfiguration","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" Configuration that is active at given block.\n","sig":null,"attributes":[{"value":"/ Configuration that is active at given block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66750,"byte_end":66798,"line_start":130,"line_end":130,"column_start":2,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":672},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67066,"byte_end":67070,"line_start":135,"line_end":135,"column_start":6,"column_end":10},"name":"zero","qualname":"::changes_trie::State::zero","value":"Number","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" Configuration activation block number. Zero if it is the first configuration on the chain,\n or number of the block that have emit NewConfiguration signal (thus activating configuration\n starting from the **next** block).\n","sig":null,"attributes":[{"value":"/ Configuration activation block number. Zero if it is the first configuration on the chain,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66828,"byte_end":66922,"line_start":132,"line_end":132,"column_start":2,"column_end":96}},{"value":"/ or number of the block that have emit NewConfiguration signal (thus activating configuration","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":66924,"byte_end":67020,"line_start":133,"line_end":133,"column_start":2,"column_end":98}},{"value":"/ starting from the **next** block).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67022,"byte_end":67060,"line_start":134,"line_end":134,"column_start":2,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":673},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67134,"byte_end":67141,"line_start":137,"line_end":137,"column_start":6,"column_end":13},"name":"storage","qualname":"::changes_trie::State::storage","value":"&'a (dyn changes_trie::Storage<H, Number> + 'a)","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" Underlying changes tries storage reference.\n","sig":null,"attributes":[{"value":"/ Underlying changes tries storage reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67081,"byte_end":67128,"line_start":136,"line_end":136,"column_start":2,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":674},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67256,"byte_end":67268,"line_start":141,"line_end":141,"column_start":11,"column_end":23},"name":"RootsStorage","qualname":"::changes_trie::RootsStorage","value":"RootsStorage<H: Hasher, Number: BlockNumber>: Send + Sync","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678}],"decl_id":null,"docs":" Changes trie storage. Provides access to trie roots and trie nodes.\n","sig":null,"attributes":[{"value":"/ Changes trie storage. Provides access to trie roots and trie nodes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67174,"byte_end":67245,"line_start":140,"line_end":140,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67364,"byte_end":67376,"line_start":143,"line_end":143,"column_start":5,"column_end":17},"name":"build_anchor","qualname":"::changes_trie::RootsStorage::build_anchor","value":"pub fn build_anchor(&Self, H::Out)\n-> Result<AnchorBlockId<H::Out, Number>, String>","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":" Resolve hash of the block into anchor.\n","sig":null,"attributes":[{"value":"/ Resolve hash of the block into anchor.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67317,"byte_end":67359,"line_start":142,"line_end":142,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67616,"byte_end":67620,"line_start":146,"line_end":146,"column_start":5,"column_end":9},"name":"root","qualname":"::changes_trie::RootsStorage::root","value":"pub fn root(&Self, &AnchorBlockId<H::Out, Number>, Number)\n-> Result<Option<H::Out>, String>","parent":{"krate":0,"index":674},"children":[],"decl_id":null,"docs":" Get changes trie root for the block with given number which is an ancestor (or the block\n itself) of the anchor_block (i.e. anchor_block.number >= block).\n","sig":null,"attributes":[{"value":"/ Get changes trie root for the block with given number which is an ancestor (or the block","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67449,"byte_end":67541,"line_start":144,"line_end":144,"column_start":2,"column_end":94}},{"value":"/ itself) of the anchor_block (i.e. anchor_block.number >= block).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67543,"byte_end":67611,"line_start":145,"line_end":145,"column_start":2,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":679},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67803,"byte_end":67810,"line_start":150,"line_end":150,"column_start":11,"column_end":18},"name":"Storage","qualname":"::changes_trie::Storage","value":"Storage<H: Hasher, Number: BlockNumber>: RootsStorage<H, Number>","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684}],"decl_id":null,"docs":" Changes trie storage. Provides access to trie roots and trie nodes.\n","sig":null,"attributes":[{"value":"/ Changes trie storage. Provides access to trie roots and trie nodes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67721,"byte_end":67792,"line_start":149,"line_end":149,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67932,"byte_end":67948,"line_start":152,"line_end":152,"column_start":5,"column_end":21},"name":"as_roots_storage","qualname":"::changes_trie::Storage::as_roots_storage","value":"pub fn as_roots_storage(&Self) -> &RootsStorage<H, Number>","parent":{"krate":0,"index":679},"children":[],"decl_id":null,"docs":" Casts from self reference to RootsStorage reference.\n","sig":null,"attributes":[{"value":"/ Casts from self reference to RootsStorage reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67871,"byte_end":67927,"line_start":151,"line_end":151,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":68150,"byte_end":68174,"line_start":155,"line_end":155,"column_start":5,"column_end":29},"name":"with_cached_changed_keys","qualname":"::changes_trie::Storage::with_cached_changed_keys","value":"pub fn with_cached_changed_keys(&Self, &H::Out,\n                                &mut FnMut(&HashMap<Option<PrefixedStorageKey>,\n                                                    HashSet<StorageKey>>) ->\n                                     ()) -> bool","parent":{"krate":0,"index":679},"children":[],"decl_id":null,"docs":" Execute given functor with cached entry for given trie root.\n Returns true if the functor has been called (cache entry exists) and false otherwise.\n","sig":null,"attributes":[{"value":"/ Execute given functor with cached entry for given trie root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67990,"byte_end":68054,"line_start":153,"line_end":153,"column_start":2,"column_end":66}},{"value":"/ Returns true if the functor has been called (cache entry exists) and false otherwise.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":68056,"byte_end":68145,"line_start":154,"line_end":154,"column_start":2,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":68326,"byte_end":68329,"line_start":161,"line_end":161,"column_start":5,"column_end":8},"name":"get","qualname":"::changes_trie::Storage::get","value":"pub fn get(&Self, &H::Out, Prefix) -> Result<Option<DBValue>, String>","parent":{"krate":0,"index":679},"children":[],"decl_id":null,"docs":" Get a trie node.\n","sig":null,"attributes":[{"value":"/ Get a trie node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":68301,"byte_end":68321,"line_start":160,"line_end":160,"column_start":2,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":2288},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69008,"byte_end":69026,"line_start":180,"line_end":180,"column_start":12,"column_end":30},"name":"ConfigurationRange","qualname":"::changes_trie::ConfigurationRange","value":"ConfigurationRange { config, zero, end }","parent":null,"children":[{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2293}],"decl_id":null,"docs":" Blocks range where configuration has been constant.\n","sig":null,"attributes":[{"value":"/ Blocks range where configuration has been constant.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":68924,"byte_end":68979,"line_start":178,"line_end":178,"column_start":1,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":2291},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69068,"byte_end":69074,"line_start":182,"line_end":182,"column_start":6,"column_end":12},"name":"config","qualname":"::changes_trie::ConfigurationRange::config","value":"&'a sp_core::ChangesTrieConfiguration","parent":{"krate":0,"index":2288},"children":[],"decl_id":null,"docs":" Active configuration.\n","sig":null,"attributes":[{"value":"/ Active configuration.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69037,"byte_end":69062,"line_start":181,"line_end":181,"column_start":2,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2292},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69197,"byte_end":69201,"line_start":184,"line_end":184,"column_start":6,"column_end":10},"name":"zero","qualname":"::changes_trie::ConfigurationRange::zero","value":"N","parent":{"krate":0,"index":2288},"children":[],"decl_id":null,"docs":" Zero block of this configuration. The configuration is active starting from the next block.\n","sig":null,"attributes":[{"value":"/ Zero block of this configuration. The configuration is active starting from the next block.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69096,"byte_end":69191,"line_start":183,"line_end":183,"column_start":2,"column_end":97}}]},{"kind":"Field","id":{"krate":0,"index":2293},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69307,"byte_end":69310,"line_start":186,"line_end":186,"column_start":6,"column_end":9},"name":"end","qualname":"::changes_trie::ConfigurationRange::end","value":"std::option::Option<N>","parent":{"krate":0,"index":2288},"children":[],"decl_id":null,"docs":" End block of this configuration. It is the last block where configuration has been active.\n","sig":null,"attributes":[{"value":"/ End block of this configuration. It is the last block where configuration has been active.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69207,"byte_end":69301,"line_start":185,"line_end":185,"column_start":2,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69426,"byte_end":69429,"line_start":191,"line_end":191,"column_start":9,"column_end":12},"name":"new","qualname":"<State>::new","value":"pub fn new(Configuration, Number, &'a Storage<H, Number>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create state with given config and storage.\n","sig":null,"attributes":[{"value":"/ Create state with given config and storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69370,"byte_end":69417,"line_start":190,"line_end":190,"column_start":2,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69826,"byte_end":69840,"line_start":215,"line_end":215,"column_start":8,"column_end":22},"name":"disabled_state","qualname":"::changes_trie::disabled_state","value":"pub fn disabled_state<'a, H, Number>() -> Option<State>","parent":null,"children":[],"decl_id":null,"docs":" Create state where changes tries are disabled.\n","sig":null,"attributes":[{"value":"/ Create state where changes tries are disabled.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69768,"byte_end":69818,"line_start":214,"line_end":214,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":726},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177263,"byte_end":177268,"line_start":25,"line_end":25,"column_start":11,"column_end":16},"name":"Error","qualname":"::error::Error","value":"Error: 'static + fmt::Debug + fmt::Display + Send + Sync","parent":null,"children":[],"decl_id":null,"docs":" State Machine Error bound.","sig":null,"attributes":[{"value":"/ State Machine Error bound.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177146,"byte_end":177176,"line_start":22,"line_end":22,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177177,"byte_end":177180,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This should reflect Wasm error type bound for future compatibility.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177181,"byte_end":177252,"line_start":24,"line_end":24,"column_start":1,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2299},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177881,"byte_end":177888,"line_start":39,"line_end":39,"column_start":2,"column_end":9},"name":"Backend","qualname":"::error::ExecutionError::Backend","value":"ExecutionError::Backend(crate::DefaultError)","parent":{"krate":0,"index":2298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Backend error {0:?}\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177849,"byte_end":177877,"line_start":38,"line_end":38,"column_start":30,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2302},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177993,"byte_end":178014,"line_start":42,"line_end":42,"column_start":2,"column_end":23},"name":"CodeEntryDoesNotExist","qualname":"::error::ExecutionError::CodeEntryDoesNotExist","value":"ExecutionError::CodeEntryDoesNotExist","parent":{"krate":0,"index":2298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"`:code` entry does not exist in storage\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177941,"byte_end":177989,"line_start":41,"line_end":41,"column_start":30,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2304},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":178083,"byte_end":178104,"line_start":45,"line_end":45,"column_start":2,"column_end":23},"name":"UnableToGenerateProof","qualname":"::error::ExecutionError::UnableToGenerateProof","value":"ExecutionError::UnableToGenerateProof","parent":{"krate":0,"index":2298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Unable to generate proof\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":178046,"byte_end":178079,"line_start":44,"line_end":44,"column_start":30,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2306},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":178172,"byte_end":178184,"line_start":48,"line_end":48,"column_start":2,"column_end":14},"name":"InvalidProof","qualname":"::error::ExecutionError::InvalidProof","value":"ExecutionError::InvalidProof","parent":{"krate":0,"index":2298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Invalid execution proof\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":178136,"byte_end":178168,"line_start":47,"line_end":47,"column_start":30,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":2298},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177803,"byte_end":177817,"line_start":37,"line_end":37,"column_start":10,"column_end":24},"name":"ExecutionError","qualname":"::error::ExecutionError","value":"pub enum ExecutionError {\n\n    #[error(\"Backend error {0:?}\")]\n    Backend(crate::DefaultError),\n\n    #[error(\"`:code` entry does not exist in storage\")]\n    CodeEntryDoesNotExist,\n\n    #[error(\"Unable to generate proof\")]\n    UnableToGenerateProof,\n\n    #[error(\"Invalid execution proof\")]\n    InvalidProof,\n}","parent":null,"children":[{"krate":0,"index":2299},{"krate":0,"index":2302},{"krate":0,"index":2304},{"krate":0,"index":2306}],"decl_id":null,"docs":" Externalities Error.","sig":null,"attributes":[{"value":"/ Externalities Error.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177399,"byte_end":177423,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177424,"byte_end":177427,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Externalities are not really allowed to have errors, since it's assumed that dependent code","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177428,"byte_end":177523,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"/ would not be executed unless externalities were available. This is included for completeness,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177524,"byte_end":177621,"line_start":32,"line_end":32,"column_start":1,"column_end":98}},{"value":"/ and as a transition away from the pre-existing framework.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177622,"byte_end":177683,"line_start":33,"line_end":33,"column_start":1,"column_end":62}},{"value":"allow(missing_docs)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177716,"byte_end":177738,"line_start":35,"line_end":35,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":781},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":181140,"byte_end":181143,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"Ext","qualname":"::ext::Ext","value":"Ext { id }","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792}],"decl_id":null,"docs":" Wraps a read-only backend, call executor, and current overlayed changes.\n","sig":null,"attributes":[{"value":"/ Wraps a read-only backend, call executor, and current overlayed changes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":181052,"byte_end":181128,"line_start":92,"line_end":92,"column_start":1,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":790},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":181665,"byte_end":181667,"line_start":109,"line_end":109,"column_start":6,"column_end":8},"name":"id","qualname":"::ext::Ext::id","value":"u16","parent":{"krate":0,"index":781},"children":[],"decl_id":null,"docs":" Pseudo-unique id used for tracing.\n","sig":null,"attributes":[{"value":"/ Pseudo-unique id used for tracing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":181621,"byte_end":181659,"line_start":108,"line_end":108,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":182414,"byte_end":182417,"line_start":142,"line_end":142,"column_start":9,"column_end":12},"name":"new","qualname":"<Ext>::new","value":"pub fn new(&'a mut OverlayedChanges,\n           &'a mut StorageTransactionCache<B::Transaction, H, N>, &'a B,\n           Option<ChangesTrieState>, Option<&'a mut Extensions>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Ext` from overlayed changes and read-only backend\n","sig":null,"attributes":[{"value":"/ Create a new `Ext` from overlayed changes and read-only backend","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":182313,"byte_end":182380,"line_start":140,"line_end":140,"column_start":2,"column_end":69}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":182382,"byte_end":182405,"line_start":141,"line_end":141,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":924},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":209751,"byte_end":209768,"line_start":47,"line_end":47,"column_start":12,"column_end":29},"name":"TestExternalities","qualname":"::testing::TestExternalities","value":"TestExternalities {  }","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933}],"decl_id":null,"docs":" Simple HashMap-based Externalities impl.\n","sig":null,"attributes":[{"value":"/ Simple HashMap-based Externalities impl.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":209695,"byte_end":209739,"line_start":46,"line_end":46,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":210364,"byte_end":210367,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"ext","qualname":"<TestExternalities<H, N>>::ext","value":"pub fn ext(&mut Self) -> Ext<, H, N, InMemoryBackend<H>>","parent":null,"children":[],"decl_id":null,"docs":" Get externalities implementation.\n","sig":null,"attributes":[{"value":"/ Get externalities implementation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":210318,"byte_end":210355,"line_start":66,"line_end":66,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":210813,"byte_end":210816,"line_start":85,"line_end":85,"column_start":9,"column_end":12},"name":"new","qualname":"<TestExternalities<H, N>>::new","value":"pub fn new(Storage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `TestExternalities` with storage.\n","sig":null,"attributes":[{"value":"/ Create a new instance of `TestExternalities` with storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":210742,"byte_end":210804,"line_start":84,"line_end":84,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":210928,"byte_end":210937,"line_start":90,"line_end":90,"column_start":9,"column_end":18},"name":"new_empty","qualname":"<TestExternalities<H, N>>::new_empty","value":"pub fn new_empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" New empty test externalities.\n","sig":null,"attributes":[{"value":"/ New empty test externalities.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":210886,"byte_end":210919,"line_start":89,"line_end":89,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":211082,"byte_end":211095,"line_start":95,"line_end":95,"column_start":9,"column_end":22},"name":"new_with_code","qualname":"<TestExternalities<H, N>>::new_with_code","value":"pub fn new_with_code(&[u8], Storage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `TestExternalities` with code and storage.\n","sig":null,"attributes":[{"value":"/ Create a new instance of `TestExternalities` with code and storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":211002,"byte_end":211073,"line_start":94,"line_end":94,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212081,"byte_end":212098,"line_start":124,"line_end":124,"column_start":9,"column_end":26},"name":"overlayed_changes","qualname":"<TestExternalities<H, N>>::overlayed_changes","value":"pub fn overlayed_changes(&Self) -> &OverlayedChanges","parent":null,"children":[],"decl_id":null,"docs":" Returns the overlayed changes.\n","sig":null,"attributes":[{"value":"/ Returns the overlayed changes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212038,"byte_end":212072,"line_start":123,"line_end":123,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212222,"byte_end":212246,"line_start":129,"line_end":129,"column_start":9,"column_end":33},"name":"persist_offchain_overlay","qualname":"<TestExternalities<H, N>>::persist_offchain_overlay","value":"pub fn persist_offchain_overlay(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Move offchain changes from overlay to the persistent store.\n","sig":null,"attributes":[{"value":"/ Move offchain changes from overlay to the persistent store.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212150,"byte_end":212213,"line_start":128,"line_end":128,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212421,"byte_end":212432,"line_start":134,"line_end":134,"column_start":9,"column_end":20},"name":"offchain_db","qualname":"<TestExternalities<H, N>>::offchain_db","value":"pub fn offchain_db(&Self) -> TestPersistentOffchainDB","parent":null,"children":[],"decl_id":null,"docs":" A shared reference type around the offchain worker storage.\n","sig":null,"attributes":[{"value":"/ A shared reference type around the offchain worker storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212349,"byte_end":212412,"line_start":133,"line_end":133,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212544,"byte_end":212550,"line_start":139,"line_end":139,"column_start":9,"column_end":15},"name":"insert","qualname":"<TestExternalities<H, N>>::insert","value":"pub fn insert(&mut Self, StorageKey, StorageValue)","parent":null,"children":[],"decl_id":null,"docs":" Insert key/value into backend\n","sig":null,"attributes":[{"value":"/ Insert key/value into backend","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212502,"byte_end":212535,"line_start":138,"line_end":138,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212719,"byte_end":212737,"line_start":144,"line_end":144,"column_start":9,"column_end":27},"name":"register_extension","qualname":"<TestExternalities<H, N>>::register_extension","value":"pub fn register_extension<E: Any + Extension>(&mut Self, E)","parent":null,"children":[],"decl_id":null,"docs":" Registers the given extension for this instance.\n","sig":null,"attributes":[{"value":"/ Registers the given extension for this instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212658,"byte_end":212710,"line_start":143,"line_end":143,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212876,"byte_end":212896,"line_start":149,"line_end":149,"column_start":9,"column_end":29},"name":"changes_trie_storage","qualname":"<TestExternalities<H, N>>::changes_trie_storage","value":"pub fn changes_trie_storage(&mut Self)\n-> &mut ChangesTrieInMemoryStorage<H, N>","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference to changes trie storage.\n","sig":null,"attributes":[{"value":"/ Get mutable reference to changes trie storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":212817,"byte_end":212867,"line_start":148,"line_end":148,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":213754,"byte_end":213764,"line_start":180,"line_end":180,"column_start":9,"column_end":19},"name":"commit_all","qualname":"<TestExternalities<H, N>>::commit_all","value":"pub fn commit_all(&mut Self) -> Result<(), String>","parent":null,"children":[],"decl_id":null,"docs":" Commit all pending changes to the underlying backend.","sig":null,"attributes":[{"value":"/ Commit all pending changes to the underlying backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":213606,"byte_end":213663,"line_start":175,"line_end":175,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":213665,"byte_end":213668,"line_start":176,"line_end":176,"column_start":2,"column_end":5}},{"value":"/ # Panic","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":213670,"byte_end":213681,"line_start":177,"line_end":177,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":213683,"byte_end":213686,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ This will panic if there are still open transactions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":213688,"byte_end":213745,"line_start":179,"line_end":179,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":214178,"byte_end":214190,"line_start":195,"line_end":195,"column_start":9,"column_end":21},"name":"execute_with","qualname":"<TestExternalities<H, N>>::execute_with","value":"pub fn execute_with<R, impl FnOnce() -> R: FnOnce() ->\n                    R>(&mut Self, impl FnOnce() -> R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Execute the given closure while `self` is set as externalities.","sig":null,"attributes":[{"value":"/ Execute the given closure while `self` is set as externalities.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":214051,"byte_end":214118,"line_start":192,"line_end":192,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":214120,"byte_end":214123,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ Returns the result of the given closure.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":214125,"byte_end":214169,"line_start":194,"line_end":194,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":214524,"byte_end":214541,"line_start":204,"line_end":204,"column_start":9,"column_end":26},"name":"execute_with_safe","qualname":"<TestExternalities<H, N>>::execute_with_safe","value":"pub fn execute_with_safe<R, impl FnOnce() -> R + UnwindSafe: FnOnce() -> R +\n                         UnwindSafe>(&mut Self,\n                                     impl FnOnce() -> R + UnwindSafe)\n-> Result<R, String>","parent":null,"children":[],"decl_id":null,"docs":" Execute the given closure while `self` is set as externalities.","sig":null,"attributes":[{"value":"/ Execute the given closure while `self` is set as externalities.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":214344,"byte_end":214411,"line_start":200,"line_end":200,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":214413,"byte_end":214416,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ Returns the result of the given closure, if no panics occured.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":214418,"byte_end":214484,"line_start":202,"line_end":202,"column_start":2,"column_end":68}},{"value":"/ Otherwise, returns `Err`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":214486,"byte_end":214515,"line_start":203,"line_end":203,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":2342},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220208,"byte_end":220226,"line_start":40,"line_end":40,"column_start":12,"column_end":30},"name":"BasicExternalities","qualname":"::basic::BasicExternalities","value":"BasicExternalities {  }","parent":null,"children":[{"krate":0,"index":2343},{"krate":0,"index":2344}],"decl_id":null,"docs":" Simple Map-based Externalities impl.\n","sig":null,"attributes":[{"value":"/ Simple Map-based Externalities impl.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220139,"byte_end":220179,"line_start":38,"line_end":38,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220359,"byte_end":220362,"line_start":47,"line_end":47,"column_start":9,"column_end":12},"name":"new","qualname":"<BasicExternalities>::new","value":"pub fn new(Storage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `BasicExternalities`\n","sig":null,"attributes":[{"value":"/ Create a new instance of `BasicExternalities`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220301,"byte_end":220350,"line_start":46,"line_end":46,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220513,"byte_end":220522,"line_start":52,"line_end":52,"column_start":9,"column_end":18},"name":"new_empty","qualname":"<BasicExternalities>::new_empty","value":"pub fn new_empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" New basic externalities with empty storage.\n","sig":null,"attributes":[{"value":"/ New basic externalities with empty storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220457,"byte_end":220504,"line_start":51,"line_end":51,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220601,"byte_end":220607,"line_start":57,"line_end":57,"column_start":9,"column_end":15},"name":"insert","qualname":"<BasicExternalities>::insert","value":"pub fn insert(&mut Self, StorageKey, StorageValue) -> Option<StorageValue>","parent":null,"children":[],"decl_id":null,"docs":" Insert key/value\n","sig":null,"attributes":[{"value":"/ Insert key/value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220572,"byte_end":220592,"line_start":56,"line_end":56,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220764,"byte_end":220777,"line_start":62,"line_end":62,"column_start":9,"column_end":22},"name":"into_storages","qualname":"<BasicExternalities>::into_storages","value":"pub fn into_storages(Self) -> Storage","parent":null,"children":[],"decl_id":null,"docs":" Consume self and returns inner storages\n","sig":null,"attributes":[{"value":"/ Consume self and returns inner storages","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220712,"byte_end":220755,"line_start":61,"line_end":61,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":221000,"byte_end":221020,"line_start":69,"line_end":69,"column_start":9,"column_end":29},"name":"execute_with_storage","qualname":"<BasicExternalities>::execute_with_storage","value":"pub fn execute_with_storage<R, impl FnOnce() -> R: FnOnce() ->\n                            R>(&mut sp_core::storage::Storage,\n                               impl FnOnce() -> R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Execute the given closure `f` with the externalities set and initialized with `storage`.","sig":null,"attributes":[{"value":"/ Execute the given closure `f` with the externalities set and initialized with `storage`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220815,"byte_end":220907,"line_start":66,"line_end":66,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220909,"byte_end":220912,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ Returns the result of the closure and updates `storage` with all changes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220914,"byte_end":220991,"line_start":68,"line_end":68,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":221508,"byte_end":221520,"line_start":91,"line_end":91,"column_start":9,"column_end":21},"name":"execute_with","qualname":"<BasicExternalities>::execute_with","value":"pub fn execute_with<R, impl FnOnce() -> R: FnOnce() ->\n                    R>(&mut Self, impl FnOnce() -> R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Execute the given closure while `self` is set as externalities.","sig":null,"attributes":[{"value":"/ Execute the given closure while `self` is set as externalities.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":221381,"byte_end":221448,"line_start":88,"line_end":88,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":221450,"byte_end":221453,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ Returns the result of the given closure.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":221455,"byte_end":221499,"line_start":90,"line_end":90,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":221669,"byte_end":221679,"line_start":96,"line_end":96,"column_start":9,"column_end":19},"name":"extensions","qualname":"<BasicExternalities>::extensions","value":"pub fn extensions(&mut Self) -> &mut Extensions","parent":null,"children":[],"decl_id":null,"docs":" List of active extensions.\n","sig":null,"attributes":[{"value":"/ List of active extensions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":221630,"byte_end":221660,"line_start":95,"line_end":95,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":221775,"byte_end":221793,"line_start":101,"line_end":101,"column_start":9,"column_end":27},"name":"register_extension","qualname":"<BasicExternalities>::register_extension","value":"pub fn register_extension<impl Extension: Extension>(&mut Self,\n                                                     impl Extension)","parent":null,"children":[],"decl_id":null,"docs":" Register an extension.\n","sig":null,"attributes":[{"value":"/ Register an extension.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":221740,"byte_end":221766,"line_start":100,"line_end":100,"column_start":2,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2347},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":267348,"byte_end":267365,"line_start":43,"line_end":43,"column_start":12,"column_end":29},"name":"NoOpenTransaction","qualname":"::overlayed_changes::changeset::NoOpenTransaction","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when trying to commit or rollback while no transaction is open or\n when the runtime is trying to close a transaction started by the client.\n","sig":null,"attributes":[{"value":"/ Error returned when trying to commit or rollback while no transaction is open or","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":267121,"byte_end":267205,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/ when the runtime is trying to close a transaction started by the client.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":267206,"byte_end":267282,"line_start":40,"line_end":40,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":2351},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":267518,"byte_end":267534,"line_start":48,"line_end":48,"column_start":12,"column_end":28},"name":"AlreadyInRuntime","qualname":"::overlayed_changes::changeset::AlreadyInRuntime","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error when calling `enter_runtime` when already being in runtime execution mode.\n","sig":null,"attributes":[{"value":"/ Error when calling `enter_runtime` when already being in runtime execution mode.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":267368,"byte_end":267452,"line_start":45,"line_end":45,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":2355},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":267681,"byte_end":267693,"line_start":53,"line_end":53,"column_start":12,"column_end":24},"name":"NotInRuntime","qualname":"::overlayed_changes::changeset::NotInRuntime","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error when calling `exit_runtime` when not being in runtime exection mdde.\n","sig":null,"attributes":[{"value":"/ Error when calling `exit_runtime` when not being in runtime exection mdde.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":267537,"byte_end":267615,"line_start":50,"line_end":50,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2382},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":268449,"byte_end":268463,"line_start":77,"line_end":77,"column_start":12,"column_end":26},"name":"OverlayedEntry","qualname":"::overlayed_changes::changeset::OverlayedEntry","value":"OverlayedEntry {  }","parent":null,"children":[{"krate":0,"index":2384}],"decl_id":null,"docs":" An overlay that contains all versions of a value for a specific key.\n","sig":null,"attributes":[{"value":"/ An overlay that contains all versions of a value for a specific key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":268304,"byte_end":268376,"line_start":74,"line_end":74,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":2391},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":269135,"byte_end":269147,"line_start":99,"line_end":99,"column_start":12,"column_end":24},"name":"OverlayedMap","qualname":"::overlayed_changes::changeset::OverlayedMap","value":"OverlayedMap {  }","parent":null,"children":[{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2397}],"decl_id":null,"docs":" Holds a set of changes with the ability modify them using nested transactions.\n","sig":null,"attributes":[{"value":"/ Holds a set of changes with the ability modify them using nested transactions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":269017,"byte_end":269099,"line_start":97,"line_end":97,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":270320,"byte_end":270329,"line_start":133,"line_end":133,"column_start":9,"column_end":18},"name":"value_ref","qualname":"<OverlayedEntry<V>>::value_ref","value":"pub fn value_ref(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" The value as seen by the current transaction.\n","sig":null,"attributes":[{"value":"/ The value as seen by the current transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":270262,"byte_end":270311,"line_start":132,"line_end":132,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":270474,"byte_end":270484,"line_start":138,"line_end":138,"column_start":9,"column_end":19},"name":"into_value","qualname":"<OverlayedEntry<V>>::into_value","value":"pub fn into_value(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" The value as seen by the current transaction.\n","sig":null,"attributes":[{"value":"/ The value as seen by the current transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":270416,"byte_end":270465,"line_start":137,"line_end":137,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":270642,"byte_end":270652,"line_start":143,"line_end":143,"column_start":9,"column_end":19},"name":"extrinsics","qualname":"<OverlayedEntry<V>>::extrinsics","value":"pub fn extrinsics(&Self) -> BTreeSet<u32>","parent":null,"children":[],"decl_id":null,"docs":" Unique list of extrinsic indices which modified the value.\n","sig":null,"attributes":[{"value":"/ Unique list of extrinsic indices which modified the value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":270571,"byte_end":270633,"line_start":142,"line_end":142,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":272030,"byte_end":272035,"line_start":191,"line_end":191,"column_start":9,"column_end":14},"name":"value","qualname":"<OverlayedEntry<Option<StorageValue>>>::value","value":"pub fn value(&Self) -> Option<&StorageValue>","parent":null,"children":[],"decl_id":null,"docs":" The value as seen by the current transaction.\n","sig":null,"attributes":[{"value":"/ The value as seen by the current transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":271972,"byte_end":272021,"line_start":190,"line_end":190,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":272740,"byte_end":272751,"line_start":209,"line_end":209,"column_start":9,"column_end":20},"name":"spawn_child","qualname":"<OverlayedMap<K, V>>::spawn_child","value":"pub fn spawn_child(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new changeset at the same transaction state but without any contents.","sig":null,"attributes":[{"value":"/ Create a new changeset at the same transaction state but without any contents.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":272483,"byte_end":272565,"line_start":205,"line_end":205,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":272567,"byte_end":272570,"line_start":206,"line_end":206,"column_start":2,"column_end":5}},{"value":"/ This changeset might be created when there are already open transactions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":272572,"byte_end":272649,"line_start":207,"line_end":207,"column_start":2,"column_end":79}},{"value":"/ We need to catch up here so that the child is at the same transaction depth.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":272651,"byte_end":272731,"line_start":208,"line_end":208,"column_start":2,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273092,"byte_end":273100,"line_start":220,"line_end":220,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<OverlayedMap<K, V>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if no changes at all are contained in the change set.\n","sig":null,"attributes":[{"value":"/ True if no changes at all are contained in the change set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273021,"byte_end":273083,"line_start":219,"line_end":219,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273230,"byte_end":273233,"line_start":225,"line_end":225,"column_start":9,"column_end":12},"name":"get","qualname":"<OverlayedMap<K, V>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&OverlayedEntry<V>> where\nK: sp_std::borrow::Borrow<Q>, Q: Ord","parent":null,"children":[],"decl_id":null,"docs":" Get an optional reference to the value stored for the specified key.\n","sig":null,"attributes":[{"value":"/ Get an optional reference to the value stored for the specified key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273149,"byte_end":273221,"line_start":224,"line_end":224,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273504,"byte_end":273507,"line_start":236,"line_end":236,"column_start":9,"column_end":12},"name":"set","qualname":"<OverlayedMap<K, V>>::set","value":"pub fn set(&mut Self, K, V, Option<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Set a new value for the specified key.","sig":null,"attributes":[{"value":"/ Set a new value for the specified key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273377,"byte_end":273419,"line_start":233,"line_end":233,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273421,"byte_end":273424,"line_start":234,"line_end":234,"column_start":2,"column_end":5}},{"value":"/ Can be rolled back or committed when called inside a transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273426,"byte_end":273495,"line_start":235,"line_end":235,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273796,"byte_end":273803,"line_start":247,"line_end":247,"column_start":9,"column_end":16},"name":"changes","qualname":"<OverlayedMap<K, V>>::changes","value":"pub fn changes(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Get a list of all changes as seen by current transaction.\n","sig":null,"attributes":[{"value":"/ Get a list of all changes as seen by current transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273726,"byte_end":273787,"line_start":246,"line_end":246,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273985,"byte_end":273997,"line_start":253,"line_end":253,"column_start":9,"column_end":21},"name":"into_changes","qualname":"<OverlayedMap<K, V>>::into_changes","value":"pub fn into_changes(Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Get a list of all changes as seen by current transaction, consumes\n the overlay.\n","sig":null,"attributes":[{"value":"/ Get a list of all changes as seen by current transaction, consumes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273888,"byte_end":273958,"line_start":251,"line_end":251,"column_start":2,"column_end":72}},{"value":"/ the overlay.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":273960,"byte_end":273976,"line_start":252,"line_end":252,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274241,"byte_end":274255,"line_start":261,"line_end":261,"column_start":9,"column_end":23},"name":"drain_commited","qualname":"<OverlayedMap<K, V>>::drain_commited","value":"pub fn drain_commited(Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Consume this changeset and return all committed changes.","sig":null,"attributes":[{"value":"/ Consume this changeset and return all committed changes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274084,"byte_end":274144,"line_start":257,"line_end":257,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274146,"byte_end":274149,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ Panics:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274151,"byte_end":274162,"line_start":259,"line_end":259,"column_start":2,"column_end":13}},{"value":"/ Panics if there are open transactions: `transaction_depth() > 0`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274164,"byte_end":274232,"line_start":260,"line_end":260,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1142},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274633,"byte_end":274650,"line_start":269,"line_end":269,"column_start":9,"column_end":26},"name":"transaction_depth","qualname":"<OverlayedMap<K, V>>::transaction_depth","value":"pub fn transaction_depth(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current nesting depth of the transaction stack.","sig":null,"attributes":[{"value":"/ Returns the current nesting depth of the transaction stack.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274465,"byte_end":274528,"line_start":266,"line_end":266,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274530,"byte_end":274533,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ A value of zero means that no transaction is open and changes are committed on write.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274535,"byte_end":274624,"line_start":268,"line_end":268,"column_start":2,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274921,"byte_end":274934,"line_start":277,"line_end":277,"column_start":9,"column_end":22},"name":"enter_runtime","qualname":"<OverlayedMap<K, V>>::enter_runtime","value":"pub fn enter_runtime(&mut Self) -> Result<(), AlreadyInRuntime>","parent":null,"children":[],"decl_id":null,"docs":" Call this before transfering control to the runtime.","sig":null,"attributes":[{"value":"/ Call this before transfering control to the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274698,"byte_end":274754,"line_start":273,"line_end":273,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274756,"byte_end":274759,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ This protects all existing transactions from being removed by the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274761,"byte_end":274839,"line_start":275,"line_end":275,"column_start":2,"column_end":80}},{"value":"/ Calling this while already inside the runtime will return an error.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":274841,"byte_end":274912,"line_start":276,"line_end":276,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":275403,"byte_end":275415,"line_start":290,"line_end":290,"column_start":9,"column_end":21},"name":"exit_runtime","qualname":"<OverlayedMap<K, V>>::exit_runtime","value":"pub fn exit_runtime(&mut Self) -> Result<(), NotInRuntime>","parent":null,"children":[],"decl_id":null,"docs":" Call this when control returns from the runtime.","sig":null,"attributes":[{"value":"/ Call this when control returns from the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":275194,"byte_end":275246,"line_start":286,"line_end":286,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":275248,"byte_end":275251,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ This commits all dangling transaction left open by the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":275253,"byte_end":275320,"line_start":288,"line_end":288,"column_start":2,"column_end":69}},{"value":"/ Calling this while already outside the runtime will return an error.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":275322,"byte_end":275394,"line_start":289,"line_end":289,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1145},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276374,"byte_end":276391,"line_start":315,"line_end":315,"column_start":9,"column_end":26},"name":"start_transaction","qualname":"<OverlayedMap<K, V>>::start_transaction","value":"pub fn start_transaction(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Start a new nested transaction.","sig":null,"attributes":[{"value":"/ Start a new nested transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":275982,"byte_end":276017,"line_start":308,"line_end":308,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276019,"byte_end":276022,"line_start":309,"line_end":309,"column_start":2,"column_end":5}},{"value":"/ This allows to either commit or roll back all changes that were made while this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276024,"byte_end":276107,"line_start":310,"line_end":310,"column_start":2,"column_end":85}},{"value":"/ transaction was open. Any transaction must be closed by either `commit_transaction`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276109,"byte_end":276196,"line_start":311,"line_end":311,"column_start":2,"column_end":89}},{"value":"/ or `rollback_transaction` before this overlay can be converted into storage changes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276198,"byte_end":276286,"line_start":312,"line_end":312,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276288,"byte_end":276291,"line_start":313,"line_end":313,"column_start":2,"column_end":5}},{"value":"/ Changes made without any open transaction are committed immediately.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276293,"byte_end":276365,"line_start":314,"line_end":314,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276673,"byte_end":276693,"line_start":323,"line_end":323,"column_start":9,"column_end":29},"name":"rollback_transaction","qualname":"<OverlayedMap<K, V>>::rollback_transaction","value":"pub fn rollback_transaction(&mut Self) -> Result<(), NoOpenTransaction>","parent":null,"children":[],"decl_id":null,"docs":" Rollback the last transaction started by `start_transaction`.","sig":null,"attributes":[{"value":"/ Rollback the last transaction started by `start_transaction`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276454,"byte_end":276519,"line_start":319,"line_end":319,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276521,"byte_end":276524,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ Any changes made during that transaction are discarded. Returns an error if","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276526,"byte_end":276605,"line_start":321,"line_end":321,"column_start":2,"column_end":81}},{"value":"/ there is no open transaction that can be rolled back.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276607,"byte_end":276664,"line_start":322,"line_end":322,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276991,"byte_end":277009,"line_start":331,"line_end":331,"column_start":9,"column_end":27},"name":"commit_transaction","qualname":"<OverlayedMap<K, V>>::commit_transaction","value":"pub fn commit_transaction(&mut Self) -> Result<(), NoOpenTransaction>","parent":null,"children":[],"decl_id":null,"docs":" Commit the last transaction started by `start_transaction`.","sig":null,"attributes":[{"value":"/ Commit the last transaction started by `start_transaction`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276776,"byte_end":276839,"line_start":327,"line_end":327,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276841,"byte_end":276844,"line_start":328,"line_end":328,"column_start":2,"column_end":5}},{"value":"/ Any changes made during that transaction are committed. Returns an error if","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276846,"byte_end":276925,"line_start":329,"line_end":329,"column_start":2,"column_end":81}},{"value":"/ there is no open transaction that can be committed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":276927,"byte_end":276982,"line_start":330,"line_end":330,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":279204,"byte_end":279210,"line_start":392,"line_end":392,"column_start":9,"column_end":15},"name":"modify","qualname":"<OverlayedChangeSet>::modify","value":"pub fn modify<impl Fn() -> StorageValue: Fn() ->\n              StorageValue>(&mut Self, StorageKey, impl Fn() -> StorageValue,\n                            Option<u32>) -> &mut Option<StorageValue>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference for a value.","sig":null,"attributes":[{"value":"/ Get a mutable reference for a value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":279005,"byte_end":279045,"line_start":388,"line_end":388,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":279047,"byte_end":279050,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ Can be rolled back or committed when called inside a transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":279052,"byte_end":279121,"line_start":390,"line_end":390,"column_start":2,"column_end":71}},{"value":"must_use = \"A change was registered, so this value MUST be modified.\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":279123,"byte_end":279195,"line_start":391,"line_end":391,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":279953,"byte_end":279964,"line_start":419,"line_end":419,"column_start":9,"column_end":20},"name":"clear_where","qualname":"<OverlayedChangeSet>::clear_where","value":"pub fn clear_where<impl Fn(&[u8], &OverlayedValue) -> bool: Fn(&[u8],\n                                                               &OverlayedValue)\n                   ->\n                   bool>(&mut Self, impl Fn(&[u8], &OverlayedValue) -> bool,\n                         Option<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Set all values to deleted which are matched by the predicate.","sig":null,"attributes":[{"value":"/ Set all values to deleted which are matched by the predicate.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":279803,"byte_end":279868,"line_start":416,"line_end":416,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":279870,"byte_end":279873,"line_start":417,"line_end":417,"column_start":2,"column_end":5}},{"value":"/ Can be rolled back or committed when called inside a transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":279875,"byte_end":279944,"line_start":418,"line_end":418,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":280297,"byte_end":280308,"line_start":430,"line_end":430,"column_start":9,"column_end":20},"name":"next_change","qualname":"<OverlayedChangeSet>::next_change","value":"pub fn next_change(&Self, &[u8]) -> Option<(&[u8], &OverlayedValue)>","parent":null,"children":[],"decl_id":null,"docs":" Get the change that is next to the supplied key.\n","sig":null,"attributes":[{"value":"/ Get the change that is next to the supplied key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":280236,"byte_end":280288,"line_start":429,"line_end":429,"column_start":2,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2406},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":294920,"byte_end":294944,"line_start":26,"line_end":26,"column_start":12,"column_end":36},"name":"OffchainOverlayedChanges","qualname":"::overlayed_changes::offchain::OffchainOverlayedChanges","value":"","parent":null,"children":[],"decl_id":null,"docs":" In-memory storage for offchain workers recoding changes for the actual offchain storage implementation.\n","sig":null,"attributes":[{"value":"/ In-memory storage for offchain workers recoding changes for the actual offchain storage implementation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":294768,"byte_end":294875,"line_start":24,"line_end":24,"column_start":1,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":295523,"byte_end":295532,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"name":"into_iter","qualname":"<OffchainOverlayedChanges>::into_iter","value":"pub fn into_iter(Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Consume the offchain storage and iterate over all key value pairs.\n","sig":null,"attributes":[{"value":"/ Consume the offchain storage and iterate over all key value pairs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":295444,"byte_end":295514,"line_start":38,"line_end":38,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":295724,"byte_end":295728,"line_start":44,"line_end":44,"column_start":9,"column_end":13},"name":"iter","qualname":"<OffchainOverlayedChanges>::iter","value":"pub fn iter<'a>(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all key value pairs by reference.\n","sig":null,"attributes":[{"value":"/ Iterate over all key value pairs by reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":295665,"byte_end":295715,"line_start":43,"line_end":43,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":295907,"byte_end":295912,"line_start":49,"line_end":49,"column_start":9,"column_end":14},"name":"drain","qualname":"<OffchainOverlayedChanges>::drain","value":"pub fn drain(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Drain all elements of changeset.\n","sig":null,"attributes":[{"value":"/ Drain all elements of changeset.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":295862,"byte_end":295898,"line_start":48,"line_end":48,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":296106,"byte_end":296112,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"name":"remove","qualname":"<OffchainOverlayedChanges>::remove","value":"pub fn remove(&mut Self, &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Remove a key and its associated value from the offchain database.\n","sig":null,"attributes":[{"value":"/ Remove a key and its associated value from the offchain database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":296028,"byte_end":296097,"line_start":53,"line_end":53,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":296352,"byte_end":296355,"line_start":63,"line_end":63,"column_start":9,"column_end":12},"name":"set","qualname":"<OffchainOverlayedChanges>::set","value":"pub fn set(&mut Self, &[u8], &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Set the value associated with a key under a prefix to the value provided.\n","sig":null,"attributes":[{"value":"/ Set the value associated with a key under a prefix to the value provided.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":296266,"byte_end":296343,"line_start":62,"line_end":62,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":296620,"byte_end":296623,"line_start":72,"line_end":72,"column_start":9,"column_end":12},"name":"get","qualname":"<OffchainOverlayedChanges>::get","value":"pub fn get(&Self, &[u8], &[u8]) -> Option<OffchainOverlayedChange>","parent":null,"children":[],"decl_id":null,"docs":" Obtain a associated value to the given key in storage with prefix.\n","sig":null,"attributes":[{"value":"/ Obtain a associated value to the given key in storage with prefix.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":296541,"byte_end":296611,"line_start":71,"line_end":71,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":296847,"byte_end":296854,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"overlay","qualname":"<OffchainOverlayedChanges>::overlay","value":"pub fn overlay(&Self)\n-> &OverlayedMap<(Vec<u8>, Vec<u8>), OffchainOverlayedChange>","parent":null,"children":[],"decl_id":null,"docs":" Reference to inner change set.\n","sig":null,"attributes":[{"value":"/ Reference to inner change set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":296804,"byte_end":296838,"line_start":77,"line_end":77,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":296992,"byte_end":297003,"line_start":83,"line_end":83,"column_start":9,"column_end":20},"name":"overlay_mut","qualname":"<OffchainOverlayedChanges>::overlay_mut","value":"pub fn overlay_mut(&mut Self)\n-> &mut OverlayedMap<(Vec<u8>, Vec<u8>), OffchainOverlayedChange>","parent":null,"children":[],"decl_id":null,"docs":" Mutable reference to inner change set.\n","sig":null,"attributes":[{"value":"/ Mutable reference to inner change set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":296941,"byte_end":296983,"line_start":82,"line_end":82,"column_start":2,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":1221},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":232737,"byte_end":232747,"line_start":58,"line_end":58,"column_start":10,"column_end":20},"name":"StorageKey","qualname":"::overlayed_changes::StorageKey","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Storage key.\n","sig":null,"attributes":[{"value":"/ Storage key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":232711,"byte_end":232727,"line_start":57,"line_end":57,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":1222},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":232788,"byte_end":232800,"line_start":61,"line_end":61,"column_start":10,"column_end":22},"name":"StorageValue","qualname":"::overlayed_changes::StorageValue","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Storage value.\n","sig":null,"attributes":[{"value":"/ Storage value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":232760,"byte_end":232778,"line_start":60,"line_end":60,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":1223},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":232861,"byte_end":232878,"line_start":64,"line_end":64,"column_start":10,"column_end":27},"name":"StorageCollection","qualname":"::overlayed_changes::StorageCollection","value":"Vec<(StorageKey, Option<StorageValue>)>","parent":null,"children":[],"decl_id":null,"docs":" In memory array of storage values.\n","sig":null,"attributes":[{"value":"/ In memory array of storage values.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":232813,"byte_end":232851,"line_start":63,"line_end":63,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":1224},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":232997,"byte_end":233019,"line_start":67,"line_end":67,"column_start":10,"column_end":32},"name":"ChildStorageCollection","qualname":"::overlayed_changes::ChildStorageCollection","value":"Vec<(StorageKey, StorageCollection)>","parent":null,"children":[],"decl_id":null,"docs":" In memory arrays of storage values for multiple child tries.\n","sig":null,"attributes":[{"value":"/ In memory arrays of storage values for multiple child tries.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":232923,"byte_end":232987,"line_start":66,"line_end":66,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":1225},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":233109,"byte_end":233134,"line_start":70,"line_end":70,"column_start":10,"column_end":35},"name":"OffchainChangesCollection","qualname":"::overlayed_changes::OffchainChangesCollection","value":"Vec<((Vec<u8>, Vec<u8>), OffchainOverlayedChange)>","parent":null,"children":[],"decl_id":null,"docs":" In memory array of storage values.\n","sig":null,"attributes":[{"value":"/ In memory array of storage values.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":233061,"byte_end":233099,"line_start":69,"line_end":69,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":2431},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":233894,"byte_end":233910,"line_start":99,"line_end":99,"column_start":12,"column_end":28},"name":"OverlayedChanges","qualname":"::overlayed_changes::OverlayedChanges","value":"OverlayedChanges {  }","parent":null,"children":[{"krate":0,"index":2432},{"krate":0,"index":2433},{"krate":0,"index":2434},{"krate":0,"index":2435},{"krate":0,"index":2436}],"decl_id":null,"docs":" The set of changes that are overlaid onto the backend.","sig":null,"attributes":[{"value":"/ The set of changes that are overlaid onto the backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":233721,"byte_end":233779,"line_start":95,"line_end":95,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":233780,"byte_end":233783,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ It allows changes to be modified using nestable transactions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":233784,"byte_end":233849,"line_start":97,"line_end":97,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1230},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234566,"byte_end":234580,"line_start":116,"line_end":116,"column_start":12,"column_end":26},"name":"StorageChanges","qualname":"::overlayed_changes::StorageChanges","value":"StorageChanges { main_storage_changes, child_storage_changes, offchain_storage_changes, transaction, transaction_storage_root, changes_trie_transaction }","parent":null,"children":[{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239}],"decl_id":null,"docs":" A storage changes structure that can be generated by the data collected in [`OverlayedChanges`].","sig":null,"attributes":[{"value":"/ A storage changes structure that can be generated by the data collected in [`OverlayedChanges`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234340,"byte_end":234440,"line_start":112,"line_end":112,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234441,"byte_end":234444,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This contains all the changes to the storage and transactions to apply theses changes to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234445,"byte_end":234541,"line_start":114,"line_end":114,"column_start":1,"column_end":97}},{"value":"/ backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234542,"byte_end":234554,"line_start":115,"line_end":115,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":1234},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234721,"byte_end":234741,"line_start":120,"line_end":120,"column_start":6,"column_end":26},"name":"main_storage_changes","qualname":"::overlayed_changes::StorageChanges::main_storage_changes","value":"std::vec::Vec<(std::vec::Vec<u8>, std::option::Option<std::vec::Vec<u8>>)>","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":" All changes to the main storage.","sig":null,"attributes":[{"value":"/ All changes to the main storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234624,"byte_end":234660,"line_start":117,"line_end":117,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234662,"byte_end":234665,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ A value of `None` means that it was deleted.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234667,"byte_end":234715,"line_start":119,"line_end":119,"column_start":2,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":1235},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234807,"byte_end":234828,"line_start":122,"line_end":122,"column_start":6,"column_end":27},"name":"child_storage_changes","qualname":"::overlayed_changes::StorageChanges::child_storage_changes","value":"std::vec::Vec<(std::vec::Vec<u8>, std::vec::Vec<(std::vec::Vec<u8>, std::option::Option<std::vec::Vec<u8>>)>)>","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":" All changes to the child storages.\n","sig":null,"attributes":[{"value":"/ All changes to the child storages.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234763,"byte_end":234801,"line_start":121,"line_end":121,"column_start":2,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1236},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234922,"byte_end":234946,"line_start":124,"line_end":124,"column_start":6,"column_end":30},"name":"offchain_storage_changes","qualname":"::overlayed_changes::StorageChanges::offchain_storage_changes","value":"std::vec::Vec<((std::vec::Vec<u8>, std::vec::Vec<u8>), sp_core::offchain::OffchainOverlayedChange)>","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":" Offchain state changes to write to the offchain database.\n","sig":null,"attributes":[{"value":"/ Offchain state changes to write to the offchain database.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234855,"byte_end":234916,"line_start":123,"line_end":123,"column_start":2,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":1237},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235271,"byte_end":235282,"line_start":129,"line_end":129,"column_start":6,"column_end":17},"name":"transaction","qualname":"::overlayed_changes::StorageChanges::transaction","value":"Transaction","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":" A transaction for the backend that contains all changes from\n [`main_storage_changes`](StorageChanges::main_storage_changes) and from\n [`child_storage_changes`](StorageChanges::child_storage_changes).\n [`offchain_storage_changes`](StorageChanges::offchain_storage_changes).\n","sig":null,"attributes":[{"value":"/ A transaction for the backend that contains all changes from","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":234976,"byte_end":235040,"line_start":125,"line_end":125,"column_start":2,"column_end":66}},{"value":"/ [`main_storage_changes`](StorageChanges::main_storage_changes) and from","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235042,"byte_end":235117,"line_start":126,"line_end":126,"column_start":2,"column_end":77}},{"value":"/ [`child_storage_changes`](StorageChanges::child_storage_changes).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235119,"byte_end":235188,"line_start":127,"line_end":127,"column_start":2,"column_end":71}},{"value":"/ [`offchain_storage_changes`](StorageChanges::offchain_storage_changes).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235190,"byte_end":235265,"line_start":128,"line_end":128,"column_start":2,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1238},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235356,"byte_end":235380,"line_start":131,"line_end":131,"column_start":6,"column_end":30},"name":"transaction_storage_root","qualname":"::overlayed_changes::StorageChanges::transaction_storage_root","value":"<H as hash_db::Hasher>::Out","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":" The storage root after applying the transaction.\n","sig":null,"attributes":[{"value":"/ The storage root after applying the transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235298,"byte_end":235350,"line_start":130,"line_end":130,"column_start":2,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1239},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235554,"byte_end":235578,"line_start":136,"line_end":136,"column_start":6,"column_end":30},"name":"changes_trie_transaction","qualname":"::overlayed_changes::StorageChanges::changes_trie_transaction","value":"std::option::Option<(memory_db::MemoryDB<H, memory_db::HashKey<H>, std::vec::Vec<u8>, memory_db::malloc_size_of::NoopTracker<std::vec::Vec<u8>>>, changes_trie::build_cache::CacheAction<<H as hash_db::Hasher>::Out, N>)>","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":" Contains the transaction for the backend for the changes trie.","sig":null,"attributes":[{"value":"/ Contains the transaction for the backend for the changes trie.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235391,"byte_end":235457,"line_start":132,"line_end":132,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235459,"byte_end":235462,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ If changes trie is disabled the value is set to `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235464,"byte_end":235523,"line_start":134,"line_end":134,"column_start":2,"column_end":61}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235525,"byte_end":235548,"line_start":135,"line_end":135,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235914,"byte_end":235924,"line_start":145,"line_end":145,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<StorageChanges<Transaction, H, N>>::into_inner","value":"pub fn into_inner(Self)\n->\n    (StorageCollection, ChildStorageCollection, OffchainChangesCollection,\n     Transaction, H::Out, Option<ChangesTrieTransaction<H, N>>)","parent":null,"children":[],"decl_id":null,"docs":" Deconstruct into the inner values\n","sig":null,"attributes":[{"value":"/ Deconstruct into the inner values","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235868,"byte_end":235905,"line_start":144,"line_end":144,"column_start":2,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1245},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":236552,"byte_end":236575,"line_start":167,"line_end":167,"column_start":12,"column_end":35},"name":"StorageTransactionCache","qualname":"::overlayed_changes::StorageTransactionCache","value":"StorageTransactionCache {  }","parent":null,"children":[{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252}],"decl_id":null,"docs":" The storage transaction are calculated as part of the `storage_root` and\n `changes_trie_storage_root`. These transactions can be reused for importing the block into the\n storage. So, we cache them to not require a recomputation of those transactions.\n","sig":null,"attributes":[{"value":"/ The storage transaction are calculated as part of the `storage_root` and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":236280,"byte_end":236356,"line_start":164,"line_end":164,"column_start":1,"column_end":77}},{"value":"/ `changes_trie_storage_root`. These transactions can be reused for importing the block into the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":236357,"byte_end":236455,"line_start":165,"line_end":165,"column_start":1,"column_end":99}},{"value":"/ storage. So, we cache them to not require a recomputation of those transactions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":236456,"byte_end":236540,"line_start":166,"line_end":166,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":237459,"byte_end":237464,"line_start":185,"line_end":185,"column_start":9,"column_end":14},"name":"reset","qualname":"<StorageTransactionCache<Transaction, H, N>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the cached transactions.\n","sig":null,"attributes":[{"value":"/ Reset the cached transactions.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":237416,"byte_end":237450,"line_start":184,"line_end":184,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":238516,"byte_end":238524,"line_start":223,"line_end":223,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<OverlayedChanges>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether no changes are contained in the top nor in any of the child changes.\n","sig":null,"attributes":[{"value":"/ Whether no changes are contained in the top nor in any of the child changes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":238427,"byte_end":238507,"line_start":222,"line_end":222,"column_start":2,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":238689,"byte_end":238711,"line_start":228,"line_end":228,"column_start":9,"column_end":31},"name":"set_collect_extrinsics","qualname":"<OverlayedChanges>::set_collect_extrinsics","value":"pub fn set_collect_extrinsics(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Ask to collect/not to collect extrinsics indices where key(s) has been changed.\n","sig":null,"attributes":[{"value":"/ Ask to collect/not to collect extrinsics indices where key(s) has been changed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":238597,"byte_end":238680,"line_start":227,"line_end":227,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":239026,"byte_end":239033,"line_start":235,"line_end":235,"column_start":9,"column_end":16},"name":"storage","qualname":"<OverlayedChanges>::storage","value":"pub fn storage(&Self, &[u8]) -> Option<Option<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a double-Option: None if the key is unknown (i.e. and the query should be referred\n to the backend); Some(None) if the key has been deleted. Some(Some(...)) for a key whose\n value has been set.\n","sig":null,"attributes":[{"value":"/ Returns a double-Option: None if the key is unknown (i.e. and the query should be referred","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":238804,"byte_end":238898,"line_start":232,"line_end":232,"column_start":2,"column_end":96}},{"value":"/ to the backend); Some(None) if the key has been deleted. Some(Some(...)) for a key whose","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":238900,"byte_end":238992,"line_start":233,"line_end":233,"column_start":2,"column_end":94}},{"value":"/ value has been set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":238994,"byte_end":239017,"line_start":234,"line_end":234,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":239671,"byte_end":239695,"line_start":250,"line_end":250,"column_start":9,"column_end":33},"name":"value_mut_or_insert_with","qualname":"<OverlayedChanges>::value_mut_or_insert_with","value":"pub fn value_mut_or_insert_with<impl Fn() -> StorageValue: Fn() ->\n                                StorageValue>(&mut Self, &[u8],\n                                              impl Fn() -> StorageValue)\n-> &mut StorageValue","parent":null,"children":[],"decl_id":null,"docs":" Returns mutable reference to current value.\n If there is no value in the overlay, the given callback is used to initiate the value.\n Warning this function registers a change, so the mutable reference MUST be modified.","sig":null,"attributes":[{"value":"/ Returns mutable reference to current value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":239283,"byte_end":239330,"line_start":244,"line_end":244,"column_start":2,"column_end":49}},{"value":"/ If there is no value in the overlay, the given callback is used to initiate the value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":239332,"byte_end":239422,"line_start":245,"line_end":245,"column_start":2,"column_end":92}},{"value":"/ Warning this function registers a change, so the mutable reference MUST be modified.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":239424,"byte_end":239512,"line_start":246,"line_end":246,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":239514,"byte_end":239517,"line_start":247,"line_end":247,"column_start":2,"column_end":5}},{"value":"/ Can be rolled back or committed when called inside a transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":239519,"byte_end":239588,"line_start":248,"line_end":248,"column_start":2,"column_end":71}},{"value":"must_use = \"A change was registered, so this value MUST be modified.\"","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":239590,"byte_end":239662,"line_start":249,"line_end":249,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":240205,"byte_end":240218,"line_start":264,"line_end":264,"column_start":9,"column_end":22},"name":"child_storage","qualname":"<OverlayedChanges>::child_storage","value":"pub fn child_storage(&Self, &ChildInfo, &[u8]) -> Option<Option<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a double-Option: None if the key is unknown (i.e. and the query should be referred\n to the backend); Some(None) if the key has been deleted. Some(Some(...)) for a key whose\n value has been set.\n","sig":null,"attributes":[{"value":"/ Returns a double-Option: None if the key is unknown (i.e. and the query should be referred","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":239983,"byte_end":240077,"line_start":261,"line_end":261,"column_start":2,"column_end":96}},{"value":"/ to the backend); Some(None) if the key has been deleted. Some(Some(...)) for a key whose","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":240079,"byte_end":240171,"line_start":262,"line_end":262,"column_start":2,"column_end":94}},{"value":"/ value has been set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":240173,"byte_end":240196,"line_start":263,"line_end":263,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":243452,"byte_end":243469,"line_start":361,"line_end":361,"column_start":9,"column_end":26},"name":"transaction_depth","qualname":"<OverlayedChanges>::transaction_depth","value":"pub fn transaction_depth(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current nesting depth of the transaction stack.","sig":null,"attributes":[{"value":"/ Returns the current nesting depth of the transaction stack.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":243284,"byte_end":243347,"line_start":358,"line_end":358,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":243349,"byte_end":243352,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ A value of zero means that no transaction is open and changes are committed on write.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":243354,"byte_end":243443,"line_start":360,"line_end":360,"column_start":2,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":244047,"byte_end":244064,"line_start":374,"line_end":374,"column_start":9,"column_end":26},"name":"start_transaction","qualname":"<OverlayedChanges>::start_transaction","value":"pub fn start_transaction(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Start a new nested transaction.","sig":null,"attributes":[{"value":"/ Start a new nested transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":243654,"byte_end":243689,"line_start":367,"line_end":367,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":243691,"byte_end":243694,"line_start":368,"line_end":368,"column_start":2,"column_end":5}},{"value":"/ This allows to either commit or roll back all changes that where made while this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":243696,"byte_end":243780,"line_start":369,"line_end":369,"column_start":2,"column_end":86}},{"value":"/ transaction was open. Any transaction must be closed by either `rollback_transaction` or","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":243782,"byte_end":243874,"line_start":370,"line_end":370,"column_start":2,"column_end":94}},{"value":"/ `commit_transaction` before this overlay can be converted into storage changes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":243876,"byte_end":243959,"line_start":371,"line_end":371,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":243961,"byte_end":243964,"line_start":372,"line_end":372,"column_start":2,"column_end":5}},{"value":"/ Changes made without any open transaction are committed immediately.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":243966,"byte_end":244038,"line_start":373,"line_end":373,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":244479,"byte_end":244499,"line_start":386,"line_end":386,"column_start":9,"column_end":29},"name":"rollback_transaction","qualname":"<OverlayedChanges>::rollback_transaction","value":"pub fn rollback_transaction(&mut Self) -> Result<(), NoOpenTransaction>","parent":null,"children":[],"decl_id":null,"docs":" Rollback the last transaction started by `start_transaction`.","sig":null,"attributes":[{"value":"/ Rollback the last transaction started by `start_transaction`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":244260,"byte_end":244325,"line_start":382,"line_end":382,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":244327,"byte_end":244330,"line_start":383,"line_end":383,"column_start":2,"column_end":5}},{"value":"/ Any changes made during that transaction are discarded. Returns an error if","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":244332,"byte_end":244411,"line_start":384,"line_end":384,"column_start":2,"column_end":81}},{"value":"/ there is no open transaction that can be rolled back.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":244413,"byte_end":244470,"line_start":385,"line_end":385,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":245131,"byte_end":245149,"line_start":402,"line_end":402,"column_start":9,"column_end":27},"name":"commit_transaction","qualname":"<OverlayedChanges>::commit_transaction","value":"pub fn commit_transaction(&mut Self) -> Result<(), NoOpenTransaction>","parent":null,"children":[],"decl_id":null,"docs":" Commit the last transaction started by `start_transaction`.","sig":null,"attributes":[{"value":"/ Commit the last transaction started by `start_transaction`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":244916,"byte_end":244979,"line_start":398,"line_end":398,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":244981,"byte_end":244984,"line_start":399,"line_end":399,"column_start":2,"column_end":5}},{"value":"/ Any changes made during that transaction are committed. Returns an error if there","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":244986,"byte_end":245071,"line_start":400,"line_end":400,"column_start":2,"column_end":87}},{"value":"/ is no open transaction that can be committed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":245073,"byte_end":245122,"line_start":401,"line_end":401,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":245757,"byte_end":245770,"line_start":417,"line_end":417,"column_start":9,"column_end":22},"name":"enter_runtime","qualname":"<OverlayedChanges>::enter_runtime","value":"pub fn enter_runtime(&mut Self) -> Result<(), AlreadyInRuntime>","parent":null,"children":[],"decl_id":null,"docs":" Call this before transfering control to the runtime.","sig":null,"attributes":[{"value":"/ Call this before transfering control to the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":245534,"byte_end":245590,"line_start":413,"line_end":413,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":245592,"byte_end":245595,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ This protects all existing transactions from being removed by the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":245597,"byte_end":245675,"line_start":415,"line_end":415,"column_start":2,"column_end":80}},{"value":"/ Calling this while already inside the runtime will return an error.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":245677,"byte_end":245748,"line_start":416,"line_end":416,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":246348,"byte_end":246360,"line_start":432,"line_end":432,"column_start":9,"column_end":21},"name":"exit_runtime","qualname":"<OverlayedChanges>::exit_runtime","value":"pub fn exit_runtime(&mut Self) -> Result<(), NotInRuntime>","parent":null,"children":[],"decl_id":null,"docs":" Call this when control returns from the runtime.","sig":null,"attributes":[{"value":"/ Call this when control returns from the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":246147,"byte_end":246199,"line_start":428,"line_end":428,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":246201,"byte_end":246204,"line_start":429,"line_end":429,"column_start":2,"column_end":5}},{"value":"/ This commits all dangling transaction left open by the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":246206,"byte_end":246273,"line_start":430,"line_end":430,"column_start":2,"column_end":69}},{"value":"/ Calling this while outside the runtime will return an error.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":246275,"byte_end":246339,"line_start":431,"line_end":431,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":247562,"byte_end":247586,"line_start":471,"line_end":471,"column_start":9,"column_end":33},"name":"offchain_drain_committed","qualname":"<OverlayedChanges>::offchain_drain_committed","value":"pub fn offchain_drain_committed(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Consume all changes (top + children) and return them.","sig":null,"attributes":[{"value":"/ Consume all changes (top + children) and return them.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":247350,"byte_end":247407,"line_start":465,"line_end":465,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":247409,"byte_end":247412,"line_start":466,"line_end":466,"column_start":2,"column_end":5}},{"value":"/ After calling this function no more changes are contained in this changeset.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":247414,"byte_end":247494,"line_start":467,"line_end":467,"column_start":2,"column_end":82}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":247496,"byte_end":247499,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ Panics:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":247501,"byte_end":247512,"line_start":469,"line_end":469,"column_start":2,"column_end":13}},{"value":"/ Panics if `transaction_depth() > 0`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":247514,"byte_end":247553,"line_start":470,"line_end":470,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":247791,"byte_end":247799,"line_start":476,"line_end":476,"column_start":9,"column_end":17},"name":"children","qualname":"<OverlayedChanges>::children","value":"pub fn children(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all child changes as seen by the current transaction.\n","sig":null,"attributes":[{"value":"/ Get an iterator over all child changes as seen by the current transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":247704,"byte_end":247782,"line_start":475,"line_end":475,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":248048,"byte_end":248055,"line_start":482,"line_end":482,"column_start":9,"column_end":16},"name":"changes","qualname":"<OverlayedChanges>::changes","value":"pub fn changes(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all top changes as been by the current transaction.\n","sig":null,"attributes":[{"value":"/ Get an iterator over all top changes as been by the current transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":247963,"byte_end":248039,"line_start":481,"line_end":481,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":248236,"byte_end":248249,"line_start":487,"line_end":487,"column_start":9,"column_end":22},"name":"child_changes","qualname":"<OverlayedChanges>::child_changes","value":"pub fn child_changes(&Self, &[u8]) -> Option<(/*impl Trait*/, &ChildInfo)>","parent":null,"children":[],"decl_id":null,"docs":" Get an optional iterator over all child changes stored under the supplied key.\n","sig":null,"attributes":[{"value":"/ Get an optional iterator over all child changes stored under the supplied key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":248145,"byte_end":248227,"line_start":486,"line_end":486,"column_start":2,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1315},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":248540,"byte_end":248560,"line_start":494,"line_end":494,"column_start":9,"column_end":29},"name":"into_storage_changes","qualname":"<OverlayedChanges>::into_storage_changes","value":"pub fn into_storage_changes<B: Backend<H>, H: Hasher,\n                            N: BlockNumber>(Self, &B,\n                                            Option<&ChangesTrieState<, H, N>>,\n                                            H::Out,\n                                            StorageTransactionCache<B::Transaction,\n                                                                    H, N>)\n-> Result<StorageChanges<B::Transaction, H, N>, DefaultError> where\nH::Out: Ord + Encode + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert this instance with all changes into a [`StorageChanges`] instance.\n","sig":null,"attributes":[{"value":"/ Convert this instance with all changes into a [`StorageChanges`] instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":248428,"byte_end":248506,"line_start":492,"line_end":492,"column_start":2,"column_end":80}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":248508,"byte_end":248531,"line_start":493,"line_end":493,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":249064,"byte_end":249085,"line_start":508,"line_end":508,"column_start":9,"column_end":30},"name":"drain_storage_changes","qualname":"<OverlayedChanges>::drain_storage_changes","value":"pub fn drain_storage_changes<B: Backend<H>, H: Hasher,\n                             N: BlockNumber>(&mut Self, &B,\n                                             Option<&ChangesTrieState<, H,\n                                                                      N>>,\n                                             H::Out,\n                                             &mut StorageTransactionCache<B::Transaction,\n                                                                          H,\n                                                                          N>)\n-> Result<StorageChanges<B::Transaction, H, N>, DefaultError> where\nH::Out: Ord + Encode + 'static","parent":null,"children":[],"decl_id":null,"docs":" Drain all changes into a [`StorageChanges`] instance. Leave empty overlay in place.\n","sig":null,"attributes":[{"value":"/ Drain all changes into a [`StorageChanges`] instance. Leave empty overlay in place.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":248968,"byte_end":249055,"line_start":507,"line_end":507,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":251920,"byte_end":251932,"line_start":585,"line_end":585,"column_start":9,"column_end":21},"name":"storage_root","qualname":"<OverlayedChanges>::storage_root","value":"pub fn storage_root<H: Hasher, N: BlockNumber,\n                    B: Backend<H>>(&Self, &B,\n                                   &mut StorageTransactionCache<B::Transaction,\n                                                                H, N>)\n-> H::Out where H::Out: Ord + Encode","parent":null,"children":[],"decl_id":null,"docs":" Generate the storage root using `backend` and all changes\n as seen by the current transaction.","sig":null,"attributes":[{"value":"/ Generate the storage root using `backend` and all changes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":251721,"byte_end":251782,"line_start":581,"line_end":581,"column_start":2,"column_end":63}},{"value":"/ as seen by the current transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":251784,"byte_end":251823,"line_start":582,"line_end":582,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":251825,"byte_end":251828,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ Returns the storage root and caches storage transaction in the given `cache`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":251830,"byte_end":251911,"line_start":584,"line_end":584,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":252764,"byte_end":252781,"line_start":614,"line_end":614,"column_start":9,"column_end":26},"name":"changes_trie_root","qualname":"<OverlayedChanges>::changes_trie_root","value":"pub fn changes_trie_root<'a, H: Hasher, N: BlockNumber,\n                         B: Backend<H>>(&Self, &B,\n                                        Option<&'a ChangesTrieState>, H::Out,\n                                        bool,\n                                        &mut StorageTransactionCache<B::Transaction,\n                                                                     H, N>)\n-> Result<Option<H::Out>, ()> where H::Out: Ord + Encode + 'static","parent":null,"children":[],"decl_id":null,"docs":" Generate the changes trie root.","sig":null,"attributes":[{"value":"/ Generate the changes trie root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":252504,"byte_end":252539,"line_start":606,"line_end":606,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":252541,"byte_end":252544,"line_start":607,"line_end":607,"column_start":2,"column_end":5}},{"value":"/ Returns the changes trie root and caches the storage transaction into the given `cache`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":252546,"byte_end":252638,"line_start":608,"line_end":608,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":252640,"byte_end":252643,"line_start":609,"line_end":609,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":252645,"byte_end":252657,"line_start":610,"line_end":610,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":252659,"byte_end":252662,"line_start":611,"line_end":611,"column_start":2,"column_end":5}},{"value":"/ Panics on storage error, when `panic_on_storage_error` is set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":252664,"byte_end":252730,"line_start":612,"line_end":612,"column_start":2,"column_end":68}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":252732,"byte_end":252755,"line_start":613,"line_end":613,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":253596,"byte_end":253619,"line_start":638,"line_end":638,"column_start":9,"column_end":32},"name":"next_storage_key_change","qualname":"<OverlayedChanges>::next_storage_key_change","value":"pub fn next_storage_key_change(&Self, &[u8])\n-> Option<(&[u8], &OverlayedValue)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the next (in lexicographic order) storage key in the overlayed alongside its value.\n If no value is next then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Returns the next (in lexicographic order) storage key in the overlayed alongside its value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":253442,"byte_end":253537,"line_start":636,"line_end":636,"column_start":2,"column_end":97}},{"value":"/ If no value is next then `None` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":253539,"byte_end":253587,"line_start":637,"line_end":637,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":253871,"byte_end":253900,"line_start":644,"line_end":644,"column_start":9,"column_end":38},"name":"next_child_storage_key_change","qualname":"<OverlayedChanges>::next_child_storage_key_change","value":"pub fn next_child_storage_key_change(&Self, &[u8], &[u8])\n-> Option<(&[u8], &OverlayedValue)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the next (in lexicographic order) child storage key in the overlayed alongside its\n value.  If no value is next then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Returns the next (in lexicographic order) child storage key in the overlayed alongside its","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":253710,"byte_end":253804,"line_start":642,"line_end":642,"column_start":2,"column_end":96}},{"value":"/ value.  If no value is next then `None` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":253806,"byte_end":253862,"line_start":643,"line_end":643,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":254141,"byte_end":254149,"line_start":657,"line_end":657,"column_start":9,"column_end":17},"name":"offchain","qualname":"<OverlayedChanges>::offchain","value":"pub fn offchain(&Self) -> &OffchainOverlayedChanges","parent":null,"children":[],"decl_id":null,"docs":" Read only access ot offchain overlay.\n","sig":null,"attributes":[{"value":"/ Read only access ot offchain overlay.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":254091,"byte_end":254132,"line_start":656,"line_end":656,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":254278,"byte_end":254298,"line_start":662,"line_end":662,"column_start":9,"column_end":29},"name":"set_offchain_storage","qualname":"<OverlayedChanges>::set_offchain_storage","value":"pub fn set_offchain_storage(&mut Self, &[u8], Option<&[u8]>)","parent":null,"children":[],"decl_id":null,"docs":" Write a key value pair to the offchain storage overlay.\n","sig":null,"attributes":[{"value":"/ Write a key value pair to the offchain storage overlay.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":254210,"byte_end":254269,"line_start":661,"line_end":661,"column_start":2,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1413},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":299629,"byte_end":299651,"line_start":36,"line_end":36,"column_start":12,"column_end":34},"name":"ProvingBackendRecorder","qualname":"::proving_backend::ProvingBackendRecorder","value":"ProvingBackendRecorder {  }","parent":null,"children":[{"krate":0,"index":1417},{"krate":0,"index":1418}],"decl_id":null,"docs":" Patricia trie-based backend specialized in get value proofs.\n","sig":null,"attributes":[{"value":"/ Patricia trie-based backend specialized in get value proofs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":299553,"byte_end":299617,"line_start":35,"line_end":35,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":299972,"byte_end":299979,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"storage","qualname":"<ProvingBackendRecorder>::storage","value":"pub fn storage(&mut Self, &[u8]) -> Result<Option<Vec<u8>>, String>","parent":null,"children":[],"decl_id":null,"docs":" Produce proof for a key query.\n","sig":null,"attributes":[{"value":"/ Produce proof for a key query.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":299929,"byte_end":299963,"line_start":47,"line_end":47,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":300436,"byte_end":300449,"line_start":66,"line_end":66,"column_start":9,"column_end":22},"name":"child_storage","qualname":"<ProvingBackendRecorder>::child_storage","value":"pub fn child_storage(&mut Self, &ChildInfo, &[u8])\n-> Result<Option<Vec<u8>>, String>","parent":null,"children":[],"decl_id":null,"docs":" Produce proof for a child key query.\n","sig":null,"attributes":[{"value":"/ Produce proof for a child key query.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":300387,"byte_end":300427,"line_start":65,"line_end":65,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":301150,"byte_end":301165,"line_start":94,"line_end":94,"column_start":9,"column_end":24},"name":"record_all_keys","qualname":"<ProvingBackendRecorder>::record_all_keys","value":"pub fn record_all_keys(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Produce proof for the whole backend.\n","sig":null,"attributes":[{"value":"/ Produce proof for the whole backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":301101,"byte_end":301141,"line_start":93,"line_end":93,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":1431},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":301701,"byte_end":301714,"line_start":114,"line_end":114,"column_start":10,"column_end":23},"name":"ProofRecorder","qualname":"::proving_backend::ProofRecorder","value":"Arc<RwLock<HashMap<<H as Hasher>::Out, Option<DBValue>>>>","parent":null,"children":[],"decl_id":null,"docs":" Global proof recorder, act as a layer over a hash db for recording queried\n data.\n","sig":null,"attributes":[{"value":"/ Global proof recorder, act as a layer over a hash db for recording queried","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":301603,"byte_end":301681,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/ data.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":301682,"byte_end":301691,"line_start":113,"line_end":113,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1433},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":301945,"byte_end":301959,"line_start":118,"line_end":118,"column_start":12,"column_end":26},"name":"ProvingBackend","qualname":"::proving_backend::ProvingBackend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Patricia trie-based backend which also tracks all touched storage trie values.\n These can be sent to remote node and used as a proof of execution.\n","sig":null,"attributes":[{"value":"/ Patricia trie-based backend which also tracks all touched storage trie values.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":301780,"byte_end":301862,"line_start":116,"line_end":116,"column_start":1,"column_end":83}},{"value":"/ These can be sent to remote node and used as a proof of execution.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":301863,"byte_end":301933,"line_start":117,"line_end":117,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":302401,"byte_end":302404,"line_start":132,"line_end":132,"column_start":9,"column_end":12},"name":"new","qualname":"<ProvingBackend>::new","value":"pub fn new(&'a TrieBackend<S, H>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new proving backend.\n","sig":null,"attributes":[{"value":"/ Create new proving backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":302361,"byte_end":302392,"line_start":131,"line_end":131,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":302610,"byte_end":302627,"line_start":138,"line_end":138,"column_start":9,"column_end":26},"name":"new_with_recorder","qualname":"<ProvingBackend>::new_with_recorder","value":"pub fn new_with_recorder(&'a TrieBackend<S, H>, ProofRecorder<H>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new proving backend with the given recorder.\n","sig":null,"attributes":[{"value":"/ Create new proving backend with the given recorder.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":302546,"byte_end":302601,"line_start":137,"line_end":137,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":302996,"byte_end":303009,"line_start":152,"line_end":152,"column_start":9,"column_end":22},"name":"extract_proof","qualname":"<ProvingBackend>::extract_proof","value":"pub fn extract_proof(&Self) -> StorageProof","parent":null,"children":[],"decl_id":null,"docs":" Extracting the gathered unordered proof.\n","sig":null,"attributes":[{"value":"/ Extracting the gathered unordered proof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":302943,"byte_end":302987,"line_start":151,"line_end":151,"column_start":2,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1495},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":306162,"byte_end":306188,"line_start":283,"line_end":283,"column_start":8,"column_end":34},"name":"create_proof_check_backend","qualname":"::proving_backend::create_proof_check_backend","value":"pub fn create_proof_check_backend<H>(H::Out, StorageProof)\n-> Result<TrieBackend<MemoryDB<H>, H>, Box<Error>> where H: Hasher,\nH::Out: Codec","parent":null,"children":[],"decl_id":null,"docs":" Create proof check backend.\n","sig":null,"attributes":[{"value":"/ Create proof check backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":306123,"byte_end":306154,"line_start":282,"line_end":282,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1528},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":312743,"byte_end":312754,"line_start":33,"line_end":33,"column_start":12,"column_end":23},"name":"TrieBackend","qualname":"::trie_backend::TrieBackend","value":"TrieBackend {  }","parent":null,"children":[{"krate":0,"index":1531}],"decl_id":null,"docs":" Patricia trie-based backend. Transaction type is an overlay of changes to commit.\n","sig":null,"attributes":[{"value":"/ Patricia trie-based backend. Transaction type is an overlay of changes to commit.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":312646,"byte_end":312731,"line_start":32,"line_end":32,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":312971,"byte_end":312974,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieBackend<S, H>>::new","value":"pub fn new(S, H::Out) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new trie-based backend.\n","sig":null,"attributes":[{"value":"/ Create new trie-based backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":312928,"byte_end":312962,"line_start":38,"line_end":38,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313131,"byte_end":313138,"line_start":46,"line_end":46,"column_start":9,"column_end":16},"name":"essence","qualname":"<TrieBackend<S, H>>::essence","value":"pub fn essence(&Self) -> &TrieBackendEssence<S, H>","parent":null,"children":[],"decl_id":null,"docs":" Get backend essence reference.\n","sig":null,"attributes":[{"value":"/ Get backend essence reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313088,"byte_end":313122,"line_start":45,"line_end":45,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1537},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313241,"byte_end":313256,"line_start":51,"line_end":51,"column_start":9,"column_end":24},"name":"backend_storage","qualname":"<TrieBackend<S, H>>::backend_storage","value":"pub fn backend_storage(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get backend storage reference.\n","sig":null,"attributes":[{"value":"/ Get backend storage reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313198,"byte_end":313232,"line_start":50,"line_end":50,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313353,"byte_end":313372,"line_start":56,"line_end":56,"column_start":9,"column_end":28},"name":"backend_storage_mut","qualname":"<TrieBackend<S, H>>::backend_storage_mut","value":"pub fn backend_storage_mut(&mut Self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get backend storage reference.\n","sig":null,"attributes":[{"value":"/ Get backend storage reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313310,"byte_end":313344,"line_start":55,"line_end":55,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1539},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313465,"byte_end":313469,"line_start":61,"line_end":61,"column_start":9,"column_end":13},"name":"root","qualname":"<TrieBackend<S, H>>::root","value":"pub fn root(&Self) -> &H::Out","parent":null,"children":[],"decl_id":null,"docs":" Get trie root.\n","sig":null,"attributes":[{"value":"/ Get trie root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313438,"byte_end":313456,"line_start":60,"line_end":60,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313575,"byte_end":313587,"line_start":66,"line_end":66,"column_start":9,"column_end":21},"name":"into_storage","qualname":"<TrieBackend<S, H>>::into_storage","value":"pub fn into_storage(Self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes self and returns underlying storage.\n","sig":null,"attributes":[{"value":"/ Consumes self and returns underlying storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313517,"byte_end":313566,"line_start":65,"line_end":65,"column_start":2,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":1616},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":322883,"byte_end":322890,"line_start":44,"line_end":44,"column_start":11,"column_end":18},"name":"Storage","qualname":"::trie_backend_essence::Storage","value":"Storage<H: Hasher>: Send + Sync","parent":null,"children":[{"krate":0,"index":1618}],"decl_id":null,"docs":" Patricia trie-based storage trait.\n","sig":null,"attributes":[{"value":"/ Patricia trie-based storage trait.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":322834,"byte_end":322872,"line_start":43,"line_end":43,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1618},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":322943,"byte_end":322946,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"get","qualname":"::trie_backend_essence::Storage::get","value":"pub fn get(&Self, &H::Out, Prefix) -> Result<Option<DBValue>>","parent":{"krate":0,"index":1616},"children":[],"decl_id":null,"docs":" Get a trie node.\n","sig":null,"attributes":[{"value":"/ Get a trie node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":322918,"byte_end":322938,"line_start":45,"line_end":45,"column_start":2,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1619},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323073,"byte_end":323091,"line_start":50,"line_end":50,"column_start":12,"column_end":30},"name":"TrieBackendEssence","qualname":"::trie_backend_essence::TrieBackendEssence","value":"TrieBackendEssence {  }","parent":null,"children":[{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624}],"decl_id":null,"docs":" Patricia trie-based pairs storage essence.\n","sig":null,"attributes":[{"value":"/ Patricia trie-based pairs storage essence.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323015,"byte_end":323061,"line_start":49,"line_end":49,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323312,"byte_end":323315,"line_start":58,"line_end":58,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieBackendEssence<S, H>>::new","value":"pub fn new(S, H::Out) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new trie-based backend.\n","sig":null,"attributes":[{"value":"/ Create new trie-based backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323269,"byte_end":323303,"line_start":57,"line_end":57,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1629},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323475,"byte_end":323490,"line_start":67,"line_end":67,"column_start":9,"column_end":24},"name":"backend_storage","qualname":"<TrieBackendEssence<S, H>>::backend_storage","value":"pub fn backend_storage(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get backend storage reference.\n","sig":null,"attributes":[{"value":"/ Get backend storage reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323432,"byte_end":323466,"line_start":66,"line_end":66,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1630},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323570,"byte_end":323589,"line_start":72,"line_end":72,"column_start":9,"column_end":28},"name":"backend_storage_mut","qualname":"<TrieBackendEssence<S, H>>::backend_storage_mut","value":"pub fn backend_storage_mut(&mut Self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get backend storage reference.\n","sig":null,"attributes":[{"value":"/ Get backend storage reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323527,"byte_end":323561,"line_start":71,"line_end":71,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1631},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323665,"byte_end":323669,"line_start":77,"line_end":77,"column_start":9,"column_end":13},"name":"root","qualname":"<TrieBackendEssence<S, H>>::root","value":"pub fn root(&Self) -> &H::Out","parent":null,"children":[],"decl_id":null,"docs":" Get trie root.\n","sig":null,"attributes":[{"value":"/ Get trie root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323638,"byte_end":323656,"line_start":76,"line_end":76,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1632},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323763,"byte_end":323771,"line_start":82,"line_end":82,"column_start":9,"column_end":17},"name":"set_root","qualname":"<TrieBackendEssence<S, H>>::set_root","value":"pub fn set_root(&mut Self, H::Out)","parent":null,"children":[],"decl_id":null,"docs":" Set trie root. This is useful for testing.\n","sig":null,"attributes":[{"value":"/ Set trie root. This is useful for testing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323708,"byte_end":323754,"line_start":81,"line_end":81,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1633},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323882,"byte_end":323894,"line_start":87,"line_end":87,"column_start":9,"column_end":21},"name":"into_storage","qualname":"<TrieBackendEssence<S, H>>::into_storage","value":"pub fn into_storage(Self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes self and returns underlying storage.\n","sig":null,"attributes":[{"value":"/ Consumes self and returns underlying storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323824,"byte_end":323873,"line_start":86,"line_end":86,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1634},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":324057,"byte_end":324073,"line_start":93,"line_end":93,"column_start":9,"column_end":25},"name":"next_storage_key","qualname":"<TrieBackendEssence<S, H>>::next_storage_key","value":"pub fn next_storage_key(&Self, &[u8]) -> Result<Option<StorageKey>>","parent":null,"children":[],"decl_id":null,"docs":" Return the next key in the trie i.e. the minimum key that is strictly superior to `key` in\n lexicographic order.\n","sig":null,"attributes":[{"value":"/ Return the next key in the trie i.e. the minimum key that is strictly superior to `key` in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323928,"byte_end":324022,"line_start":91,"line_end":91,"column_start":2,"column_end":96}},{"value":"/ lexicographic order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":324024,"byte_end":324048,"line_start":92,"line_end":92,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1636},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":324528,"byte_end":324550,"line_start":104,"line_end":104,"column_start":9,"column_end":31},"name":"next_child_storage_key","qualname":"<TrieBackendEssence<S, H>>::next_child_storage_key","value":"pub fn next_child_storage_key(&Self, &ChildInfo, &[u8])\n-> Result<Option<StorageKey>>","parent":null,"children":[],"decl_id":null,"docs":" Return the next key in the child trie i.e. the minimum key that is strictly superior to\n `key` in lexicographic order.\n","sig":null,"attributes":[{"value":"/ Return the next key in the child trie i.e. the minimum key that is strictly superior to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":324393,"byte_end":324484,"line_start":102,"line_end":102,"column_start":2,"column_end":93}},{"value":"/ `key` in lexicographic order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":324486,"byte_end":324519,"line_start":103,"line_end":103,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1642},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":326614,"byte_end":326621,"line_start":171,"line_end":171,"column_start":9,"column_end":16},"name":"storage","qualname":"<TrieBackendEssence<S, H>>::storage","value":"pub fn storage(&Self, &[u8]) -> Result<Option<StorageValue>>","parent":null,"children":[],"decl_id":null,"docs":" Get the value of storage at given key.\n","sig":null,"attributes":[{"value":"/ Get the value of storage at given key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":326563,"byte_end":326605,"line_start":170,"line_end":170,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1644},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":326865,"byte_end":326878,"line_start":178,"line_end":178,"column_start":9,"column_end":22},"name":"child_storage","qualname":"<TrieBackendEssence<S, H>>::child_storage","value":"pub fn child_storage(&Self, &ChildInfo, &[u8]) -> Result<Option<StorageValue>>","parent":null,"children":[],"decl_id":null,"docs":" Get the value of child storage at given key.\n","sig":null,"attributes":[{"value":"/ Get the value of child storage at given key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":326808,"byte_end":326856,"line_start":177,"line_end":177,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1647},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":327374,"byte_end":327399,"line_start":194,"line_end":194,"column_start":9,"column_end":34},"name":"apply_to_child_keys_while","qualname":"<TrieBackendEssence<S, H>>::apply_to_child_keys_while","value":"pub fn apply_to_child_keys_while<F: FnMut(&[u8]) ->\n                                 bool>(&Self, &ChildInfo, F)","parent":null,"children":[],"decl_id":null,"docs":" Retrieve all entries keys of child storage and call `f` for each of those keys.\n Aborts as soon as `f` returns false.\n","sig":null,"attributes":[{"value":"/ Retrieve all entries keys of child storage and call `f` for each of those keys.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":327240,"byte_end":327323,"line_start":192,"line_end":192,"column_start":2,"column_end":85}},{"value":"/ Aborts as soon as `f` returns false.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":327325,"byte_end":327365,"line_start":193,"line_end":193,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1650},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":327984,"byte_end":328010,"line_start":218,"line_end":218,"column_start":9,"column_end":35},"name":"for_child_keys_with_prefix","qualname":"<TrieBackendEssence<S, H>>::for_child_keys_with_prefix","value":"pub fn for_child_keys_with_prefix<F: FnMut(&[u8]) ->\n                                  ()>(&Self, &ChildInfo, &[u8], F)","parent":null,"children":[],"decl_id":null,"docs":" Execute given closure for all keys starting with prefix.\n","sig":null,"attributes":[{"value":"/ Execute given closure for all keys starting with prefix.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":327915,"byte_end":327975,"line_start":217,"line_end":217,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1654},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":328580,"byte_end":328600,"line_start":237,"line_end":237,"column_start":9,"column_end":29},"name":"for_keys_with_prefix","qualname":"<TrieBackendEssence<S, H>>::for_keys_with_prefix","value":"pub fn for_keys_with_prefix<F: FnMut(&[u8]) -> ()>(&Self, &[u8], F)","parent":null,"children":[],"decl_id":null,"docs":" Execute given closure for all keys starting with prefix.\n","sig":null,"attributes":[{"value":"/ Execute given closure for all keys starting with prefix.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":328511,"byte_end":328571,"line_start":236,"line_end":236,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1660},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":329528,"byte_end":329554,"line_start":274,"line_end":274,"column_start":9,"column_end":35},"name":"for_key_values_with_prefix","qualname":"<TrieBackendEssence<S, H>>::for_key_values_with_prefix","value":"pub fn for_key_values_with_prefix<F: FnMut(&[u8], &[u8]) ->\n                                  ()>(&Self, &[u8], F)","parent":null,"children":[],"decl_id":null,"docs":" Execute given closure for all key and values starting with prefix.\n","sig":null,"attributes":[{"value":"/ Execute given closure for all key and values starting with prefix.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":329449,"byte_end":329519,"line_start":273,"line_end":273,"column_start":2,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":1696},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":331620,"byte_end":331638,"line_start":347,"line_end":347,"column_start":11,"column_end":29},"name":"TrieBackendStorage","qualname":"::trie_backend_essence::TrieBackendStorage","value":"TrieBackendStorage<H: Hasher>: Send + Sync","parent":null,"children":[{"krate":0,"index":1698},{"krate":0,"index":1699}],"decl_id":null,"docs":" Key-value pairs storage that is used by trie backend essence.\n","sig":null,"attributes":[{"value":"/ Key-value pairs storage that is used by trie backend essence.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":331544,"byte_end":331609,"line_start":346,"line_end":346,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1698},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":331703,"byte_end":331710,"line_start":349,"line_end":349,"column_start":7,"column_end":14},"name":"Overlay","qualname":"::trie_backend_essence::TrieBackendStorage::Overlay","value":"type Overlay: hash_db::HashDB<H, DBValue> + Default + Consolidate;","parent":{"krate":0,"index":1696},"children":[],"decl_id":null,"docs":" Type of in-memory overlay.\n","sig":null,"attributes":[{"value":"/ Type of in-memory overlay.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":331666,"byte_end":331696,"line_start":348,"line_end":348,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":331803,"byte_end":331806,"line_start":351,"line_end":351,"column_start":5,"column_end":8},"name":"get","qualname":"::trie_backend_essence::TrieBackendStorage::get","value":"pub fn get(&Self, &H::Out, Prefix) -> Result<Option<DBValue>>","parent":{"krate":0,"index":1696},"children":[],"decl_id":null,"docs":" Get the value stored at key.\n","sig":null,"attributes":[{"value":"/ Get the value stored at key.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":331766,"byte_end":331798,"line_start":350,"line_end":350,"column_start":2,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2443},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337259,"byte_end":337268,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"name":"UsageUnit","qualname":"::stats::UsageUnit","value":"UsageUnit { ops, bytes }","parent":null,"children":[{"krate":0,"index":2444},{"krate":0,"index":2445}],"decl_id":null,"docs":" Measured count of operations and total bytes.\n","sig":null,"attributes":[{"value":"/ Measured count of operations and total bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337165,"byte_end":337214,"line_start":24,"line_end":24,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2444},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337303,"byte_end":337306,"line_start":28,"line_end":28,"column_start":6,"column_end":9},"name":"ops","qualname":"::stats::UsageUnit::ops","value":"u64","parent":{"krate":0,"index":2443},"children":[],"decl_id":null,"docs":" Number of operations.\n","sig":null,"attributes":[{"value":"/ Number of operations.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337272,"byte_end":337297,"line_start":27,"line_end":27,"column_start":2,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2445},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337340,"byte_end":337345,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"name":"bytes","qualname":"::stats::UsageUnit::bytes","value":"u64","parent":{"krate":0,"index":2443},"children":[],"decl_id":null,"docs":" Number of bytes.\n","sig":null,"attributes":[{"value":"/ Number of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337314,"byte_end":337334,"line_start":29,"line_end":29,"column_start":2,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":2452},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337430,"byte_end":337439,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"UsageInfo","qualname":"::stats::UsageInfo","value":"UsageInfo { reads, writes, nodes_writes, overlay_writes, removed_nodes, cache_reads, modified_reads, memory, started, span }","parent":null,"children":[{"krate":0,"index":2453},{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2456},{"krate":0,"index":2457},{"krate":0,"index":2458},{"krate":0,"index":2459},{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2462}],"decl_id":null,"docs":" Usage statistics for state backend.\n","sig":null,"attributes":[{"value":"/ Usage statistics for state backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337355,"byte_end":337394,"line_start":33,"line_end":33,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2453},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337477,"byte_end":337482,"line_start":37,"line_end":37,"column_start":6,"column_end":11},"name":"reads","qualname":"::stats::UsageInfo::reads","value":"stats::UsageUnit","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" Read statistics (total).\n","sig":null,"attributes":[{"value":"/ Read statistics (total).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337443,"byte_end":337471,"line_start":36,"line_end":36,"column_start":2,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2454},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337531,"byte_end":337537,"line_start":39,"line_end":39,"column_start":6,"column_end":12},"name":"writes","qualname":"::stats::UsageInfo::writes","value":"stats::UsageUnit","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" Write statistics (total).\n","sig":null,"attributes":[{"value":"/ Write statistics (total).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337496,"byte_end":337525,"line_start":38,"line_end":38,"column_start":2,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2455},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337589,"byte_end":337601,"line_start":41,"line_end":41,"column_start":6,"column_end":18},"name":"nodes_writes","qualname":"::stats::UsageInfo::nodes_writes","value":"stats::UsageUnit","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" Write trie nodes statistics.\n","sig":null,"attributes":[{"value":"/ Write trie nodes statistics.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337551,"byte_end":337583,"line_start":40,"line_end":40,"column_start":2,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":2456},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337677,"byte_end":337691,"line_start":44,"line_end":44,"column_start":6,"column_end":20},"name":"overlay_writes","qualname":"::stats::UsageInfo::overlay_writes","value":"stats::UsageUnit","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" Write into cached state machine\n change overlay.\n","sig":null,"attributes":[{"value":"/ Write into cached state machine","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337615,"byte_end":337650,"line_start":42,"line_end":42,"column_start":2,"column_end":37}},{"value":"/ change overlay.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337652,"byte_end":337671,"line_start":43,"line_end":43,"column_start":2,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":2457},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337745,"byte_end":337758,"line_start":46,"line_end":46,"column_start":6,"column_end":19},"name":"removed_nodes","qualname":"::stats::UsageInfo::removed_nodes","value":"stats::UsageUnit","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" Removed trie nodes statistics.\n","sig":null,"attributes":[{"value":"/ Removed trie nodes statistics.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337705,"byte_end":337739,"line_start":45,"line_end":45,"column_start":2,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2458},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337804,"byte_end":337815,"line_start":48,"line_end":48,"column_start":6,"column_end":17},"name":"cache_reads","qualname":"::stats::UsageInfo::cache_reads","value":"stats::UsageUnit","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" Cache read statistics.\n","sig":null,"attributes":[{"value":"/ Cache read statistics.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337772,"byte_end":337798,"line_start":47,"line_end":47,"column_start":2,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2459},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337870,"byte_end":337884,"line_start":50,"line_end":50,"column_start":6,"column_end":20},"name":"modified_reads","qualname":"::stats::UsageInfo::modified_reads","value":"stats::UsageUnit","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" Modified value read statistics.\n","sig":null,"attributes":[{"value":"/ Modified value read statistics.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337829,"byte_end":337864,"line_start":49,"line_end":49,"column_start":2,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":2460},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337920,"byte_end":337926,"line_start":52,"line_end":52,"column_start":6,"column_end":12},"name":"memory","qualname":"::stats::UsageInfo::memory","value":"usize","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" Memory used.\n","sig":null,"attributes":[{"value":"/ Memory used.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337898,"byte_end":337914,"line_start":51,"line_end":51,"column_start":2,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2461},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338040,"byte_end":338047,"line_start":56,"line_end":56,"column_start":6,"column_end":13},"name":"started","qualname":"::stats::UsageInfo::started","value":"std::time::Instant","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" Moment at which current statistics has been started being collected.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337937,"byte_end":337960,"line_start":54,"line_end":54,"column_start":2,"column_end":25}},{"value":"/ Moment at which current statistics has been started being collected.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":337962,"byte_end":338034,"line_start":55,"line_end":55,"column_start":2,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":2462},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338121,"byte_end":338125,"line_start":59,"line_end":59,"column_start":6,"column_end":10},"name":"span","qualname":"::stats::UsageInfo::span","value":"std::time::Duration","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" Timespan of the statistics.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338059,"byte_end":338082,"line_start":57,"line_end":57,"column_start":2,"column_end":25}},{"value":"/ Timespan of the statistics.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338084,"byte_end":338115,"line_start":58,"line_end":58,"column_start":2,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2467},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338254,"byte_end":338271,"line_start":65,"line_end":65,"column_start":12,"column_end":29},"name":"StateMachineStats","qualname":"::stats::StateMachineStats","value":"StateMachineStats { reads_modified, bytes_read_modified, writes_overlay, bytes_writes_overlay }","parent":null,"children":[{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471}],"decl_id":null,"docs":" Accumulated usage statistics specific to state machine\n crate.\n","sig":null,"attributes":[{"value":"/ Accumulated usage statistics specific to state machine","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338140,"byte_end":338198,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"/ crate.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338199,"byte_end":338209,"line_start":63,"line_end":63,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2468},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338382,"byte_end":338396,"line_start":69,"line_end":69,"column_start":6,"column_end":20},"name":"reads_modified","qualname":"::stats::StateMachineStats::reads_modified","value":"std::cell::RefCell<u64>","parent":{"krate":0,"index":2467},"children":[],"decl_id":null,"docs":" Number of read query from runtime\n that hit a modified value (in state\n machine overlay).\n","sig":null,"attributes":[{"value":"/ Number of read query from runtime","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338275,"byte_end":338312,"line_start":66,"line_end":66,"column_start":2,"column_end":39}},{"value":"/ that hit a modified value (in state","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338314,"byte_end":338353,"line_start":67,"line_end":67,"column_start":2,"column_end":41}},{"value":"/ machine overlay).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338355,"byte_end":338376,"line_start":68,"line_end":68,"column_start":2,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2469},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338483,"byte_end":338502,"line_start":72,"line_end":72,"column_start":6,"column_end":25},"name":"bytes_read_modified","qualname":"::stats::StateMachineStats::bytes_read_modified","value":"std::cell::RefCell<u64>","parent":{"krate":0,"index":2467},"children":[],"decl_id":null,"docs":" Size in byte of read queries that\n hit a modified value.\n","sig":null,"attributes":[{"value":"/ Size in byte of read queries that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338413,"byte_end":338450,"line_start":70,"line_end":70,"column_start":2,"column_end":39}},{"value":"/ hit a modified value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338452,"byte_end":338477,"line_start":71,"line_end":71,"column_start":2,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2470},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338605,"byte_end":338619,"line_start":75,"line_end":75,"column_start":6,"column_end":20},"name":"writes_overlay","qualname":"::stats::StateMachineStats::writes_overlay","value":"std::cell::RefCell<u64>","parent":{"krate":0,"index":2467},"children":[],"decl_id":null,"docs":" Number of time a write operation\n occurs into the state machine overlay.\n","sig":null,"attributes":[{"value":"/ Number of time a write operation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338519,"byte_end":338555,"line_start":73,"line_end":73,"column_start":2,"column_end":38}},{"value":"/ occurs into the state machine overlay.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338557,"byte_end":338599,"line_start":74,"line_end":74,"column_start":2,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2471},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338697,"byte_end":338717,"line_start":78,"line_end":78,"column_start":6,"column_end":26},"name":"bytes_writes_overlay","qualname":"::stats::StateMachineStats::bytes_writes_overlay","value":"std::cell::RefCell<u64>","parent":{"krate":0,"index":2467},"children":[],"decl_id":null,"docs":" Size in bytes of the writes overlay\n operation.\n","sig":null,"attributes":[{"value":"/ Size in bytes of the writes overlay","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338636,"byte_end":338675,"line_start":76,"line_end":76,"column_start":2,"column_end":41}},{"value":"/ operation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338677,"byte_end":338691,"line_start":77,"line_end":77,"column_start":2,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338809,"byte_end":338812,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"name":"add","qualname":"<StateMachineStats>::add","value":"pub fn add(&Self, &StateMachineStats)","parent":null,"children":[],"decl_id":null,"docs":" Accumulates some registered stats.\n","sig":null,"attributes":[{"value":"/ Accumulates some registered stats.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338762,"byte_end":338800,"line_start":82,"line_end":82,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":339248,"byte_end":339253,"line_start":95,"line_end":95,"column_start":9,"column_end":14},"name":"empty","qualname":"<UsageInfo>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Empty statistics.","sig":null,"attributes":[{"value":"/ Empty statistics.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":339179,"byte_end":339200,"line_start":92,"line_end":92,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":339202,"byte_end":339205,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ Means no data was collected.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":339207,"byte_end":339239,"line_start":94,"line_end":94,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1741},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":339727,"byte_end":339755,"line_start":112,"line_end":112,"column_start":9,"column_end":37},"name":"include_state_machine_states","qualname":"<UsageInfo>::include_state_machine_states","value":"pub fn include_state_machine_states(&mut Self, &StateMachineStats)","parent":null,"children":[],"decl_id":null,"docs":" Add collected state machine to this state.\n","sig":null,"attributes":[{"value":"/ Add collected state machine to this state.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":339672,"byte_end":339718,"line_start":111,"line_end":111,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1743},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":340150,"byte_end":340169,"line_start":122,"line_end":122,"column_start":9,"column_end":28},"name":"tally_read_modified","qualname":"<StateMachineStats>::tally_read_modified","value":"pub fn tally_read_modified(&Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Tally one read modified operation, of some length.\n","sig":null,"attributes":[{"value":"/ Tally one read modified operation, of some length.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":340087,"byte_end":340141,"line_start":121,"line_end":121,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":340361,"byte_end":340380,"line_start":127,"line_end":127,"column_start":9,"column_end":28},"name":"tally_write_overlay","qualname":"<StateMachineStats>::tally_write_overlay","value":"pub fn tally_write_overlay(&Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Tally one write overlay operation, of some length.\n","sig":null,"attributes":[{"value":"/ Tally one write overlay operation, of some length.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":340298,"byte_end":340352,"line_start":126,"line_end":126,"column_start":2,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":1763},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341577,"byte_end":341589,"line_start":35,"line_end":35,"column_start":11,"column_end":23},"name":"InspectState","qualname":"::read_only::InspectState","value":"InspectState<H: Hasher, B: Backend<H>>","parent":null,"children":[{"krate":0,"index":1766}],"decl_id":null,"docs":" Trait for inspecting state in any backend.","sig":null,"attributes":[{"value":"/ Trait for inspecting state in any backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341483,"byte_end":341529,"line_start":32,"line_end":32,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341530,"byte_end":341533,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Implemented for any backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341534,"byte_end":341566,"line_start":34,"line_end":34,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341808,"byte_end":341821,"line_start":42,"line_end":42,"column_start":5,"column_end":18},"name":"inspect_state","qualname":"::read_only::InspectState::inspect_state","value":"pub fn inspect_state<F: FnOnce() -> R, R>(&Self, F) -> R","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" Inspect state with a closure.","sig":null,"attributes":[{"value":"/ Inspect state with a closure.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341619,"byte_end":341652,"line_start":36,"line_end":36,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341654,"byte_end":341657,"line_start":37,"line_end":37,"column_start":2,"column_end":5}},{"value":"/ Self will be set as read-only externalities and inspection","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341659,"byte_end":341721,"line_start":38,"line_end":38,"column_start":2,"column_end":64}},{"value":"/ closure will be run against it.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341723,"byte_end":341758,"line_start":39,"line_end":39,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341760,"byte_end":341763,"line_start":40,"line_end":40,"column_start":2,"column_end":5}},{"value":"/ Returns the result of the closure.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341765,"byte_end":341803,"line_start":41,"line_end":41,"column_start":2,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2478},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342220,"byte_end":342241,"line_start":56,"line_end":56,"column_start":12,"column_end":33},"name":"ReadOnlyExternalities","qualname":"::read_only::ReadOnlyExternalities","value":"ReadOnlyExternalities {  }","parent":null,"children":[{"krate":0,"index":2482},{"krate":0,"index":2483}],"decl_id":null,"docs":" Simple read-only externalities for any backend.","sig":null,"attributes":[{"value":"/ Simple read-only externalities for any backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342040,"byte_end":342091,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342092,"byte_end":342095,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ To be used in test for state inspection. Will panic if something writes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342096,"byte_end":342171,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ to the storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342172,"byte_end":342191,"line_start":54,"line_end":54,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342718,"byte_end":342730,"line_start":71,"line_end":71,"column_start":9,"column_end":21},"name":"execute_with","qualname":"<ReadOnlyExternalities>::execute_with","value":"pub fn execute_with<R, impl FnOnce() -> R: FnOnce() ->\n                    R>(&mut Self, impl FnOnce() -> R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Execute the given closure while `self` is set as externalities.","sig":null,"attributes":[{"value":"/ Execute the given closure while `self` is set as externalities.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342591,"byte_end":342658,"line_start":68,"line_end":68,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342660,"byte_end":342663,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ Returns the result of the given closure.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342665,"byte_end":342709,"line_start":70,"line_end":70,"column_start":2,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1832},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2333,"byte_end":2345,"line_start":105,"line_end":105,"column_start":10,"column_end":22},"name":"DefaultError","qualname":"::DefaultError","value":"String","parent":null,"children":[],"decl_id":null,"docs":" Default error type to use with state machine trie backend.\n","sig":null,"attributes":[{"value":"/ Default error type to use with state machine trie backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2237,"byte_end":2299,"line_start":103,"line_end":103,"column_start":1,"column_end":63}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":2300,"byte_end":2323,"line_start":104,"line_end":104,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":1925},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5206,"byte_end":5220,"line_start":190,"line_end":190,"column_start":11,"column_end":25},"name":"DefaultHandler","qualname":"::execution::DefaultHandler","value":"fn(: CallResult<R, E>, : CallResult<R, E>) -> CallResult<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Default handler of the execution manager.\n","sig":null,"attributes":[{"value":"/ Default handler of the execution manager.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5150,"byte_end":5195,"line_start":189,"line_end":189,"column_start":2,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1928},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5339,"byte_end":5361,"line_start":193,"line_end":193,"column_start":11,"column_end":33},"name":"ChangesTrieTransaction","qualname":"::execution::ChangesTrieTransaction","value":"(MemoryDB<H>, ChangesTrieCacheAction<<H as Hasher>::Out, N>)","parent":null,"children":[],"decl_id":null,"docs":" Type of changes trie transaction.\n","sig":null,"attributes":[{"value":"/ Type of changes trie transaction.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5291,"byte_end":5328,"line_start":192,"line_end":192,"column_start":2,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":1931},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5493,"byte_end":5508,"line_start":199,"line_end":199,"column_start":11,"column_end":26},"name":"InMemoryBackend","qualname":"::execution::InMemoryBackend","value":"TrieBackend<MemoryDB<H>, H>","parent":null,"children":[],"decl_id":null,"docs":" Trie backend with in-memory storage.\n","sig":null,"attributes":[{"value":"/ Trie backend with in-memory storage.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5442,"byte_end":5482,"line_start":198,"line_end":198,"column_start":2,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2490},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5803,"byte_end":5821,"line_start":206,"line_end":206,"column_start":3,"column_end":21},"name":"NativeWhenPossible","qualname":"::execution::ExecutionStrategy::NativeWhenPossible","value":"ExecutionStrategy::NativeWhenPossible","parent":{"krate":0,"index":2489},"children":[],"decl_id":null,"docs":" Execute with the native equivalent if it is compatible with the given wasm module;\n otherwise fall back to the wasm.\n","sig":null,"attributes":[{"value":"/ Execute with the native equivalent if it is compatible with the given wasm module;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5675,"byte_end":5761,"line_start":204,"line_end":204,"column_start":3,"column_end":89}},{"value":"/ otherwise fall back to the wasm.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5764,"byte_end":5800,"line_start":205,"line_end":205,"column_start":3,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2492},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5858,"byte_end":5868,"line_start":208,"line_end":208,"column_start":3,"column_end":13},"name":"AlwaysWasm","qualname":"::execution::ExecutionStrategy::AlwaysWasm","value":"ExecutionStrategy::AlwaysWasm","parent":{"krate":0,"index":2489},"children":[],"decl_id":null,"docs":" Use the given wasm module.\n","sig":null,"attributes":[{"value":"/ Use the given wasm module.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5825,"byte_end":5855,"line_start":207,"line_end":207,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2494},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5977,"byte_end":5981,"line_start":210,"line_end":210,"column_start":3,"column_end":7},"name":"Both","qualname":"::execution::ExecutionStrategy::Both","value":"ExecutionStrategy::Both","parent":{"krate":0,"index":2489},"children":[],"decl_id":null,"docs":" Run with both the wasm and the native variant (if compatible). Report any discrepancy as an error.\n","sig":null,"attributes":[{"value":"/ Run with both the wasm and the native variant (if compatible). Report any discrepancy as an error.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5872,"byte_end":5974,"line_start":209,"line_end":209,"column_start":3,"column_end":105}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2496},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6050,"byte_end":6064,"line_start":212,"line_end":212,"column_start":3,"column_end":17},"name":"NativeElseWasm","qualname":"::execution::ExecutionStrategy::NativeElseWasm","value":"ExecutionStrategy::NativeElseWasm","parent":{"krate":0,"index":2489},"children":[],"decl_id":null,"docs":" First native, then if that fails or is not possible, wasm.\n","sig":null,"attributes":[{"value":"/ First native, then if that fails or is not possible, wasm.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5985,"byte_end":6047,"line_start":211,"line_end":211,"column_start":3,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":2489},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5653,"byte_end":5670,"line_start":203,"line_end":203,"column_start":11,"column_end":28},"name":"ExecutionStrategy","qualname":"::execution::ExecutionStrategy","value":"pub enum ExecutionStrategy {\n\n    /// Execute with the native equivalent if it is compatible with the given wasm module;\n    /// otherwise fall back to the wasm.\n    NativeWhenPossible,\n\n    /// Use the given wasm module.\n    AlwaysWasm,\n\n    /// Run with both the wasm and the native variant (if compatible). Report any discrepancy as an error.\n    Both,\n\n    /// First native, then if that fails or is not possible, wasm.\n    NativeElseWasm,\n}","parent":null,"children":[{"krate":0,"index":2490},{"krate":0,"index":2492},{"krate":0,"index":2494},{"krate":0,"index":2496}],"decl_id":null,"docs":" Strategy for executing a call into the runtime.\n","sig":null,"attributes":[{"value":"/ Strategy for executing a call into the runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":5545,"byte_end":5596,"line_start":201,"line_end":201,"column_start":2,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2510},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6240,"byte_end":6247,"line_start":219,"line_end":219,"column_start":3,"column_end":10},"name":"Trusted","qualname":"::execution::BackendTrustLevel::Trusted","value":"BackendTrustLevel::Trusted","parent":{"krate":0,"index":2509},"children":[],"decl_id":null,"docs":" Panics from trusted backends are considered justified, and never caught.\n","sig":null,"attributes":[{"value":"/ Panics from trusted backends are considered justified, and never caught.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6161,"byte_end":6237,"line_start":218,"line_end":218,"column_start":3,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2512},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6437,"byte_end":6446,"line_start":223,"line_end":223,"column_start":3,"column_end":12},"name":"Untrusted","qualname":"::execution::BackendTrustLevel::Untrusted","value":"BackendTrustLevel::Untrusted","parent":{"krate":0,"index":2509},"children":[],"decl_id":null,"docs":" Panics from untrusted backend are caught and interpreted as runtime error.\n Untrusted backend may be missing some parts of the trie, so panics are not considered\n fatal.\n","sig":null,"attributes":[{"value":"/ Panics from untrusted backend are caught and interpreted as runtime error.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6251,"byte_end":6329,"line_start":220,"line_end":220,"column_start":3,"column_end":81}},{"value":"/ Untrusted backend may be missing some parts of the trie, so panics are not considered","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6332,"byte_end":6421,"line_start":221,"line_end":221,"column_start":3,"column_end":92}},{"value":"/ fatal.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6424,"byte_end":6434,"line_start":222,"line_end":222,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":2509},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6139,"byte_end":6156,"line_start":217,"line_end":217,"column_start":11,"column_end":28},"name":"BackendTrustLevel","qualname":"::execution::BackendTrustLevel","value":"pub enum BackendTrustLevel {\n\n    /// Panics from trusted backends are considered justified, and never caught.\n    Trusted,\n\n    /// Panics from untrusted backend are caught and interpreted as runtime error.\n    /// Untrusted backend may be missing some parts of the trie, so panics are not considered\n    /// fatal.\n    Untrusted,\n}","parent":null,"children":[{"krate":0,"index":2510},{"krate":0,"index":2512}],"decl_id":null,"docs":" Storage backend trust level.\n","sig":null,"attributes":[{"value":"/ Storage backend trust level.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6071,"byte_end":6103,"line_start":215,"line_end":215,"column_start":2,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2520},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6722,"byte_end":6740,"line_start":231,"line_end":231,"column_start":3,"column_end":21},"name":"NativeWhenPossible","qualname":"::execution::ExecutionManager::NativeWhenPossible","value":"ExecutionManager::NativeWhenPossible","parent":{"krate":0,"index":2518},"children":[],"decl_id":null,"docs":" Execute with the native equivalent if it is compatible with the given wasm module;\n otherwise fall back to the wasm.\n","sig":null,"attributes":[{"value":"/ Execute with the native equivalent if it is compatible with the given wasm module;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6594,"byte_end":6680,"line_start":229,"line_end":229,"column_start":3,"column_end":89}},{"value":"/ otherwise fall back to the wasm.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6683,"byte_end":6719,"line_start":230,"line_end":230,"column_start":3,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2522},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":7017,"byte_end":7027,"line_start":235,"line_end":235,"column_start":3,"column_end":13},"name":"AlwaysWasm","qualname":"::execution::ExecutionManager::AlwaysWasm","value":"ExecutionManager::AlwaysWasm(BackendTrustLevel)","parent":{"krate":0,"index":2518},"children":[],"decl_id":null,"docs":" Use the given wasm module. The backend on which code is executed code could be\n trusted to provide all storage or not (i.e. the light client cannot be trusted to provide\n for all storage queries since the storage entries it has come from an external node).\n","sig":null,"attributes":[{"value":"/ Use the given wasm module. The backend on which code is executed code could be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6744,"byte_end":6826,"line_start":232,"line_end":232,"column_start":3,"column_end":85}},{"value":"/ trusted to provide all storage or not (i.e. the light client cannot be trusted to provide","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6829,"byte_end":6922,"line_start":233,"line_end":233,"column_start":3,"column_end":96}},{"value":"/ for all storage queries since the storage entries it has come from an external node).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6925,"byte_end":7014,"line_start":234,"line_end":234,"column_start":3,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2525},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":7160,"byte_end":7164,"line_start":237,"line_end":237,"column_start":3,"column_end":7},"name":"Both","qualname":"::execution::ExecutionManager::Both","value":"ExecutionManager::Both(F)","parent":{"krate":0,"index":2518},"children":[],"decl_id":null,"docs":" Run with both the wasm and the native variant (if compatible). Call `F` in the case of any discrepancy.\n","sig":null,"attributes":[{"value":"/ Run with both the wasm and the native variant (if compatible). Call `F` in the case of any discrepancy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":7050,"byte_end":7157,"line_start":236,"line_end":236,"column_start":3,"column_end":110}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2528},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":7236,"byte_end":7250,"line_start":239,"line_end":239,"column_start":3,"column_end":17},"name":"NativeElseWasm","qualname":"::execution::ExecutionManager::NativeElseWasm","value":"ExecutionManager::NativeElseWasm","parent":{"krate":0,"index":2518},"children":[],"decl_id":null,"docs":" First native, then if that fails or is not possible, wasm.\n","sig":null,"attributes":[{"value":"/ First native, then if that fails or is not possible, wasm.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":7171,"byte_end":7233,"line_start":238,"line_end":238,"column_start":3,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":2518},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6570,"byte_end":6586,"line_start":228,"line_end":228,"column_start":11,"column_end":27},"name":"ExecutionManager","qualname":"::execution::ExecutionManager","value":"pub enum ExecutionManager<F> {\n\n    /// Execute with the native equivalent if it is compatible with the given wasm module;\n    /// otherwise fall back to the wasm.\n    NativeWhenPossible,\n\n    /// Use the given wasm module. The backend on which code is executed code could be\n    /// trusted to provide all storage or not (i.e. the light client cannot be trusted to provide\n    /// for all storage queries since the storage entries it has come from an external node).\n    AlwaysWasm(BackendTrustLevel),\n\n    /// Run with both the wasm and the native variant (if compatible). Call `F` in the case of any discrepancy.\n    Both(F),\n\n    /// First native, then if that fails or is not possible, wasm.\n    NativeElseWasm,\n}","parent":null,"children":[{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2525},{"krate":0,"index":2528}],"decl_id":null,"docs":" Like `ExecutionStrategy` only it also stores a handler in case of consensus failure.\n","sig":null,"attributes":[{"value":"/ Like `ExecutionStrategy` only it also stores a handler in case of consensus failure.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":6453,"byte_end":6541,"line_start":226,"line_end":226,"column_start":2,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1938},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":7784,"byte_end":7795,"line_start":255,"line_end":255,"column_start":10,"column_end":21},"name":"get_manager","qualname":"<ExecutionStrategy>::get_manager","value":"pub fn get_manager<E: fmt::Debug, R: Decode + Encode>(Self)\n-> ExecutionManager<DefaultHandler<R, E>>","parent":null,"children":[],"decl_id":null,"docs":" Gets the corresponding manager for the execution strategy.\n","sig":null,"attributes":[{"value":"/ Gets the corresponding manager for the execution strategy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":7712,"byte_end":7774,"line_start":254,"line_end":254,"column_start":3,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1942},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":8611,"byte_end":8627,"line_start":277,"line_end":277,"column_start":9,"column_end":25},"name":"native_else_wasm","qualname":"::execution::native_else_wasm","value":"pub fn native_else_wasm<E, R: Decode>()\n-> ExecutionManager<DefaultHandler<R, E>>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate to ExecutionManager::NativeElseWasm, without having to figure out the type.\n","sig":null,"attributes":[{"value":"/ Evaluate to ExecutionManager::NativeElseWasm, without having to figure out the type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":8514,"byte_end":8602,"line_start":276,"line_end":276,"column_start":2,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":1951},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":9276,"byte_end":9288,"line_start":292,"line_end":292,"column_start":13,"column_end":25},"name":"StateMachine","qualname":"::execution::StateMachine","value":"StateMachine {  }","parent":null,"children":[{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966}],"decl_id":null,"docs":" The substrate state machine.\n","sig":null,"attributes":[{"value":"/ The substrate state machine.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":9231,"byte_end":9263,"line_start":291,"line_end":291,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1980},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":10226,"byte_end":10229,"line_start":328,"line_end":328,"column_start":10,"column_end":13},"name":"new","qualname":"<StateMachine>::new","value":"pub fn new<impl SpawnNamed + Send + 'static: SpawnNamed + Send +\n           'static>(&'a B, Option<ChangesTrieState>, &'a mut OverlayedChanges,\n                    &'a Exec, &'a str, &'a [u8], Extensions, &'a RuntimeCode,\n                    impl SpawnNamed + Send + 'static) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates new substrate state machine.\n","sig":null,"attributes":[{"value":"/ Creates new substrate state machine.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":10176,"byte_end":10216,"line_start":327,"line_end":327,"column_start":3,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11187,"byte_end":11217,"line_start":361,"line_end":361,"column_start":10,"column_end":40},"name":"with_storage_transaction_cache","qualname":"<StateMachine>::with_storage_transaction_cache","value":"pub fn with_storage_transaction_cache(Self,\n                                      Option<&'a mut StorageTransactionCache<B::Transaction,\n                                                                             H,\n                                                                             N>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Use given `cache` as storage transaction cache.","sig":null,"attributes":[{"value":"/ Use given `cache` as storage transaction cache.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":10897,"byte_end":10948,"line_start":356,"line_end":356,"column_start":3,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":10951,"byte_end":10954,"line_start":357,"line_end":357,"column_start":3,"column_end":6}},{"value":"/ The cache will be used to cache storage transactions that can be build while executing a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":10957,"byte_end":11049,"line_start":358,"line_end":358,"column_start":3,"column_end":95}},{"value":"/ function in the runtime. For example, when calculating the storage root a transaction is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11052,"byte_end":11144,"line_start":359,"line_end":359,"column_start":3,"column_end":95}},{"value":"/ build that will be cached.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11147,"byte_end":11177,"line_start":360,"line_end":360,"column_start":3,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11800,"byte_end":11807,"line_start":377,"line_end":377,"column_start":10,"column_end":17},"name":"execute","qualname":"<StateMachine>::execute","value":"pub fn execute(&mut Self, ExecutionStrategy) -> Result<Vec<u8>, Box<Error>>","parent":null,"children":[],"decl_id":null,"docs":" Execute a call using the given state backend, overlayed changes, and call executor.","sig":null,"attributes":[{"value":"/ Execute a call using the given state backend, overlayed changes, and call executor.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11377,"byte_end":11464,"line_start":369,"line_end":369,"column_start":3,"column_end":90}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11467,"byte_end":11470,"line_start":370,"line_end":370,"column_start":3,"column_end":6}},{"value":"/ On an error, no prospective changes are written to the overlay.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11473,"byte_end":11540,"line_start":371,"line_end":371,"column_start":3,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11543,"byte_end":11546,"line_start":372,"line_end":372,"column_start":3,"column_end":6}},{"value":"/ Note: changes to code will be in place if this call is made again. For running partial","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11549,"byte_end":11639,"line_start":373,"line_end":373,"column_start":3,"column_end":93}},{"value":"/ blocks (e.g. a transaction at a time), ensure a different method is used.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11642,"byte_end":11719,"line_start":374,"line_end":374,"column_start":3,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11722,"byte_end":11725,"line_start":375,"line_end":375,"column_start":3,"column_end":6}},{"value":"/ Returns the SCALE encoded result of the executed function.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":11728,"byte_end":11790,"line_start":376,"line_end":376,"column_start":3,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":15626,"byte_end":15665,"line_start":518,"line_end":518,"column_start":10,"column_end":49},"name":"execute_using_consensus_failure_handler","qualname":"<StateMachine>::execute_using_consensus_failure_handler","value":"pub fn execute_using_consensus_failure_handler<Handler, R,\n                                               NC>(&mut Self,\n                                                   ExecutionManager<Handler>,\n                                                   Option<NC>)\n-> Result<NativeOrEncoded<R>, Box<Error>> where R: Decode + Encode +\nPartialEq, NC: FnOnce() -> result::Result<R, String> + UnwindSafe,\nHandler: FnOnce(CallResult<R, Exec::Error>, CallResult<R, Exec::Error>) ->\nCallResult<R, Exec::Error>","parent":null,"children":[],"decl_id":null,"docs":" Execute a call using the given state backend, overlayed changes, and call executor.","sig":null,"attributes":[{"value":"/ Execute a call using the given state backend, overlayed changes, and call executor.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":15140,"byte_end":15227,"line_start":509,"line_end":509,"column_start":3,"column_end":90}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":15230,"byte_end":15233,"line_start":510,"line_end":510,"column_start":3,"column_end":6}},{"value":"/ On an error, no prospective changes are written to the overlay.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":15236,"byte_end":15303,"line_start":511,"line_end":511,"column_start":3,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":15306,"byte_end":15309,"line_start":512,"line_end":512,"column_start":3,"column_end":6}},{"value":"/ Note: changes to code will be in place if this call is made again. For running partial","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":15312,"byte_end":15402,"line_start":513,"line_end":513,"column_start":3,"column_end":93}},{"value":"/ blocks (e.g. a transaction at a time), ensure a different method is used.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":15405,"byte_end":15482,"line_start":514,"line_end":514,"column_start":3,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":15485,"byte_end":15488,"line_start":515,"line_end":515,"column_start":3,"column_end":6}},{"value":"/ Returns the result of the executed function either in native representation `R` or","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":15491,"byte_end":15577,"line_start":516,"line_end":516,"column_start":3,"column_end":89}},{"value":"/ in SCALE encoded representation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":15580,"byte_end":15616,"line_start":517,"line_end":517,"column_start":3,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":1999},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":17081,"byte_end":17096,"line_start":565,"line_end":565,"column_start":9,"column_end":24},"name":"prove_execution","qualname":"::execution::prove_execution","value":"pub fn prove_execution<B, H, N, Exec,\n                       Spawn>(B, &mut OverlayedChanges, &Exec, Spawn, &str,\n                              &[u8], &RuntimeCode)\n-> Result<(Vec<u8>, StorageProof), Box<Error>> where B: Backend<H>, H: Hasher,\nH::Out: Ord + 'static + codec::Codec, Exec: CodeExecutor + Clone + 'static,\nN: crate::changes_trie::BlockNumber, Spawn: SpawnNamed + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Prove execution using the given state backend, overlayed changes, and call executor.\n","sig":null,"attributes":[{"value":"/ Prove execution using the given state backend, overlayed changes, and call executor.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":16984,"byte_end":17072,"line_start":564,"line_end":564,"column_start":2,"column_end":90}}]},{"kind":"Function","id":{"krate":0,"index":2006},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":18386,"byte_end":18417,"line_start":604,"line_end":604,"column_start":9,"column_end":40},"name":"prove_execution_on_trie_backend","qualname":"::execution::prove_execution_on_trie_backend","value":"pub fn prove_execution_on_trie_backend<S, H, N, Exec,\n                                       Spawn>(&TrieBackend<S, H>,\n                                              &mut OverlayedChanges, &Exec,\n                                              Spawn, &str, &[u8],\n                                              &RuntimeCode)\n-> Result<(Vec<u8>, StorageProof), Box<Error>> where\nS: trie_backend_essence::TrieBackendStorage<H>, H: Hasher, H::Out: Ord +\n'static + codec::Codec, Exec: CodeExecutor + 'static + Clone,\nN: crate::changes_trie::BlockNumber, Spawn: SpawnNamed + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Prove execution using the given trie backend, overlayed changes, and call executor.\n Produces a state-backend-specific \"transaction\" which can be used to apply the changes\n to the backing store, such as the disk.\n Execution proof is the set of all 'touched' storage DBValues from the backend.","sig":null,"attributes":[{"value":"/ Prove execution using the given trie backend, overlayed changes, and call executor.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":17819,"byte_end":17906,"line_start":595,"line_end":595,"column_start":2,"column_end":89}},{"value":"/ Produces a state-backend-specific \"transaction\" which can be used to apply the changes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":17908,"byte_end":17998,"line_start":596,"line_end":596,"column_start":2,"column_end":92}},{"value":"/ to the backing store, such as the disk.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":18000,"byte_end":18043,"line_start":597,"line_end":597,"column_start":2,"column_end":45}},{"value":"/ Execution proof is the set of all 'touched' storage DBValues from the backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":18045,"byte_end":18127,"line_start":598,"line_end":598,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":18129,"byte_end":18132,"line_start":599,"line_end":599,"column_start":2,"column_end":5}},{"value":"/ On an error, no prospective changes are written to the overlay.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":18134,"byte_end":18201,"line_start":600,"line_end":600,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":18203,"byte_end":18206,"line_start":601,"line_end":601,"column_start":2,"column_end":5}},{"value":"/ Note: changes to code will be in place if this call is made again. For running partial","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":18208,"byte_end":18298,"line_start":602,"line_end":602,"column_start":2,"column_end":92}},{"value":"/ blocks (e.g. a transaction at a time), ensure a different method is used.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":18300,"byte_end":18377,"line_start":603,"line_end":603,"column_start":2,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":2012},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":19450,"byte_end":19471,"line_start":643,"line_end":643,"column_start":9,"column_end":30},"name":"execution_proof_check","qualname":"::execution::execution_proof_check","value":"pub fn execution_proof_check<H, N, Exec,\n                             Spawn>(H::Out, StorageProof,\n                                    &mut OverlayedChanges, &Exec, Spawn, &str,\n                                    &[u8], &RuntimeCode)\n-> Result<Vec<u8>, Box<Error>> where H: Hasher, Exec: CodeExecutor + Clone +\n'static, H::Out: Ord + 'static + codec::Codec,\nN: crate::changes_trie::BlockNumber, Spawn: SpawnNamed + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Check execution proof, generated by `prove_execution` call.\n","sig":null,"attributes":[{"value":"/ Check execution proof, generated by `prove_execution` call.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":19378,"byte_end":19441,"line_start":642,"line_end":642,"column_start":2,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":2017},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":20215,"byte_end":20252,"line_start":673,"line_end":673,"column_start":9,"column_end":46},"name":"execution_proof_check_on_trie_backend","qualname":"::execution::execution_proof_check_on_trie_backend","value":"pub fn execution_proof_check_on_trie_backend<H, N, Exec,\n                                             Spawn>(&TrieBackend<MemoryDB<H>,\n                                                                 H>,\n                                                    &mut OverlayedChanges,\n                                                    &Exec, Spawn, &str, &[u8],\n                                                    &RuntimeCode)\n-> Result<Vec<u8>, Box<Error>> where H: Hasher, H::Out: Ord + 'static +\ncodec::Codec, Exec: CodeExecutor + Clone + 'static,\nN: crate::changes_trie::BlockNumber, Spawn: SpawnNamed + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Check execution proof on proving backend, generated by `prove_execution` call.\n","sig":null,"attributes":[{"value":"/ Check execution proof on proving backend, generated by `prove_execution` call.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":20124,"byte_end":20206,"line_start":672,"line_end":672,"column_start":2,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":2022},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":21066,"byte_end":21076,"line_start":708,"line_end":708,"column_start":9,"column_end":19},"name":"prove_read","qualname":"::execution::prove_read","value":"pub fn prove_read<B, H, I>(B, I) -> Result<StorageProof, Box<Error>> where\nB: Backend<H>, H: Hasher, H::Out: Ord + Codec, I: IntoIterator,\nI::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Generate storage read proof.\n","sig":null,"attributes":[{"value":"/ Generate storage read proof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":21025,"byte_end":21057,"line_start":707,"line_end":707,"column_start":2,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":2027},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":21509,"byte_end":21525,"line_start":727,"line_end":727,"column_start":9,"column_end":25},"name":"prove_child_read","qualname":"::execution::prove_child_read","value":"pub fn prove_child_read<B, H, I>(B, &ChildInfo, I)\n-> Result<StorageProof, Box<Error>> where B: Backend<H>, H: Hasher,\nH::Out: Ord + Codec, I: IntoIterator, I::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Generate child storage read proof.\n","sig":null,"attributes":[{"value":"/ Generate child storage read proof.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":21462,"byte_end":21500,"line_start":726,"line_end":726,"column_start":2,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":2032},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":22015,"byte_end":22041,"line_start":745,"line_end":745,"column_start":9,"column_end":35},"name":"prove_read_on_trie_backend","qualname":"::execution::prove_read_on_trie_backend","value":"pub fn prove_read_on_trie_backend<S, H, I>(&TrieBackend<S, H>, I)\n-> Result<StorageProof, Box<Error>> where\nS: trie_backend_essence::TrieBackendStorage<H>, H: Hasher, H::Out: Ord +\nCodec, I: IntoIterator, I::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Generate storage read proof on pre-created trie backend.\n","sig":null,"attributes":[{"value":"/ Generate storage read proof on pre-created trie backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":21946,"byte_end":22006,"line_start":744,"line_end":744,"column_start":2,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":2037},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":22609,"byte_end":22641,"line_start":766,"line_end":766,"column_start":9,"column_end":41},"name":"prove_child_read_on_trie_backend","qualname":"::execution::prove_child_read_on_trie_backend","value":"pub fn prove_child_read_on_trie_backend<S, H,\n                                        I>(&TrieBackend<S, H>, &ChildInfo, I)\n-> Result<StorageProof, Box<Error>> where\nS: trie_backend_essence::TrieBackendStorage<H>, H: Hasher, H::Out: Ord +\nCodec, I: IntoIterator, I::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Generate storage read proof on pre-created trie backend.\n","sig":null,"attributes":[{"value":"/ Generate storage read proof on pre-created trie backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":22540,"byte_end":22600,"line_start":765,"line_end":765,"column_start":2,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":2042},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":23254,"byte_end":23270,"line_start":788,"line_end":788,"column_start":9,"column_end":25},"name":"read_proof_check","qualname":"::execution::read_proof_check","value":"pub fn read_proof_check<H, I>(H::Out, StorageProof, I)\n-> Result<HashMap<Vec<u8>, Option<Vec<u8>>>, Box<Error>> where H: Hasher,\nH::Out: Ord + Codec, I: IntoIterator, I::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Check storage read proof, generated by `prove_read` call.\n","sig":null,"attributes":[{"value":"/ Check storage read proof, generated by `prove_read` call.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":23184,"byte_end":23245,"line_start":787,"line_end":787,"column_start":2,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":2045},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":23856,"byte_end":23878,"line_start":809,"line_end":809,"column_start":9,"column_end":31},"name":"read_child_proof_check","qualname":"::execution::read_child_proof_check","value":"pub fn read_child_proof_check<H, I>(H::Out, StorageProof, &ChildInfo, I)\n-> Result<HashMap<Vec<u8>, Option<Vec<u8>>>, Box<Error>> where H: Hasher,\nH::Out: Ord + Codec, I: IntoIterator, I::Item: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Check child storage read proof, generated by `prove_child_read` call.\n","sig":null,"attributes":[{"value":"/ Check child storage read proof, generated by `prove_child_read` call.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":23774,"byte_end":23847,"line_start":808,"line_end":808,"column_start":2,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":2048},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":24513,"byte_end":24548,"line_start":835,"line_end":835,"column_start":9,"column_end":44},"name":"read_proof_check_on_proving_backend","qualname":"::execution::read_proof_check_on_proving_backend","value":"pub fn read_proof_check_on_proving_backend<H>(&TrieBackend<MemoryDB<H>, H>,\n                                              &[u8])\n-> Result<Option<Vec<u8>>, Box<Error>> where H: Hasher, H::Out: Ord + Codec","parent":null,"children":[],"decl_id":null,"docs":" Check storage read proof on pre-created proving backend.\n","sig":null,"attributes":[{"value":"/ Check storage read proof on pre-created proving backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":24444,"byte_end":24504,"line_start":834,"line_end":834,"column_start":2,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":2051},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":24862,"byte_end":24903,"line_start":847,"line_end":847,"column_start":9,"column_end":50},"name":"read_child_proof_check_on_proving_backend","qualname":"::execution::read_child_proof_check_on_proving_backend","value":"pub fn read_child_proof_check_on_proving_backend<H>(&TrieBackend<MemoryDB<H>,\n                                                                 H>,\n                                                    &ChildInfo, &[u8])\n-> Result<Option<Vec<u8>>, Box<Error>> where H: Hasher, H::Out: Ord + Codec","parent":null,"children":[],"decl_id":null,"docs":" Check child storage read proof on pre-created proving backend.\n","sig":null,"attributes":[{"value":"/ Check child storage read proof on pre-created proving backend.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":24787,"byte_end":24853,"line_start":846,"line_end":846,"column_start":2,"column_end":68}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":53879,"byte_end":53882,"line_start":342,"line_end":342,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":54082,"byte_end":54097,"line_start":351,"line_end":351,"column_start":71,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":55081,"byte_end":55099,"line_start":389,"line_end":389,"column_start":2,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":55331,"byte_end":55349,"line_start":397,"line_end":397,"column_start":36,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":57253,"byte_end":57264,"line_start":38,"line_end":38,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":58720,"byte_end":58731,"line_start":92,"line_end":92,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":58911,"byte_end":58922,"line_start":101,"line_end":101,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":59104,"byte_end":59115,"line_start":111,"line_end":111,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":59451,"byte_end":59462,"line_start":124,"line_end":124,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":59837,"byte_end":59848,"line_start":136,"line_end":136,"column_start":62,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":60121,"byte_end":60132,"line_start":148,"line_end":148,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":108888,"byte_end":108898,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":110433,"byte_end":110454,"line_start":136,"line_end":136,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":112002,"byte_end":112027,"line_start":180,"line_end":180,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_iterator.rs","byte_start":117228,"byte_end":117247,"line_start":70,"line_end":70,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_iterator.rs","byte_start":117725,"byte_end":117744,"line_start":91,"line_end":91,"column_start":40,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_iterator.rs","byte_start":119273,"byte_end":119284,"line_start":144,"line_end":144,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_iterator.rs","byte_start":119460,"byte_end":119471,"line_start":154,"line_end":154,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":133920,"byte_end":133944,"line_start":208,"line_end":208,"column_start":21,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":137818,"byte_end":137835,"line_start":321,"line_end":321,"column_start":55,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":138356,"byte_end":138380,"line_start":343,"line_end":343,"column_start":21,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":138739,"byte_end":138763,"line_start":359,"line_end":359,"column_start":34,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":151000,"byte_end":151009,"line_start":86,"line_end":86,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":151360,"byte_end":151369,"line_start":97,"line_end":97,"column_start":64,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":151726,"byte_end":151735,"line_start":107,"line_end":107,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152033,"byte_end":152047,"line_start":117,"line_end":117,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152226,"byte_end":152240,"line_start":125,"line_end":125,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152441,"byte_end":152455,"line_start":133,"line_end":133,"column_start":49,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152494,"byte_end":152505,"line_start":135,"line_end":135,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152685,"byte_end":152696,"line_start":144,"line_end":144,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152875,"byte_end":152885,"line_start":152,"line_end":152,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":153064,"byte_end":153074,"line_start":160,"line_end":160,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":153283,"byte_end":153294,"line_start":168,"line_end":168,"column_start":49,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":153344,"byte_end":153352,"line_start":170,"line_end":170,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":162690,"byte_end":162705,"line_start":54,"line_end":54,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":165608,"byte_end":165623,"line_start":166,"line_end":166,"column_start":66,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":166197,"byte_end":166212,"line_start":179,"line_end":179,"column_start":61,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":166690,"byte_end":166708,"line_start":197,"line_end":197,"column_start":42,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":166885,"byte_end":166903,"line_start":203,"line_end":203,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/surface_iterator.rs","byte_start":169668,"byte_end":169683,"line_start":70,"line_end":70,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65993,"byte_end":65994,"line_start":104,"line_end":104,"column_start":25,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":68640,"byte_end":68665,"line_start":167,"line_end":167,"column_start":70,"column_end":95},"value":"","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69346,"byte_end":69351,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69612,"byte_end":69617,"line_start":204,"line_end":204,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177393,"byte_end":177394,"line_start":27,"line_end":27,"column_start":70,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":180571,"byte_end":180576,"line_start":73,"line_end":73,"column_start":57,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":180893,"byte_end":180898,"line_start":83,"line_end":83,"column_start":57,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":181884,"byte_end":181887,"line_start":118,"line_end":118,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":183700,"byte_end":183703,"line_start":189,"line_end":189,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":810},{"krate":0,"index":815},{"krate":0,"index":819},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":846},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":853},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":196658,"byte_end":196675,"line_start":675,"line_end":675,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":196891,"byte_end":196904,"line_start":684,"line_end":684,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":198294,"byte_end":198297,"line_start":740,"line_end":740,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":881},{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":210245,"byte_end":210262,"line_start":62,"line_end":62,"column_start":44,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":214894,"byte_end":214911,"line_start":214,"line_end":214,"column_start":64,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":215164,"byte_end":215181,"line_start":222,"line_end":222,"column_start":58,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":215507,"byte_end":215524,"line_start":233,"line_end":233,"column_start":56,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":215700,"byte_end":215717,"line_start":240,"line_end":240,"column_start":62,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":215885,"byte_end":215902,"line_start":249,"line_end":249,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220279,"byte_end":220297,"line_start":45,"line_end":45,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1025},{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":221886,"byte_end":221904,"line_start":106,"line_end":106,"column_start":20,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":222121,"byte_end":222139,"line_start":113,"line_end":113,"column_start":51,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":222311,"byte_end":222329,"line_start":121,"line_end":121,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":222441,"byte_end":222459,"line_start":125,"line_end":125,"column_start":51,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":222703,"byte_end":222721,"line_start":137,"line_end":137,"column_start":24,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":228342,"byte_end":228360,"line_start":337,"line_end":337,"column_start":43,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":268644,"byte_end":268658,"line_start":83,"line_end":83,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":269943,"byte_end":269955,"line_start":114,"line_end":114,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":270172,"byte_end":270185,"line_start":125,"line_end":125,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":270241,"byte_end":270255,"line_start":131,"line_end":131,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":271932,"byte_end":271946,"line_start":189,"line_end":189,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":272461,"byte_end":272473,"line_start":204,"line_end":204,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1129},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1137},{"krate":0,"index":1139},{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":278983,"byte_end":279001,"line_start":387,"line_end":387,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1153},{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":295416,"byte_end":295440,"line_start":37,"line_end":37,"column_start":6,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1167},{"krate":0,"index":1170},{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":233334,"byte_end":233344,"line_start":76,"line_end":76,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235831,"byte_end":235845,"line_start":143,"line_end":143,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":237370,"byte_end":237393,"line_start":183,"line_end":183,"column_start":46,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":237568,"byte_end":237591,"line_start":190,"line_end":190,"column_start":58,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":237976,"byte_end":237990,"line_start":205,"line_end":205,"column_start":67,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":238407,"byte_end":238423,"line_start":221,"line_end":221,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1274},{"krate":0,"index":1276},{"krate":0,"index":1278},{"krate":0,"index":1280},{"krate":0,"index":1283},{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1304},{"krate":0,"index":1306},{"krate":0,"index":1310},{"krate":0,"index":1312},{"krate":0,"index":1315},{"krate":0,"index":1319},{"krate":0,"index":1327},{"krate":0,"index":1330},{"krate":0,"index":1339},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":255618,"byte_end":255637,"line_start":712,"line_end":712,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1370},{"krate":0,"index":1372},{"krate":0,"index":1374},{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":299828,"byte_end":299850,"line_start":41,"line_end":41,"column_start":16,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1425},{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":302312,"byte_end":302326,"line_start":128,"line_end":128,"column_start":57,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":303319,"byte_end":303339,"line_start":163,"line_end":163,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1458},{"krate":0,"index":1459}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":303781,"byte_end":303795,"line_start":178,"line_end":178,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1464}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":303944,"byte_end":303958,"line_start":185,"line_end":185,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1482},{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1490},{"krate":0,"index":1493},{"krate":0,"index":1494}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":312887,"byte_end":312898,"line_start":37,"line_end":37,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1540}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313702,"byte_end":313713,"line_start":71,"line_end":71,"column_start":66,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":1544}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313888,"byte_end":313899,"line_start":77,"line_end":77,"column_start":58,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1548},{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1551},{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555},{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1561},{"krate":0,"index":1563},{"krate":0,"index":1565},{"krate":0,"index":1568},{"krate":0,"index":1571},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323220,"byte_end":323238,"line_start":56,"line_end":56,"column_start":43,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1647},{"krate":0,"index":1650},{"krate":0,"index":1654},{"krate":0,"index":1657},{"krate":0,"index":1660}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":329903,"byte_end":329912,"line_start":285,"line_end":285,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1672},{"krate":0,"index":1674}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":330154,"byte_end":330163,"line_start":291,"line_end":291,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":330375,"byte_end":330384,"line_start":301,"line_end":301,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":331297,"byte_end":331306,"line_start":335,"line_end":335,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1694},{"krate":0,"index":1695}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":332004,"byte_end":332007,"line_start":356,"line_end":356,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1702},{"krate":0,"index":1703}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":332294,"byte_end":332310,"line_start":365,"line_end":365,"column_start":43,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1706},{"krate":0,"index":1707}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":332522,"byte_end":332530,"line_start":373,"line_end":373,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1710},{"krate":0,"index":1711}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":332769,"byte_end":332787,"line_start":382,"line_end":382,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1715},{"krate":0,"index":1717}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":333054,"byte_end":333072,"line_start":389,"line_end":389,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":333825,"byte_end":333843,"line_start":422,"line_end":422,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1730},{"krate":0,"index":1731}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338741,"byte_end":338758,"line_start":81,"line_end":81,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1738}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":339166,"byte_end":339175,"line_start":91,"line_end":91,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1740},{"krate":0,"index":1741}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":340066,"byte_end":340083,"line_start":120,"line_end":120,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1743},{"krate":0,"index":1744}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341919,"byte_end":341920,"line_start":45,"line_end":45,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342382,"byte_end":342403,"line_start":61,"line_end":61,"column_start":57,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342556,"byte_end":342577,"line_start":67,"line_end":67,"column_start":41,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1784}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342899,"byte_end":342920,"line_start":76,"line_end":76,"column_start":59,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":346693,"byte_end":346714,"line_start":207,"line_end":207,"column_start":78,"column_end":99},"value":"","parent":null,"children":[{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":7303,"byte_end":7320,"line_start":242,"line_end":242,"column_start":48,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1936}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":7690,"byte_end":7707,"line_start":253,"line_end":253,"column_start":7,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1938}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":9775,"byte_end":9787,"line_start":310,"line_end":310,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1973}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":9984,"byte_end":9996,"line_start":320,"line_end":320,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1980},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1987},{"krate":0,"index":1991},{"krate":0,"index":1994}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":806,"byte_end":813,"line_start":23,"line_end":23,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":3}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":45005,"byte_end":45010,"line_start":38,"line_end":38,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":6831},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":53879,"byte_end":53882,"line_start":342,"line_end":342,"column_start":22,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":5,"index":4841},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":54082,"byte_end":54097,"line_start":351,"line_end":351,"column_start":71,"column_end":86},"kind":{"Impl":{"id":1}},"from":{"krate":170,"index":242},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":55081,"byte_end":55099,"line_start":389,"line_end":389,"column_start":2,"column_end":20},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":116},"to":{"krate":25,"index":1705}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/backend.rs","byte_start":55331,"byte_end":55349,"line_start":397,"line_end":397,"column_start":36,"column_end":54},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":57253,"byte_end":57264,"line_start":38,"line_end":38,"column_start":17,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1528},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":58720,"byte_end":58731,"line_start":92,"line_end":92,"column_start":27,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":58911,"byte_end":58922,"line_start":101,"line_end":101,"column_start":29,"column_end":40},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":59104,"byte_end":59115,"line_start":111,"line_end":111,"column_start":6,"column_end":17},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":59451,"byte_end":59462,"line_start":124,"line_end":124,"column_start":35,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":59837,"byte_end":59848,"line_start":136,"line_end":136,"column_start":62,"column_end":73},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/in_memory_backend.rs","byte_start":60121,"byte_end":60132,"line_start":148,"line_end":148,"column_start":6,"column_end":17},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":108888,"byte_end":108898,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":110433,"byte_end":110454,"line_start":136,"line_end":136,"column_start":9,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2093},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_cache.rs","byte_start":112002,"byte_end":112027,"line_start":180,"line_end":180,"column_start":9,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_iterator.rs","byte_start":117228,"byte_end":117247,"line_start":70,"line_end":70,"column_start":27,"column_end":46},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_iterator.rs","byte_start":117725,"byte_end":117744,"line_start":91,"line_end":91,"column_start":40,"column_end":59},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2122},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_iterator.rs","byte_start":119273,"byte_end":119284,"line_start":144,"line_end":144,"column_start":27,"column_end":38},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/build_iterator.rs","byte_start":119460,"byte_end":119471,"line_start":154,"line_end":154,"column_start":40,"column_end":51},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2135},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":133920,"byte_end":133944,"line_start":208,"line_end":208,"column_start":21,"column_end":45},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":137818,"byte_end":137835,"line_start":321,"line_end":321,"column_start":55,"column_end":72},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":138356,"byte_end":138380,"line_start":343,"line_end":343,"column_start":21,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/changes_iterator.rs","byte_start":138739,"byte_end":138763,"line_start":359,"line_end":359,"column_start":34,"column_end":58},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":423},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":151000,"byte_end":151009,"line_start":86,"line_end":86,"column_start":27,"column_end":36},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2220},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":151360,"byte_end":151369,"line_start":97,"line_end":97,"column_start":64,"column_end":73},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2220},"to":{"krate":2,"index":1986}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":151726,"byte_end":151735,"line_start":107,"line_end":107,"column_start":54,"column_end":63},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2220},"to":{"krate":2,"index":1986}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152033,"byte_end":152047,"line_start":117,"line_end":117,"column_start":27,"column_end":41},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152226,"byte_end":152240,"line_start":125,"line_end":125,"column_start":38,"column_end":52},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2143},"to":{"krate":19,"index":109}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152441,"byte_end":152455,"line_start":133,"line_end":133,"column_start":49,"column_end":63},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2143},"to":{"krate":19,"index":699}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152494,"byte_end":152505,"line_start":135,"line_end":135,"column_start":27,"column_end":38},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152685,"byte_end":152696,"line_start":144,"line_end":144,"column_start":38,"column_end":49},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2164},"to":{"krate":19,"index":109}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":152875,"byte_end":152885,"line_start":152,"line_end":152,"column_start":27,"column_end":37},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":153064,"byte_end":153074,"line_start":160,"line_end":160,"column_start":38,"column_end":48},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2185},"to":{"krate":19,"index":109}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":153283,"byte_end":153294,"line_start":168,"line_end":168,"column_start":49,"column_end":60},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2164},"to":{"krate":19,"index":699}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/input.rs","byte_start":153344,"byte_end":153352,"line_start":170,"line_end":170,"column_start":38,"column_end":46},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2251},"to":{"krate":19,"index":127}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":162690,"byte_end":162705,"line_start":54,"line_end":54,"column_start":38,"column_end":53},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":165608,"byte_end":165623,"line_start":166,"line_end":166,"column_start":66,"column_end":81},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":546},"to":{"krate":0,"index":674}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":166197,"byte_end":166212,"line_start":179,"line_end":179,"column_start":61,"column_end":76},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":546},"to":{"krate":0,"index":679}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":166690,"byte_end":166708,"line_start":197,"line_end":197,"column_start":42,"column_end":60},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/storage.rs","byte_start":166885,"byte_end":166903,"line_start":203,"line_end":203,"column_start":47,"column_end":65},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":551},"to":{"krate":0,"index":1696}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/surface_iterator.rs","byte_start":169668,"byte_end":169683,"line_start":70,"line_end":70,"column_start":44,"column_end":59},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":605},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65553,"byte_end":65557,"line_start":90,"line_end":90,"column_start":2,"column_end":6},"kind":"SuperTrait","from":{"krate":2,"index":2071},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65560,"byte_end":65564,"line_start":90,"line_end":90,"column_start":9,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":2083},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65588,"byte_end":65595,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":6836},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65599,"byte_end":65604,"line_start":92,"line_end":92,"column_start":2,"column_end":7},"kind":"SuperTrait","from":{"krate":2,"index":1762},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65608,"byte_end":65612,"line_start":93,"line_end":93,"column_start":2,"column_end":6},"kind":"SuperTrait","from":{"krate":2,"index":1989},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65620,"byte_end":65627,"line_start":93,"line_end":93,"column_start":14,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":1992},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65635,"byte_end":65638,"line_start":93,"line_end":93,"column_start":29,"column_end":32},"kind":"SuperTrait","from":{"krate":37,"index":311},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65641,"byte_end":65645,"line_start":93,"line_end":93,"column_start":35,"column_end":39},"kind":"SuperTrait","from":{"krate":37,"index":301},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65649,"byte_end":65658,"line_start":94,"line_end":94,"column_start":2,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1790},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65661,"byte_end":65664,"line_start":94,"line_end":94,"column_start":14,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1822},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65679,"byte_end":65683,"line_start":95,"line_end":95,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":7019},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65697,"byte_end":65700,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":2136},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65734,"byte_end":65737,"line_start":96,"line_end":96,"column_start":49,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2141},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65770,"byte_end":65773,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":2146},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65807,"byte_end":65810,"line_start":97,"line_end":97,"column_start":49,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2151},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65843,"byte_end":65846,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":2157},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65879,"byte_end":65888,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":2167},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65910,"byte_end":65920,"line_start":100,"line_end":100,"column_start":14,"column_end":24},"kind":"SuperTrait","from":{"krate":37,"index":371},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65935,"byte_end":65945,"line_start":100,"line_end":100,"column_start":39,"column_end":49},"kind":"SuperTrait","from":{"krate":37,"index":369},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65949,"byte_end":65955,"line_start":101,"line_end":101,"column_start":2,"column_end":8},"kind":"SuperTrait","from":{"krate":19,"index":127},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65958,"byte_end":65964,"line_start":101,"line_end":101,"column_start":11,"column_end":17},"kind":"SuperTrait","from":{"krate":19,"index":109},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":65993,"byte_end":65994,"line_start":104,"line_end":104,"column_start":25,"column_end":26},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":666},"to":{"krate":0,"index":664}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67302,"byte_end":67306,"line_start":141,"line_end":141,"column_start":57,"column_end":61},"kind":"SuperTrait","from":{"krate":2,"index":2071},"to":{"krate":0,"index":674}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67309,"byte_end":67313,"line_start":141,"line_end":141,"column_start":64,"column_end":68},"kind":"SuperTrait","from":{"krate":2,"index":2083},"to":{"krate":0,"index":674}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":67844,"byte_end":67856,"line_start":150,"line_end":150,"column_start":52,"column_end":64},"kind":"SuperTrait","from":{"krate":0,"index":674},"to":{"krate":0,"index":679}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":68640,"byte_end":68665,"line_start":167,"line_end":167,"column_start":70,"column_end":95},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":685},"to":{"krate":0,"index":1696}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69346,"byte_end":69351,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/changes_trie/mod.rs","byte_start":69612,"byte_end":69617,"line_start":204,"line_end":204,"column_start":38,"column_end":43},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":667},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177285,"byte_end":177290,"line_start":25,"line_end":25,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":6831},"to":{"krate":0,"index":726}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177298,"byte_end":177305,"line_start":25,"line_end":25,"column_start":46,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":6836},"to":{"krate":0,"index":726}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177308,"byte_end":177312,"line_start":25,"line_end":25,"column_start":56,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":2071},"to":{"krate":0,"index":726}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177315,"byte_end":177319,"line_start":25,"line_end":25,"column_start":63,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":2083},"to":{"krate":0,"index":726}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/error.rs","byte_start":177393,"byte_end":177394,"line_start":27,"line_end":27,"column_start":70,"column_end":71},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":728},"to":{"krate":0,"index":726}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":180571,"byte_end":180576,"line_start":73,"line_end":73,"column_start":57,"column_end":62},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2320},"to":{"krate":2,"index":6836}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":180893,"byte_end":180898,"line_start":83,"line_end":83,"column_start":57,"column_end":62},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2320},"to":{"krate":1,"index":1724}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":181884,"byte_end":181887,"line_start":118,"line_end":118,"column_start":19,"column_end":22},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":781},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":183700,"byte_end":183703,"line_start":189,"line_end":189,"column_start":37,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":781},"to":{"krate":71,"index":57}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":196658,"byte_end":196675,"line_start":675,"line_end":675,"column_start":17,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":861},"to":{"krate":19,"index":109}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":196891,"byte_end":196904,"line_start":684,"line_end":684,"column_start":10,"column_end":23},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":868},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/ext.rs","byte_start":198294,"byte_end":198297,"line_start":740,"line_end":740,"column_start":38,"column_end":41},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":781},"to":{"krate":71,"index":33}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":210245,"byte_end":210262,"line_start":62,"line_end":62,"column_start":44,"column_end":61},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":214894,"byte_end":214911,"line_start":214,"line_end":214,"column_start":64,"column_end":81},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":924},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":215164,"byte_end":215181,"line_start":222,"line_end":222,"column_start":58,"column_end":75},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":924},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":215507,"byte_end":215524,"line_start":233,"line_end":233,"column_start":56,"column_end":73},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":924},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":215700,"byte_end":215717,"line_start":240,"line_end":240,"column_start":62,"column_end":79},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":924},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/testing.rs","byte_start":215885,"byte_end":215902,"line_start":249,"line_end":249,"column_start":49,"column_end":66},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":924},"to":{"krate":71,"index":33}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":220279,"byte_end":220297,"line_start":45,"line_end":45,"column_start":6,"column_end":24},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":221886,"byte_end":221904,"line_start":106,"line_end":106,"column_start":20,"column_end":38},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2342},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":222121,"byte_end":222139,"line_start":113,"line_end":113,"column_start":51,"column_end":69},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2342},"to":{"krate":2,"index":5438}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":222311,"byte_end":222329,"line_start":121,"line_end":121,"column_start":18,"column_end":36},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2342},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":222441,"byte_end":222459,"line_start":125,"line_end":125,"column_start":51,"column_end":69},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2342},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":222703,"byte_end":222721,"line_start":137,"line_end":137,"column_start":24,"column_end":42},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2342},"to":{"krate":71,"index":57}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/basic.rs","byte_start":228342,"byte_end":228360,"line_start":337,"line_end":337,"column_start":43,"column_end":61},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2342},"to":{"krate":71,"index":33}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":268644,"byte_end":268658,"line_start":83,"line_end":83,"column_start":21,"column_end":35},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2382},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":269943,"byte_end":269955,"line_start":114,"line_end":114,"column_start":36,"column_end":48},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2391},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":270172,"byte_end":270185,"line_start":125,"line_end":125,"column_start":18,"column_end":31},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2359},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":270241,"byte_end":270255,"line_start":131,"line_end":131,"column_start":9,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":271932,"byte_end":271946,"line_start":189,"line_end":189,"column_start":6,"column_end":20},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":272461,"byte_end":272473,"line_start":204,"line_end":204,"column_start":32,"column_end":44},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/changeset.rs","byte_start":278983,"byte_end":279001,"line_start":387,"line_end":387,"column_start":6,"column_end":24},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/offchain.rs","byte_start":295416,"byte_end":295440,"line_start":37,"line_end":37,"column_start":6,"column_end":30},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":233334,"byte_end":233344,"line_start":76,"line_end":76,"column_start":6,"column_end":16},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":235831,"byte_end":235845,"line_start":143,"line_end":143,"column_start":46,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":237370,"byte_end":237393,"line_start":183,"line_end":183,"column_start":46,"column_end":69},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":237568,"byte_end":237591,"line_start":190,"line_end":190,"column_start":58,"column_end":81},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1245},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":237976,"byte_end":237990,"line_start":205,"line_end":205,"column_start":67,"column_end":81},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":238407,"byte_end":238423,"line_start":221,"line_end":221,"column_start":6,"column_end":22},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/overlayed_changes/mod.rs","byte_start":255618,"byte_end":255637,"line_start":712,"line_end":712,"column_start":10,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":299828,"byte_end":299850,"line_start":41,"line_end":41,"column_start":16,"column_end":38},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":302312,"byte_end":302326,"line_start":128,"line_end":128,"column_start":57,"column_end":71},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":303319,"byte_end":303339,"line_start":163,"line_end":163,"column_start":6,"column_end":26},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1439},"to":{"krate":0,"index":1696}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":303781,"byte_end":303795,"line_start":178,"line_end":178,"column_start":6,"column_end":20},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1433},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/proving_backend.rs","byte_start":303944,"byte_end":303958,"line_start":185,"line_end":185,"column_start":31,"column_end":45},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1433},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":312887,"byte_end":312898,"line_start":37,"line_end":37,"column_start":43,"column_end":54},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1528},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313702,"byte_end":313713,"line_start":71,"line_end":71,"column_start":66,"column_end":77},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend.rs","byte_start":313888,"byte_end":313899,"line_start":77,"line_end":77,"column_start":58,"column_end":69},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1528},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":322903,"byte_end":322907,"line_start":44,"line_end":44,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2071},"to":{"krate":0,"index":1616}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":322910,"byte_end":322914,"line_start":44,"line_end":44,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2083},"to":{"krate":0,"index":1616}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":323220,"byte_end":323238,"line_start":56,"line_end":56,"column_start":43,"column_end":61},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":329903,"byte_end":329912,"line_start":285,"line_end":285,"column_start":6,"column_end":15},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1662},"to":{"krate":18,"index":65}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":330154,"byte_end":330163,"line_start":291,"line_end":291,"column_start":47,"column_end":56},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":330375,"byte_end":330384,"line_start":301,"line_end":301,"column_start":6,"column_end":15},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1662},"to":{"krate":18,"index":40}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":331297,"byte_end":331306,"line_start":335,"line_end":335,"column_start":6,"column_end":15},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1662},"to":{"krate":18,"index":48}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":331651,"byte_end":331655,"line_start":347,"line_end":347,"column_start":42,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":2071},"to":{"krate":0,"index":1696}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":331658,"byte_end":331662,"line_start":347,"line_end":347,"column_start":49,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":2083},"to":{"krate":0,"index":1696}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":332004,"byte_end":332007,"line_start":356,"line_end":356,"column_start":43,"column_end":46},"kind":{"Impl":{"id":95}},"from":{"krate":5,"index":4499},"to":{"krate":0,"index":1696}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":332294,"byte_end":332310,"line_start":365,"line_end":365,"column_start":43,"column_end":59},"kind":{"Impl":{"id":96}},"from":{"krate":170,"index":238},"to":{"krate":0,"index":1696}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":332522,"byte_end":332530,"line_start":373,"line_end":373,"column_start":43,"column_end":51},"kind":{"Impl":{"id":97}},"from":{"krate":170,"index":240},"to":{"krate":0,"index":1696}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":332769,"byte_end":332787,"line_start":382,"line_end":382,"column_start":6,"column_end":24},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1619},"to":{"krate":18,"index":65}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":333054,"byte_end":333072,"line_start":389,"line_end":389,"column_start":6,"column_end":24},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1619},"to":{"krate":18,"index":40}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/trie_backend_essence.rs","byte_start":333825,"byte_end":333843,"line_start":422,"line_end":422,"column_start":6,"column_end":24},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1619},"to":{"krate":18,"index":48}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":338741,"byte_end":338758,"line_start":81,"line_end":81,"column_start":6,"column_end":23},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":339166,"byte_end":339175,"line_start":91,"line_end":91,"column_start":6,"column_end":15},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/stats.rs","byte_start":340066,"byte_end":340083,"line_start":120,"line_end":120,"column_start":6,"column_end":23},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":341919,"byte_end":341920,"line_start":45,"line_end":45,"column_start":55,"column_end":56},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1771},"to":{"krate":0,"index":1763}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342382,"byte_end":342403,"line_start":61,"line_end":61,"column_start":57,"column_end":78},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2478},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342556,"byte_end":342577,"line_start":67,"line_end":67,"column_start":41,"column_end":62},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":342899,"byte_end":342920,"line_start":76,"line_end":76,"column_start":59,"column_end":80},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2478},"to":{"krate":71,"index":57}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/read_only.rs","byte_start":346693,"byte_end":346714,"line_start":207,"line_end":207,"column_start":78,"column_end":99},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2478},"to":{"krate":71,"index":33}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":7303,"byte_end":7320,"line_start":242,"line_end":242,"column_start":48,"column_end":65},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2489},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":7690,"byte_end":7707,"line_start":253,"line_end":253,"column_start":7,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":9775,"byte_end":9787,"line_start":310,"line_end":310,"column_start":35,"column_end":47},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1951},"to":{"krate":2,"index":2295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-state-machine-0.9.0/src/lib.rs","byte_start":9984,"byte_end":9996,"line_start":320,"line_end":320,"column_start":26,"column_end":38},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1951},"to":{"krate":4294967295,"index":4294967295}}]}