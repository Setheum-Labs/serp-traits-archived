{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0","program":"/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","trie_root","--edition=2018","/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=5db713cd291f85a1","-C","extra-filename=-5db713cd291f85a1","--out-dir","/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","-L","dependency=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","--extern","hash_db=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libhash_db-d38c1365a7005e89.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libtrie_root-5db713cd291f85a1.rmeta"},"prelude":{"crate_id":{"name":"trie_root","disambiguator":[10825234960134104556,2662406007426998997]},"crate_root":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src","external_crates":[{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","num":18,"id":{"name":"hash_db","disambiguator":[16222527159578958881,15417756680510520186]}}],"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":603,"byte_end":10471,"line_start":15,"line_end":345,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":11},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1094,"byte_end":1100,"line_start":41,"line_end":41,"column_start":18,"column_end":24},"alias_span":null,"name":"Hasher","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":603,"byte_end":10471,"line_start":15,"line_end":345,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":23},{"krate":0,"index":27},{"krate":0,"index":33},{"krate":0,"index":41},{"krate":0,"index":47},{"krate":0,"index":53},{"krate":0,"index":61},{"krate":0,"index":67},{"krate":0,"index":74},{"krate":0,"index":83}],"decl_id":null,"docs":" Generates trie root.","sig":null,"attributes":[{"value":"/ Generates trie root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":603,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This module should be used to generate trie root hash.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":632,"byte_end":690,"line_start":17,"line_end":17,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":11},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1180,"byte_end":1190,"line_start":44,"line_end":44,"column_start":11,"column_end":21},"name":"TrieStream","qualname":"::TrieStream","value":"TrieStream","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":22}],"decl_id":null,"docs":" Byte-stream oriented trait for constructing closed-form tries.\n","sig":null,"attributes":[{"value":"/ Byte-stream oriented trait for constructing closed-form tries.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1103,"byte_end":1169,"line_start":43,"line_end":43,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1231,"byte_end":1234,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"new","qualname":"::TrieStream::new","value":"pub fn new() -> Self","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":" Construct a new `TrieStream`\n","sig":null,"attributes":[{"value":"/ Construct a new `TrieStream`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1194,"byte_end":1226,"line_start":45,"line_end":45,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1276,"byte_end":1293,"line_start":48,"line_end":48,"column_start":5,"column_end":22},"name":"append_empty_data","qualname":"::TrieStream::append_empty_data","value":"pub fn append_empty_data(&mut Self)","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":" Append an Empty node\n","sig":null,"attributes":[{"value":"/ Append an Empty node","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1247,"byte_end":1271,"line_start":47,"line_end":47,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1448,"byte_end":1460,"line_start":51,"line_end":51,"column_start":5,"column_end":17},"name":"begin_branch","qualname":"::TrieStream::begin_branch","value":"pub fn begin_branch<impl Iterator<Item = bool>: Iterator<Item =\n                    bool>>(&mut Self, Option<&[u8]>, Option<&[u8]>,\n                           impl Iterator<Item = bool>)","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":" Start a new Branch node, possibly with a value; takes a list indicating\n which slots in the Branch node has further child nodes.\n","sig":null,"attributes":[{"value":"/ Start a new Branch node, possibly with a value; takes a list indicating","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1307,"byte_end":1382,"line_start":49,"line_end":49,"column_start":2,"column_end":77}},{"value":"/ which slots in the Branch node has further child nodes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1384,"byte_end":1443,"line_start":50,"line_end":50,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1628,"byte_end":1646,"line_start":58,"line_end":58,"column_start":5,"column_end":23},"name":"append_empty_child","qualname":"::TrieStream::append_empty_child","value":"pub fn append_empty_child(&mut Self)","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":" Append an empty child node. Optional.\n","sig":null,"attributes":[{"value":"/ Append an empty child node. Optional.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1582,"byte_end":1623,"line_start":57,"line_end":57,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1775,"byte_end":1785,"line_start":61,"line_end":61,"column_start":5,"column_end":15},"name":"end_branch","qualname":"::TrieStream::end_branch","value":"pub fn end_branch(&mut Self, Option<&[u8]>)","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":" Wrap up a Branch node portion of a `TrieStream` and append the value\n stored on the Branch (if any).\n","sig":null,"attributes":[{"value":"/ Wrap up a Branch node portion of a `TrieStream` and append the value","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1662,"byte_end":1734,"line_start":59,"line_end":59,"column_start":2,"column_end":74}},{"value":"/ stored on the Branch (if any).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1736,"byte_end":1770,"line_start":60,"line_end":60,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1851,"byte_end":1862,"line_start":63,"line_end":63,"column_start":5,"column_end":16},"name":"append_leaf","qualname":"::TrieStream::append_leaf","value":"pub fn append_leaf(&mut Self, &[u8], &[u8])","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":" Append a Leaf node\n","sig":null,"attributes":[{"value":"/ Append a Leaf node","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1824,"byte_end":1846,"line_start":62,"line_end":62,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1935,"byte_end":1951,"line_start":65,"line_end":65,"column_start":5,"column_end":21},"name":"append_extension","qualname":"::TrieStream::append_extension","value":"pub fn append_extension(&mut Self, &[u8])","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":" Append an Extension node\n","sig":null,"attributes":[{"value":"/ Append an Extension node","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1902,"byte_end":1930,"line_start":64,"line_end":64,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2024,"byte_end":2040,"line_start":67,"line_end":67,"column_start":5,"column_end":21},"name":"append_substream","qualname":"::TrieStream::append_substream","value":"pub fn append_substream<H: Hasher>(&mut Self, Self)","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":" Append a Branch of Extension substream\n","sig":null,"attributes":[{"value":"/ Append a Branch of Extension substream","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":1977,"byte_end":2019,"line_start":66,"line_end":66,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2141,"byte_end":2144,"line_start":69,"line_end":69,"column_start":5,"column_end":8},"name":"out","qualname":"::TrieStream::out","value":"pub fn out(Self) -> Vec<u8>","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":" Return the finished `TrieStream` as a vector of bytes.\n","sig":null,"attributes":[{"value":"/ Return the finished `TrieStream` as a vector of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2078,"byte_end":2136,"line_start":68,"line_end":68,"column_start":2,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":27},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2877,"byte_end":2886,"line_start":96,"line_end":96,"column_start":8,"column_end":17},"name":"trie_root","qualname":"::trie_root","value":"pub fn trie_root<H, S, I, A, B>(I) -> H::Out where I: IntoIterator<Item =\n(A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>, H: Hasher, S: TrieStream","parent":null,"children":[],"decl_id":null,"docs":" Generates a trie root hash for a vector of key-value tuples","sig":null,"attributes":[{"value":"/ Generates a trie root hash for a vector of key-value tuples","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2361,"byte_end":2424,"line_start":79,"line_end":79,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2425,"byte_end":2428,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2429,"byte_end":2440,"line_start":81,"line_end":81,"column_start":1,"column_end":12}},{"value":"/ use hex_literal::hex;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2441,"byte_end":2466,"line_start":82,"line_end":82,"column_start":1,"column_end":26}},{"value":"/ use trie_root::trie_root;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2467,"byte_end":2496,"line_start":83,"line_end":83,"column_start":1,"column_end":30}},{"value":"/ use reference_trie::ReferenceTrieStream;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2497,"byte_end":2541,"line_start":84,"line_end":84,"column_start":1,"column_end":45}},{"value":"/ use keccak_hasher::KeccakHasher;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2542,"byte_end":2578,"line_start":85,"line_end":85,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2579,"byte_end":2582,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let v = vec![","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2583,"byte_end":2600,"line_start":87,"line_end":87,"column_start":1,"column_end":18}},{"value":"/ \t(\"doe\", \"reindeer\"),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2601,"byte_end":2626,"line_start":88,"line_end":88,"column_start":1,"column_end":26}},{"value":"/ \t(\"dog\", \"puppy\"),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2627,"byte_end":2649,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"/ \t(\"dogglesworth\", \"cat\"),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2650,"byte_end":2679,"line_start":90,"line_end":90,"column_start":1,"column_end":30}},{"value":"/ ];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2680,"byte_end":2686,"line_start":91,"line_end":91,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2687,"byte_end":2690,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ let root = hex![\"0807d5393ae7f349481063ebb5dbaf6bda58db282a385ca97f37dccba717cb79\"];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2691,"byte_end":2779,"line_start":93,"line_end":93,"column_start":1,"column_end":89}},{"value":"/ assert_eq!(trie_root::<KeccakHasher, ReferenceTrieStream, _, _, _>(v), root);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2780,"byte_end":2861,"line_start":94,"line_end":94,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":2862,"byte_end":2869,"line_start":95,"line_end":95,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":41},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":4106,"byte_end":4128,"line_start":142,"line_end":142,"column_start":8,"column_end":30},"name":"trie_root_no_extension","qualname":"::trie_root_no_extension","value":"pub fn trie_root_no_extension<H, S, I, A, B>(I) -> H::Out where\nI: IntoIterator<Item = (A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>,\nH: Hasher, S: TrieStream","parent":null,"children":[],"decl_id":null,"docs":" Variant of `trie_root` for patricia trie without extension node.\n See [`trie_root`].\n","sig":null,"attributes":[{"value":"/ Variant of `trie_root` for patricia trie without extension node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":4007,"byte_end":4075,"line_start":140,"line_end":140,"column_start":1,"column_end":69}},{"value":"/ See [`trie_root`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":4076,"byte_end":4098,"line_start":141,"line_end":141,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":47},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":4507,"byte_end":4520,"line_start":156,"line_end":156,"column_start":8,"column_end":21},"name":"unhashed_trie","qualname":"::unhashed_trie","value":"pub fn unhashed_trie<H, S, I, A, B>(I) -> Vec<u8> where I: IntoIterator<Item =\n(A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>, H: Hasher, S: TrieStream","parent":null,"children":[],"decl_id":null,"docs":" Method similar to `trie_root` but returning the root encoded\n node instead of its hash.\n Mainly use for testing or debugging.\n","sig":null,"attributes":[{"value":"/ Method similar to `trie_root` but returning the root encoded","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":4364,"byte_end":4428,"line_start":153,"line_end":153,"column_start":1,"column_end":65}},{"value":"/ node instead of its hash.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":4429,"byte_end":4458,"line_start":154,"line_end":154,"column_start":1,"column_end":30}},{"value":"/ Mainly use for testing or debugging.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":4459,"byte_end":4499,"line_start":155,"line_end":155,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":5725,"byte_end":5751,"line_start":201,"line_end":201,"column_start":8,"column_end":34},"name":"unhashed_trie_no_extension","qualname":"::unhashed_trie_no_extension","value":"pub fn unhashed_trie_no_extension<H, S, I, A, B>(I) -> Vec<u8> where\nI: IntoIterator<Item = (A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>,\nH: Hasher, S: TrieStream","parent":null,"children":[],"decl_id":null,"docs":" Variant of `unhashed_trie` for patricia trie without extension node.\n See [`unhashed_trie`].\n","sig":null,"attributes":[{"value":"/ Variant of `unhashed_trie` for patricia trie without extension node.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":5618,"byte_end":5690,"line_start":199,"line_end":199,"column_start":1,"column_end":73}},{"value":"/ See [`unhashed_trie`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":5691,"byte_end":5717,"line_start":200,"line_end":200,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6496,"byte_end":6509,"line_start":228,"line_end":228,"column_start":8,"column_end":21},"name":"sec_trie_root","qualname":"::sec_trie_root","value":"pub fn sec_trie_root<H, S, I, A, B>(I) -> H::Out where I: IntoIterator<Item =\n(A, B)>, A: AsRef<[u8]>, B: AsRef<[u8]>, H: Hasher, H::Out: Ord, S: TrieStream","parent":null,"children":[],"decl_id":null,"docs":" Generates a key-hashed (secure) trie root hash for a vector of key-value tuples.","sig":null,"attributes":[{"value":"/ Generates a key-hashed (secure) trie root hash for a vector of key-value tuples.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":5951,"byte_end":6035,"line_start":211,"line_end":211,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6036,"byte_end":6039,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6040,"byte_end":6051,"line_start":213,"line_end":213,"column_start":1,"column_end":12}},{"value":"/ use hex_literal::hex;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6052,"byte_end":6077,"line_start":214,"line_end":214,"column_start":1,"column_end":26}},{"value":"/ use trie_root::sec_trie_root;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6078,"byte_end":6111,"line_start":215,"line_end":215,"column_start":1,"column_end":34}},{"value":"/ use keccak_hasher::KeccakHasher;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6112,"byte_end":6148,"line_start":216,"line_end":216,"column_start":1,"column_end":37}},{"value":"/ use reference_trie::ReferenceTrieStream;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6149,"byte_end":6193,"line_start":217,"line_end":217,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6194,"byte_end":6197,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ let v = vec![","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6198,"byte_end":6215,"line_start":219,"line_end":219,"column_start":1,"column_end":18}},{"value":"/ \t(\"doe\", \"reindeer\"),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6216,"byte_end":6241,"line_start":220,"line_end":220,"column_start":1,"column_end":26}},{"value":"/ \t(\"dog\", \"puppy\"),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6242,"byte_end":6264,"line_start":221,"line_end":221,"column_start":1,"column_end":23}},{"value":"/ \t(\"dogglesworth\", \"cat\"),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6265,"byte_end":6294,"line_start":222,"line_end":222,"column_start":1,"column_end":30}},{"value":"/ ];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6295,"byte_end":6301,"line_start":223,"line_end":223,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6302,"byte_end":6305,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ let root = hex![\"d6e02b2bd48aa04fd2ad87cfac1144a29ca7f7dc60f4526c7b7040763abe3d43\"];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6306,"byte_end":6394,"line_start":225,"line_end":225,"column_start":1,"column_end":89}},{"value":"/ assert_eq!(sec_trie_root::<KeccakHasher, ReferenceTrieStream, _, _, _>(v), root);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6395,"byte_end":6480,"line_start":226,"line_end":226,"column_start":1,"column_end":86}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.16.0/src/lib.rs","byte_start":6481,"byte_end":6488,"line_start":227,"line_end":227,"column_start":1,"column_end":8}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}