{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2","program":"/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","curve25519_dalek","/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"std\"","--cfg","feature=\"u64_backend\"","-C","metadata=cb7e64e2b3ba89e3","-C","extra-filename=-cb7e64e2b3ba89e3","--out-dir","/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","-L","dependency=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","--extern","byteorder=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libbyteorder-fafe08881da973c1.rmeta","--extern","digest=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libdigest-fba6a7fee315416d.rmeta","--extern","rand_core=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/librand_core-c04ac87af6436ddd.rmeta","--extern","subtle=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsubtle-b5f2544d904068bf.rmeta","--extern","zeroize=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libzeroize-2f2ed6073510d743.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libcurve25519_dalek-cb7e64e2b3ba89e3.rmeta"},"prelude":{"crate_id":{"name":"curve25519_dalek","disambiguator":[4071595552511680062,1824077030073052835]},"crate_root":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src","external_crates":[{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":18,"id":{"name":"byteorder","disambiguator":[16743341458239395833,5344541827637086529]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":19,"id":{"name":"digest","disambiguator":[3267007905718091736,6472354886699068987]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":20,"id":{"name":"generic_array","disambiguator":[17630325060485713573,8632611388700851125]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":21,"id":{"name":"typenum","disambiguator":[8726524992263171078,2989859816024006970]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":22,"id":{"name":"rand_core","disambiguator":[3238620688790230140,13462498439867285351]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":23,"id":{"name":"getrandom","disambiguator":[16958247650847020380,5385242026854871367]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":24,"id":{"name":"cfg_if","disambiguator":[11748229077813686416,18120593503603249335]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":25,"id":{"name":"libc","disambiguator":[7953600248772063458,1989307123664392873]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":26,"id":{"name":"zeroize","disambiguator":[10556093639355727955,15809428849932923722]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":27,"id":{"name":"zeroize_derive","disambiguator":[5655268509516224944,6725263168993598751]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","num":28,"id":{"name":"subtle","disambiguator":[17934521912222352306,18444245334094816619]}}],"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","byte_start":290,"byte_end":2948,"line_start":11,"line_end":97,"column_start":1,"column_end":23}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182387,"byte_end":182388,"line_start":37,"line_end":37,"column_start":42,"column_end":43},"alias_span":null,"name":"*","value":"EDWARDS_D2, ONE_MINUS_EDWARDS_D_SQUARED, MINUS_ONE, INVSQRT_A_MINUS_D, SQRT_M1, EDWARDS_D, EDWARDS_D_MINUS_ONE_SQUARED, AFFINE_ODD_MULTIPLES_OF_BASEPOINT, EIGHT_TORSION, ED25519_BASEPOINT_TABLE, APLUS2_OVER_FOUR, SQRT_AD_MINUS_ONE, R, LFACTOR, L, RR, ED25519_BASEPOINT_POINT","parent":{"krate":0,"index":594}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","byte_start":290,"byte_end":2948,"line_start":11,"line_end":97,"column_start":1,"column_end":23},"name":"","qualname":"::","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":17},{"krate":0,"index":195},{"krate":0,"index":250},{"krate":0,"index":418},{"krate":0,"index":594},{"krate":0,"index":608},{"krate":0,"index":651},{"krate":0,"index":678},{"krate":0,"index":1018},{"krate":0,"index":1020}],"decl_id":null,"docs":" Note that docs will only build on nightly Rust until\n [RFC 1990 stabilizes](https://github.com/rust-lang/rust/issues/44732).\n","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","byte_start":290,"byte_end":300,"line_start":11,"line_end":11,"column_start":1,"column_end":11}},{"value":"/ Note that docs will only build on nightly Rust until","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","byte_start":967,"byte_end":1023,"line_start":26,"line_end":26,"column_start":1,"column_end":57}},{"value":"/ [RFC 1990 stabilizes](https://github.com/rust-lang/rust/issues/44732).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","byte_start":1024,"byte_end":1098,"line_start":27,"line_end":27,"column_start":1,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":17},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalar","qualname":"::scalar","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":1434},{"krate":0,"index":21},{"krate":0,"index":1436},{"krate":0,"index":22},{"krate":0,"index":1438},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":1474},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":1080},{"krate":0,"index":1089},{"krate":0,"index":1086},{"krate":0,"index":1083},{"krate":0,"index":50},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":1090},{"krate":0,"index":72},{"krate":0,"index":1092},{"krate":0,"index":1096},{"krate":0,"index":1100},{"krate":0,"index":77},{"krate":0,"index":1103},{"krate":0,"index":80},{"krate":0,"index":1105},{"krate":0,"index":1109},{"krate":0,"index":1113},{"krate":0,"index":85},{"krate":0,"index":1116},{"krate":0,"index":88},{"krate":0,"index":1118},{"krate":0,"index":1122},{"krate":0,"index":1126},{"krate":0,"index":93},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":109},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":125},{"krate":0,"index":131},{"krate":0,"index":137},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":190}],"decl_id":null,"docs":" Arithmetic on scalars (integers mod the group order).","sig":null,"attributes":[{"value":"/ Arithmetic on scalars (integers mod the group order).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":6488,"byte_end":6545,"line_start":13,"line_end":13,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":6546,"byte_end":6549,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Both the Ristretto group and the Ed25519 basepoint have prime order","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":6550,"byte_end":6621,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ \\\\( \\ell = 2\\^{252} + 27742317777372353535851937790883648493 \\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":6622,"byte_end":6691,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":6692,"byte_end":6695,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This code is intended to be useful with both the Ristretto group","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":6696,"byte_end":6764,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ (where everything is done modulo \\\\( \\ell \\\\)), and the X/Ed25519","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":6765,"byte_end":6834,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/ setting, which mandates specific bit-twiddles that are not","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":6835,"byte_end":6897,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/ well-defined modulo \\\\( \\ell \\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":6898,"byte_end":6935,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":6936,"byte_end":6939,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ All arithmetic on `Scalars` is done modulo \\\\( \\ell \\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":6940,"byte_end":7000,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7001,"byte_end":7004,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Constructing a scalar","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7005,"byte_end":7032,"line_start":25,"line_end":25,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7033,"byte_end":7036,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ To create a [`Scalar`](struct.Scalar.html) from a supposedly canonical encoding, use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7037,"byte_end":7125,"line_start":27,"line_end":27,"column_start":1,"column_end":89}},{"value":"/ [`Scalar::from_canonical_bytes`](struct.Scalar.html#method.from_canonical_bytes).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7126,"byte_end":7211,"line_start":28,"line_end":28,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7212,"byte_end":7215,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ This function does input validation, ensuring that the input bytes","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7216,"byte_end":7286,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ are the canonical encoding of a `Scalar`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7287,"byte_end":7332,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"/ If they are, we'll get","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7333,"byte_end":7359,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/ `Some(Scalar)` in return:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7360,"byte_end":7389,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7390,"byte_end":7393,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7394,"byte_end":7401,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7402,"byte_end":7443,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7444,"byte_end":7447,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let one_as_bytes: [u8; 32] = Scalar::one().to_bytes();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7448,"byte_end":7506,"line_start":38,"line_end":38,"column_start":1,"column_end":59}},{"value":"/ let a: Option<Scalar> = Scalar::from_canonical_bytes(one_as_bytes);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7507,"byte_end":7578,"line_start":39,"line_end":39,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7579,"byte_end":7582,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ assert!(a.is_some());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7583,"byte_end":7608,"line_start":41,"line_end":41,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7609,"byte_end":7616,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7617,"byte_end":7620,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ However, if we give it bytes representing a scalar larger than \\\\( \\ell \\\\)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7621,"byte_end":7700,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/ (in this case, \\\\( \\ell + 2 \\\\)), we'll get `None` back:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7701,"byte_end":7761,"line_start":45,"line_end":45,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7762,"byte_end":7765,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7766,"byte_end":7773,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7774,"byte_end":7815,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7816,"byte_end":7819,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ let l_plus_two_bytes: [u8; 32] = [","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7820,"byte_end":7858,"line_start":50,"line_end":50,"column_start":1,"column_end":39}},{"value":"/    0xef, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7859,"byte_end":7913,"line_start":51,"line_end":51,"column_start":1,"column_end":55}},{"value":"/    0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7914,"byte_end":7968,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":7969,"byte_end":8023,"line_start":53,"line_end":53,"column_start":1,"column_end":55}},{"value":"/    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8024,"byte_end":8078,"line_start":54,"line_end":54,"column_start":1,"column_end":55}},{"value":"/ ];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8079,"byte_end":8085,"line_start":55,"line_end":55,"column_start":1,"column_end":7}},{"value":"/ let a: Option<Scalar> = Scalar::from_canonical_bytes(l_plus_two_bytes);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8086,"byte_end":8161,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8162,"byte_end":8165,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ assert!(a.is_none());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8166,"byte_end":8191,"line_start":58,"line_end":58,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8192,"byte_end":8199,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8200,"byte_end":8203,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ Another way to create a `Scalar` is by reducing a \\\\(256\\\\)-bit integer mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8204,"byte_end":8283,"line_start":61,"line_end":61,"column_start":1,"column_end":80}},{"value":"/ \\\\( \\ell \\\\), for which one may use the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8284,"byte_end":8327,"line_start":62,"line_end":62,"column_start":1,"column_end":44}},{"value":"/ [`Scalar::from_bytes_mod_order`](struct.Scalar.html#method.from_bytes_mod_order)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8328,"byte_end":8412,"line_start":63,"line_end":63,"column_start":1,"column_end":85}},{"value":"/ method.  In the case of the second example above, this would reduce the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8413,"byte_end":8488,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ resultant scalar \\\\( \\mod \\ell \\\\), producing \\\\( 2 \\\\):","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8489,"byte_end":8549,"line_start":65,"line_end":65,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8550,"byte_end":8553,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8554,"byte_end":8561,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8562,"byte_end":8603,"line_start":68,"line_end":68,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8604,"byte_end":8607,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ let l_plus_two_bytes: [u8; 32] = [","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8608,"byte_end":8646,"line_start":70,"line_end":70,"column_start":1,"column_end":39}},{"value":"/    0xef, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8647,"byte_end":8701,"line_start":71,"line_end":71,"column_start":1,"column_end":55}},{"value":"/    0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8702,"byte_end":8756,"line_start":72,"line_end":72,"column_start":1,"column_end":55}},{"value":"/    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8757,"byte_end":8811,"line_start":73,"line_end":73,"column_start":1,"column_end":55}},{"value":"/    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8812,"byte_end":8866,"line_start":74,"line_end":74,"column_start":1,"column_end":55}},{"value":"/ ];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8867,"byte_end":8873,"line_start":75,"line_end":75,"column_start":1,"column_end":7}},{"value":"/ let a: Scalar = Scalar::from_bytes_mod_order(l_plus_two_bytes);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8874,"byte_end":8941,"line_start":76,"line_end":76,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8942,"byte_end":8945,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ let two: Scalar = Scalar::one() + Scalar::one();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8946,"byte_end":8998,"line_start":78,"line_end":78,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":8999,"byte_end":9002,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ assert!(a == two);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9003,"byte_end":9025,"line_start":80,"line_end":80,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9026,"byte_end":9033,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9034,"byte_end":9037,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ There is also a constructor that reduces a \\\\(512\\\\)-bit integer,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9038,"byte_end":9107,"line_start":83,"line_end":83,"column_start":1,"column_end":70}},{"value":"/ [`Scalar::from_bytes_mod_order_wide`](struct.Scalar.html#method.from_bytes_mod_order_wide).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9108,"byte_end":9203,"line_start":84,"line_end":84,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9204,"byte_end":9207,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ To construct a `Scalar` as the hash of some input data, use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9208,"byte_end":9271,"line_start":86,"line_end":86,"column_start":1,"column_end":64}},{"value":"/ [`Scalar::hash_from_bytes`](struct.Scalar.html#method.hash_from_bytes),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9272,"byte_end":9347,"line_start":87,"line_end":87,"column_start":1,"column_end":76}},{"value":"/ which takes a buffer, or","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9348,"byte_end":9376,"line_start":88,"line_end":88,"column_start":1,"column_end":29}},{"value":"/ [`Scalar::from_hash`](struct.Scalar.html#method.from_hash),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9377,"byte_end":9440,"line_start":89,"line_end":89,"column_start":1,"column_end":64}},{"value":"/ which allows an IUF API.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9441,"byte_end":9469,"line_start":90,"line_end":90,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9470,"byte_end":9473,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9474,"byte_end":9481,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ # extern crate curve25519_dalek;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9482,"byte_end":9518,"line_start":93,"line_end":93,"column_start":1,"column_end":37}},{"value":"/ # extern crate sha2;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9519,"byte_end":9543,"line_start":94,"line_end":94,"column_start":1,"column_end":25}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9544,"byte_end":9549,"line_start":95,"line_end":95,"column_start":1,"column_end":6}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9550,"byte_end":9567,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/ use sha2::{Digest, Sha512};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9568,"byte_end":9599,"line_start":97,"line_end":97,"column_start":1,"column_end":32}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9600,"byte_end":9641,"line_start":98,"line_end":98,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9642,"byte_end":9645,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ // Hashing a single byte slice","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9646,"byte_end":9680,"line_start":100,"line_end":100,"column_start":1,"column_end":35}},{"value":"/ let a = Scalar::hash_from_bytes::<Sha512>(b\"Abolish ICE\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9681,"byte_end":9743,"line_start":101,"line_end":101,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9744,"byte_end":9747,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ // Streaming data into a hash object","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9748,"byte_end":9788,"line_start":103,"line_end":103,"column_start":1,"column_end":41}},{"value":"/ let mut hasher = Sha512::default();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9789,"byte_end":9828,"line_start":104,"line_end":104,"column_start":1,"column_end":40}},{"value":"/ hasher.update(b\"Abolish \");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9829,"byte_end":9860,"line_start":105,"line_end":105,"column_start":1,"column_end":32}},{"value":"/ hasher.update(b\"ICE\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9861,"byte_end":9887,"line_start":106,"line_end":106,"column_start":1,"column_end":27}},{"value":"/ let a2 = Scalar::from_hash(hasher);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9888,"byte_end":9927,"line_start":107,"line_end":107,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9928,"byte_end":9931,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(a, a2);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9932,"byte_end":9954,"line_start":109,"line_end":109,"column_start":1,"column_end":23}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9955,"byte_end":9962,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9963,"byte_end":9970,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9971,"byte_end":9974,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ Finally, to create a `Scalar` with a specific bit-pattern","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":9975,"byte_end":10036,"line_start":113,"line_end":113,"column_start":1,"column_end":62}},{"value":"/ (e.g., for compatibility with X/Ed25519","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10037,"byte_end":10080,"line_start":114,"line_end":114,"column_start":1,"column_end":44}},{"value":"/ [\"clamping\"](https://github.com/isislovecruft/ed25519-dalek/blob/f790bd2ce/src/ed25519.rs#L349)),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10081,"byte_end":10182,"line_start":115,"line_end":115,"column_start":1,"column_end":102}},{"value":"/ use [`Scalar::from_bits`](struct.Scalar.html#method.from_bits). This","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10183,"byte_end":10255,"line_start":116,"line_end":116,"column_start":1,"column_end":73}},{"value":"/ constructs a scalar with exactly the bit pattern given, without any","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10256,"byte_end":10327,"line_start":117,"line_end":117,"column_start":1,"column_end":72}},{"value":"/ assurances as to reduction modulo the group order:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10328,"byte_end":10382,"line_start":118,"line_end":118,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10383,"byte_end":10386,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10387,"byte_end":10394,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10395,"byte_end":10436,"line_start":121,"line_end":121,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10437,"byte_end":10440,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ let l_plus_two_bytes: [u8; 32] = [","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10441,"byte_end":10479,"line_start":123,"line_end":123,"column_start":1,"column_end":39}},{"value":"/    0xef, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10480,"byte_end":10534,"line_start":124,"line_end":124,"column_start":1,"column_end":55}},{"value":"/    0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10535,"byte_end":10589,"line_start":125,"line_end":125,"column_start":1,"column_end":55}},{"value":"/    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10590,"byte_end":10644,"line_start":126,"line_end":126,"column_start":1,"column_end":55}},{"value":"/    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10645,"byte_end":10699,"line_start":127,"line_end":127,"column_start":1,"column_end":55}},{"value":"/ ];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10700,"byte_end":10706,"line_start":128,"line_end":128,"column_start":1,"column_end":7}},{"value":"/ let a: Scalar = Scalar::from_bits(l_plus_two_bytes);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10707,"byte_end":10763,"line_start":129,"line_end":129,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10764,"byte_end":10767,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ let two: Scalar = Scalar::one() + Scalar::one();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10768,"byte_end":10820,"line_start":131,"line_end":131,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10821,"byte_end":10824,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ assert!(a != two);              // the scalar is not reduced (mod l)…","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10825,"byte_end":10900,"line_start":133,"line_end":133,"column_start":1,"column_end":74}},{"value":"/ assert!(! a.is_canonical());    // …and therefore is not canonical.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10901,"byte_end":10974,"line_start":134,"line_end":134,"column_start":1,"column_end":72}},{"value":"/ assert!(a.reduce() == two);     // if we were to reduce it manually, it would be.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":10975,"byte_end":11060,"line_start":135,"line_end":135,"column_start":1,"column_end":86}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":11061,"byte_end":11068,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":11069,"byte_end":11072,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ The resulting `Scalar` has exactly the specified bit pattern,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":11073,"byte_end":11138,"line_start":138,"line_end":138,"column_start":1,"column_end":66}},{"value":"/ **except for the highest bit, which will be set to 0**.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":11139,"byte_end":11198,"line_start":139,"line_end":139,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1080},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":12431,"byte_end":12437,"line_start":186,"line_end":186,"column_start":12,"column_end":18},"name":"Scalar","qualname":"::scalar::Scalar","value":"Scalar {  }","parent":null,"children":[{"krate":0,"index":1081}],"decl_id":null,"docs":" The `Scalar` struct holds an integer \\\\(s < 2\\^{255} \\\\) which\n represents an element of \\\\(\\mathbb Z / \\ell\\\\).\n","sig":null,"attributes":[{"value":"/ The `Scalar` struct holds an integer \\\\(s < 2\\^{255} \\\\) which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":12271,"byte_end":12337,"line_start":183,"line_end":183,"column_start":1,"column_end":67}},{"value":"/ represents an element of \\\\(\\mathbb Z / \\ell\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":12338,"byte_end":12390,"line_start":184,"line_end":184,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13205,"byte_end":13225,"line_start":205,"line_end":205,"column_start":12,"column_end":32},"name":"from_bytes_mod_order","qualname":"<Scalar>::from_bytes_mod_order","value":"pub fn from_bytes_mod_order([u8; ]) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Scalar` by reducing a 256-bit little-endian integer\n modulo the group order \\\\( \\ell \\\\).\n","sig":null,"attributes":[{"value":"/ Construct a `Scalar` by reducing a 256-bit little-endian integer","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13080,"byte_end":13148,"line_start":203,"line_end":203,"column_start":5,"column_end":73}},{"value":"/ modulo the group order \\\\( \\ell \\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13153,"byte_end":13193,"line_start":204,"line_end":204,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13666,"byte_end":13691,"line_start":218,"line_end":218,"column_start":12,"column_end":37},"name":"from_bytes_mod_order_wide","qualname":"<Scalar>::from_bytes_mod_order_wide","value":"pub fn from_bytes_mod_order_wide(&[u8; ]) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Scalar` by reducing a 512-bit little-endian integer\n modulo the group order \\\\( \\ell \\\\).\n","sig":null,"attributes":[{"value":"/ Construct a `Scalar` by reducing a 512-bit little-endian integer","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13541,"byte_end":13609,"line_start":216,"line_end":216,"column_start":5,"column_end":73}},{"value":"/ modulo the group order \\\\( \\ell \\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13614,"byte_end":13654,"line_start":217,"line_end":217,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":14103,"byte_end":14123,"line_start":229,"line_end":229,"column_start":12,"column_end":32},"name":"from_canonical_bytes","qualname":"<Scalar>::from_canonical_bytes","value":"pub fn from_canonical_bytes([u8; ]) -> Option<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to construct a `Scalar` from a canonical byte representation.","sig":null,"attributes":[{"value":"/ Attempt to construct a `Scalar` from a canonical byte representation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13787,"byte_end":13860,"line_start":222,"line_end":222,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13865,"byte_end":13868,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13873,"byte_end":13885,"line_start":224,"line_end":224,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13890,"byte_end":13893,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ - `Some(s)`, where `s` is the `Scalar` corresponding to `bytes`,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13898,"byte_end":13966,"line_start":226,"line_end":226,"column_start":5,"column_end":73}},{"value":"/   if `bytes` is a canonical byte representation;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13971,"byte_end":14023,"line_start":227,"line_end":227,"column_start":5,"column_end":57}},{"value":"/ - `None` if `bytes` is not a canonical byte representation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":14028,"byte_end":14091,"line_start":228,"line_end":228,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":14679,"byte_end":14688,"line_start":246,"line_end":246,"column_start":18,"column_end":27},"name":"from_bits","qualname":"<Scalar>::from_bits","value":"pub const fn from_bits([u8; ]) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Scalar` from the low 255 bits of a 256-bit integer.","sig":null,"attributes":[{"value":"/ Construct a `Scalar` from the low 255 bits of a 256-bit integer.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":14431,"byte_end":14499,"line_start":241,"line_end":241,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":14504,"byte_end":14507,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This function is intended for applications like X25519 which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":14512,"byte_end":14576,"line_start":243,"line_end":243,"column_start":5,"column_end":69}},{"value":"/ require specific bit-patterns when performing scalar","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":14581,"byte_end":14637,"line_start":244,"line_end":244,"column_start":5,"column_end":61}},{"value":"/ multiplication.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":14642,"byte_end":14661,"line_start":245,"line_end":245,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23279,"byte_end":23285,"line_start":558,"line_end":558,"column_start":12,"column_end":18},"name":"random","qualname":"<Scalar>::random","value":"pub fn random<R: RngCore + CryptoRng>(&mut R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a `Scalar` chosen uniformly at random using a user-provided RNG.","sig":null,"attributes":[{"value":"/ Return a `Scalar` chosen uniformly at random using a user-provided RNG.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22665,"byte_end":22740,"line_start":534,"line_end":534,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22745,"byte_end":22748,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ # Inputs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22753,"byte_end":22765,"line_start":536,"line_end":536,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22770,"byte_end":22773,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ * `rng`: any RNG which implements the `RngCore + CryptoRng` interface.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22778,"byte_end":22852,"line_start":538,"line_end":538,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22857,"byte_end":22860,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22865,"byte_end":22878,"line_start":540,"line_end":540,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22883,"byte_end":22886,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ A random scalar within ℤ/lℤ.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22891,"byte_end":22927,"line_start":542,"line_end":542,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22932,"byte_end":22935,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22940,"byte_end":22953,"line_start":544,"line_end":544,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22958,"byte_end":22961,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22966,"byte_end":22973,"line_start":546,"line_end":546,"column_start":5,"column_end":12}},{"value":"/ extern crate rand_core;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22978,"byte_end":23005,"line_start":547,"line_end":547,"column_start":5,"column_end":32}},{"value":"/ # extern crate curve25519_dalek;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23010,"byte_end":23046,"line_start":548,"line_end":548,"column_start":5,"column_end":41}},{"value":"/ #","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23051,"byte_end":23056,"line_start":549,"line_end":549,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23061,"byte_end":23078,"line_start":550,"line_end":550,"column_start":5,"column_end":22}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23083,"byte_end":23124,"line_start":551,"line_end":551,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23129,"byte_end":23132,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ use rand_core::OsRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23137,"byte_end":23162,"line_start":553,"line_end":553,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23167,"byte_end":23170,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ let mut csprng = OsRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23175,"byte_end":23202,"line_start":555,"line_end":555,"column_start":5,"column_end":32}},{"value":"/ let a: Scalar = Scalar::random(&mut csprng);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23207,"byte_end":23255,"line_start":556,"line_end":556,"column_start":5,"column_end":53}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23260,"byte_end":23267,"line_start":557,"line_end":557,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24277,"byte_end":24292,"line_start":587,"line_end":587,"column_start":12,"column_end":27},"name":"hash_from_bytes","qualname":"<Scalar>::hash_from_bytes","value":"pub fn hash_from_bytes<D>(&[u8]) -> Scalar where D: Digest<OutputSize = U64> +\nDefault","parent":null,"children":[],"decl_id":null,"docs":" Hash a slice of bytes into a scalar.","sig":null,"attributes":[{"value":"/ Hash a slice of bytes into a scalar.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23486,"byte_end":23526,"line_start":564,"line_end":564,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23531,"byte_end":23534,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ Takes a type parameter `D`, which is any `Digest` producing 64","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23539,"byte_end":23605,"line_start":566,"line_end":566,"column_start":5,"column_end":71}},{"value":"/ bytes (512 bits) of output.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23610,"byte_end":23641,"line_start":567,"line_end":567,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23646,"byte_end":23649,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Convenience wrapper around `from_hash`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23654,"byte_end":23697,"line_start":569,"line_end":569,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23702,"byte_end":23705,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23710,"byte_end":23723,"line_start":571,"line_end":571,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23728,"byte_end":23731,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23736,"byte_end":23743,"line_start":573,"line_end":573,"column_start":5,"column_end":12}},{"value":"/ # extern crate curve25519_dalek;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23748,"byte_end":23784,"line_start":574,"line_end":574,"column_start":5,"column_end":41}},{"value":"/ # use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23789,"byte_end":23832,"line_start":575,"line_end":575,"column_start":5,"column_end":48}},{"value":"/ extern crate sha2;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23837,"byte_end":23859,"line_start":576,"line_end":576,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23864,"byte_end":23867,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ use sha2::Sha512;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23872,"byte_end":23893,"line_start":578,"line_end":578,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23898,"byte_end":23901,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ # // Need fn main() here in comment so the doctest compiles","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23906,"byte_end":23969,"line_start":580,"line_end":580,"column_start":5,"column_end":68}},{"value":"/ # // See https://doc.rust-lang.org/book/documentation.html#documentation-as-tests","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":23974,"byte_end":24059,"line_start":581,"line_end":581,"column_start":5,"column_end":90}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24064,"byte_end":24081,"line_start":582,"line_end":582,"column_start":5,"column_end":22}},{"value":"/ let msg = \"To really appreciate architecture, you may even need to commit a murder\";","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24086,"byte_end":24174,"line_start":583,"line_end":583,"column_start":5,"column_end":93}},{"value":"/ let s = Scalar::hash_from_bytes::<Sha512>(msg.as_bytes());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24179,"byte_end":24241,"line_start":584,"line_end":584,"column_start":5,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24246,"byte_end":24253,"line_start":585,"line_end":585,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24258,"byte_end":24265,"line_start":586,"line_end":586,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25976,"byte_end":25985,"line_start":629,"line_end":629,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<Scalar>::from_hash","value":"pub fn from_hash<D>(D) -> Scalar where D: Digest<OutputSize = U64>","parent":null,"children":[],"decl_id":null,"docs":" Construct a scalar from an existing `Digest` instance.","sig":null,"attributes":[{"value":"/ Construct a scalar from an existing `Digest` instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24486,"byte_end":24544,"line_start":595,"line_end":595,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24549,"byte_end":24552,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ Use this instead of `hash_from_bytes` if it is more convenient","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24557,"byte_end":24623,"line_start":597,"line_end":597,"column_start":5,"column_end":71}},{"value":"/ to stream data into the `Digest` than to pass a single byte","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24628,"byte_end":24691,"line_start":598,"line_end":598,"column_start":5,"column_end":68}},{"value":"/ slice.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24696,"byte_end":24706,"line_start":599,"line_end":599,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24711,"byte_end":24714,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24719,"byte_end":24732,"line_start":601,"line_end":601,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24737,"byte_end":24740,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24745,"byte_end":24752,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"/ # extern crate curve25519_dalek;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24757,"byte_end":24793,"line_start":604,"line_end":604,"column_start":5,"column_end":41}},{"value":"/ # use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24798,"byte_end":24841,"line_start":605,"line_end":605,"column_start":5,"column_end":48}},{"value":"/ extern crate sha2;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24846,"byte_end":24868,"line_start":606,"line_end":606,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24873,"byte_end":24876,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ use sha2::Digest;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24881,"byte_end":24902,"line_start":608,"line_end":608,"column_start":5,"column_end":26}},{"value":"/ use sha2::Sha512;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24907,"byte_end":24928,"line_start":609,"line_end":609,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24933,"byte_end":24936,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24941,"byte_end":24958,"line_start":611,"line_end":611,"column_start":5,"column_end":22}},{"value":"/ let mut h = Sha512::new()","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24963,"byte_end":24992,"line_start":612,"line_end":612,"column_start":5,"column_end":34}},{"value":"/     .chain(\"To really appreciate architecture, you may even need to commit a murder.\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":24997,"byte_end":25087,"line_start":613,"line_end":613,"column_start":5,"column_end":95}},{"value":"/     .chain(\"While the programs used for The Manhattan Transcripts are of the most extreme\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25092,"byte_end":25187,"line_start":614,"line_end":614,"column_start":5,"column_end":100}},{"value":"/     .chain(\"nature, they also parallel the most common formula plot: the archetype of\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25192,"byte_end":25283,"line_start":615,"line_end":615,"column_start":5,"column_end":96}},{"value":"/     .chain(\"murder. Other phantasms were occasionally used to underline the fact that\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25288,"byte_end":25379,"line_start":616,"line_end":616,"column_start":5,"column_end":96}},{"value":"/     .chain(\"perhaps all architecture, rather than being about functional standards, is\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25384,"byte_end":25476,"line_start":617,"line_end":617,"column_start":5,"column_end":97}},{"value":"/     .chain(\"about love and death.\");","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25481,"byte_end":25521,"line_start":618,"line_end":618,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25526,"byte_end":25529,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ let s = Scalar::from_hash(h);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25534,"byte_end":25567,"line_start":620,"line_end":620,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25572,"byte_end":25575,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", s.to_bytes());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25580,"byte_end":25615,"line_start":622,"line_end":622,"column_start":5,"column_end":40}},{"value":"/ assert!(s == Scalar::from_bits([ 21,  88, 208, 252,  63, 122, 210, 152,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25620,"byte_end":25695,"line_start":623,"line_end":623,"column_start":5,"column_end":80}},{"value":"/                                 154,  38,  15,  23,  16, 167,  80, 150,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25700,"byte_end":25775,"line_start":624,"line_end":624,"column_start":5,"column_end":80}},{"value":"/                                 192, 221,  77, 226,  62,  25, 224, 148,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25780,"byte_end":25855,"line_start":625,"line_end":625,"column_start":5,"column_end":80}},{"value":"/                                 239,  48, 176,  10, 185,  69, 168,  11, ]));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25860,"byte_end":25940,"line_start":626,"line_end":626,"column_start":5,"column_end":85}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25945,"byte_end":25952,"line_start":627,"line_end":627,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":25957,"byte_end":25964,"line_start":628,"line_end":628,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26492,"byte_end":26500,"line_start":648,"line_end":648,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<Scalar>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert this `Scalar` to its underlying sequence of bytes.","sig":null,"attributes":[{"value":"/ Convert this `Scalar` to its underlying sequence of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26214,"byte_end":26276,"line_start":637,"line_end":637,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26281,"byte_end":26284,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26289,"byte_end":26302,"line_start":639,"line_end":639,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26307,"byte_end":26310,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26315,"byte_end":26322,"line_start":641,"line_end":641,"column_start":5,"column_end":12}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26327,"byte_end":26368,"line_start":642,"line_end":642,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26373,"byte_end":26376,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ let s: Scalar = Scalar::zero();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26381,"byte_end":26416,"line_start":644,"line_end":644,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26421,"byte_end":26424,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ assert!(s.to_bytes() == [0u8; 32]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26429,"byte_end":26468,"line_start":646,"line_end":646,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26473,"byte_end":26480,"line_start":647,"line_end":647,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26850,"byte_end":26858,"line_start":663,"line_end":663,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Scalar>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" View the little-endian byte encoding of the integer representing this Scalar.","sig":null,"attributes":[{"value":"/ View the little-endian byte encoding of the integer representing this Scalar.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26552,"byte_end":26633,"line_start":652,"line_end":652,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26638,"byte_end":26641,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26646,"byte_end":26659,"line_start":654,"line_end":654,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26664,"byte_end":26667,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26672,"byte_end":26679,"line_start":656,"line_end":656,"column_start":5,"column_end":12}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26684,"byte_end":26725,"line_start":657,"line_end":657,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26730,"byte_end":26733,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ let s: Scalar = Scalar::zero();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26738,"byte_end":26773,"line_start":659,"line_end":659,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26778,"byte_end":26781,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ assert!(s.as_bytes() == &[0u8; 32]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26786,"byte_end":26826,"line_start":661,"line_end":661,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26831,"byte_end":26838,"line_start":662,"line_end":662,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26959,"byte_end":26963,"line_start":668,"line_end":668,"column_start":12,"column_end":16},"name":"zero","qualname":"<Scalar>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the scalar \\\\( 0 \\\\).\n","sig":null,"attributes":[{"value":"/ Construct the scalar \\\\( 0 \\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":26912,"byte_end":26947,"line_start":667,"line_end":667,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27069,"byte_end":27072,"line_start":673,"line_end":673,"column_start":12,"column_end":15},"name":"one","qualname":"<Scalar>::one","value":"pub fn one() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the scalar \\\\( 1 \\\\).\n","sig":null,"attributes":[{"value":"/ Construct the scalar \\\\( 1 \\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27022,"byte_end":27057,"line_start":672,"line_end":672,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28758,"byte_end":28764,"line_start":719,"line_end":719,"column_start":12,"column_end":18},"name":"invert","qualname":"<Scalar>::invert","value":"pub fn invert(&Self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Given a nonzero `Scalar`, compute its multiplicative inverse.","sig":null,"attributes":[{"value":"/ Given a nonzero `Scalar`, compute its multiplicative inverse.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27287,"byte_end":27352,"line_start":682,"line_end":682,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27357,"byte_end":27360,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27365,"byte_end":27378,"line_start":684,"line_end":684,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27383,"byte_end":27386,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ `self` **MUST** be nonzero.  If you cannot","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27391,"byte_end":27437,"line_start":686,"line_end":686,"column_start":5,"column_end":51}},{"value":"/ *prove* that this is the case, you **SHOULD NOT USE THIS","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27442,"byte_end":27502,"line_start":687,"line_end":687,"column_start":5,"column_end":65}},{"value":"/ FUNCTION**.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27507,"byte_end":27522,"line_start":688,"line_end":688,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27527,"byte_end":27530,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27535,"byte_end":27548,"line_start":690,"line_end":690,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27553,"byte_end":27556,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ The multiplicative inverse of the this `Scalar`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27561,"byte_end":27613,"line_start":692,"line_end":692,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27618,"byte_end":27621,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27626,"byte_end":27639,"line_start":694,"line_end":694,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27644,"byte_end":27647,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27652,"byte_end":27659,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27664,"byte_end":27705,"line_start":697,"line_end":697,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27710,"byte_end":27713,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ // x = 2238329342913194256032495932344128051776374960164957527413114840482143558222","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27718,"byte_end":27805,"line_start":699,"line_end":699,"column_start":5,"column_end":92}},{"value":"/ let X: Scalar = Scalar::from_bytes_mod_order([","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27810,"byte_end":27860,"line_start":700,"line_end":700,"column_start":5,"column_end":55}},{"value":"/         0x4e, 0x5a, 0xb4, 0x34, 0x5d, 0x47, 0x08, 0x84,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27865,"byte_end":27924,"line_start":701,"line_end":701,"column_start":5,"column_end":64}},{"value":"/         0x59, 0x13, 0xb4, 0x64, 0x1b, 0xc2, 0x7d, 0x52,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27929,"byte_end":27988,"line_start":702,"line_end":702,"column_start":5,"column_end":64}},{"value":"/         0x52, 0xa5, 0x85, 0x10, 0x1b, 0xcc, 0x42, 0x44,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":27993,"byte_end":28052,"line_start":703,"line_end":703,"column_start":5,"column_end":64}},{"value":"/         0xd4, 0x49, 0xf4, 0xa8, 0x79, 0xd9, 0xf2, 0x04,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28057,"byte_end":28116,"line_start":704,"line_end":704,"column_start":5,"column_end":64}},{"value":"/     ]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28121,"byte_end":28132,"line_start":705,"line_end":705,"column_start":5,"column_end":16}},{"value":"/ // 1/x = 6859937278830797291664592131120606308688036382723378951768035303146619657244","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28137,"byte_end":28226,"line_start":706,"line_end":706,"column_start":5,"column_end":94}},{"value":"/ let XINV: Scalar = Scalar::from_bytes_mod_order([","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28231,"byte_end":28284,"line_start":707,"line_end":707,"column_start":5,"column_end":58}},{"value":"/         0x1c, 0xdc, 0x17, 0xfc, 0xe0, 0xe9, 0xa5, 0xbb,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28289,"byte_end":28348,"line_start":708,"line_end":708,"column_start":5,"column_end":64}},{"value":"/         0xd9, 0x24, 0x7e, 0x56, 0xbb, 0x01, 0x63, 0x47,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28353,"byte_end":28412,"line_start":709,"line_end":709,"column_start":5,"column_end":64}},{"value":"/         0xbb, 0xba, 0x31, 0xed, 0xd5, 0xa9, 0xbb, 0x96,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28417,"byte_end":28476,"line_start":710,"line_end":710,"column_start":5,"column_end":64}},{"value":"/         0xd5, 0x0b, 0xcd, 0x7a, 0x3f, 0x96, 0x2a, 0x0f,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28481,"byte_end":28540,"line_start":711,"line_end":711,"column_start":5,"column_end":64}},{"value":"/     ]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28545,"byte_end":28556,"line_start":712,"line_end":712,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28561,"byte_end":28564,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ let inv_X: Scalar = X.invert();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28569,"byte_end":28604,"line_start":714,"line_end":714,"column_start":5,"column_end":40}},{"value":"/ assert!(XINV == inv_X);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28609,"byte_end":28636,"line_start":715,"line_end":715,"column_start":5,"column_end":32}},{"value":"/ let should_be_one: Scalar = &inv_X * &X;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28641,"byte_end":28685,"line_start":716,"line_end":716,"column_start":5,"column_end":49}},{"value":"/ assert!(should_be_one == Scalar::one());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28690,"byte_end":28734,"line_start":717,"line_end":717,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28739,"byte_end":28746,"line_start":718,"line_end":718,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":30040,"byte_end":30052,"line_start":761,"line_end":761,"column_start":12,"column_end":24},"name":"batch_invert","qualname":"<Scalar>::batch_invert","value":"pub fn batch_invert(&mut [Scalar]) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Given a slice of nonzero (possibly secret) `Scalar`s,\n compute their inverses in a batch.","sig":null,"attributes":[{"value":"/ Given a slice of nonzero (possibly secret) `Scalar`s,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28833,"byte_end":28890,"line_start":723,"line_end":723,"column_start":5,"column_end":62}},{"value":"/ compute their inverses in a batch.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28895,"byte_end":28933,"line_start":724,"line_end":724,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28938,"byte_end":28941,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28946,"byte_end":28958,"line_start":726,"line_end":726,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28963,"byte_end":28966,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ Each element of `inputs` is replaced by its inverse.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":28971,"byte_end":29027,"line_start":728,"line_end":728,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29032,"byte_end":29035,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ The product of all inverses is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29040,"byte_end":29084,"line_start":730,"line_end":730,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29089,"byte_end":29092,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29097,"byte_end":29110,"line_start":732,"line_end":732,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29115,"byte_end":29118,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ All input `Scalars` **MUST** be nonzero.  If you cannot","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29123,"byte_end":29182,"line_start":734,"line_end":734,"column_start":5,"column_end":64}},{"value":"/ *prove* that this is the case, you **SHOULD NOT USE THIS","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29187,"byte_end":29247,"line_start":735,"line_end":735,"column_start":5,"column_end":65}},{"value":"/ FUNCTION**.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29252,"byte_end":29267,"line_start":736,"line_end":736,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29272,"byte_end":29275,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29280,"byte_end":29293,"line_start":738,"line_end":738,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29298,"byte_end":29301,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29306,"byte_end":29313,"line_start":740,"line_end":740,"column_start":5,"column_end":12}},{"value":"/ # extern crate curve25519_dalek;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29318,"byte_end":29354,"line_start":741,"line_end":741,"column_start":5,"column_end":41}},{"value":"/ # use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29359,"byte_end":29402,"line_start":742,"line_end":742,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29407,"byte_end":29424,"line_start":743,"line_end":743,"column_start":5,"column_end":22}},{"value":"/ let mut scalars = [","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29429,"byte_end":29452,"line_start":744,"line_end":744,"column_start":5,"column_end":28}},{"value":"/     Scalar::from(3u64),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29457,"byte_end":29484,"line_start":745,"line_end":745,"column_start":5,"column_end":32}},{"value":"/     Scalar::from(5u64),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29489,"byte_end":29516,"line_start":746,"line_end":746,"column_start":5,"column_end":32}},{"value":"/     Scalar::from(7u64),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29521,"byte_end":29548,"line_start":747,"line_end":747,"column_start":5,"column_end":32}},{"value":"/     Scalar::from(11u64),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29553,"byte_end":29581,"line_start":748,"line_end":748,"column_start":5,"column_end":33}},{"value":"/ ];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29586,"byte_end":29592,"line_start":749,"line_end":749,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29597,"byte_end":29600,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ let allinv = Scalar::batch_invert(&mut scalars);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29605,"byte_end":29657,"line_start":751,"line_end":751,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29662,"byte_end":29665,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(allinv, Scalar::from(3*5*7*11u64).invert());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29670,"byte_end":29729,"line_start":753,"line_end":753,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(scalars[0], Scalar::from(3u64).invert());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29734,"byte_end":29790,"line_start":754,"line_end":754,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(scalars[1], Scalar::from(5u64).invert());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29795,"byte_end":29851,"line_start":755,"line_end":755,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(scalars[2], Scalar::from(7u64).invert());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29856,"byte_end":29912,"line_start":756,"line_end":756,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(scalars[3], Scalar::from(11u64).invert());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29917,"byte_end":29974,"line_start":757,"line_end":757,"column_start":5,"column_end":62}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29979,"byte_end":29986,"line_start":758,"line_end":758,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":29991,"byte_end":29998,"line_start":759,"line_end":759,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":30003,"byte_end":30028,"line_start":760,"line_end":760,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43075,"byte_end":43081,"line_start":1089,"line_end":1089,"column_start":12,"column_end":18},"name":"reduce","qualname":"<Scalar>::reduce","value":"pub fn reduce(&Self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Reduce this `Scalar` modulo \\\\(\\ell\\\\).\n","sig":null,"attributes":[{"value":"/ Reduce this `Scalar` modulo \\\\(\\ell\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":42991,"byte_end":43034,"line_start":1087,"line_end":1087,"column_start":5,"column_end":48}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43039,"byte_end":43063,"line_start":1088,"line_end":1088,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43987,"byte_end":43999,"line_start":1114,"line_end":1114,"column_start":12,"column_end":24},"name":"is_canonical","qualname":"<Scalar>::is_canonical","value":"pub fn is_canonical(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether this `Scalar` is the canonical representative mod \\\\(\\ell\\\\).","sig":null,"attributes":[{"value":"/ Check whether this `Scalar` is the canonical representative mod \\\\(\\ell\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43294,"byte_end":43373,"line_start":1096,"line_end":1096,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43378,"byte_end":43381,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ This is intended for uses like input validation, where variable-time code is acceptable.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43386,"byte_end":43478,"line_start":1098,"line_end":1098,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43483,"byte_end":43486,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43491,"byte_end":43498,"line_start":1100,"line_end":1100,"column_start":5,"column_end":12}},{"value":"/ # extern crate curve25519_dalek;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43503,"byte_end":43539,"line_start":1101,"line_end":1101,"column_start":5,"column_end":41}},{"value":"/ # extern crate subtle;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43544,"byte_end":43570,"line_start":1102,"line_end":1102,"column_start":5,"column_end":31}},{"value":"/ # use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43575,"byte_end":43618,"line_start":1103,"line_end":1103,"column_start":5,"column_end":48}},{"value":"/ # use subtle::ConditionallySelectable;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43623,"byte_end":43665,"line_start":1104,"line_end":1104,"column_start":5,"column_end":47}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43670,"byte_end":43687,"line_start":1105,"line_end":1105,"column_start":5,"column_end":22}},{"value":"/ // 2^255 - 1, since `from_bits` clears the high bit","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43692,"byte_end":43747,"line_start":1106,"line_end":1106,"column_start":5,"column_end":60}},{"value":"/ let _2_255_minus_1 = Scalar::from_bits([0xff;32]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43752,"byte_end":43806,"line_start":1107,"line_end":1107,"column_start":5,"column_end":59}},{"value":"/ assert!(!_2_255_minus_1.is_canonical());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43811,"byte_end":43855,"line_start":1108,"line_end":1108,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43860,"byte_end":43863,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ let reduced = _2_255_minus_1.reduce();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43868,"byte_end":43910,"line_start":1110,"line_end":1110,"column_start":5,"column_end":47}},{"value":"/ assert!(reduced.is_canonical());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43915,"byte_end":43951,"line_start":1111,"line_end":1111,"column_start":5,"column_end":41}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43956,"byte_end":43963,"line_start":1112,"line_end":1112,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":43968,"byte_end":43975,"line_start":1113,"line_end":1113,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":195},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"montgomery","qualname":"::montgomery","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":1512},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":1528},{"krate":0,"index":1129},{"krate":0,"index":1141},{"krate":0,"index":1138},{"krate":0,"index":1136},{"krate":0,"index":1133},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":1142},{"krate":0,"index":1149},{"krate":0,"index":1147},{"krate":0,"index":1145},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":1150},{"krate":0,"index":1152},{"krate":0,"index":1156},{"krate":0,"index":1160},{"krate":0,"index":1163},{"krate":0,"index":1167},{"krate":0,"index":1171},{"krate":0,"index":236},{"krate":0,"index":242},{"krate":0,"index":245}],"decl_id":null,"docs":" Scalar multiplication on the Montgomery form of Curve25519.","sig":null,"attributes":[{"value":"/ Scalar multiplication on the Montgomery form of Curve25519.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":66525,"byte_end":66588,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":66589,"byte_end":66592,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ To avoid notational confusion with the Edwards code, we use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":66593,"byte_end":66656,"line_start":13,"line_end":13,"column_start":1,"column_end":64}},{"value":"/ variables \\\\( u, v \\\\) for the Montgomery curve, so that “Montgomery","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":66657,"byte_end":66731,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"/ \\\\(u\\\\)” here corresponds to “Montgomery \\\\(x\\\\)” elsewhere.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":66732,"byte_end":66802,"line_start":15,"line_end":15,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":66803,"byte_end":66806,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Montgomery arithmetic works not on the curve itself, but on the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":66807,"byte_end":66874,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ \\\\(u\\\\)-line, which discards sign information and unifies the curve","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":66875,"byte_end":66946,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"/ and its quadratic twist.  See [_Montgomery curves and their","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":66947,"byte_end":67010,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ arithmetic_][costello-smith] by Costello and Smith for more details.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67011,"byte_end":67083,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67084,"byte_end":67087,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The `MontgomeryPoint` struct contains the affine \\\\(u\\\\)-coordinate","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67088,"byte_end":67159,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ \\\\(u\\_0(P)\\\\) of a point \\\\(P\\\\) on either the curve or the twist.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67160,"byte_end":67230,"line_start":23,"line_end":23,"column_start":1,"column_end":71}},{"value":"/ Here the map \\\\(u\\_0 : \\mathcal M \\rightarrow \\mathbb F\\_p \\\\) is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67231,"byte_end":67300,"line_start":24,"line_end":24,"column_start":1,"column_end":70}},{"value":"/ defined by \\\\(u\\_0((u,v)) = u\\\\); \\\\(u\\_0(\\mathcal O) = 0\\\\).  See","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67301,"byte_end":67371,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ section 5.4 of Costello-Smith for more details.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67372,"byte_end":67423,"line_start":26,"line_end":26,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67424,"byte_end":67427,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Scalar Multiplication","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67428,"byte_end":67455,"line_start":28,"line_end":28,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67456,"byte_end":67459,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Scalar multiplication on `MontgomeryPoint`s is provided by the `*`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67460,"byte_end":67530,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ operator, which implements the Montgomery ladder.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67531,"byte_end":67584,"line_start":31,"line_end":31,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67585,"byte_end":67588,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Edwards Conversion","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67589,"byte_end":67613,"line_start":33,"line_end":33,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67614,"byte_end":67617,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The \\\\(2\\\\)-to-\\\\(1\\\\) map from the Edwards model to the Montgomery","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67618,"byte_end":67689,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/ \\\\(u\\\\)-line is provided by `EdwardsPoint::to_montgomery()`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67690,"byte_end":67754,"line_start":36,"line_end":36,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67755,"byte_end":67758,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ To lift a `MontgomeryPoint` to an `EdwardsPoint`, use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67759,"byte_end":67816,"line_start":38,"line_end":38,"column_start":1,"column_end":58}},{"value":"/ `MontgomeryPoint::to_edwards()`, which takes a sign parameter.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67817,"byte_end":67883,"line_start":39,"line_end":39,"column_start":1,"column_end":67}},{"value":"/ This function rejects `MontgomeryPoints` which correspond to points","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67884,"byte_end":67955,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ on the twist.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67956,"byte_end":67973,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67974,"byte_end":67977,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [costello-smith]: https://eprint.iacr.org/2017/212.pdf","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":67978,"byte_end":68036,"line_start":43,"line_end":43,"column_start":1,"column_end":59}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":68318,"byte_end":68343,"line_start":49,"line_end":49,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":1129},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":68862,"byte_end":68877,"line_start":70,"line_end":70,"column_start":12,"column_end":27},"name":"MontgomeryPoint","qualname":"::montgomery::MontgomeryPoint","value":"","parent":null,"children":[],"decl_id":null,"docs":" Holds the \\\\(u\\\\)-coordinate of a point on the Montgomery form of\n Curve25519 or its twist.\n","sig":null,"attributes":[{"value":"/ Holds the \\\\(u\\\\)-coordinate of a point on the Montgomery form of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":68639,"byte_end":68708,"line_start":66,"line_end":66,"column_start":1,"column_end":70}},{"value":"/ Curve25519 or its twist.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":68709,"byte_end":68737,"line_start":67,"line_end":67,"column_start":1,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1131},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":68878,"byte_end":68890,"line_start":70,"line_end":70,"column_start":28,"column_end":40},"name":"0","qualname":"::montgomery::MontgomeryPoint::0","value":"[u8; 32]","parent":{"krate":0,"index":1129},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69687,"byte_end":69695,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<MontgomeryPoint>::as_bytes","value":"pub fn as_bytes<'a>(&'a Self) -> &'a [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" View this `MontgomeryPoint` as an array of bytes.\n","sig":null,"attributes":[{"value":"/ View this `MontgomeryPoint` as an array of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69622,"byte_end":69675,"line_start":103,"line_end":103,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69823,"byte_end":69831,"line_start":109,"line_end":109,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<MontgomeryPoint>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Convert this `MontgomeryPoint` to an array of bytes.\n","sig":null,"attributes":[{"value":"/ Convert this `MontgomeryPoint` to an array of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69755,"byte_end":69811,"line_start":108,"line_end":108,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70468,"byte_end":70478,"line_start":129,"line_end":129,"column_start":12,"column_end":22},"name":"to_edwards","qualname":"<MontgomeryPoint>::to_edwards","value":"pub fn to_edwards(&Self, u8) -> Option<EdwardsPoint>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to convert to an `EdwardsPoint`, using the supplied\n choice of sign for the `EdwardsPoint`.","sig":null,"attributes":[{"value":"/ Attempt to convert to an `EdwardsPoint`, using the supplied","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69879,"byte_end":69942,"line_start":113,"line_end":113,"column_start":5,"column_end":68}},{"value":"/ choice of sign for the `EdwardsPoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69947,"byte_end":69989,"line_start":114,"line_end":114,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69994,"byte_end":69997,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Inputs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70002,"byte_end":70014,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70019,"byte_end":70022,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ * `sign`: a `u8` donating the desired sign of the resulting","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70027,"byte_end":70090,"line_start":118,"line_end":118,"column_start":5,"column_end":68}},{"value":"/   `EdwardsPoint`.  `0` denotes positive and `1` negative.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70095,"byte_end":70156,"line_start":119,"line_end":119,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70161,"byte_end":70164,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70169,"byte_end":70181,"line_start":121,"line_end":121,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70186,"byte_end":70189,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ * `Some(EdwardsPoint)` if `self` is the \\\\(u\\\\)-coordinate of a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70194,"byte_end":70261,"line_start":123,"line_end":123,"column_start":5,"column_end":72}},{"value":"/ point on (the Montgomery form of) Curve25519;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70266,"byte_end":70315,"line_start":124,"line_end":124,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70320,"byte_end":70323,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ * `None` if `self` is the \\\\(u\\\\)-coordinate of a point on the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70328,"byte_end":70394,"line_start":126,"line_end":126,"column_start":5,"column_end":71}},{"value":"/ twist of (the Montgomery form of) Curve25519;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70399,"byte_end":70448,"line_start":127,"line_end":127,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":70453,"byte_end":70456,"line_start":128,"line_end":128,"column_start":5,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":250},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"edwards","qualname":"::edwards","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":1532},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":1566},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":1576},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":1174},{"krate":0,"index":1192},{"krate":0,"index":1189},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1178},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":1193},{"krate":0,"index":1200},{"krate":0,"index":1198},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":307},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":1201},{"krate":0,"index":1205},{"krate":0,"index":1209},{"krate":0,"index":332},{"krate":0,"index":1212},{"krate":0,"index":335},{"krate":0,"index":1214},{"krate":0,"index":1218},{"krate":0,"index":1222},{"krate":0,"index":340},{"krate":0,"index":1225},{"krate":0,"index":343},{"krate":0,"index":348},{"krate":0,"index":352},{"krate":0,"index":355},{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1233},{"krate":0,"index":1237},{"krate":0,"index":1240},{"krate":0,"index":1244},{"krate":0,"index":1248},{"krate":0,"index":358},{"krate":0,"index":363},{"krate":0,"index":368},{"krate":0,"index":373},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":389},{"krate":0,"index":1251},{"krate":0,"index":1255},{"krate":0,"index":391},{"krate":0,"index":395},{"krate":0,"index":400},{"krate":0,"index":405},{"krate":0,"index":409},{"krate":0,"index":414},{"krate":0,"index":416}],"decl_id":null,"docs":" Group operations for Curve25519, in Edwards form.","sig":null,"attributes":[{"value":"/ Group operations for Curve25519, in Edwards form.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79420,"byte_end":79473,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79474,"byte_end":79477,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Encoding and Decoding","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79478,"byte_end":79506,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79507,"byte_end":79510,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Encoding is done by converting to and from a `CompressedEdwardsY`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79511,"byte_end":79580,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ struct, which is a typed wrapper around `[u8; 32]`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79581,"byte_end":79636,"line_start":16,"line_end":16,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79637,"byte_end":79640,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ## Equality Testing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79641,"byte_end":79664,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79665,"byte_end":79668,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The `EdwardsPoint` struct implements the `subtle::ConstantTimeEq`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79669,"byte_end":79738,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ trait for constant-time equality checking, and the Rust `Eq` trait","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79739,"byte_end":79809,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ for variable-time equality checking.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79810,"byte_end":79850,"line_start":22,"line_end":22,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79851,"byte_end":79854,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Cofactor-related functions","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79855,"byte_end":79888,"line_start":24,"line_end":24,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79889,"byte_end":79892,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The order of the group of points on the curve \\\\(\\mathcal E\\\\)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79893,"byte_end":79959,"line_start":26,"line_end":26,"column_start":1,"column_end":67}},{"value":"/ is \\\\(|\\mathcal E| = 8\\ell \\\\), so its structure is \\\\( \\mathcal","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":79960,"byte_end":80028,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/ E = \\mathcal E[8] \\times \\mathcal E[\\ell]\\\\).  The torsion","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80029,"byte_end":80091,"line_start":28,"line_end":28,"column_start":1,"column_end":63}},{"value":"/ subgroup \\\\( \\mathcal E[8] \\\\) consists of eight points of small","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80092,"byte_end":80160,"line_start":29,"line_end":29,"column_start":1,"column_end":69}},{"value":"/ order.  Technically, all of \\\\(\\mathcal E\\\\) is torsion, but we","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80161,"byte_end":80228,"line_start":30,"line_end":30,"column_start":1,"column_end":68}},{"value":"/ use the word only to refer to the small \\\\(\\mathcal E[8]\\\\) part, not","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80229,"byte_end":80302,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/ the large prime-order \\\\(\\mathcal E[\\ell]\\\\) part.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80303,"byte_end":80357,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80358,"byte_end":80361,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ To test if a point is in \\\\( \\mathcal E[8] \\\\), use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80362,"byte_end":80417,"line_start":34,"line_end":34,"column_start":1,"column_end":56}},{"value":"/ `EdwardsPoint::is_small_order()`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80418,"byte_end":80455,"line_start":35,"line_end":35,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80456,"byte_end":80459,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ To test if a point is in \\\\( \\mathcal E[\\ell] \\\\), use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80460,"byte_end":80518,"line_start":37,"line_end":37,"column_start":1,"column_end":59}},{"value":"/ `EdwardsPoint::is_torsion_free()`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80519,"byte_end":80557,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80558,"byte_end":80561,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ To multiply by the cofactor, use `EdwardsPoint::mul_by_cofactor()`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80562,"byte_end":80633,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80634,"byte_end":80637,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ To avoid dealing with cofactors entirely, consider using Ristretto.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80638,"byte_end":80709,"line_start":42,"line_end":42,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80710,"byte_end":80713,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ## Scalars","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80714,"byte_end":80728,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80729,"byte_end":80732,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Scalars are represented by the `Scalar` struct.  To construct a scalar with a specific bit","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80733,"byte_end":80827,"line_start":46,"line_end":46,"column_start":1,"column_end":95}},{"value":"/ pattern, see `Scalar::from_bits()`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80828,"byte_end":80867,"line_start":47,"line_end":47,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80868,"byte_end":80871,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Scalar Multiplication","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80872,"byte_end":80900,"line_start":49,"line_end":49,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80901,"byte_end":80904,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Scalar multiplication on Edwards points is provided by:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80905,"byte_end":80964,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80965,"byte_end":80968,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ * the `*` operator between a `Scalar` and a `EdwardsPoint`, which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":80969,"byte_end":81038,"line_start":53,"line_end":53,"column_start":1,"column_end":70}},{"value":"/ performs constant-time variable-base scalar multiplication;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81039,"byte_end":81102,"line_start":54,"line_end":54,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81103,"byte_end":81106,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ * the `*` operator between a `Scalar` and a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81107,"byte_end":81154,"line_start":56,"line_end":56,"column_start":1,"column_end":48}},{"value":"/ `EdwardsBasepointTable`, which performs constant-time fixed-base","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81155,"byte_end":81223,"line_start":57,"line_end":57,"column_start":1,"column_end":69}},{"value":"/ scalar multiplication;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81224,"byte_end":81250,"line_start":58,"line_end":58,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81251,"byte_end":81254,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ * an implementation of the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81255,"byte_end":81285,"line_start":60,"line_end":60,"column_start":1,"column_end":31}},{"value":"/ [`MultiscalarMul`](../traits/trait.MultiscalarMul.html) trait for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81286,"byte_end":81355,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/ constant-time variable-base multiscalar multiplication;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81356,"byte_end":81415,"line_start":62,"line_end":62,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81416,"byte_end":81419,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ * an implementation of the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81420,"byte_end":81450,"line_start":64,"line_end":64,"column_start":1,"column_end":31}},{"value":"/ [`VartimeMultiscalarMul`](../traits/trait.VartimeMultiscalarMul.html)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81451,"byte_end":81524,"line_start":65,"line_end":65,"column_start":1,"column_end":74}},{"value":"/ trait for variable-time variable-base multiscalar multiplication;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81525,"byte_end":81594,"line_start":66,"line_end":66,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81595,"byte_end":81598,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ## Implementation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81599,"byte_end":81620,"line_start":68,"line_end":68,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81621,"byte_end":81624,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ The Edwards arithmetic is implemented using the “extended twisted","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81625,"byte_end":81696,"line_start":70,"line_end":70,"column_start":1,"column_end":70}},{"value":"/ coordinates” of Hisil, Wong, Carter, and Dawson, and the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81697,"byte_end":81759,"line_start":71,"line_end":71,"column_start":1,"column_end":61}},{"value":"/ corresponding complete formulas.  For more details,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81760,"byte_end":81815,"line_start":72,"line_end":72,"column_start":1,"column_end":56}},{"value":"/ see the [`curve_models` submodule][curve_models]","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81816,"byte_end":81868,"line_start":73,"line_end":73,"column_start":1,"column_end":53}},{"value":"/ of the internal documentation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81869,"byte_end":81903,"line_start":74,"line_end":74,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81904,"byte_end":81907,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ## Validity Checking","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81908,"byte_end":81932,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81933,"byte_end":81936,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ There is no function for checking whether a point is valid.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":81937,"byte_end":82000,"line_start":78,"line_end":78,"column_start":1,"column_end":64}},{"value":"/ Instead, the `EdwardsPoint` struct is guaranteed to hold a valid","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":82001,"byte_end":82069,"line_start":79,"line_end":79,"column_start":1,"column_end":69}},{"value":"/ point on the curve.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":82070,"byte_end":82093,"line_start":80,"line_end":80,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":82094,"byte_end":82097,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ We use the Rust type system to make invalid points","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":82098,"byte_end":82152,"line_start":82,"line_end":82,"column_start":1,"column_end":55}},{"value":"/ unrepresentable: `EdwardsPoint` objects can only be created via","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":82153,"byte_end":82220,"line_start":83,"line_end":83,"column_start":1,"column_end":68}},{"value":"/ successful decompression of a compressed point, or else by","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":82221,"byte_end":82283,"line_start":84,"line_end":84,"column_start":1,"column_end":63}},{"value":"/ operations on other (valid) `EdwardsPoint`s.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":82284,"byte_end":82332,"line_start":85,"line_end":85,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":82333,"byte_end":82336,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ [curve_models]: https://doc-internal.dalek.rs/curve25519_dalek/backend/serial/curve_models/index.html","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":82337,"byte_end":82442,"line_start":87,"line_end":87,"column_start":1,"column_end":106}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":82724,"byte_end":82749,"line_start":93,"line_end":93,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":1174},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84515,"byte_end":84533,"line_start":154,"line_end":154,"column_start":12,"column_end":30},"name":"CompressedEdwardsY","qualname":"::edwards::CompressedEdwardsY","value":"","parent":null,"children":[],"decl_id":null,"docs":" In \"Edwards y\" / \"Ed25519\" format, the curve point \\\\((x,y)\\\\) is\n determined by the \\\\(y\\\\)-coordinate and the sign of \\\\(x\\\\).","sig":null,"attributes":[{"value":"/ In \"Edwards y\" / \"Ed25519\" format, the curve point \\\\((x,y)\\\\) is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84175,"byte_end":84244,"line_start":148,"line_end":148,"column_start":1,"column_end":70}},{"value":"/ determined by the \\\\(y\\\\)-coordinate and the sign of \\\\(x\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84245,"byte_end":84310,"line_start":149,"line_end":149,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84311,"byte_end":84314,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ The first 255 bits of a `CompressedEdwardsY` represent the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84315,"byte_end":84377,"line_start":151,"line_end":151,"column_start":1,"column_end":63}},{"value":"/ \\\\(y\\\\)-coordinate.  The high bit of the 32nd byte gives the sign of \\\\(x\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84378,"byte_end":84459,"line_start":152,"line_end":152,"column_start":1,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":1176},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84534,"byte_end":84546,"line_start":154,"line_end":154,"column_start":31,"column_end":43},"name":"0","qualname":"::edwards::CompressedEdwardsY::0","value":"[u8; 32]","parent":{"krate":0,"index":1174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84993,"byte_end":85001,"line_start":170,"line_end":170,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<CompressedEdwardsY>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" View this `CompressedEdwardsY` as an array of bytes.\n","sig":null,"attributes":[{"value":"/ View this `CompressedEdwardsY` as an array of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84925,"byte_end":84981,"line_start":169,"line_end":169,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":85119,"byte_end":85127,"line_start":175,"line_end":175,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<CompressedEdwardsY>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Copy this `CompressedEdwardsY` to an array of bytes.\n","sig":null,"attributes":[{"value":"/ Copy this `CompressedEdwardsY` to an array of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":85051,"byte_end":85107,"line_start":174,"line_end":174,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":85334,"byte_end":85344,"line_start":183,"line_end":183,"column_start":12,"column_end":22},"name":"decompress","qualname":"<CompressedEdwardsY>::decompress","value":"pub fn decompress(&Self) -> Option<EdwardsPoint>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to decompress to an `EdwardsPoint`.","sig":null,"attributes":[{"value":"/ Attempt to decompress to an `EdwardsPoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":85175,"byte_end":85222,"line_start":179,"line_end":179,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":85227,"byte_end":85230,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the input is not the \\\\(y\\\\)-coordinate of a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":85235,"byte_end":85301,"line_start":181,"line_end":181,"column_start":5,"column_end":71}},{"value":"/ curve point.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":85306,"byte_end":85322,"line_start":182,"line_end":182,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1193},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":89948,"byte_end":89960,"line_start":312,"line_end":312,"column_start":12,"column_end":24},"name":"EdwardsPoint","qualname":"::edwards::EdwardsPoint","value":"EdwardsPoint {  }","parent":null,"children":[{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197}],"decl_id":null,"docs":" An `EdwardsPoint` represents a point on the Edwards form of Curve25519.\n","sig":null,"attributes":[{"value":"/ An `EdwardsPoint` represents a point on the Edwards form of Curve25519.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":89815,"byte_end":89890,"line_start":309,"line_end":309,"column_start":1,"column_end":76}},{"value":"allow(missing_docs)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":89914,"byte_end":89936,"line_start":311,"line_end":311,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90888,"byte_end":90898,"line_start":344,"line_end":344,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<CompressedEdwardsY>::from_slice","value":"pub fn from_slice(&[u8]) -> CompressedEdwardsY","parent":null,"children":[],"decl_id":null,"docs":" Construct a `CompressedEdwardsY` from a slice of bytes.","sig":null,"attributes":[{"value":"/ Construct a `CompressedEdwardsY` from a slice of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90719,"byte_end":90778,"line_start":339,"line_end":339,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90783,"byte_end":90786,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90791,"byte_end":90803,"line_start":341,"line_end":341,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90808,"byte_end":90811,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ If the input `bytes` slice does not have a length of 32.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90816,"byte_end":90876,"line_start":343,"line_end":343,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":95117,"byte_end":95130,"line_start":473,"line_end":473,"column_start":12,"column_end":25},"name":"to_montgomery","qualname":"<EdwardsPoint>::to_montgomery","value":"pub fn to_montgomery(&Self) -> MontgomeryPoint","parent":null,"children":[],"decl_id":null,"docs":" Convert this `EdwardsPoint` on the Edwards model to the\n corresponding `MontgomeryPoint` on the Montgomery model.","sig":null,"attributes":[{"value":"/ Convert this `EdwardsPoint` on the Edwards model to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":94676,"byte_end":94735,"line_start":464,"line_end":464,"column_start":5,"column_end":64}},{"value":"/ corresponding `MontgomeryPoint` on the Montgomery model.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":94740,"byte_end":94800,"line_start":465,"line_end":465,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":94805,"byte_end":94808,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ This function has one exceptional case; the identity point of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":94813,"byte_end":94878,"line_start":467,"line_end":467,"column_start":5,"column_end":70}},{"value":"/ the Edwards curve is sent to the 2-torsion point \\\\((0,0)\\\\)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":94883,"byte_end":94947,"line_start":468,"line_end":468,"column_start":5,"column_end":69}},{"value":"/ on the Montgomery curve.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":94952,"byte_end":94980,"line_start":469,"line_end":469,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":94985,"byte_end":94988,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ Note that this is a one-way conversion, since the Montgomery","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":94993,"byte_end":95057,"line_start":471,"line_end":471,"column_start":5,"column_end":69}},{"value":"/ model does not retain sign information.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":95062,"byte_end":95105,"line_start":472,"line_end":472,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":95627,"byte_end":95635,"line_start":486,"line_end":486,"column_start":12,"column_end":20},"name":"compress","qualname":"<EdwardsPoint>::compress","value":"pub fn compress(&Self) -> CompressedEdwardsY","parent":null,"children":[],"decl_id":null,"docs":" Compress this point to `CompressedEdwardsY` format.\n","sig":null,"attributes":[{"value":"/ Compress this point to `CompressedEdwardsY` format.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":95560,"byte_end":95615,"line_start":485,"line_end":485,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":378},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":102291,"byte_end":102319,"line_start":703,"line_end":703,"column_start":12,"column_end":40},"name":"VartimeEdwardsPrecomputation","qualname":"::edwards::VartimeEdwardsPrecomputation","value":"","parent":null,"children":[],"decl_id":null,"docs":" Precomputation for variable-time multiscalar multiplication with `EdwardsPoint`s.\n","sig":null,"attributes":[{"value":"/ Precomputation for variable-time multiscalar multiplication with `EdwardsPoint`s.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":102016,"byte_end":102101,"line_start":698,"line_end":698,"column_start":1,"column_end":86}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":102254,"byte_end":102279,"line_start":702,"line_end":702,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103323,"byte_end":103358,"line_start":737,"line_end":737,"column_start":12,"column_end":47},"name":"vartime_double_scalar_mul_basepoint","qualname":"<EdwardsPoint>::vartime_double_scalar_mul_basepoint","value":"pub fn vartime_double_scalar_mul_basepoint(&Scalar, &EdwardsPoint, &Scalar)\n-> EdwardsPoint","parent":null,"children":[],"decl_id":null,"docs":" Compute \\\\(aA + bB\\\\) in variable time, where \\\\(B\\\\) is the Ed25519 basepoint.\n","sig":null,"attributes":[{"value":"/ Compute \\\\(aA + bB\\\\) in variable time, where \\\\(B\\\\) is the Ed25519 basepoint.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103228,"byte_end":103311,"line_start":736,"line_end":736,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":1251},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103827,"byte_end":103848,"line_start":753,"line_end":753,"column_start":12,"column_end":33},"name":"EdwardsBasepointTable","qualname":"::edwards::EdwardsBasepointTable","value":"","parent":null,"children":[],"decl_id":null,"docs":" A precomputed table of multiples of a basepoint, for accelerating\n fixed-base scalar multiplication.  One table, for the Ed25519\n basepoint, is provided in the `constants` module.","sig":null,"attributes":[{"value":"/ A precomputed table of multiples of a basepoint, for accelerating","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103513,"byte_end":103582,"line_start":746,"line_end":746,"column_start":1,"column_end":70}},{"value":"/ fixed-base scalar multiplication.  One table, for the Ed25519","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103583,"byte_end":103648,"line_start":747,"line_end":747,"column_start":1,"column_end":66}},{"value":"/ basepoint, is provided in the `constants` module.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103649,"byte_end":103702,"line_start":748,"line_end":748,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103703,"byte_end":103706,"line_start":749,"line_end":749,"column_start":1,"column_end":4}},{"value":"/ The basepoint tables are reasonably large (30KB), so they should","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103707,"byte_end":103775,"line_start":750,"line_end":750,"column_start":1,"column_end":69}},{"value":"/ probably be boxed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103776,"byte_end":103798,"line_start":751,"line_end":751,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":106558,"byte_end":106564,"line_start":826,"line_end":826,"column_start":12,"column_end":18},"name":"create","qualname":"<EdwardsBasepointTable>::create","value":"pub fn create(&EdwardsPoint) -> EdwardsBasepointTable","parent":null,"children":[],"decl_id":null,"docs":" Create a table of precomputed multiples of `basepoint`.\n","sig":null,"attributes":[{"value":"/ Create a table of precomputed multiples of `basepoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":106487,"byte_end":106546,"line_start":825,"line_end":825,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":107001,"byte_end":107010,"line_start":839,"line_end":839,"column_start":12,"column_end":21},"name":"basepoint","qualname":"<EdwardsBasepointTable>::basepoint","value":"pub fn basepoint(&Self) -> EdwardsPoint","parent":null,"children":[],"decl_id":null,"docs":" Get the basepoint for this table as an `EdwardsPoint`.\n","sig":null,"attributes":[{"value":"/ Get the basepoint for this table as an `EdwardsPoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":106931,"byte_end":106989,"line_start":838,"line_end":838,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":107329,"byte_end":107344,"line_start":848,"line_end":848,"column_start":12,"column_end":27},"name":"mul_by_cofactor","qualname":"<EdwardsPoint>::mul_by_cofactor","value":"pub fn mul_by_cofactor(&Self) -> EdwardsPoint","parent":null,"children":[],"decl_id":null,"docs":" Multiply by the cofactor: return \\\\([8]P\\\\).\n","sig":null,"attributes":[{"value":"/ Multiply by the cofactor: return \\\\([8]P\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":107269,"byte_end":107317,"line_start":847,"line_end":847,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108577,"byte_end":108591,"line_start":887,"line_end":887,"column_start":12,"column_end":26},"name":"is_small_order","qualname":"<EdwardsPoint>::is_small_order","value":"pub fn is_small_order(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Determine if this point is of small order.","sig":null,"attributes":[{"value":"/ Determine if this point is of small order.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":107862,"byte_end":107908,"line_start":864,"line_end":864,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":107913,"byte_end":107916,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":107921,"byte_end":107933,"line_start":866,"line_end":866,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":107938,"byte_end":107941,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ * `true` if `self` is in the torsion subgroup \\\\( \\mathcal E[8] \\\\);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":107946,"byte_end":108018,"line_start":868,"line_end":868,"column_start":5,"column_end":77}},{"value":"/ * `false` if `self` is not in the torsion subgroup \\\\( \\mathcal E[8] \\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108023,"byte_end":108100,"line_start":869,"line_end":869,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108105,"byte_end":108108,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108113,"byte_end":108126,"line_start":871,"line_end":871,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108131,"byte_end":108134,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108139,"byte_end":108146,"line_start":873,"line_end":873,"column_start":5,"column_end":12}},{"value":"/ use curve25519_dalek::constants;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108151,"byte_end":108187,"line_start":874,"line_end":874,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108192,"byte_end":108195,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ // Generator of the prime-order subgroup","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108200,"byte_end":108244,"line_start":876,"line_end":876,"column_start":5,"column_end":49}},{"value":"/ let P = constants::ED25519_BASEPOINT_POINT;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108249,"byte_end":108296,"line_start":877,"line_end":877,"column_start":5,"column_end":52}},{"value":"/ // Generator of the torsion subgroup","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108301,"byte_end":108341,"line_start":878,"line_end":878,"column_start":5,"column_end":45}},{"value":"/ let Q = constants::EIGHT_TORSION[1];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108346,"byte_end":108386,"line_start":879,"line_end":879,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108391,"byte_end":108394,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ // P has large order","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108399,"byte_end":108423,"line_start":881,"line_end":881,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(P.is_small_order(), false);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108428,"byte_end":108470,"line_start":882,"line_end":882,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108475,"byte_end":108478,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ // Q has small order","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108483,"byte_end":108507,"line_start":884,"line_end":884,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(Q.is_small_order(), true);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108512,"byte_end":108553,"line_start":885,"line_end":885,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108558,"byte_end":108565,"line_start":886,"line_end":886,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109501,"byte_end":109516,"line_start":917,"line_end":917,"column_start":12,"column_end":27},"name":"is_torsion_free","qualname":"<EdwardsPoint>::is_torsion_free","value":"pub fn is_torsion_free(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Determine if this point is “torsion-free”, i.e., is contained in\n the prime-order subgroup.","sig":null,"attributes":[{"value":"/ Determine if this point is “torsion-free”, i.e., is contained in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108665,"byte_end":108737,"line_start":891,"line_end":891,"column_start":5,"column_end":73}},{"value":"/ the prime-order subgroup.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108742,"byte_end":108771,"line_start":892,"line_end":892,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108776,"byte_end":108779,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108784,"byte_end":108796,"line_start":894,"line_end":894,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108801,"byte_end":108804,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ * `true` if `self` has zero torsion component and is in the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108809,"byte_end":108872,"line_start":896,"line_end":896,"column_start":5,"column_end":68}},{"value":"/ prime-order subgroup;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108877,"byte_end":108902,"line_start":897,"line_end":897,"column_start":5,"column_end":30}},{"value":"/ * `false` if `self` has a nonzero torsion component and is not","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108907,"byte_end":108973,"line_start":898,"line_end":898,"column_start":5,"column_end":71}},{"value":"/ in the prime-order subgroup.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":108978,"byte_end":109010,"line_start":899,"line_end":899,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109015,"byte_end":109018,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109023,"byte_end":109036,"line_start":901,"line_end":901,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109041,"byte_end":109044,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109049,"byte_end":109056,"line_start":903,"line_end":903,"column_start":5,"column_end":12}},{"value":"/ use curve25519_dalek::constants;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109061,"byte_end":109097,"line_start":904,"line_end":904,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109102,"byte_end":109105,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ // Generator of the prime-order subgroup","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109110,"byte_end":109154,"line_start":906,"line_end":906,"column_start":5,"column_end":49}},{"value":"/ let P = constants::ED25519_BASEPOINT_POINT;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109159,"byte_end":109206,"line_start":907,"line_end":907,"column_start":5,"column_end":52}},{"value":"/ // Generator of the torsion subgroup","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109211,"byte_end":109251,"line_start":908,"line_end":908,"column_start":5,"column_end":45}},{"value":"/ let Q = constants::EIGHT_TORSION[1];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109256,"byte_end":109296,"line_start":909,"line_end":909,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109301,"byte_end":109304,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ // P is torsion-free","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109309,"byte_end":109333,"line_start":911,"line_end":911,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(P.is_torsion_free(), true);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109338,"byte_end":109380,"line_start":912,"line_end":912,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109385,"byte_end":109388,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ // P + Q is not torsion-free","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109393,"byte_end":109425,"line_start":914,"line_end":914,"column_start":5,"column_end":37}},{"value":"/ assert_eq!((P+Q).is_torsion_free(), false);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109430,"byte_end":109477,"line_start":915,"line_end":915,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109482,"byte_end":109489,"line_start":916,"line_end":916,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":418},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ristretto","qualname":"::ristretto","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":1594},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":1632},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":1257},{"krate":0,"index":1275},{"krate":0,"index":1272},{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1261},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":1276},{"krate":0,"index":1281},{"krate":0,"index":1279},{"krate":0,"index":468},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":1294},{"krate":0,"index":1298},{"krate":0,"index":1302},{"krate":0,"index":510},{"krate":0,"index":1305},{"krate":0,"index":513},{"krate":0,"index":1307},{"krate":0,"index":1311},{"krate":0,"index":1315},{"krate":0,"index":518},{"krate":0,"index":1318},{"krate":0,"index":521},{"krate":0,"index":526},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":536},{"krate":0,"index":541},{"krate":0,"index":1320},{"krate":0,"index":1322},{"krate":0,"index":1326},{"krate":0,"index":1330},{"krate":0,"index":1333},{"krate":0,"index":1337},{"krate":0,"index":1341},{"krate":0,"index":546},{"krate":0,"index":552},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":573},{"krate":0,"index":1344},{"krate":0,"index":1347},{"krate":0,"index":575},{"krate":0,"index":580},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592}],"decl_id":null,"docs":" An implementation of [Ristretto][ristretto_main], which provides a\n prime-order group.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129346,"byte_end":129371,"line_start":15,"line_end":15,"column_start":1,"column_end":26}},{"value":"/ An implementation of [Ristretto][ristretto_main], which provides a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129373,"byte_end":129443,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ prime-order group.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129444,"byte_end":129466,"line_start":18,"line_end":18,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129467,"byte_end":129470,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # The Ristretto Group","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129471,"byte_end":129496,"line_start":20,"line_end":20,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129497,"byte_end":129500,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Ristretto is a modification of Mike Hamburg's Decaf scheme to work","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129501,"byte_end":129571,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"/ with cofactor-\\\\(8\\\\) curves, such as Curve25519.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129572,"byte_end":129625,"line_start":23,"line_end":23,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129626,"byte_end":129629,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The introduction of the Decaf paper, [_Decaf:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129630,"byte_end":129679,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/ Eliminating cofactors through point","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129680,"byte_end":129719,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/ compression_](https://eprint.iacr.org/2015/673.pdf), notes that while","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129720,"byte_end":129793,"line_start":27,"line_end":27,"column_start":1,"column_end":74}},{"value":"/ most cryptographic systems require a group of prime order, most","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129794,"byte_end":129861,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/ concrete implementations using elliptic curve groups fall short –","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129862,"byte_end":129933,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"/ they either provide a group of prime order, but with incomplete or","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":129934,"byte_end":130004,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ variable-time addition formulae (for instance, most Weierstrass","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130005,"byte_end":130072,"line_start":31,"line_end":31,"column_start":1,"column_end":68}},{"value":"/ models), or else they provide a fast and safe implementation of a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130073,"byte_end":130142,"line_start":32,"line_end":32,"column_start":1,"column_end":70}},{"value":"/ group whose order is not quite a prime \\\\(q\\\\), but \\\\(hq\\\\) for a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130143,"byte_end":130213,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ small cofactor \\\\(h\\\\) (for instance, Edwards curves, which have","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130214,"byte_end":130282,"line_start":34,"line_end":34,"column_start":1,"column_end":69}},{"value":"/ cofactor at least \\\\(4\\\\)).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130283,"byte_end":130314,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130315,"byte_end":130318,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ This abstraction mismatch is commonly “handled” by pushing the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130319,"byte_end":130389,"line_start":37,"line_end":37,"column_start":1,"column_end":67}},{"value":"/ complexity upwards, adding ad-hoc protocol modifications.  But","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130390,"byte_end":130456,"line_start":38,"line_end":38,"column_start":1,"column_end":67}},{"value":"/ these modifications require careful analysis and are a recurring","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130457,"byte_end":130525,"line_start":39,"line_end":39,"column_start":1,"column_end":69}},{"value":"/ source of [vulnerabilities][cryptonote] and [design","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130526,"byte_end":130581,"line_start":40,"line_end":40,"column_start":1,"column_end":56}},{"value":"/ complications][ed25519_hkd].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130582,"byte_end":130614,"line_start":41,"line_end":41,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130615,"byte_end":130618,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Instead, Decaf (and Ristretto) use a quotient group to implement a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130619,"byte_end":130689,"line_start":43,"line_end":43,"column_start":1,"column_end":71}},{"value":"/ prime-order group using a non-prime-order curve.  This provides","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130690,"byte_end":130757,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/ the correct abstraction for cryptographic systems, while retaining","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130758,"byte_end":130828,"line_start":45,"line_end":45,"column_start":1,"column_end":71}},{"value":"/ the speed and safety benefits of an Edwards curve.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130829,"byte_end":130883,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130884,"byte_end":130887,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Decaf is named “after the procedure which divides the effect of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130888,"byte_end":130957,"line_start":48,"line_end":48,"column_start":1,"column_end":68}},{"value":"/ coffee by \\\\(4\\\\)”.  However, Curve25519 has a cofactor of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":130958,"byte_end":131022,"line_start":49,"line_end":49,"column_start":1,"column_end":63}},{"value":"/ \\\\(8\\\\).  To eliminate its cofactor, Ristretto restricts further;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131023,"byte_end":131092,"line_start":50,"line_end":50,"column_start":1,"column_end":70}},{"value":"/ this [additional restriction][ristretto_coffee] gives the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131093,"byte_end":131154,"line_start":51,"line_end":51,"column_start":1,"column_end":62}},{"value":"/ _Ristretto_ encoding.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131155,"byte_end":131180,"line_start":52,"line_end":52,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131181,"byte_end":131184,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ More details on why Ristretto is necessary can be found in the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131185,"byte_end":131251,"line_start":54,"line_end":54,"column_start":1,"column_end":67}},{"value":"/ [Why Ristretto?][why_ristretto] section of the Ristretto website.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131252,"byte_end":131321,"line_start":55,"line_end":55,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131322,"byte_end":131325,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Ristretto","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131326,"byte_end":131339,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/ points are provided in `curve25519-dalek` by the `RistrettoPoint`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131340,"byte_end":131409,"line_start":58,"line_end":58,"column_start":1,"column_end":70}},{"value":"/ struct.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131410,"byte_end":131421,"line_start":59,"line_end":59,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131422,"byte_end":131425,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ## Encoding and Decoding","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131426,"byte_end":131454,"line_start":61,"line_end":61,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131455,"byte_end":131458,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ Encoding is done by converting to and from a `CompressedRistretto`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131459,"byte_end":131529,"line_start":63,"line_end":63,"column_start":1,"column_end":71}},{"value":"/ struct, which is a typed wrapper around `[u8; 32]`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131530,"byte_end":131585,"line_start":64,"line_end":64,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131586,"byte_end":131589,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ The encoding is not batchable, but it is possible to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131590,"byte_end":131646,"line_start":66,"line_end":66,"column_start":1,"column_end":57}},{"value":"/ double-and-encode in a batch using","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131647,"byte_end":131685,"line_start":67,"line_end":67,"column_start":1,"column_end":39}},{"value":"/ `RistrettoPoint::double_and_compress_batch`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131686,"byte_end":131734,"line_start":68,"line_end":68,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131735,"byte_end":131738,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ## Equality Testing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131739,"byte_end":131762,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131763,"byte_end":131766,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Testing equality of points on an Edwards curve in projective","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131767,"byte_end":131831,"line_start":72,"line_end":72,"column_start":1,"column_end":65}},{"value":"/ coordinates requires an expensive inversion.  By contrast, equality","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131832,"byte_end":131903,"line_start":73,"line_end":73,"column_start":1,"column_end":72}},{"value":"/ checking in the Ristretto group can be done in projective","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131904,"byte_end":131965,"line_start":74,"line_end":74,"column_start":1,"column_end":62}},{"value":"/ coordinates without requiring an inversion, so it is much faster.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":131966,"byte_end":132035,"line_start":75,"line_end":75,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132036,"byte_end":132039,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ The `RistrettoPoint` struct implements the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132040,"byte_end":132086,"line_start":77,"line_end":77,"column_start":1,"column_end":47}},{"value":"/ `subtle::ConstantTimeEq` trait for constant-time equality","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132087,"byte_end":132148,"line_start":78,"line_end":78,"column_start":1,"column_end":62}},{"value":"/ checking, and the Rust `Eq` trait for variable-time equality","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132149,"byte_end":132213,"line_start":79,"line_end":79,"column_start":1,"column_end":65}},{"value":"/ checking.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132214,"byte_end":132227,"line_start":80,"line_end":80,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132228,"byte_end":132231,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ ## Scalars","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132232,"byte_end":132246,"line_start":82,"line_end":82,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132247,"byte_end":132250,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Scalars are represented by the `Scalar` struct.  Each scalar has a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132251,"byte_end":132321,"line_start":84,"line_end":84,"column_start":1,"column_end":71}},{"value":"/ canonical representative mod the group order.  To attempt to load","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132322,"byte_end":132391,"line_start":85,"line_end":85,"column_start":1,"column_end":70}},{"value":"/ a supposedly-canonical scalar, use","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132392,"byte_end":132430,"line_start":86,"line_end":86,"column_start":1,"column_end":39}},{"value":"/ `Scalar::from_canonical_bytes()`. To check whether a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132431,"byte_end":132487,"line_start":87,"line_end":87,"column_start":1,"column_end":57}},{"value":"/ representative is canonical, use `Scalar::is_canonical()`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132488,"byte_end":132550,"line_start":88,"line_end":88,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132551,"byte_end":132554,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ ## Scalar Multiplication","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132555,"byte_end":132583,"line_start":90,"line_end":90,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132584,"byte_end":132587,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Scalar multiplication on Ristretto points is provided by:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132588,"byte_end":132649,"line_start":92,"line_end":92,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132650,"byte_end":132653,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ * the `*` operator between a `Scalar` and a `RistrettoPoint`, which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132654,"byte_end":132725,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/ performs constant-time variable-base scalar multiplication;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132726,"byte_end":132789,"line_start":95,"line_end":95,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132790,"byte_end":132793,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ * the `*` operator between a `Scalar` and a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132794,"byte_end":132841,"line_start":97,"line_end":97,"column_start":1,"column_end":48}},{"value":"/ `RistrettoBasepointTable`, which performs constant-time fixed-base","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132842,"byte_end":132912,"line_start":98,"line_end":98,"column_start":1,"column_end":71}},{"value":"/ scalar multiplication;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132913,"byte_end":132939,"line_start":99,"line_end":99,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132940,"byte_end":132943,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ * an implementation of the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132944,"byte_end":132974,"line_start":101,"line_end":101,"column_start":1,"column_end":31}},{"value":"/ [`MultiscalarMul`](../traits/trait.MultiscalarMul.html) trait for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":132975,"byte_end":133044,"line_start":102,"line_end":102,"column_start":1,"column_end":70}},{"value":"/ constant-time variable-base multiscalar multiplication;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133045,"byte_end":133104,"line_start":103,"line_end":103,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133105,"byte_end":133108,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ * an implementation of the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133109,"byte_end":133139,"line_start":105,"line_end":105,"column_start":1,"column_end":31}},{"value":"/ [`VartimeMultiscalarMul`](../traits/trait.VartimeMultiscalarMul.html)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133140,"byte_end":133213,"line_start":106,"line_end":106,"column_start":1,"column_end":74}},{"value":"/ trait for variable-time variable-base multiscalar multiplication;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133214,"byte_end":133283,"line_start":107,"line_end":107,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133284,"byte_end":133287,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ ## Random Points and Hashing to Ristretto","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133288,"byte_end":133333,"line_start":109,"line_end":109,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133334,"byte_end":133337,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The Ristretto group comes equipped with an Elligator map.  This is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133338,"byte_end":133408,"line_start":111,"line_end":111,"column_start":1,"column_end":71}},{"value":"/ used to implement","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133409,"byte_end":133430,"line_start":112,"line_end":112,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133431,"byte_end":133434,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ * `RistrettoPoint::random()`, which generates random points from an","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133435,"byte_end":133506,"line_start":114,"line_end":114,"column_start":1,"column_end":72}},{"value":"/ RNG;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133507,"byte_end":133515,"line_start":115,"line_end":115,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133516,"byte_end":133519,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ * `RistrettoPoint::from_hash()` and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133520,"byte_end":133559,"line_start":117,"line_end":117,"column_start":1,"column_end":40}},{"value":"/ `RistrettoPoint::hash_from_bytes()`, which perform hashing to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133560,"byte_end":133629,"line_start":118,"line_end":118,"column_start":1,"column_end":70}},{"value":"/ group.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133630,"byte_end":133640,"line_start":119,"line_end":119,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133641,"byte_end":133644,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ The Elligator map itself is not currently exposed.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133645,"byte_end":133699,"line_start":121,"line_end":121,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133700,"byte_end":133703,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ ## Implementation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133704,"byte_end":133725,"line_start":123,"line_end":123,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133726,"byte_end":133729,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ The Decaf suggestion is to use a quotient group, such as \\\\(\\mathcal","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133730,"byte_end":133802,"line_start":125,"line_end":125,"column_start":1,"column_end":73}},{"value":"/ E / \\mathcal E[4]\\\\) or \\\\(2 \\mathcal E / \\mathcal E[2] \\\\), to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133803,"byte_end":133870,"line_start":126,"line_end":126,"column_start":1,"column_end":68}},{"value":"/ implement a prime-order group using a non-prime-order curve.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133871,"byte_end":133935,"line_start":127,"line_end":127,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133936,"byte_end":133939,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This requires only changing","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133940,"byte_end":133971,"line_start":129,"line_end":129,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133972,"byte_end":133975,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ 1. the function for equality checking (so that two representatives","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":133976,"byte_end":134046,"line_start":131,"line_end":131,"column_start":1,"column_end":71}},{"value":"/    of the same coset are considered equal);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134047,"byte_end":134094,"line_start":132,"line_end":132,"column_start":1,"column_end":48}},{"value":"/ 2. the function for encoding (so that two representatives of the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134095,"byte_end":134163,"line_start":133,"line_end":133,"column_start":1,"column_end":69}},{"value":"/    same coset are encoded as identical bitstrings);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134164,"byte_end":134219,"line_start":134,"line_end":134,"column_start":1,"column_end":56}},{"value":"/ 3. the function for decoding (so that only the canonical encoding of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134220,"byte_end":134292,"line_start":135,"line_end":135,"column_start":1,"column_end":73}},{"value":"/    a coset is accepted).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134293,"byte_end":134321,"line_start":136,"line_end":136,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134322,"byte_end":134325,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ Internally, each coset is represented by a curve point; two points","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134326,"byte_end":134396,"line_start":138,"line_end":138,"column_start":1,"column_end":71}},{"value":"/ \\\\( P, Q \\\\) may represent the same coset in the same way that two","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134397,"byte_end":134467,"line_start":139,"line_end":139,"column_start":1,"column_end":71}},{"value":"/ points with different \\\\(X,Y,Z\\\\) coordinates may represent the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134468,"byte_end":134535,"line_start":140,"line_end":140,"column_start":1,"column_end":68}},{"value":"/ same point.  The group operations are carried out with no overhead","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134536,"byte_end":134606,"line_start":141,"line_end":141,"column_start":1,"column_end":71}},{"value":"/ using Edwards formulas.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134607,"byte_end":134634,"line_start":142,"line_end":142,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134635,"byte_end":134638,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ Notes on the details of the encoding can be found in the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134639,"byte_end":134699,"line_start":144,"line_end":144,"column_start":1,"column_end":61}},{"value":"/ [Details][ristretto_notes] section of the Ristretto website.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134700,"byte_end":134764,"line_start":145,"line_end":145,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134765,"byte_end":134768,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ [cryptonote]:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134769,"byte_end":134786,"line_start":147,"line_end":147,"column_start":1,"column_end":18}},{"value":"/ https://moderncrypto.org/mail-archive/curves/2017/000898.html","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134787,"byte_end":134852,"line_start":148,"line_end":148,"column_start":1,"column_end":66}},{"value":"/ [ed25519_hkd]:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134853,"byte_end":134871,"line_start":149,"line_end":149,"column_start":1,"column_end":19}},{"value":"/ https://moderncrypto.org/mail-archive/curves/2017/000858.html","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134872,"byte_end":134937,"line_start":150,"line_end":150,"column_start":1,"column_end":66}},{"value":"/ [ristretto_coffee]:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134938,"byte_end":134961,"line_start":151,"line_end":151,"column_start":1,"column_end":24}},{"value":"/ https://en.wikipedia.org/wiki/Ristretto","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":134962,"byte_end":135005,"line_start":152,"line_end":152,"column_start":1,"column_end":44}},{"value":"/ [ristretto_notes]:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":135006,"byte_end":135028,"line_start":153,"line_end":153,"column_start":1,"column_end":23}},{"value":"/ https://ristretto.group/details/index.html","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":135029,"byte_end":135075,"line_start":154,"line_end":154,"column_start":1,"column_end":47}},{"value":"/ [why_ristretto]:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":135076,"byte_end":135096,"line_start":155,"line_end":155,"column_start":1,"column_end":21}},{"value":"/ https://ristretto.group/why_ristretto.html","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":135097,"byte_end":135143,"line_start":156,"line_end":156,"column_start":1,"column_end":47}},{"value":"/ [ristretto_main]:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":135144,"byte_end":135165,"line_start":157,"line_end":157,"column_start":1,"column_end":22}},{"value":"/ https://ristretto.group/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":135166,"byte_end":135194,"line_start":158,"line_end":158,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1257},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136602,"byte_end":136621,"line_start":212,"line_end":212,"column_start":12,"column_end":31},"name":"CompressedRistretto","qualname":"::ristretto::CompressedRistretto","value":"","parent":null,"children":[],"decl_id":null,"docs":" A Ristretto point, in compressed wire format.","sig":null,"attributes":[{"value":"/ A Ristretto point, in compressed wire format.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136382,"byte_end":136431,"line_start":207,"line_end":207,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136432,"byte_end":136435,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ The Ristretto encoding is canonical, so two points are equal if and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136436,"byte_end":136507,"line_start":209,"line_end":209,"column_start":1,"column_end":72}},{"value":"/ only if their encodings are equal.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136508,"byte_end":136546,"line_start":210,"line_end":210,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1259},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136622,"byte_end":136634,"line_start":212,"line_end":212,"column_start":32,"column_end":44},"name":"0","qualname":"::ristretto::CompressedRistretto::0","value":"[u8; 32]","parent":{"krate":0,"index":1257},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136894,"byte_end":136902,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<CompressedRistretto>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Copy the bytes of this `CompressedRistretto`.\n","sig":null,"attributes":[{"value":"/ Copy the bytes of this `CompressedRistretto`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136833,"byte_end":136882,"line_start":221,"line_end":221,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137019,"byte_end":137027,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<CompressedRistretto>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" View this `CompressedRistretto` as an array of bytes.\n","sig":null,"attributes":[{"value":"/ View this `CompressedRistretto` as an array of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136950,"byte_end":137007,"line_start":226,"line_end":226,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137247,"byte_end":137257,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<CompressedRistretto>::from_slice","value":"pub fn from_slice(&[u8]) -> CompressedRistretto","parent":null,"children":[],"decl_id":null,"docs":" Construct a `CompressedRistretto` from a slice of bytes.","sig":null,"attributes":[{"value":"/ Construct a `CompressedRistretto` from a slice of bytes.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137077,"byte_end":137137,"line_start":231,"line_end":231,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137142,"byte_end":137145,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137150,"byte_end":137162,"line_start":233,"line_end":233,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137167,"byte_end":137170,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ If the input `bytes` slice does not have a length of 32.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137175,"byte_end":137235,"line_start":235,"line_end":235,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137666,"byte_end":137676,"line_start":251,"line_end":251,"column_start":12,"column_end":22},"name":"decompress","qualname":"<CompressedRistretto>::decompress","value":"pub fn decompress(&Self) -> Option<RistrettoPoint>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to decompress to an `RistrettoPoint`.","sig":null,"attributes":[{"value":"/ Attempt to decompress to an `RistrettoPoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137412,"byte_end":137461,"line_start":244,"line_end":244,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137466,"byte_end":137469,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137474,"byte_end":137486,"line_start":246,"line_end":246,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137491,"byte_end":137494,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ - `Some(RistrettoPoint)` if `self` was the canonical encoding of a point;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137499,"byte_end":137576,"line_start":248,"line_end":248,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137581,"byte_end":137584,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ - `None` if `self` was not the canonical encoding of a point.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":137589,"byte_end":137654,"line_start":250,"line_end":250,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1276},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":144306,"byte_end":144320,"line_start":438,"line_end":438,"column_start":12,"column_end":26},"name":"RistrettoPoint","qualname":"::ristretto::RistrettoPoint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `RistrettoPoint` represents a point in the Ristretto group for\n Curve25519.  Ristretto, a variant of Decaf, constructs a\n prime-order group as a quotient group of a subgroup of (the\n Edwards form of) Curve25519.","sig":null,"attributes":[{"value":"/ A `RistrettoPoint` represents a point in the Ristretto group for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":143736,"byte_end":143804,"line_start":426,"line_end":426,"column_start":1,"column_end":69}},{"value":"/ Curve25519.  Ristretto, a variant of Decaf, constructs a","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":143805,"byte_end":143865,"line_start":427,"line_end":427,"column_start":1,"column_end":61}},{"value":"/ prime-order group as a quotient group of a subgroup of (the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":143866,"byte_end":143929,"line_start":428,"line_end":428,"column_start":1,"column_end":64}},{"value":"/ Edwards form of) Curve25519.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":143930,"byte_end":143962,"line_start":429,"line_end":429,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":143963,"byte_end":143966,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ Internally, a `RistrettoPoint` is implemented as a wrapper type","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":143967,"byte_end":144034,"line_start":431,"line_end":431,"column_start":1,"column_end":68}},{"value":"/ around `EdwardsPoint`, with custom equality, compression, and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":144035,"byte_end":144100,"line_start":432,"line_end":432,"column_start":1,"column_end":66}},{"value":"/ decompression routines to account for the quotient.  This means that","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":144101,"byte_end":144173,"line_start":433,"line_end":433,"column_start":1,"column_end":73}},{"value":"/ operations on `RistrettoPoint`s are exactly as fast as operations on","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":144174,"byte_end":144246,"line_start":434,"line_end":434,"column_start":1,"column_end":73}},{"value":"/ `EdwardsPoint`s.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":144247,"byte_end":144267,"line_start":435,"line_end":435,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":144268,"byte_end":144271,"line_start":436,"line_end":436,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":144439,"byte_end":144447,"line_start":442,"line_end":442,"column_start":12,"column_end":20},"name":"compress","qualname":"<RistrettoPoint>::compress","value":"pub fn compress(&Self) -> CompressedRistretto","parent":null,"children":[],"decl_id":null,"docs":" Compress this point using the Ristretto encoding.\n","sig":null,"attributes":[{"value":"/ Compress this point using the Ristretto encoding.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":144374,"byte_end":144427,"line_start":441,"line_end":441,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146751,"byte_end":146776,"line_start":506,"line_end":506,"column_start":12,"column_end":37},"name":"double_and_compress_batch","qualname":"<RistrettoPoint>::double_and_compress_batch","value":"pub fn double_and_compress_batch<'a, I>(I) -> Vec<CompressedRistretto> where\nI: IntoIterator<Item = &'a RistrettoPoint>","parent":null,"children":[],"decl_id":null,"docs":" Double-and-compress a batch of points.  The Ristretto encoding\n is not batchable, since it requires an inverse square root.","sig":null,"attributes":[{"value":"/ Double-and-compress a batch of points.  The Ristretto encoding","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":145572,"byte_end":145638,"line_start":477,"line_end":477,"column_start":5,"column_end":71}},{"value":"/ is not batchable, since it requires an inverse square root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":145643,"byte_end":145706,"line_start":478,"line_end":478,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":145711,"byte_end":145714,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ However, given input points \\\\( P\\_1, \\ldots, P\\_n, \\\\)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":145719,"byte_end":145778,"line_start":480,"line_end":480,"column_start":5,"column_end":64}},{"value":"/ it is possible to compute the encodings of their doubles \\\\(","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":145783,"byte_end":145847,"line_start":481,"line_end":481,"column_start":5,"column_end":69}},{"value":"/ \\mathrm{enc}( [2]P\\_1), \\ldots, \\mathrm{enc}( [2]P\\_n ) \\\\)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":145852,"byte_end":145915,"line_start":482,"line_end":482,"column_start":5,"column_end":68}},{"value":"/ in a batch.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":145920,"byte_end":145935,"line_start":483,"line_end":483,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":145940,"byte_end":145943,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":145948,"byte_end":145955,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/ # extern crate curve25519_dalek;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":145960,"byte_end":145996,"line_start":486,"line_end":486,"column_start":5,"column_end":41}},{"value":"/ # use curve25519_dalek::ristretto::RistrettoPoint;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146001,"byte_end":146055,"line_start":487,"line_end":487,"column_start":5,"column_end":59}},{"value":"/ extern crate rand_core;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146060,"byte_end":146087,"line_start":488,"line_end":488,"column_start":5,"column_end":32}},{"value":"/ use rand_core::OsRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146092,"byte_end":146117,"line_start":489,"line_end":489,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146122,"byte_end":146125,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ # // Need fn main() here in comment so the doctest compiles","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146130,"byte_end":146193,"line_start":491,"line_end":491,"column_start":5,"column_end":68}},{"value":"/ # // See https://doc.rust-lang.org/book/documentation.html#documentation-as-tests","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146198,"byte_end":146283,"line_start":492,"line_end":492,"column_start":5,"column_end":90}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146288,"byte_end":146305,"line_start":493,"line_end":493,"column_start":5,"column_end":22}},{"value":"/ let mut rng = OsRng;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146310,"byte_end":146334,"line_start":494,"line_end":494,"column_start":5,"column_end":29}},{"value":"/ let points: Vec<RistrettoPoint> =","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146339,"byte_end":146376,"line_start":495,"line_end":495,"column_start":5,"column_end":42}},{"value":"/     (0..32).map(|_| RistrettoPoint::random(&mut rng)).collect();","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146381,"byte_end":146449,"line_start":496,"line_end":496,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146454,"byte_end":146457,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ let compressed = RistrettoPoint::double_and_compress_batch(&points);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146462,"byte_end":146534,"line_start":498,"line_end":498,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146539,"byte_end":146542,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ for (P, P2_compressed) in points.iter().zip(compressed.iter()) {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146547,"byte_end":146615,"line_start":500,"line_end":500,"column_start":5,"column_end":73}},{"value":"/     assert_eq!(*P2_compressed, (P + P).compress());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146620,"byte_end":146675,"line_start":501,"line_end":501,"column_start":5,"column_end":60}},{"value":"/ }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146680,"byte_end":146685,"line_start":502,"line_end":502,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146690,"byte_end":146697,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146702,"byte_end":146709,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":146714,"byte_end":146739,"line_start":505,"line_end":505,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151794,"byte_end":151800,"line_start":651,"line_end":651,"column_start":12,"column_end":18},"name":"random","qualname":"<RistrettoPoint>::random","value":"pub fn random<R: RngCore + CryptoRng>(&mut R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a `RistrettoPoint` chosen uniformly at random using a user-provided RNG.","sig":null,"attributes":[{"value":"/ Return a `RistrettoPoint` chosen uniformly at random using a user-provided RNG.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151202,"byte_end":151285,"line_start":635,"line_end":635,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151290,"byte_end":151293,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ # Inputs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151298,"byte_end":151310,"line_start":637,"line_end":637,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151315,"byte_end":151318,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ * `rng`: any RNG which implements the `RngCore + CryptoRng` interface.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151323,"byte_end":151397,"line_start":639,"line_end":639,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151402,"byte_end":151405,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151410,"byte_end":151423,"line_start":641,"line_end":641,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151428,"byte_end":151431,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ A random element of the Ristretto group.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151436,"byte_end":151480,"line_start":643,"line_end":643,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151485,"byte_end":151488,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ # Implementation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151493,"byte_end":151513,"line_start":645,"line_end":645,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151518,"byte_end":151521,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ Uses the Ristretto-flavoured Elligator 2 map, so that the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151526,"byte_end":151587,"line_start":647,"line_end":647,"column_start":5,"column_end":66}},{"value":"/ discrete log of the output point with respect to any other","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151592,"byte_end":151654,"line_start":648,"line_end":648,"column_start":5,"column_end":67}},{"value":"/ point should be unknown.  The map is applied twice and the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151659,"byte_end":151721,"line_start":649,"line_end":649,"column_start":5,"column_end":67}},{"value":"/ results are added, to ensure a uniform distribution.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":151726,"byte_end":151782,"line_start":650,"line_end":650,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153117,"byte_end":153132,"line_start":688,"line_end":688,"column_start":12,"column_end":27},"name":"hash_from_bytes","qualname":"<RistrettoPoint>::hash_from_bytes","value":"pub fn hash_from_bytes<D>(&[u8]) -> RistrettoPoint where D: Digest<OutputSize\n= U64> + Default","parent":null,"children":[],"decl_id":null,"docs":" Hash a slice of bytes into a `RistrettoPoint`.","sig":null,"attributes":[{"value":"/ Hash a slice of bytes into a `RistrettoPoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152006,"byte_end":152056,"line_start":658,"line_end":658,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152061,"byte_end":152064,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Takes a type parameter `D`, which is any `Digest` producing 64","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152069,"byte_end":152135,"line_start":660,"line_end":660,"column_start":5,"column_end":71}},{"value":"/ bytes of output.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152140,"byte_end":152160,"line_start":661,"line_end":661,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152165,"byte_end":152168,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ Convenience wrapper around `from_hash`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152173,"byte_end":152216,"line_start":663,"line_end":663,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152221,"byte_end":152224,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ # Implementation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152229,"byte_end":152249,"line_start":665,"line_end":665,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152254,"byte_end":152257,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ Uses the Ristretto-flavoured Elligator 2 map, so that the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152262,"byte_end":152323,"line_start":667,"line_end":667,"column_start":5,"column_end":66}},{"value":"/ discrete log of the output point with respect to any other","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152328,"byte_end":152390,"line_start":668,"line_end":668,"column_start":5,"column_end":67}},{"value":"/ point should be unknown.  The map is applied twice and the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152395,"byte_end":152457,"line_start":669,"line_end":669,"column_start":5,"column_end":67}},{"value":"/ results are added, to ensure a uniform distribution.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152462,"byte_end":152518,"line_start":670,"line_end":670,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152523,"byte_end":152526,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152531,"byte_end":152544,"line_start":672,"line_end":672,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152549,"byte_end":152552,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152557,"byte_end":152564,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"/ # extern crate curve25519_dalek;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152569,"byte_end":152605,"line_start":675,"line_end":675,"column_start":5,"column_end":41}},{"value":"/ # use curve25519_dalek::ristretto::RistrettoPoint;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152610,"byte_end":152664,"line_start":676,"line_end":676,"column_start":5,"column_end":59}},{"value":"/ extern crate sha2;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152669,"byte_end":152691,"line_start":677,"line_end":677,"column_start":5,"column_end":27}},{"value":"/ use sha2::Sha512;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152696,"byte_end":152717,"line_start":678,"line_end":678,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152722,"byte_end":152725,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ # // Need fn main() here in comment so the doctest compiles","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152730,"byte_end":152793,"line_start":680,"line_end":680,"column_start":5,"column_end":68}},{"value":"/ # // See https://doc.rust-lang.org/book/documentation.html#documentation-as-tests","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152798,"byte_end":152883,"line_start":681,"line_end":681,"column_start":5,"column_end":90}},{"value":"/ # fn main() {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152888,"byte_end":152905,"line_start":682,"line_end":682,"column_start":5,"column_end":22}},{"value":"/ let msg = \"To really appreciate architecture, you may even need to commit a murder\";","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":152910,"byte_end":152998,"line_start":683,"line_end":683,"column_start":5,"column_end":93}},{"value":"/ let P = RistrettoPoint::hash_from_bytes::<Sha512>(msg.as_bytes());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153003,"byte_end":153073,"line_start":684,"line_end":684,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153078,"byte_end":153085,"line_start":685,"line_end":685,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153090,"byte_end":153097,"line_start":686,"line_end":686,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153102,"byte_end":153105,"line_start":687,"line_end":687,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153584,"byte_end":153593,"line_start":701,"line_end":701,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RistrettoPoint>::from_hash","value":"pub fn from_hash<D>(D) -> RistrettoPoint where D: Digest<OutputSize = U64> +\nDefault","parent":null,"children":[],"decl_id":null,"docs":" Construct a `RistrettoPoint` from an existing `Digest` instance.","sig":null,"attributes":[{"value":"/ Construct a `RistrettoPoint` from an existing `Digest` instance.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153342,"byte_end":153410,"line_start":696,"line_end":696,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153415,"byte_end":153418,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ Use this instead of `hash_from_bytes` if it is more convenient","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153423,"byte_end":153489,"line_start":698,"line_end":698,"column_start":5,"column_end":71}},{"value":"/ to stream data into the `Digest` than to pass a single byte","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153494,"byte_end":153557,"line_start":699,"line_end":699,"column_start":5,"column_end":68}},{"value":"/ slice.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153562,"byte_end":153572,"line_start":700,"line_end":700,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":154492,"byte_end":154510,"line_start":723,"line_end":723,"column_start":12,"column_end":30},"name":"from_uniform_bytes","qualname":"<RistrettoPoint>::from_uniform_bytes","value":"pub fn from_uniform_bytes(&[u8; ]) -> RistrettoPoint","parent":null,"children":[],"decl_id":null,"docs":" Construct a `RistrettoPoint` from 64 bytes of data.","sig":null,"attributes":[{"value":"/ Construct a `RistrettoPoint` from 64 bytes of data.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":153966,"byte_end":154021,"line_start":712,"line_end":712,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":154026,"byte_end":154029,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ If the input bytes are uniformly distributed, the resulting","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":154034,"byte_end":154097,"line_start":714,"line_end":714,"column_start":5,"column_end":68}},{"value":"/ point will be uniformly distributed over the group, and its","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":154102,"byte_end":154165,"line_start":715,"line_end":715,"column_start":5,"column_end":68}},{"value":"/ discrete log with respect to other points should be unknown.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":154170,"byte_end":154234,"line_start":716,"line_end":716,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":154239,"byte_end":154242,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ # Implementation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":154247,"byte_end":154267,"line_start":718,"line_end":718,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":154272,"byte_end":154275,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ This function splits the input array into two 32-byte halves,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":154280,"byte_end":154345,"line_start":720,"line_end":720,"column_start":5,"column_end":70}},{"value":"/ takes the low 255 bits of each half mod p, applies the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":154350,"byte_end":154408,"line_start":721,"line_end":721,"column_start":5,"column_end":63}},{"value":"/ Ristretto-flavored Elligator map to each, and adds the results.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":154413,"byte_end":154480,"line_start":722,"line_end":722,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":559},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":160516,"byte_end":160546,"line_start":924,"line_end":924,"column_start":12,"column_end":42},"name":"VartimeRistrettoPrecomputation","qualname":"::ristretto::VartimeRistrettoPrecomputation","value":"","parent":null,"children":[],"decl_id":null,"docs":" Precomputation for variable-time multiscalar multiplication with `RistrettoPoint`s.\n","sig":null,"attributes":[{"value":"/ Precomputation for variable-time multiscalar multiplication with `RistrettoPoint`s.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":160239,"byte_end":160326,"line_start":919,"line_end":919,"column_start":1,"column_end":88}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":160479,"byte_end":160504,"line_start":923,"line_end":923,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":161794,"byte_end":161829,"line_start":968,"line_end":968,"column_start":12,"column_end":47},"name":"vartime_double_scalar_mul_basepoint","qualname":"<RistrettoPoint>::vartime_double_scalar_mul_basepoint","value":"pub fn vartime_double_scalar_mul_basepoint(&Scalar, &RistrettoPoint, &Scalar)\n-> RistrettoPoint","parent":null,"children":[],"decl_id":null,"docs":" Compute \\\\(aA + bB\\\\) in variable time, where \\\\(B\\\\) is the\n Ristretto basepoint.\n","sig":null,"attributes":[{"value":"/ Compute \\\\(aA + bB\\\\) in variable time, where \\\\(B\\\\) is the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":161689,"byte_end":161753,"line_start":966,"line_end":966,"column_start":5,"column_end":69}},{"value":"/ Ristretto basepoint.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":161758,"byte_end":161782,"line_start":967,"line_end":967,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1344},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162475,"byte_end":162498,"line_start":992,"line_end":992,"column_start":12,"column_end":35},"name":"RistrettoBasepointTable","qualname":"::ristretto::RistrettoBasepointTable","value":"","parent":null,"children":[],"decl_id":null,"docs":" A precomputed table of multiples of a basepoint, used to accelerate\n scalar multiplication.","sig":null,"attributes":[{"value":"/ A precomputed table of multiples of a basepoint, used to accelerate","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162042,"byte_end":162113,"line_start":979,"line_end":979,"column_start":1,"column_end":72}},{"value":"/ scalar multiplication.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162114,"byte_end":162140,"line_start":980,"line_end":980,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162141,"byte_end":162144,"line_start":981,"line_end":981,"column_start":1,"column_end":4}},{"value":"/ A precomputed table of multiples of the Ristretto basepoint is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162145,"byte_end":162211,"line_start":982,"line_end":982,"column_start":1,"column_end":67}},{"value":"/ available in the `constants` module:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162212,"byte_end":162252,"line_start":983,"line_end":983,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162253,"byte_end":162260,"line_start":984,"line_end":984,"column_start":1,"column_end":8}},{"value":"/ use curve25519_dalek::constants;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162261,"byte_end":162297,"line_start":985,"line_end":985,"column_start":1,"column_end":37}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162298,"byte_end":162339,"line_start":986,"line_end":986,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162340,"byte_end":162343,"line_start":987,"line_end":987,"column_start":1,"column_end":4}},{"value":"/ let a = Scalar::from(87329482u64);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162344,"byte_end":162382,"line_start":988,"line_end":988,"column_start":1,"column_end":39}},{"value":"/ let P = &a * &constants::RISTRETTO_BASEPOINT_TABLE;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162383,"byte_end":162438,"line_start":989,"line_end":989,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162439,"byte_end":162446,"line_start":990,"line_end":990,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":163096,"byte_end":163102,"line_start":1012,"line_end":1012,"column_start":12,"column_end":18},"name":"create","qualname":"<RistrettoBasepointTable>::create","value":"pub fn create(&RistrettoPoint) -> RistrettoBasepointTable","parent":null,"children":[],"decl_id":null,"docs":" Create a precomputed table of multiples of the given `basepoint`.\n","sig":null,"attributes":[{"value":"/ Create a precomputed table of multiples of the given `basepoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":163015,"byte_end":163084,"line_start":1011,"line_end":1011,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":163319,"byte_end":163328,"line_start":1017,"line_end":1017,"column_start":12,"column_end":21},"name":"basepoint","qualname":"<RistrettoBasepointTable>::basepoint","value":"pub fn basepoint(&Self) -> RistrettoPoint","parent":null,"children":[],"decl_id":null,"docs":" Get the basepoint for this table as a `RistrettoPoint`.\n","sig":null,"attributes":[{"value":"/ Get the basepoint for this table as a `RistrettoPoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":163248,"byte_end":163307,"line_start":1016,"line_end":1016,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":594},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"constants","qualname":"::constants","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":1650},{"krate":0,"index":596},{"krate":0,"index":1652},{"krate":0,"index":597},{"krate":0,"index":1654},{"krate":0,"index":598},{"krate":0,"index":1656},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":1660},{"krate":0,"index":607}],"decl_id":null,"docs":" Various constants, such as the Ristretto and Ed25519 basepoints.","sig":null,"attributes":[{"value":"/ Various constants, such as the Ristretto and Ed25519 basepoints.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":181663,"byte_end":181731,"line_start":11,"line_end":11,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":181732,"byte_end":181735,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Most of the constants are given with","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":181736,"byte_end":181776,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ `LONG_DESCRIPTIVE_UPPER_CASE_NAMES`, but they can be brought into","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":181777,"byte_end":181846,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/ scope using a `let` binding:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":181847,"byte_end":181879,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":181880,"byte_end":181883,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":181884,"byte_end":181891,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use curve25519_dalek::constants;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":181892,"byte_end":181928,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/ use curve25519_dalek::traits::IsIdentity;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":181929,"byte_end":181974,"line_start":19,"line_end":19,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":181975,"byte_end":181978,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let B = &constants::RISTRETTO_BASEPOINT_TABLE;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":181979,"byte_end":182029,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ let l = &constants::BASEPOINT_ORDER;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182030,"byte_end":182070,"line_start":22,"line_end":22,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182071,"byte_end":182074,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let A = l * B;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182075,"byte_end":182093,"line_start":24,"line_end":24,"column_start":1,"column_end":19}},{"value":"/ assert!(A.is_identity());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182094,"byte_end":182123,"line_start":25,"line_end":25,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182124,"byte_end":182131,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182133,"byte_end":182158,"line_start":28,"line_end":28,"column_start":1,"column_end":26}}]},{"kind":"Const","id":{"krate":0,"index":601},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182751,"byte_end":182779,"line_start":47,"line_end":47,"column_start":11,"column_end":39},"name":"ED25519_BASEPOINT_COMPRESSED","qualname":"::constants::ED25519_BASEPOINT_COMPRESSED","value":"CompressedEdwardsY","parent":null,"children":[],"decl_id":null,"docs":" The Ed25519 basepoint, in `CompressedEdwardsY` format.","sig":null,"attributes":[{"value":"/ The Ed25519 basepoint, in `CompressedEdwardsY` format.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182467,"byte_end":182525,"line_start":41,"line_end":41,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182526,"byte_end":182529,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This is the little-endian byte encoding of \\\\( 4/5 \\pmod p \\\\),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182530,"byte_end":182597,"line_start":43,"line_end":43,"column_start":1,"column_end":68}},{"value":"/ which is the \\\\(y\\\\)-coordinate of the Ed25519 basepoint.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182598,"byte_end":182659,"line_start":44,"line_end":44,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182660,"byte_end":182663,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ The sign bit is 0 since the basepoint has \\\\(x\\\\) chosen to be positive.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":182664,"byte_end":182740,"line_start":46,"line_end":46,"column_start":1,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":602},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":183158,"byte_end":183174,"line_start":54,"line_end":54,"column_start":11,"column_end":27},"name":"X25519_BASEPOINT","qualname":"::constants::X25519_BASEPOINT","value":"MontgomeryPoint","parent":null,"children":[],"decl_id":null,"docs":" The X25519 basepoint, in `MontgomeryPoint` format.\n","sig":null,"attributes":[{"value":"/ The X25519 basepoint, in `MontgomeryPoint` format.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":183093,"byte_end":183147,"line_start":53,"line_end":53,"column_start":1,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":603},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":183533,"byte_end":183563,"line_start":61,"line_end":61,"column_start":11,"column_end":41},"name":"RISTRETTO_BASEPOINT_COMPRESSED","qualname":"::constants::RISTRETTO_BASEPOINT_COMPRESSED","value":"CompressedRistretto","parent":null,"children":[],"decl_id":null,"docs":" The Ristretto basepoint, in `CompressedRistretto` format.\n","sig":null,"attributes":[{"value":"/ The Ristretto basepoint, in `CompressedRistretto` format.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":183461,"byte_end":183522,"line_start":60,"line_end":60,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":604},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":184056,"byte_end":184081,"line_start":71,"line_end":71,"column_start":11,"column_end":36},"name":"RISTRETTO_BASEPOINT_POINT","qualname":"::constants::RISTRETTO_BASEPOINT_POINT","value":"RistrettoPoint","parent":null,"children":[],"decl_id":null,"docs":" The Ristretto basepoint, as a `RistrettoPoint`.","sig":null,"attributes":[{"value":"/ The Ristretto basepoint, as a `RistrettoPoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":183882,"byte_end":183933,"line_start":67,"line_end":67,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":183934,"byte_end":183937,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ This is called `_POINT` to distinguish it from `_TABLE`, which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":183938,"byte_end":184004,"line_start":69,"line_end":69,"column_start":1,"column_end":67}},{"value":"/ provides fast scalar multiplication.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":184005,"byte_end":184045,"line_start":70,"line_end":70,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":605},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":184323,"byte_end":184338,"line_start":77,"line_end":77,"column_start":11,"column_end":26},"name":"BASEPOINT_ORDER","qualname":"::constants::BASEPOINT_ORDER","value":"Scalar","parent":null,"children":[],"decl_id":null,"docs":" `BASEPOINT_ORDER` is the order of the Ristretto group and of the Ed25519 basepoint, i.e.,\n $$\n \\ell = 2^\\{252\\} + 27742317777372353535851937790883648493.\n $$\n","sig":null,"attributes":[{"value":"/ `BASEPOINT_ORDER` is the order of the Ristretto group and of the Ed25519 basepoint, i.e.,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":184142,"byte_end":184235,"line_start":73,"line_end":73,"column_start":1,"column_end":94}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":184236,"byte_end":184242,"line_start":74,"line_end":74,"column_start":1,"column_end":7}},{"value":"/ \\ell = 2^\\{252\\} + 27742317777372353535851937790883648493.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":184243,"byte_end":184305,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":184306,"byte_end":184312,"line_start":76,"line_end":76,"column_start":1,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":607},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":184742,"byte_end":184767,"line_start":88,"line_end":88,"column_start":11,"column_end":36},"name":"RISTRETTO_BASEPOINT_TABLE","qualname":"::constants::RISTRETTO_BASEPOINT_TABLE","value":"RistrettoBasepointTable","parent":null,"children":[],"decl_id":null,"docs":" The Ristretto basepoint, as a `RistrettoBasepointTable` for scalar multiplication.\n","sig":null,"attributes":[{"value":"/ The Ristretto basepoint, as a `RistrettoBasepointTable` for scalar multiplication.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/constants.rs","byte_start":184645,"byte_end":184731,"line_start":87,"line_end":87,"column_start":1,"column_end":87}}]},{"kind":"Mod","id":{"krate":0,"index":608},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"traits","qualname":"::traits","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":624},{"krate":0,"index":633},{"krate":0,"index":649}],"decl_id":null,"docs":" Module for common traits.\n","sig":null,"attributes":[{"value":"/ Module for common traits.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":187839,"byte_end":187868,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":187870,"byte_end":187895,"line_start":13,"line_end":13,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":612},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188198,"byte_end":188206,"line_start":26,"line_end":26,"column_start":11,"column_end":19},"name":"Identity","qualname":"::traits::Identity","value":"Identity","parent":null,"children":[{"krate":0,"index":613}],"decl_id":null,"docs":" Trait for getting the identity element of a point type.\n","sig":null,"attributes":[{"value":"/ Trait for getting the identity element of a point type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188128,"byte_end":188187,"line_start":25,"line_end":25,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188305,"byte_end":188313,"line_start":29,"line_end":29,"column_start":8,"column_end":16},"name":"identity","qualname":"::traits::Identity::identity","value":"pub fn identity() -> Self","parent":{"krate":0,"index":612},"children":[],"decl_id":null,"docs":" Returns the identity element of the curve.\n Can be used as a constructor.\n","sig":null,"attributes":[{"value":"/ Returns the identity element of the curve.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188213,"byte_end":188259,"line_start":27,"line_end":27,"column_start":5,"column_end":51}},{"value":"/ Can be used as a constructor.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188264,"byte_end":188297,"line_start":28,"line_end":28,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":614},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188414,"byte_end":188424,"line_start":33,"line_end":33,"column_start":11,"column_end":21},"name":"IsIdentity","qualname":"::traits::IsIdentity","value":"IsIdentity","parent":null,"children":[{"krate":0,"index":615}],"decl_id":null,"docs":" Trait for testing if a curve point is equivalent to the identity point.\n","sig":null,"attributes":[{"value":"/ Trait for testing if a curve point is equivalent to the identity point.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188328,"byte_end":188403,"line_start":32,"line_end":32,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188508,"byte_end":188519,"line_start":35,"line_end":35,"column_start":8,"column_end":19},"name":"is_identity","qualname":"::traits::IsIdentity::is_identity","value":"pub fn is_identity(&Self) -> bool","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Return true if this element is the identity element of the curve.\n","sig":null,"attributes":[{"value":"/ Return true if this element is the identity element of the curve.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188431,"byte_end":188500,"line_start":34,"line_end":34,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":619},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188966,"byte_end":188980,"line_start":51,"line_end":51,"column_start":11,"column_end":25},"name":"MultiscalarMul","qualname":"::traits::MultiscalarMul","value":"MultiscalarMul","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621}],"decl_id":null,"docs":" A trait for constant-time multiscalar multiplication without precomputation.\n","sig":null,"attributes":[{"value":"/ A trait for constant-time multiscalar multiplication without precomputation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188875,"byte_end":188955,"line_start":50,"line_end":50,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":620},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189060,"byte_end":189065,"line_start":53,"line_end":53,"column_start":10,"column_end":15},"name":"Point","qualname":"::traits::MultiscalarMul::Point","value":"type Point;","parent":{"krate":0,"index":619},"children":[],"decl_id":null,"docs":" The type of point being multiplied, e.g., `RistrettoPoint`.\n","sig":null,"attributes":[{"value":"/ The type of point being multiplied, e.g., `RistrettoPoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188987,"byte_end":189050,"line_start":52,"line_end":52,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190653,"byte_end":190668,"line_start":98,"line_end":98,"column_start":8,"column_end":23},"name":"multiscalar_mul","qualname":"::traits::MultiscalarMul::multiscalar_mul","value":"pub fn multiscalar_mul<I, J>(I, J) -> Self::Point where I: IntoIterator,\nI::Item: Borrow<Scalar>, J: IntoIterator, J::Item: Borrow<Self::Point>","parent":{"krate":0,"index":619},"children":[],"decl_id":null,"docs":" Given an iterator of (possibly secret) scalars and an iterator of\n public points, compute\n $$\n Q = c\\_1 P\\_1 + \\cdots + c\\_n P\\_n.\n $$","sig":null,"attributes":[{"value":"/ Given an iterator of (possibly secret) scalars and an iterator of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189072,"byte_end":189141,"line_start":55,"line_end":55,"column_start":5,"column_end":74}},{"value":"/ public points, compute","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189146,"byte_end":189172,"line_start":56,"line_end":56,"column_start":5,"column_end":31}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189177,"byte_end":189183,"line_start":57,"line_end":57,"column_start":5,"column_end":11}},{"value":"/ Q = c\\_1 P\\_1 + \\cdots + c\\_n P\\_n.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189188,"byte_end":189227,"line_start":58,"line_end":58,"column_start":5,"column_end":44}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189232,"byte_end":189238,"line_start":59,"line_end":59,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189243,"byte_end":189246,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ It is an error to call this function with two iterators of different lengths.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189251,"byte_end":189332,"line_start":61,"line_end":61,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189337,"byte_end":189340,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189345,"byte_end":189359,"line_start":63,"line_end":63,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189364,"byte_end":189367,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ The trait bound aims for maximum flexibility: the inputs must be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189372,"byte_end":189440,"line_start":65,"line_end":65,"column_start":5,"column_end":73}},{"value":"/ convertable to iterators (`I: IntoIter`), and the iterator's items","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189445,"byte_end":189515,"line_start":66,"line_end":66,"column_start":5,"column_end":75}},{"value":"/ must be `Borrow<Scalar>` (or `Borrow<Point>`), to allow","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189520,"byte_end":189579,"line_start":67,"line_end":67,"column_start":5,"column_end":64}},{"value":"/ iterators returning either `Scalar`s or `&Scalar`s.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189584,"byte_end":189639,"line_start":68,"line_end":68,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189644,"byte_end":189647,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189652,"byte_end":189659,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use curve25519_dalek::constants;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189664,"byte_end":189700,"line_start":71,"line_end":71,"column_start":5,"column_end":41}},{"value":"/ use curve25519_dalek::traits::MultiscalarMul;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189705,"byte_end":189754,"line_start":72,"line_end":72,"column_start":5,"column_end":54}},{"value":"/ use curve25519_dalek::ristretto::RistrettoPoint;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189759,"byte_end":189811,"line_start":73,"line_end":73,"column_start":5,"column_end":57}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189816,"byte_end":189857,"line_start":74,"line_end":74,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189862,"byte_end":189865,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ // Some scalars","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189870,"byte_end":189889,"line_start":76,"line_end":76,"column_start":5,"column_end":24}},{"value":"/ let a = Scalar::from(87329482u64);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189894,"byte_end":189932,"line_start":77,"line_end":77,"column_start":5,"column_end":43}},{"value":"/ let b = Scalar::from(37264829u64);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189937,"byte_end":189975,"line_start":78,"line_end":78,"column_start":5,"column_end":43}},{"value":"/ let c = Scalar::from(98098098u64);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":189980,"byte_end":190018,"line_start":79,"line_end":79,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190023,"byte_end":190026,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ // Some points","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190031,"byte_end":190049,"line_start":81,"line_end":81,"column_start":5,"column_end":23}},{"value":"/ let P = constants::RISTRETTO_BASEPOINT_POINT;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190054,"byte_end":190103,"line_start":82,"line_end":82,"column_start":5,"column_end":54}},{"value":"/ let Q = P + P;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190108,"byte_end":190126,"line_start":83,"line_end":83,"column_start":5,"column_end":23}},{"value":"/ let R = P + Q;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190131,"byte_end":190149,"line_start":84,"line_end":84,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190154,"byte_end":190157,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ // A1 = a*P + b*Q + c*R","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190162,"byte_end":190189,"line_start":86,"line_end":86,"column_start":5,"column_end":32}},{"value":"/ let abc = [a,b,c];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190194,"byte_end":190216,"line_start":87,"line_end":87,"column_start":5,"column_end":27}},{"value":"/ let A1 = RistrettoPoint::multiscalar_mul(&abc, &[P,Q,R]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190221,"byte_end":190282,"line_start":88,"line_end":88,"column_start":5,"column_end":66}},{"value":"/ // Note: (&abc).into_iter(): Iterator<Item=&Scalar>","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190287,"byte_end":190342,"line_start":89,"line_end":89,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190347,"byte_end":190350,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ // A2 = (-a)*P + (-b)*Q + (-c)*R","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190355,"byte_end":190391,"line_start":91,"line_end":91,"column_start":5,"column_end":41}},{"value":"/ let minus_abc = abc.iter().map(|x| -x);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190396,"byte_end":190439,"line_start":92,"line_end":92,"column_start":5,"column_end":48}},{"value":"/ let A2 = RistrettoPoint::multiscalar_mul(minus_abc, &[P,Q,R]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190444,"byte_end":190510,"line_start":93,"line_end":93,"column_start":5,"column_end":71}},{"value":"/ // Note: minus_abc.into_iter(): Iterator<Item=Scalar>","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190515,"byte_end":190572,"line_start":94,"line_end":94,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190577,"byte_end":190580,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(A1.compress(), (-A2).compress());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190585,"byte_end":190633,"line_start":96,"line_end":96,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190638,"byte_end":190645,"line_start":97,"line_end":97,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":624},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190938,"byte_end":190959,"line_start":107,"line_end":107,"column_start":11,"column_end":32},"name":"VartimeMultiscalarMul","qualname":"::traits::VartimeMultiscalarMul","value":"VartimeMultiscalarMul","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":629}],"decl_id":null,"docs":" A trait for variable-time multiscalar multiplication without precomputation.\n","sig":null,"attributes":[{"value":"/ A trait for variable-time multiscalar multiplication without precomputation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190847,"byte_end":190927,"line_start":106,"line_end":106,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":625},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191039,"byte_end":191044,"line_start":109,"line_end":109,"column_start":10,"column_end":15},"name":"Point","qualname":"::traits::VartimeMultiscalarMul::Point","value":"type Point;","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" The type of point being multiplied, e.g., `RistrettoPoint`.\n","sig":null,"attributes":[{"value":"/ The type of point being multiplied, e.g., `RistrettoPoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":190966,"byte_end":191029,"line_start":108,"line_end":108,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192973,"byte_end":192997,"line_start":163,"line_end":163,"column_start":8,"column_end":32},"name":"optional_multiscalar_mul","qualname":"::traits::VartimeMultiscalarMul::optional_multiscalar_mul","value":"pub fn optional_multiscalar_mul<I, J>(I, J) -> Option<Self::Point> where\nI: IntoIterator, I::Item: Borrow<Scalar>, J: IntoIterator<Item =\nOption<Self::Point>>","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Given an iterator of public scalars and an iterator of\n `Option`s of points, compute either `Some(Q)`, where\n $$\n Q = c\\_1 P\\_1 + \\cdots + c\\_n P\\_n,\n $$\n if all points were `Some(P_i)`, or else return `None`.","sig":null,"attributes":[{"value":"/ Given an iterator of public scalars and an iterator of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191051,"byte_end":191109,"line_start":111,"line_end":111,"column_start":5,"column_end":63}},{"value":"/ `Option`s of points, compute either `Some(Q)`, where","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191114,"byte_end":191170,"line_start":112,"line_end":112,"column_start":5,"column_end":61}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191175,"byte_end":191181,"line_start":113,"line_end":113,"column_start":5,"column_end":11}},{"value":"/ Q = c\\_1 P\\_1 + \\cdots + c\\_n P\\_n,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191186,"byte_end":191225,"line_start":114,"line_end":114,"column_start":5,"column_end":44}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191230,"byte_end":191236,"line_start":115,"line_end":115,"column_start":5,"column_end":11}},{"value":"/ if all points were `Some(P_i)`, or else return `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191241,"byte_end":191299,"line_start":116,"line_end":116,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191304,"byte_end":191307,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This function is particularly useful when verifying statements","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191312,"byte_end":191378,"line_start":118,"line_end":118,"column_start":5,"column_end":71}},{"value":"/ involving compressed points.  Accepting `Option<Point>` allows","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191383,"byte_end":191449,"line_start":119,"line_end":119,"column_start":5,"column_end":71}},{"value":"/ inlining point decompression into the multiscalar call,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191454,"byte_end":191513,"line_start":120,"line_end":120,"column_start":5,"column_end":64}},{"value":"/ avoiding the need for temporary buffers.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191518,"byte_end":191562,"line_start":121,"line_end":121,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191567,"byte_end":191574,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use curve25519_dalek::constants;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191579,"byte_end":191615,"line_start":123,"line_end":123,"column_start":5,"column_end":41}},{"value":"/ use curve25519_dalek::traits::VartimeMultiscalarMul;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191620,"byte_end":191676,"line_start":124,"line_end":124,"column_start":5,"column_end":61}},{"value":"/ use curve25519_dalek::ristretto::RistrettoPoint;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191681,"byte_end":191733,"line_start":125,"line_end":125,"column_start":5,"column_end":57}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191738,"byte_end":191779,"line_start":126,"line_end":126,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191784,"byte_end":191787,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ // Some scalars","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191792,"byte_end":191811,"line_start":128,"line_end":128,"column_start":5,"column_end":24}},{"value":"/ let a = Scalar::from(87329482u64);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191816,"byte_end":191854,"line_start":129,"line_end":129,"column_start":5,"column_end":43}},{"value":"/ let b = Scalar::from(37264829u64);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191859,"byte_end":191897,"line_start":130,"line_end":130,"column_start":5,"column_end":43}},{"value":"/ let c = Scalar::from(98098098u64);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191902,"byte_end":191940,"line_start":131,"line_end":131,"column_start":5,"column_end":43}},{"value":"/ let abc = [a,b,c];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191945,"byte_end":191967,"line_start":132,"line_end":132,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191972,"byte_end":191975,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ // Some points","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":191980,"byte_end":191998,"line_start":134,"line_end":134,"column_start":5,"column_end":23}},{"value":"/ let P = constants::RISTRETTO_BASEPOINT_POINT;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192003,"byte_end":192052,"line_start":135,"line_end":135,"column_start":5,"column_end":54}},{"value":"/ let Q = P + P;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192057,"byte_end":192075,"line_start":136,"line_end":136,"column_start":5,"column_end":23}},{"value":"/ let R = P + Q;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192080,"byte_end":192098,"line_start":137,"line_end":137,"column_start":5,"column_end":23}},{"value":"/ let PQR = [P, Q, R];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192103,"byte_end":192127,"line_start":138,"line_end":138,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192132,"byte_end":192135,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ let compressed = [P.compress(), Q.compress(), R.compress()];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192140,"byte_end":192204,"line_start":140,"line_end":140,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192209,"byte_end":192212,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ // Now we can compute A1 = a*P + b*Q + c*R using P, Q, R:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192217,"byte_end":192278,"line_start":142,"line_end":142,"column_start":5,"column_end":66}},{"value":"/ let A1 = RistrettoPoint::vartime_multiscalar_mul(&abc, &PQR);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192283,"byte_end":192348,"line_start":143,"line_end":143,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192353,"byte_end":192356,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ // Or using the compressed points:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192361,"byte_end":192399,"line_start":145,"line_end":145,"column_start":5,"column_end":43}},{"value":"/ let A2 = RistrettoPoint::optional_multiscalar_mul(","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192404,"byte_end":192458,"line_start":146,"line_end":146,"column_start":5,"column_end":59}},{"value":"/     &abc,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192463,"byte_end":192476,"line_start":147,"line_end":147,"column_start":5,"column_end":18}},{"value":"/     compressed.iter().map(|pt| pt.decompress()),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192481,"byte_end":192533,"line_start":148,"line_end":148,"column_start":5,"column_end":57}},{"value":"/ );","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192538,"byte_end":192544,"line_start":149,"line_end":149,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192549,"byte_end":192552,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(A2, Some(A1));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192557,"byte_end":192586,"line_start":151,"line_end":151,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192591,"byte_end":192594,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ // It's also possible to mix compressed and uncompressed points:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192599,"byte_end":192667,"line_start":153,"line_end":153,"column_start":5,"column_end":73}},{"value":"/ let A3 = RistrettoPoint::optional_multiscalar_mul(","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192672,"byte_end":192726,"line_start":154,"line_end":154,"column_start":5,"column_end":59}},{"value":"/     abc.iter()","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192731,"byte_end":192749,"line_start":155,"line_end":155,"column_start":5,"column_end":23}},{"value":"/         .chain(abc.iter()),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192754,"byte_end":192785,"line_start":156,"line_end":156,"column_start":5,"column_end":36}},{"value":"/     compressed.iter().map(|pt| pt.decompress())","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192790,"byte_end":192841,"line_start":157,"line_end":157,"column_start":5,"column_end":56}},{"value":"/         .chain(PQR.iter().map(|&pt| Some(pt))),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192846,"byte_end":192897,"line_start":158,"line_end":158,"column_start":5,"column_end":56}},{"value":"/ );","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192902,"byte_end":192908,"line_start":159,"line_end":159,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192913,"byte_end":192916,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(A3, Some(A1+A1));","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192921,"byte_end":192953,"line_start":161,"line_end":161,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":192958,"byte_end":192965,"line_start":162,"line_end":162,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194809,"byte_end":194832,"line_start":213,"line_end":213,"column_start":8,"column_end":31},"name":"vartime_multiscalar_mul","qualname":"::traits::VartimeMultiscalarMul::vartime_multiscalar_mul","value":"pub fn vartime_multiscalar_mul<I, J>(I, J) -> Self::Point where\nI: IntoIterator, I::Item: Borrow<Scalar>, J: IntoIterator,\nJ::Item: Borrow<Self::Point>, Self::Point: Clone","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Given an iterator of public scalars and an iterator of\n public points, compute\n $$\n Q = c\\_1 P\\_1 + \\cdots + c\\_n P\\_n,\n $$\n using variable-time operations.","sig":null,"attributes":[{"value":"/ Given an iterator of public scalars and an iterator of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193176,"byte_end":193234,"line_start":169,"line_end":169,"column_start":5,"column_end":63}},{"value":"/ public points, compute","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193239,"byte_end":193265,"line_start":170,"line_end":170,"column_start":5,"column_end":31}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193270,"byte_end":193276,"line_start":171,"line_end":171,"column_start":5,"column_end":11}},{"value":"/ Q = c\\_1 P\\_1 + \\cdots + c\\_n P\\_n,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193281,"byte_end":193320,"line_start":172,"line_end":172,"column_start":5,"column_end":44}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193325,"byte_end":193331,"line_start":173,"line_end":173,"column_start":5,"column_end":11}},{"value":"/ using variable-time operations.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193336,"byte_end":193371,"line_start":174,"line_end":174,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193376,"byte_end":193379,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ It is an error to call this function with two iterators of different lengths.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193384,"byte_end":193465,"line_start":176,"line_end":176,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193470,"byte_end":193473,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193478,"byte_end":193492,"line_start":178,"line_end":178,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193497,"byte_end":193500,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ The trait bound aims for maximum flexibility: the inputs must be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193505,"byte_end":193573,"line_start":180,"line_end":180,"column_start":5,"column_end":73}},{"value":"/ convertable to iterators (`I: IntoIter`), and the iterator's items","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193578,"byte_end":193648,"line_start":181,"line_end":181,"column_start":5,"column_end":75}},{"value":"/ must be `Borrow<Scalar>` (or `Borrow<Point>`), to allow","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193653,"byte_end":193712,"line_start":182,"line_end":182,"column_start":5,"column_end":64}},{"value":"/ iterators returning either `Scalar`s or `&Scalar`s.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193717,"byte_end":193772,"line_start":183,"line_end":183,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193777,"byte_end":193780,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193785,"byte_end":193792,"line_start":185,"line_end":185,"column_start":5,"column_end":12}},{"value":"/ use curve25519_dalek::constants;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193797,"byte_end":193833,"line_start":186,"line_end":186,"column_start":5,"column_end":41}},{"value":"/ use curve25519_dalek::traits::VartimeMultiscalarMul;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193838,"byte_end":193894,"line_start":187,"line_end":187,"column_start":5,"column_end":61}},{"value":"/ use curve25519_dalek::ristretto::RistrettoPoint;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193899,"byte_end":193951,"line_start":188,"line_end":188,"column_start":5,"column_end":57}},{"value":"/ use curve25519_dalek::scalar::Scalar;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":193956,"byte_end":193997,"line_start":189,"line_end":189,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194002,"byte_end":194005,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ // Some scalars","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194010,"byte_end":194029,"line_start":191,"line_end":191,"column_start":5,"column_end":24}},{"value":"/ let a = Scalar::from(87329482u64);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194034,"byte_end":194072,"line_start":192,"line_end":192,"column_start":5,"column_end":43}},{"value":"/ let b = Scalar::from(37264829u64);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194077,"byte_end":194115,"line_start":193,"line_end":193,"column_start":5,"column_end":43}},{"value":"/ let c = Scalar::from(98098098u64);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194120,"byte_end":194158,"line_start":194,"line_end":194,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194163,"byte_end":194166,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ // Some points","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194171,"byte_end":194189,"line_start":196,"line_end":196,"column_start":5,"column_end":23}},{"value":"/ let P = constants::RISTRETTO_BASEPOINT_POINT;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194194,"byte_end":194243,"line_start":197,"line_end":197,"column_start":5,"column_end":54}},{"value":"/ let Q = P + P;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194248,"byte_end":194266,"line_start":198,"line_end":198,"column_start":5,"column_end":23}},{"value":"/ let R = P + Q;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194271,"byte_end":194289,"line_start":199,"line_end":199,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194294,"byte_end":194297,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ // A1 = a*P + b*Q + c*R","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194302,"byte_end":194329,"line_start":201,"line_end":201,"column_start":5,"column_end":32}},{"value":"/ let abc = [a,b,c];","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194334,"byte_end":194356,"line_start":202,"line_end":202,"column_start":5,"column_end":27}},{"value":"/ let A1 = RistrettoPoint::vartime_multiscalar_mul(&abc, &[P,Q,R]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194361,"byte_end":194430,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/ // Note: (&abc).into_iter(): Iterator<Item=&Scalar>","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194435,"byte_end":194490,"line_start":204,"line_end":204,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194495,"byte_end":194498,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ // A2 = (-a)*P + (-b)*Q + (-c)*R","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194503,"byte_end":194539,"line_start":206,"line_end":206,"column_start":5,"column_end":41}},{"value":"/ let minus_abc = abc.iter().map(|x| -x);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194544,"byte_end":194587,"line_start":207,"line_end":207,"column_start":5,"column_end":48}},{"value":"/ let A2 = RistrettoPoint::vartime_multiscalar_mul(minus_abc, &[P,Q,R]);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194592,"byte_end":194666,"line_start":208,"line_end":208,"column_start":5,"column_end":79}},{"value":"/ // Note: minus_abc.into_iter(): Iterator<Item=Scalar>","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194671,"byte_end":194728,"line_start":209,"line_end":209,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194733,"byte_end":194736,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(A1.compress(), (-A2).compress());","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194741,"byte_end":194789,"line_start":211,"line_end":211,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":194794,"byte_end":194801,"line_start":212,"line_end":212,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":633},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196373,"byte_end":196405,"line_start":255,"line_end":255,"column_start":11,"column_end":43},"name":"VartimePrecomputedMultiscalarMul","qualname":"::traits::VartimePrecomputedMultiscalarMul","value":"VartimePrecomputedMultiscalarMul: Sized","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":645}],"decl_id":null,"docs":" A trait for variable-time multiscalar multiplication with precomputation.","sig":null,"attributes":[{"value":"/ A trait for variable-time multiscalar multiplication with precomputation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195206,"byte_end":195283,"line_start":229,"line_end":229,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195284,"byte_end":195287,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ A general multiscalar multiplication with precomputation can be written as","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195288,"byte_end":195366,"line_start":231,"line_end":231,"column_start":1,"column_end":79}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195367,"byte_end":195373,"line_start":232,"line_end":232,"column_start":1,"column_end":7}},{"value":"/ Q = a_1 A_1 + \\cdots + a_n A_n + b_1 B_1 + \\cdots + b_m B_m,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195374,"byte_end":195438,"line_start":233,"line_end":233,"column_start":1,"column_end":65}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195439,"byte_end":195445,"line_start":234,"line_end":234,"column_start":1,"column_end":7}},{"value":"/ where the \\\\(B_i\\\\) are *static* points, for which precomputation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195446,"byte_end":195515,"line_start":235,"line_end":235,"column_start":1,"column_end":70}},{"value":"/ is possible, and the \\\\(A_j\\\\) are *dynamic* points, for which","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195516,"byte_end":195582,"line_start":236,"line_end":236,"column_start":1,"column_end":67}},{"value":"/ precomputation is not possible.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195583,"byte_end":195618,"line_start":237,"line_end":237,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195619,"byte_end":195622,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ This trait has three methods for performing this computation:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195623,"byte_end":195688,"line_start":239,"line_end":239,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195689,"byte_end":195692,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ * [`vartime_multiscalar_mul`], which handles the special case","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195693,"byte_end":195758,"line_start":241,"line_end":241,"column_start":1,"column_end":66}},{"value":"/ where \\\\(n = 0\\\\) and there are no dynamic points;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195759,"byte_end":195813,"line_start":242,"line_end":242,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195814,"byte_end":195817,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ * [`vartime_mixed_multiscalar_mul`], which takes the dynamic","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195818,"byte_end":195882,"line_start":244,"line_end":244,"column_start":1,"column_end":65}},{"value":"/ points as already-validated `Point`s and is infallible;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195883,"byte_end":195942,"line_start":245,"line_end":245,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195943,"byte_end":195946,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ * [`optional_mixed_multiscalar_mul`], which takes the dynamic","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":195947,"byte_end":196012,"line_start":247,"line_end":247,"column_start":1,"column_end":66}},{"value":"/ points as `Option<Point>`s and returns an `Option<Point>`,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196013,"byte_end":196075,"line_start":248,"line_end":248,"column_start":1,"column_end":63}},{"value":"/ allowing decompression to be composed into the input iterators.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196076,"byte_end":196143,"line_start":249,"line_end":249,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196144,"byte_end":196147,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ All methods require that the lengths of the input iterators be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196148,"byte_end":196214,"line_start":251,"line_end":251,"column_start":1,"column_end":67}},{"value":"/ known and matching, as if they were `ExactSizeIterator`s.  (It","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196215,"byte_end":196281,"line_start":252,"line_end":252,"column_start":1,"column_end":67}},{"value":"/ does not require `ExactSizeIterator` only because that trait is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196282,"byte_end":196349,"line_start":253,"line_end":253,"column_start":1,"column_end":68}},{"value":"/ broken).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196350,"byte_end":196362,"line_start":254,"line_end":254,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":634},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196492,"byte_end":196497,"line_start":257,"line_end":257,"column_start":10,"column_end":15},"name":"Point","qualname":"::traits::VartimePrecomputedMultiscalarMul::Point","value":"type Point: Clone;","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" The type of point to be multiplied, e.g., `RistrettoPoint`.\n","sig":null,"attributes":[{"value":"/ The type of point to be multiplied, e.g., `RistrettoPoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196419,"byte_end":196482,"line_start":256,"line_end":256,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196626,"byte_end":196629,"line_start":261,"line_end":261,"column_start":8,"column_end":11},"name":"new","qualname":"::traits::VartimePrecomputedMultiscalarMul::new","value":"pub fn new<I>(I) -> Self where I: IntoIterator, I::Item: Borrow<Self::Point>","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Given the static points \\\\( B_i \\\\), perform precomputation\n and return the precomputation data.\n","sig":null,"attributes":[{"value":"/ Given the static points \\\\( B_i \\\\), perform precomputation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196511,"byte_end":196574,"line_start":259,"line_end":259,"column_start":5,"column_end":68}},{"value":"/ and return the precomputation data.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196579,"byte_end":196618,"line_start":260,"line_end":260,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197322,"byte_end":197345,"line_start":280,"line_end":280,"column_start":8,"column_end":31},"name":"vartime_multiscalar_mul","qualname":"::traits::VartimePrecomputedMultiscalarMul::vartime_multiscalar_mul","value":"pub fn vartime_multiscalar_mul<I>(&Self, I) -> Self::Point where\nI: IntoIterator, I::Item: Borrow<Scalar>","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Given `static_scalars`, an iterator of public scalars\n \\\\(b_i\\\\), compute\n $$\n Q = b_1 B_1 + \\cdots + b_m B_m,\n $$\n where the \\\\(B_j\\\\) are the points that were supplied to `new`.","sig":null,"attributes":[{"value":"/ Given `static_scalars`, an iterator of public scalars","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196737,"byte_end":196794,"line_start":266,"line_end":266,"column_start":5,"column_end":62}},{"value":"/ \\\\(b_i\\\\), compute","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196799,"byte_end":196821,"line_start":267,"line_end":267,"column_start":5,"column_end":27}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196826,"byte_end":196832,"line_start":268,"line_end":268,"column_start":5,"column_end":11}},{"value":"/ Q = b_1 B_1 + \\cdots + b_m B_m,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196837,"byte_end":196872,"line_start":269,"line_end":269,"column_start":5,"column_end":40}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196877,"byte_end":196883,"line_start":270,"line_end":270,"column_start":5,"column_end":11}},{"value":"/ where the \\\\(B_j\\\\) are the points that were supplied to `new`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196888,"byte_end":196955,"line_start":271,"line_end":271,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196960,"byte_end":196963,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ It is an error to call this function with iterators of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196968,"byte_end":197026,"line_start":273,"line_end":273,"column_start":5,"column_end":63}},{"value":"/ inconsistent lengths.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197031,"byte_end":197056,"line_start":274,"line_end":274,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197061,"byte_end":197064,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ The trait bound aims for maximum flexibility: the input must","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197069,"byte_end":197133,"line_start":276,"line_end":276,"column_start":5,"column_end":69}},{"value":"/ be convertable to iterators (`I: IntoIter`), and the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197138,"byte_end":197194,"line_start":277,"line_end":277,"column_start":5,"column_end":61}},{"value":"/ iterator's items must be `Borrow<Scalar>`, to allow iterators","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197199,"byte_end":197264,"line_start":278,"line_end":278,"column_start":5,"column_end":70}},{"value":"/ returning either `Scalar`s or `&Scalar`s.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197269,"byte_end":197314,"line_start":279,"line_end":279,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":198447,"byte_end":198476,"line_start":311,"line_end":311,"column_start":8,"column_end":37},"name":"vartime_mixed_multiscalar_mul","qualname":"::traits::VartimePrecomputedMultiscalarMul::vartime_mixed_multiscalar_mul","value":"pub fn vartime_mixed_multiscalar_mul<I, J, K>(&Self, I, J, K) -> Self::Point\nwhere I: IntoIterator, I::Item: Borrow<Scalar>, J: IntoIterator,\nJ::Item: Borrow<Scalar>, K: IntoIterator, K::Item: Borrow<Self::Point>","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Given `static_scalars`, an iterator of public scalars\n \\\\(b_i\\\\), `dynamic_scalars`, an iterator of public scalars\n \\\\(a_i\\\\), and `dynamic_points`, an iterator of points\n \\\\(A_i\\\\), compute\n $$\n Q = a_1 A_1 + \\cdots + a_n A_n + b_1 B_1 + \\cdots + b_m B_m,\n $$\n where the \\\\(B_j\\\\) are the points that were supplied to `new`.","sig":null,"attributes":[{"value":"/ Given `static_scalars`, an iterator of public scalars","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197680,"byte_end":197737,"line_start":295,"line_end":295,"column_start":5,"column_end":62}},{"value":"/ \\\\(b_i\\\\), `dynamic_scalars`, an iterator of public scalars","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197742,"byte_end":197805,"line_start":296,"line_end":296,"column_start":5,"column_end":68}},{"value":"/ \\\\(a_i\\\\), and `dynamic_points`, an iterator of points","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197810,"byte_end":197868,"line_start":297,"line_end":297,"column_start":5,"column_end":63}},{"value":"/ \\\\(A_i\\\\), compute","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197873,"byte_end":197895,"line_start":298,"line_end":298,"column_start":5,"column_end":27}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197900,"byte_end":197906,"line_start":299,"line_end":299,"column_start":5,"column_end":11}},{"value":"/ Q = a_1 A_1 + \\cdots + a_n A_n + b_1 B_1 + \\cdots + b_m B_m,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197911,"byte_end":197975,"line_start":300,"line_end":300,"column_start":5,"column_end":69}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197980,"byte_end":197986,"line_start":301,"line_end":301,"column_start":5,"column_end":11}},{"value":"/ where the \\\\(B_j\\\\) are the points that were supplied to `new`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":197991,"byte_end":198058,"line_start":302,"line_end":302,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":198063,"byte_end":198066,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ It is an error to call this function with iterators of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":198071,"byte_end":198129,"line_start":304,"line_end":304,"column_start":5,"column_end":63}},{"value":"/ inconsistent lengths.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":198134,"byte_end":198159,"line_start":305,"line_end":305,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":198164,"byte_end":198167,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ The trait bound aims for maximum flexibility: the inputs must be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":198172,"byte_end":198240,"line_start":307,"line_end":307,"column_start":5,"column_end":73}},{"value":"/ convertable to iterators (`I: IntoIter`), and the iterator's items","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":198245,"byte_end":198315,"line_start":308,"line_end":308,"column_start":5,"column_end":75}},{"value":"/ must be `Borrow<Scalar>` (or `Borrow<Point>`), to allow","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":198320,"byte_end":198379,"line_start":309,"line_end":309,"column_start":5,"column_end":64}},{"value":"/ iterators returning either `Scalar`s or `&Scalar`s.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":198384,"byte_end":198439,"line_start":310,"line_end":310,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199857,"byte_end":199887,"line_start":352,"line_end":352,"column_start":8,"column_end":38},"name":"optional_mixed_multiscalar_mul","qualname":"::traits::VartimePrecomputedMultiscalarMul::optional_mixed_multiscalar_mul","value":"pub fn optional_mixed_multiscalar_mul<I, J, K>(&Self, I, J, K)\n-> Option<Self::Point> where I: IntoIterator, I::Item: Borrow<Scalar>,\nJ: IntoIterator, J::Item: Borrow<Scalar>, K: IntoIterator<Item =\nOption<Self::Point>>","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Given `static_scalars`, an iterator of public scalars\n \\\\(b_i\\\\), `dynamic_scalars`, an iterator of public scalars\n \\\\(a_i\\\\), and `dynamic_points`, an iterator of points\n \\\\(A_i\\\\), compute\n $$\n Q = a_1 A_1 + \\cdots + a_n A_n + b_1 B_1 + \\cdots + b_m B_m,\n $$\n where the \\\\(B_j\\\\) are the points that were supplied to `new`.","sig":null,"attributes":[{"value":"/ Given `static_scalars`, an iterator of public scalars","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199034,"byte_end":199091,"line_start":334,"line_end":334,"column_start":5,"column_end":62}},{"value":"/ \\\\(b_i\\\\), `dynamic_scalars`, an iterator of public scalars","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199096,"byte_end":199159,"line_start":335,"line_end":335,"column_start":5,"column_end":68}},{"value":"/ \\\\(a_i\\\\), and `dynamic_points`, an iterator of points","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199164,"byte_end":199222,"line_start":336,"line_end":336,"column_start":5,"column_end":63}},{"value":"/ \\\\(A_i\\\\), compute","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199227,"byte_end":199249,"line_start":337,"line_end":337,"column_start":5,"column_end":27}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199254,"byte_end":199260,"line_start":338,"line_end":338,"column_start":5,"column_end":11}},{"value":"/ Q = a_1 A_1 + \\cdots + a_n A_n + b_1 B_1 + \\cdots + b_m B_m,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199265,"byte_end":199329,"line_start":339,"line_end":339,"column_start":5,"column_end":69}},{"value":"/ $$","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199334,"byte_end":199340,"line_start":340,"line_end":340,"column_start":5,"column_end":11}},{"value":"/ where the \\\\(B_j\\\\) are the points that were supplied to `new`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199345,"byte_end":199412,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199417,"byte_end":199420,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ If any of the dynamic points were `None`, return `None`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199425,"byte_end":199485,"line_start":343,"line_end":343,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199490,"byte_end":199493,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ It is an error to call this function with iterators of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199498,"byte_end":199556,"line_start":345,"line_end":345,"column_start":5,"column_end":63}},{"value":"/ inconsistent lengths.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199561,"byte_end":199586,"line_start":346,"line_end":346,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199591,"byte_end":199594,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ This function is particularly useful when verifying statements","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199599,"byte_end":199665,"line_start":348,"line_end":348,"column_start":5,"column_end":71}},{"value":"/ involving compressed points.  Accepting `Option<Point>` allows","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199670,"byte_end":199736,"line_start":349,"line_end":349,"column_start":5,"column_end":71}},{"value":"/ inlining point decompression into the multiscalar call,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199741,"byte_end":199800,"line_start":350,"line_end":350,"column_start":5,"column_end":64}},{"value":"/ avoiding the need for temporary buffers.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":199805,"byte_end":199849,"line_start":351,"line_end":351,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203278,"byte_end":203289,"line_start":80,"line_end":80,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<FieldElement>::is_negative","value":"pub fn is_negative(&Self) -> Choice","parent":null,"children":[],"decl_id":null,"docs":" Determine if this `FieldElement` is negative, in the sense\n used in the ed25519 paper: `x` is negative if the low bit is\n set.","sig":null,"attributes":[{"value":"/ Determine if this `FieldElement` is negative, in the sense","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203016,"byte_end":203078,"line_start":73,"line_end":73,"column_start":5,"column_end":67}},{"value":"/ used in the ed25519 paper: `x` is negative if the low bit is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203083,"byte_end":203147,"line_start":74,"line_end":74,"column_start":5,"column_end":69}},{"value":"/ set.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203152,"byte_end":203160,"line_start":75,"line_end":75,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203165,"byte_end":203168,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203173,"byte_end":203185,"line_start":77,"line_end":77,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203190,"byte_end":203193,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ If negative, return `Choice(1)`.  Otherwise, return `Choice(0)`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203198,"byte_end":203266,"line_start":79,"line_end":79,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203546,"byte_end":203553,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<FieldElement>::is_zero","value":"pub fn is_zero(&Self) -> Choice","parent":null,"children":[],"decl_id":null,"docs":" Determine if this `FieldElement` is zero.","sig":null,"attributes":[{"value":"/ Determine if this `FieldElement` is zero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203387,"byte_end":203432,"line_start":85,"line_end":85,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203437,"byte_end":203440,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203445,"byte_end":203457,"line_start":87,"line_end":87,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203462,"byte_end":203465,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ If zero, return `Choice(1)`.  Otherwise, return `Choice(0)`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":203470,"byte_end":203534,"line_start":89,"line_end":89,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":205698,"byte_end":205710,"line_start":139,"line_end":139,"column_start":12,"column_end":24},"name":"batch_invert","qualname":"<FieldElement>::batch_invert","value":"pub fn batch_invert(&mut [FieldElement])","parent":null,"children":[],"decl_id":null,"docs":" Given a slice of public `FieldElements`, replace each with its inverse.","sig":null,"attributes":[{"value":"/ Given a slice of public `FieldElements`, replace each with its inverse.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":205518,"byte_end":205593,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":205598,"byte_end":205601,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ All input `FieldElements` **MUST** be nonzero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":205606,"byte_end":205656,"line_start":137,"line_end":137,"column_start":5,"column_end":55}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":205661,"byte_end":205686,"line_start":138,"line_end":138,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":207016,"byte_end":207022,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"invert","qualname":"<FieldElement>::invert","value":"pub fn invert(&Self) -> FieldElement","parent":null,"children":[],"decl_id":null,"docs":" Given a nonzero field element, compute its inverse.","sig":null,"attributes":[{"value":"/ Given a nonzero field element, compute its inverse.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":206790,"byte_end":206845,"line_start":172,"line_end":172,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":206850,"byte_end":206853,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ The inverse is computed as self^(p-2), since","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":206858,"byte_end":206906,"line_start":174,"line_end":174,"column_start":5,"column_end":53}},{"value":"/ x^(p-2)x = x^(p-1) = 1 (mod p).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":206911,"byte_end":206946,"line_start":175,"line_end":175,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":206951,"byte_end":206954,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ This function returns zero on input zero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":206959,"byte_end":207004,"line_start":177,"line_end":177,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":208336,"byte_end":208348,"line_start":213,"line_end":213,"column_start":12,"column_end":24},"name":"sqrt_ratio_i","qualname":"<FieldElement>::sqrt_ratio_i","value":"pub fn sqrt_ratio_i(&FieldElement, &FieldElement) -> (Choice, FieldElement)","parent":null,"children":[],"decl_id":null,"docs":" Given `FieldElements` `u` and `v`, compute either `sqrt(u/v)`\n or `sqrt(i*u/v)` in constant time.","sig":null,"attributes":[{"value":"/ Given `FieldElements` `u` and `v`, compute either `sqrt(u/v)`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":207813,"byte_end":207878,"line_start":201,"line_end":201,"column_start":5,"column_end":70}},{"value":"/ or `sqrt(i*u/v)` in constant time.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":207883,"byte_end":207921,"line_start":202,"line_end":202,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":207926,"byte_end":207929,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ This function always returns the nonnegative square root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":207934,"byte_end":207995,"line_start":204,"line_end":204,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":208000,"byte_end":208003,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":208008,"byte_end":208020,"line_start":206,"line_end":206,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":208025,"byte_end":208028,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ - `(Choice(1), +sqrt(u/v))  ` if `v` is nonzero and `u/v` is square;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":208033,"byte_end":208105,"line_start":208,"line_end":208,"column_start":5,"column_end":77}},{"value":"/ - `(Choice(1), zero)        ` if `u` is zero;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":208110,"byte_end":208159,"line_start":209,"line_end":209,"column_start":5,"column_end":54}},{"value":"/ - `(Choice(0), zero)        ` if `v` is zero and `u` is nonzero;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":208164,"byte_end":208232,"line_start":210,"line_end":210,"column_start":5,"column_end":73}},{"value":"/ - `(Choice(0), +sqrt(i*u/v))` if `u/v` is nonsquare (so `i*u/v` is square).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":208237,"byte_end":208316,"line_start":211,"line_end":211,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":208321,"byte_end":208324,"line_start":212,"line_end":212,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210657,"byte_end":210664,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"name":"invsqrt","qualname":"<FieldElement>::invsqrt","value":"pub fn invsqrt(&Self) -> (Choice, FieldElement)","parent":null,"children":[],"decl_id":null,"docs":" Attempt to compute `sqrt(1/self)` in constant time.","sig":null,"attributes":[{"value":"/ Attempt to compute `sqrt(1/self)` in constant time.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210209,"byte_end":210264,"line_start":261,"line_end":261,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210269,"byte_end":210272,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Convenience wrapper around `sqrt_ratio_i`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210277,"byte_end":210323,"line_start":263,"line_end":263,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210328,"byte_end":210331,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ This function always returns the nonnegative square root.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210336,"byte_end":210397,"line_start":265,"line_end":265,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210402,"byte_end":210405,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210410,"byte_end":210422,"line_start":267,"line_end":267,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210427,"byte_end":210430,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ - `(Choice(1), +sqrt(1/self))  ` if `self` is a nonzero square;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210435,"byte_end":210502,"line_start":269,"line_end":269,"column_start":5,"column_end":72}},{"value":"/ - `(Choice(0), zero)           ` if `self` is zero;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210507,"byte_end":210562,"line_start":270,"line_end":270,"column_start":5,"column_end":60}},{"value":"/ - `(Choice(0), +sqrt(i/self))  ` if `self` is a nonzero nonsquare;","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210567,"byte_end":210637,"line_start":271,"line_end":271,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":210642,"byte_end":210645,"line_start":272,"line_end":272,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1349},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":223094,"byte_end":223108,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"FieldElement51","qualname":"::backend::serial::u64::field::FieldElement51","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `FieldElement51` represents an element of the field\n \\\\( \\mathbb Z / (2\\^{255} - 19)\\\\).","sig":null,"attributes":[{"value":"/ A `FieldElement51` represents an element of the field","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222450,"byte_end":222507,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"/ \\\\( \\mathbb Z / (2\\^{255} - 19)\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222508,"byte_end":222547,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222548,"byte_end":222551,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ In the 64-bit implementation, a `FieldElement` is represented in","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222552,"byte_end":222620,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ radix \\\\(2\\^{51}\\\\) as five `u64`s; the coefficients are allowed to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222621,"byte_end":222692,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ grow up to \\\\(2\\^{54}\\\\) between reductions modulo \\\\(p\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222693,"byte_end":222756,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222757,"byte_end":222760,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222761,"byte_end":222771,"line_start":32,"line_end":32,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222772,"byte_end":222775,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The `curve25519_dalek::field` module provides a type alias","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222776,"byte_end":222838,"line_start":34,"line_end":34,"column_start":1,"column_end":63}},{"value":"/ `curve25519_dalek::field::FieldElement` to either `FieldElement51`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222839,"byte_end":222909,"line_start":35,"line_end":35,"column_start":1,"column_end":71}},{"value":"/ or `FieldElement2625`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222910,"byte_end":222936,"line_start":36,"line_end":36,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222937,"byte_end":222940,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ The backend-specific type `FieldElement51` should not be used","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":222941,"byte_end":223006,"line_start":38,"line_end":38,"column_start":1,"column_end":66}},{"value":"/ outside of the `curve25519_dalek::field` module.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":223007,"byte_end":223059,"line_start":39,"line_end":39,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":230833,"byte_end":230839,"line_start":254,"line_end":254,"column_start":12,"column_end":18},"name":"negate","qualname":"<FieldElement51>::negate","value":"pub fn negate(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Invert the sign of this field element\n","sig":null,"attributes":[{"value":"/ Invert the sign of this field element","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":230780,"byte_end":230821,"line_start":253,"line_end":253,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":231246,"byte_end":231250,"line_start":267,"line_end":267,"column_start":12,"column_end":16},"name":"zero","qualname":"<FieldElement51>::zero","value":"pub fn zero() -> FieldElement51","parent":null,"children":[],"decl_id":null,"docs":" Construct zero.\n","sig":null,"attributes":[{"value":"/ Construct zero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":231215,"byte_end":231234,"line_start":266,"line_end":266,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":231356,"byte_end":231359,"line_start":272,"line_end":272,"column_start":12,"column_end":15},"name":"one","qualname":"<FieldElement51>::one","value":"pub fn one() -> FieldElement51","parent":null,"children":[],"decl_id":null,"docs":" Construct one.\n","sig":null,"attributes":[{"value":"/ Construct one.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":231326,"byte_end":231344,"line_start":271,"line_end":271,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":231464,"byte_end":231473,"line_start":277,"line_end":277,"column_start":12,"column_end":21},"name":"minus_one","qualname":"<FieldElement51>::minus_one","value":"pub fn minus_one() -> FieldElement51","parent":null,"children":[],"decl_id":null,"docs":" Construct -1.\n","sig":null,"attributes":[{"value":"/ Construct -1.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":231435,"byte_end":231452,"line_start":276,"line_end":276,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":233263,"byte_end":233273,"line_start":330,"line_end":330,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<FieldElement51>::from_bytes","value":"pub fn from_bytes(&[u8; ]) -> FieldElement51","parent":null,"children":[],"decl_id":null,"docs":" Load a `FieldElement51` from the low 255 bits of a 256-bit\n input.","sig":null,"attributes":[{"value":"/ Load a `FieldElement51` from the low 255 bits of a 256-bit","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":232774,"byte_end":232836,"line_start":318,"line_end":318,"column_start":5,"column_end":67}},{"value":"/ input.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":232841,"byte_end":232851,"line_start":319,"line_end":319,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":232856,"byte_end":232859,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Warning","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":232864,"byte_end":232877,"line_start":321,"line_end":321,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":232882,"byte_end":232885,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ This function does not check that the input used the canonical","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":232890,"byte_end":232956,"line_start":323,"line_end":323,"column_start":5,"column_end":71}},{"value":"/ representative.  It masks the high bit, but it will happily","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":232961,"byte_end":233024,"line_start":324,"line_end":324,"column_start":5,"column_end":68}},{"value":"/ decode 2^255 - 18 to 1.  Applications that require a canonical","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":233029,"byte_end":233095,"line_start":325,"line_end":325,"column_start":5,"column_end":71}},{"value":"/ encoding of every field element should decode, re-encode to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":233100,"byte_end":233163,"line_start":326,"line_end":326,"column_start":5,"column_end":68}},{"value":"/ the canonical encoding, and check that the input was","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":233168,"byte_end":233224,"line_start":327,"line_end":327,"column_start":5,"column_end":61}},{"value":"/ canonical.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":233229,"byte_end":233243,"line_start":328,"line_end":328,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":233248,"byte_end":233251,"line_start":329,"line_end":329,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":234402,"byte_end":234410,"line_start":359,"line_end":359,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<FieldElement51>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Serialize this `FieldElement51` to a 32-byte array.  The\n encoding is canonical.\n","sig":null,"attributes":[{"value":"/ Serialize this `FieldElement51` to a 32-byte array.  The","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":234299,"byte_end":234359,"line_start":357,"line_end":357,"column_start":5,"column_end":65}},{"value":"/ encoding is canonical.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":234364,"byte_end":234390,"line_start":358,"line_end":358,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":237566,"byte_end":237571,"line_start":444,"line_end":444,"column_start":12,"column_end":17},"name":"pow2k","qualname":"<FieldElement51>::pow2k","value":"pub fn pow2k(&Self, u32) -> FieldElement51","parent":null,"children":[],"decl_id":null,"docs":" Given `k > 0`, return `self^(2^k)`.\n","sig":null,"attributes":[{"value":"/ Given `k > 0`, return `self^(2^k)`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":237515,"byte_end":237554,"line_start":443,"line_end":443,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":241492,"byte_end":241498,"line_start":550,"line_end":550,"column_start":12,"column_end":18},"name":"square","qualname":"<FieldElement51>::square","value":"pub fn square(&Self) -> FieldElement51","parent":null,"children":[],"decl_id":null,"docs":" Returns the square of this field element.\n","sig":null,"attributes":[{"value":"/ Returns the square of this field element.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":241435,"byte_end":241480,"line_start":549,"line_end":549,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":241624,"byte_end":241631,"line_start":555,"line_end":555,"column_start":12,"column_end":19},"name":"square2","qualname":"<FieldElement51>::square2","value":"pub fn square2(&Self) -> FieldElement51","parent":null,"children":[],"decl_id":null,"docs":" Returns 2 times the square of this field element.\n","sig":null,"attributes":[{"value":"/ Returns 2 times the square of this field element.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":241559,"byte_end":241612,"line_start":554,"line_end":554,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":826},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":262118,"byte_end":262141,"line_start":129,"line_end":129,"column_start":11,"column_end":34},"name":"ED25519_BASEPOINT_POINT","qualname":"::backend::serial::u64::constants::ED25519_BASEPOINT_POINT","value":"EdwardsPoint","parent":null,"children":[],"decl_id":null,"docs":" The Ed25519 basepoint, as an `EdwardsPoint`.","sig":null,"attributes":[{"value":"/ The Ed25519 basepoint, as an `EdwardsPoint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":261902,"byte_end":261950,"line_start":124,"line_end":124,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":261951,"byte_end":261954,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ This is called `_POINT` to distinguish it from","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":261955,"byte_end":262005,"line_start":126,"line_end":126,"column_start":1,"column_end":51}},{"value":"/ `ED25519_BASEPOINT_TABLE`, which should be used for scalar","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":262006,"byte_end":262068,"line_start":127,"line_end":127,"column_start":1,"column_end":63}},{"value":"/ multiplication (it's much faster).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":262069,"byte_end":262107,"line_start":128,"line_end":128,"column_start":1,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":827},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":263065,"byte_end":263078,"line_start":162,"line_end":162,"column_start":11,"column_end":24},"name":"EIGHT_TORSION","qualname":"::backend::serial::u64::constants::EIGHT_TORSION","value":"[EdwardsPoint; ]","parent":null,"children":[],"decl_id":null,"docs":" The 8-torsion subgroup \\\\(\\mathcal E [8]\\\\).","sig":null,"attributes":[{"value":"/ The 8-torsion subgroup \\\\(\\mathcal E [8]\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":262695,"byte_end":262743,"line_start":154,"line_end":154,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":262744,"byte_end":262747,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ In the case of Curve25519, it is cyclic; the \\\\(i\\\\)-th element of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":262748,"byte_end":262818,"line_start":156,"line_end":156,"column_start":1,"column_end":71}},{"value":"/ the array is \\\\([i]P\\\\), where \\\\(P\\\\) is a point of order \\\\(8\\\\)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":262819,"byte_end":262889,"line_start":157,"line_end":157,"column_start":1,"column_end":71}},{"value":"/ generating \\\\(\\mathcal E[8]\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":262890,"byte_end":262925,"line_start":158,"line_end":158,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":262926,"byte_end":262929,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ Thus \\\\(\\mathcal E[4]\\\\) is the points indexed by `0,2,4,6`, and","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":262930,"byte_end":262998,"line_start":160,"line_end":160,"column_start":1,"column_end":69}},{"value":"/ \\\\(\\mathcal E[2]\\\\) is the points indexed by `0,4`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":262999,"byte_end":263054,"line_start":161,"line_end":161,"column_start":1,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":829},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":263224,"byte_end":263254,"line_start":166,"line_end":166,"column_start":11,"column_end":41},"name":"EIGHT_TORSION_INNER_DOC_HIDDEN","qualname":"::backend::serial::u64::constants::EIGHT_TORSION_INNER_DOC_HIDDEN","value":"[EdwardsPoint; ]","parent":null,"children":[],"decl_id":null,"docs":" Inner item used to hide limb constants from cargo doc output.\n","sig":null,"attributes":[{"value":"/ Inner item used to hide limb constants from cargo doc output.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":263133,"byte_end":263198,"line_start":164,"line_end":164,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":831},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":267152,"byte_end":267175,"line_start":308,"line_end":308,"column_start":11,"column_end":34},"name":"ED25519_BASEPOINT_TABLE","qualname":"::backend::serial::u64::constants::ED25519_BASEPOINT_TABLE","value":"EdwardsBasepointTable","parent":null,"children":[],"decl_id":null,"docs":" Table containing precomputed multiples of the Ed25519 basepoint \\\\(B = (x, 4/5)\\\\).\n","sig":null,"attributes":[{"value":"/ Table containing precomputed multiples of the Ed25519 basepoint \\\\(B = (x, 4/5)\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":267054,"byte_end":267141,"line_start":307,"line_end":307,"column_start":1,"column_end":88}}]},{"kind":"Const","id":{"krate":0,"index":832},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":267345,"byte_end":267385,"line_start":312,"line_end":312,"column_start":11,"column_end":51},"name":"ED25519_BASEPOINT_TABLE_INNER_DOC_HIDDEN","qualname":"::backend::serial::u64::constants::ED25519_BASEPOINT_TABLE_INNER_DOC_HIDDEN","value":"EdwardsBasepointTable","parent":null,"children":[],"decl_id":null,"docs":" Inner constant, used to avoid filling the docs with precomputed points.\n","sig":null,"attributes":[{"value":"/ Inner constant, used to avoid filling the docs with precomputed points.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/constants.rs","byte_start":267244,"byte_end":267319,"line_start":310,"line_end":310,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1365},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524117,"byte_end":524132,"line_start":151,"line_end":151,"column_start":12,"column_end":27},"name":"ProjectivePoint","qualname":"::backend::serial::curve_models::ProjectivePoint","value":"ProjectivePoint { X, Y, Z }","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368}],"decl_id":null,"docs":" A `ProjectivePoint` is a point \\\\((X:Y:Z)\\\\) on the \\\\(\\mathbb\n P\\^2\\\\) model of the curve.\n A point \\\\((x,y)\\\\) in the affine model corresponds to\n \\\\((x:y:1)\\\\).","sig":null,"attributes":[{"value":"/ A `ProjectivePoint` is a point \\\\((X:Y:Z)\\\\) on the \\\\(\\mathbb","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":523777,"byte_end":523843,"line_start":143,"line_end":143,"column_start":1,"column_end":67}},{"value":"/ P\\^2\\\\) model of the curve.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":523844,"byte_end":523875,"line_start":144,"line_end":144,"column_start":1,"column_end":32}},{"value":"/ A point \\\\((x,y)\\\\) in the affine model corresponds to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":523876,"byte_end":523934,"line_start":145,"line_end":145,"column_start":1,"column_end":59}},{"value":"/ \\\\((x:y:1)\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":523935,"byte_end":523953,"line_start":146,"line_end":146,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":523954,"byte_end":523957,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ More details on the relationships between the different curve models","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":523958,"byte_end":524030,"line_start":148,"line_end":148,"column_start":1,"column_end":73}},{"value":"/ can be found in the module-level documentation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524031,"byte_end":524082,"line_start":149,"line_end":149,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1366},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524143,"byte_end":524144,"line_start":152,"line_end":152,"column_start":9,"column_end":10},"name":"X","qualname":"::backend::serial::curve_models::ProjectivePoint::X","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1367},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524168,"byte_end":524169,"line_start":153,"line_end":153,"column_start":9,"column_end":10},"name":"Y","qualname":"::backend::serial::curve_models::ProjectivePoint::Y","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1368},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524193,"byte_end":524194,"line_start":154,"line_end":154,"column_start":9,"column_end":10},"name":"Z","qualname":"::backend::serial::curve_models::ProjectivePoint::Z","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1372},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524605,"byte_end":524619,"line_start":166,"line_end":166,"column_start":12,"column_end":26},"name":"CompletedPoint","qualname":"::backend::serial::curve_models::CompletedPoint","value":"CompletedPoint { X, Y, Z, T }","parent":null,"children":[{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376}],"decl_id":null,"docs":" A `CompletedPoint` is a point \\\\(((X:Z), (Y:T))\\\\) on the \\\\(\\mathbb\n P\\^1 \\times \\mathbb P\\^1 \\\\) model of the curve.\n A point (x,y) in the affine model corresponds to \\\\( ((x:1),(y:1))\n \\\\).","sig":null,"attributes":[{"value":"/ A `CompletedPoint` is a point \\\\(((X:Z), (Y:T))\\\\) on the \\\\(\\mathbb","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524213,"byte_end":524285,"line_start":157,"line_end":157,"column_start":1,"column_end":73}},{"value":"/ P\\^1 \\times \\mathbb P\\^1 \\\\) model of the curve.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524286,"byte_end":524338,"line_start":158,"line_end":158,"column_start":1,"column_end":53}},{"value":"/ A point (x,y) in the affine model corresponds to \\\\( ((x:1),(y:1))","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524339,"byte_end":524409,"line_start":159,"line_end":159,"column_start":1,"column_end":71}},{"value":"/ \\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524410,"byte_end":524418,"line_start":160,"line_end":160,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524419,"byte_end":524422,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ More details on the relationships between the different curve models","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524423,"byte_end":524495,"line_start":162,"line_end":162,"column_start":1,"column_end":73}},{"value":"/ can be found in the module-level documentation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524496,"byte_end":524547,"line_start":163,"line_end":163,"column_start":1,"column_end":52}},{"value":"allow(missing_docs)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524571,"byte_end":524593,"line_start":165,"line_end":165,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1373},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524630,"byte_end":524631,"line_start":167,"line_end":167,"column_start":9,"column_end":10},"name":"X","qualname":"::backend::serial::curve_models::CompletedPoint::X","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1372},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1374},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524655,"byte_end":524656,"line_start":168,"line_end":168,"column_start":9,"column_end":10},"name":"Y","qualname":"::backend::serial::curve_models::CompletedPoint::Y","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1372},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1375},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524680,"byte_end":524681,"line_start":169,"line_end":169,"column_start":9,"column_end":10},"name":"Z","qualname":"::backend::serial::curve_models::CompletedPoint::Z","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1372},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1376},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524705,"byte_end":524706,"line_start":170,"line_end":170,"column_start":9,"column_end":10},"name":"T","qualname":"::backend::serial::curve_models::CompletedPoint::T","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1372},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1380},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525101,"byte_end":525117,"line_start":181,"line_end":181,"column_start":12,"column_end":28},"name":"AffineNielsPoint","qualname":"::backend::serial::curve_models::AffineNielsPoint","value":"AffineNielsPoint { y_plus_x, y_minus_x, xy2d }","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383}],"decl_id":null,"docs":" A pre-computed point in the affine model for the curve, represented as\n \\\\((y+x, y-x, 2dxy)\\\\) in \"Niels coordinates\".","sig":null,"attributes":[{"value":"/ A pre-computed point in the affine model for the curve, represented as","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524725,"byte_end":524799,"line_start":173,"line_end":173,"column_start":1,"column_end":75}},{"value":"/ \\\\((y+x, y-x, 2dxy)\\\\) in \"Niels coordinates\".","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524800,"byte_end":524850,"line_start":174,"line_end":174,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524851,"byte_end":524854,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ More details on the relationships between the different curve models","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524855,"byte_end":524927,"line_start":176,"line_end":176,"column_start":1,"column_end":73}},{"value":"/ can be found in the module-level documentation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":524928,"byte_end":524979,"line_start":177,"line_end":177,"column_start":1,"column_end":52}},{"value":"allow(missing_docs)","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525067,"byte_end":525089,"line_start":180,"line_end":180,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1381},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525128,"byte_end":525136,"line_start":182,"line_end":182,"column_start":9,"column_end":17},"name":"y_plus_x","qualname":"::backend::serial::curve_models::AffineNielsPoint::y_plus_x","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1380},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1382},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525161,"byte_end":525170,"line_start":183,"line_end":183,"column_start":9,"column_end":18},"name":"y_minus_x","qualname":"::backend::serial::curve_models::AffineNielsPoint::y_minus_x","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1380},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1383},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525194,"byte_end":525198,"line_start":184,"line_end":184,"column_start":9,"column_end":13},"name":"xy2d","qualname":"::backend::serial::curve_models::AffineNielsPoint::xy2d","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1380},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1394},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525697,"byte_end":525717,"line_start":201,"line_end":201,"column_start":12,"column_end":32},"name":"ProjectiveNielsPoint","qualname":"::backend::serial::curve_models::ProjectiveNielsPoint","value":"ProjectiveNielsPoint { Y_plus_X, Y_minus_X, Z, T2d }","parent":null,"children":[{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398}],"decl_id":null,"docs":" A pre-computed point on the \\\\( \\mathbb P\\^3 \\\\) model for the\n curve, represented as \\\\((Y+X, Y-X, Z, 2dXY)\\\\) in \"Niels coordinates\".","sig":null,"attributes":[{"value":"/ A pre-computed point on the \\\\( \\mathbb P\\^3 \\\\) model for the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525391,"byte_end":525457,"line_start":195,"line_end":195,"column_start":1,"column_end":67}},{"value":"/ curve, represented as \\\\((Y+X, Y-X, Z, 2dXY)\\\\) in \"Niels coordinates\".","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525458,"byte_end":525533,"line_start":196,"line_end":196,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525534,"byte_end":525537,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ More details on the relationships between the different curve models","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525538,"byte_end":525610,"line_start":198,"line_end":198,"column_start":1,"column_end":73}},{"value":"/ can be found in the module-level documentation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525611,"byte_end":525662,"line_start":199,"line_end":199,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1395},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525728,"byte_end":525736,"line_start":202,"line_end":202,"column_start":9,"column_end":17},"name":"Y_plus_X","qualname":"::backend::serial::curve_models::ProjectiveNielsPoint::Y_plus_X","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1396},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525761,"byte_end":525770,"line_start":203,"line_end":203,"column_start":9,"column_end":18},"name":"Y_minus_X","qualname":"::backend::serial::curve_models::ProjectiveNielsPoint::Y_minus_X","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1397},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525794,"byte_end":525795,"line_start":204,"line_end":204,"column_start":9,"column_end":10},"name":"Z","qualname":"::backend::serial::curve_models::ProjectiveNielsPoint::Z","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1398},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525827,"byte_end":525830,"line_start":205,"line_end":205,"column_start":9,"column_end":12},"name":"T2d","qualname":"::backend::serial::curve_models::ProjectiveNielsPoint::T2d","value":"backend::serial::u64::field::FieldElement51","parent":{"krate":0,"index":1394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530037,"byte_end":530048,"line_start":332,"line_end":332,"column_start":12,"column_end":23},"name":"to_extended","qualname":"<ProjectivePoint>::to_extended","value":"pub fn to_extended(&Self) -> EdwardsPoint","parent":null,"children":[],"decl_id":null,"docs":" Convert this point from the \\\\( \\mathbb P\\^2 \\\\) model to the\n \\\\( \\mathbb P\\^3 \\\\) model.","sig":null,"attributes":[{"value":"/ Convert this point from the \\\\( \\mathbb P\\^2 \\\\) model to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":529864,"byte_end":529929,"line_start":328,"line_end":328,"column_start":5,"column_end":70}},{"value":"/ \\\\( \\mathbb P\\^3 \\\\) model.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":529934,"byte_end":529965,"line_start":329,"line_end":329,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":529970,"byte_end":529973,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ This costs \\\\(3 \\mathrm M + 1 \\mathrm S\\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":529978,"byte_end":530025,"line_start":331,"line_end":331,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530456,"byte_end":530469,"line_start":347,"line_end":347,"column_start":12,"column_end":25},"name":"to_projective","qualname":"<CompletedPoint>::to_projective","value":"pub fn to_projective(&Self) -> ProjectivePoint","parent":null,"children":[],"decl_id":null,"docs":" Convert this point from the \\\\( \\mathbb P\\^1 \\times \\mathbb P\\^1\n \\\\) model to the \\\\( \\mathbb P\\^2 \\\\) model.","sig":null,"attributes":[{"value":"/ Convert this point from the \\\\( \\mathbb P\\^1 \\times \\mathbb P\\^1","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530276,"byte_end":530344,"line_start":343,"line_end":343,"column_start":5,"column_end":73}},{"value":"/ \\\\) model to the \\\\( \\mathbb P\\^2 \\\\) model.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530349,"byte_end":530397,"line_start":344,"line_end":344,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530402,"byte_end":530405,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ This costs \\\\(3 \\mathrm M \\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530410,"byte_end":530444,"line_start":346,"line_end":346,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530827,"byte_end":530838,"line_start":359,"line_end":359,"column_start":12,"column_end":23},"name":"to_extended","qualname":"<CompletedPoint>::to_extended","value":"pub fn to_extended(&Self) -> EdwardsPoint","parent":null,"children":[],"decl_id":null,"docs":" Convert this point from the \\\\( \\mathbb P\\^1 \\times \\mathbb P\\^1\n \\\\) model to the \\\\( \\mathbb P\\^3 \\\\) model.","sig":null,"attributes":[{"value":"/ Convert this point from the \\\\( \\mathbb P\\^1 \\times \\mathbb P\\^1","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530647,"byte_end":530715,"line_start":355,"line_end":355,"column_start":5,"column_end":73}},{"value":"/ \\\\) model to the \\\\( \\mathbb P\\^3 \\\\) model.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530720,"byte_end":530768,"line_start":356,"line_end":356,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530773,"byte_end":530776,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ This costs \\\\(4 \\mathrm M \\\\).","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530781,"byte_end":530815,"line_start":358,"line_end":358,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":531287,"byte_end":531293,"line_start":375,"line_end":375,"column_start":12,"column_end":18},"name":"double","qualname":"<ProjectivePoint>::double","value":"pub fn double(&Self) -> CompletedPoint","parent":null,"children":[],"decl_id":null,"docs":" Double this point: return self + self\n","sig":null,"attributes":[{"value":"/ Double this point: return self + self","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":531234,"byte_end":531275,"line_start":374,"line_end":374,"column_start":5,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13067,"byte_end":13073,"line_start":202,"line_end":202,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":14881,"byte_end":14887,"line_start":255,"line_end":255,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":15049,"byte_end":15055,"line_start":261,"line_end":261,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":15078,"byte_end":15084,"line_start":262,"line_end":262,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":15206,"byte_end":15212,"line_start":268,"line_end":268,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":15331,"byte_end":15337,"line_start":274,"line_end":274,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":15574,"byte_end":15580,"line_start":283,"line_end":283,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":16073,"byte_end":16079,"line_start":300,"line_end":300,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":17024,"byte_end":17030,"line_start":326,"line_end":326,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":18377,"byte_end":18383,"line_start":363,"line_end":363,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":18498,"byte_end":18504,"line_start":370,"line_end":370,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":20447,"byte_end":20453,"line_start":432,"line_end":432,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":20659,"byte_end":20665,"line_start":444,"line_end":444,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":20866,"byte_end":20872,"line_start":456,"line_end":456,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":20954,"byte_end":20960,"line_start":462,"line_end":462,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":21116,"byte_end":21122,"line_start":470,"line_end":470,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":21355,"byte_end":21361,"line_start":479,"line_end":479,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":21594,"byte_end":21600,"line_start":488,"line_end":488,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22332,"byte_end":22338,"line_start":518,"line_end":518,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22571,"byte_end":22577,"line_start":527,"line_end":527,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22652,"byte_end":22658,"line_start":533,"line_end":533,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":174},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":44062,"byte_end":44076,"line_start":1119,"line_end":1119,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":68971,"byte_end":68986,"line_start":73,"line_end":73,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69222,"byte_end":69237,"line_start":82,"line_end":82,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69341,"byte_end":69356,"line_start":88,"line_end":88,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69477,"byte_end":69492,"line_start":94,"line_end":94,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69514,"byte_end":69529,"line_start":96,"line_end":96,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69600,"byte_end":69615,"line_start":102,"line_end":102,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":71736,"byte_end":71751,"line_start":168,"line_end":168,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":71928,"byte_end":71943,"line_start":177,"line_end":177,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":72062,"byte_end":72077,"line_start":183,"line_end":183,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":72404,"byte_end":72419,"line_start":196,"line_end":196,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":75886,"byte_end":75901,"line_start":298,"line_end":298,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84574,"byte_end":84592,"line_start":156,"line_end":156,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84727,"byte_end":84745,"line_start":162,"line_end":162,"column_start":16,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84900,"byte_end":84918,"line_start":168,"line_end":168,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90281,"byte_end":90299,"line_start":323,"line_end":323,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90579,"byte_end":90597,"line_start":332,"line_end":332,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90694,"byte_end":90712,"line_start":338,"line_end":338,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":91067,"byte_end":91079,"line_start":353,"line_end":353,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":91323,"byte_end":91335,"line_start":364,"line_end":364,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":91634,"byte_end":91646,"line_start":374,"line_end":374,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":92082,"byte_end":92094,"line_start":387,"line_end":387,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":92700,"byte_end":92712,"line_start":402,"line_end":402,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":93275,"byte_end":93287,"line_start":415,"line_end":415,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":93405,"byte_end":93417,"line_start":421,"line_end":421,"column_start":13,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":93601,"byte_end":93613,"line_start":427,"line_end":427,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":96088,"byte_end":96100,"line_start":502,"line_end":502,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":96775,"byte_end":96787,"line_start":522,"line_end":522,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":97318,"byte_end":97330,"line_start":539,"line_end":539,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":97534,"byte_end":97546,"line_start":547,"line_end":547,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":98172,"byte_end":98184,"line_start":577,"line_end":577,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":98492,"byte_end":98504,"line_start":589,"line_end":589,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":99947,"byte_end":99959,"line_start":632,"line_end":632,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":100938,"byte_end":100950,"line_start":664,"line_end":664,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":102448,"byte_end":102476,"line_start":706,"line_end":706,"column_start":43,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103209,"byte_end":103221,"line_start":735,"line_end":735,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103904,"byte_end":103925,"line_start":755,"line_end":755,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":106459,"byte_end":106480,"line_start":824,"line_end":824,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":107250,"byte_end":107262,"line_start":846,"line_end":846,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109785,"byte_end":109797,"line_start":926,"line_end":926,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":110037,"byte_end":110058,"line_start":933,"line_end":933,"column_start":16,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136662,"byte_end":136681,"line_start":214,"line_end":214,"column_start":25,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136807,"byte_end":136826,"line_start":220,"line_end":220,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":139766,"byte_end":139785,"line_start":307,"line_end":307,"column_start":19,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":139896,"byte_end":139915,"line_start":313,"line_end":313,"column_start":18,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":144353,"byte_end":144367,"line_start":440,"line_end":440,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":147160,"byte_end":147178,"line_start":519,"line_end":519,"column_start":14,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":147333,"byte_end":147351,"line_start":525,"line_end":525,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":155127,"byte_end":155141,"line_start":740,"line_end":740,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":155257,"byte_end":155271,"line_start":746,"line_end":746,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":155539,"byte_end":155553,"line_start":756,"line_end":756,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":155685,"byte_end":155699,"line_start":762,"line_end":762,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":156180,"byte_end":156194,"line_start":779,"line_end":779,"column_start":13,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":156714,"byte_end":156728,"line_start":795,"line_end":795,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":157266,"byte_end":157280,"line_start":813,"line_end":813,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":157489,"byte_end":157503,"line_start":821,"line_end":821,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":157872,"byte_end":157886,"line_start":841,"line_end":841,"column_start":14,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":158020,"byte_end":158034,"line_start":849,"line_end":849,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":159276,"byte_end":159290,"line_start":886,"line_end":886,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":159777,"byte_end":159791,"line_start":904,"line_end":904,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":160675,"byte_end":160705,"line_start":927,"line_end":927,"column_start":43,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":161668,"byte_end":161682,"line_start":965,"line_end":965,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162985,"byte_end":163008,"line_start":1010,"line_end":1010,"column_start":6,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":163633,"byte_end":163647,"line_start":1026,"line_end":1026,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":164862,"byte_end":164881,"line_start":1067,"line_end":1067,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":165047,"byte_end":165061,"line_start":1073,"line_end":1073,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188724,"byte_end":188725,"line_start":41,"line_end":41,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":202499,"byte_end":202511,"line_start":55,"line_end":55,"column_start":13,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":202535,"byte_end":202547,"line_start":57,"line_end":57,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":202677,"byte_end":202689,"line_start":63,"line_end":63,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":202997,"byte_end":203009,"line_start":72,"line_end":72,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":223148,"byte_end":223162,"line_start":43,"line_end":43,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":223321,"byte_end":223335,"line_start":49,"line_end":49,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":223444,"byte_end":223458,"line_start":55,"line_end":55,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":223879,"byte_end":223893,"line_start":72,"line_end":72,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":225073,"byte_end":225087,"line_start":101,"line_end":101,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":229441,"byte_end":229455,"line_start":220,"line_end":220,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":230759,"byte_end":230773,"line_start":252,"line_end":252,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":755},{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/scalar.rs","byte_start":242640,"byte_end":242648,"line_start":26,"line_end":26,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/scalar.rs","byte_start":242801,"byte_end":242809,"line_start":32,"line_end":32,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/scalar.rs","byte_start":242897,"byte_end":242905,"line_start":38,"line_end":38,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/scalar.rs","byte_start":243036,"byte_end":243044,"line_start":45,"line_end":45,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/scalar.rs","byte_start":243267,"byte_end":243275,"line_start":57,"line_end":57,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":779},{"krate":0,"index":782},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525239,"byte_end":525255,"line_start":187,"line_end":187,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525872,"byte_end":525892,"line_start":208,"line_end":208,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":526263,"byte_end":526278,"line_start":223,"line_end":223,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":526492,"byte_end":526512,"line_start":233,"line_end":233,"column_start":19,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":526802,"byte_end":526822,"line_start":244,"line_end":244,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":526936,"byte_end":526952,"line_start":250,"line_end":250,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":527190,"byte_end":527206,"line_start":260,"line_end":260,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":527513,"byte_end":527528,"line_start":270,"line_end":270,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":528167,"byte_end":528187,"line_start":289,"line_end":289,"column_start":34,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":528994,"byte_end":529010,"line_start":307,"line_end":307,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":529842,"byte_end":529857,"line_start":327,"line_end":327,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530255,"byte_end":530269,"line_start":342,"line_end":342,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":531212,"byte_end":531227,"line_start":373,"line_end":373,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":535740,"byte_end":535755,"line_start":522,"line_end":522,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":535977,"byte_end":535991,"line_start":529,"line_end":529,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":536233,"byte_end":536249,"line_start":536,"line_end":536,"column_start":16,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":536508,"byte_end":536528,"line_start":543,"line_end":543,"column_start":16,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/scalar_mul/straus.rs","byte_start":542894,"byte_end":542900,"line_start":48,"line_end":48,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/scalar_mul/straus.rs","byte_start":546897,"byte_end":546903,"line_start":145,"line_end":145,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/scalar_mul/precomputed_straus.rs","byte_start":549466,"byte_end":549490,"line_start":32,"line_end":32,"column_start":43,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/scalar_mul/pippenger.rs","byte_start":554676,"byte_end":554685,"line_start":65,"line_end":65,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1005},{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":561357,"byte_end":561368,"line_start":45,"line_end":45,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":562223,"byte_end":562234,"line_start":75,"line_end":75,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":562350,"byte_end":562361,"line_start":81,"line_end":81,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":562534,"byte_end":562545,"line_start":87,"line_end":87,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":562857,"byte_end":562868,"line_start":97,"line_end":97,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":563218,"byte_end":563229,"line_start":108,"line_end":108,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1051}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":563486,"byte_end":563501,"line_start":121,"line_end":121,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":563752,"byte_end":563767,"line_start":131,"line_end":131,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1057}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":563944,"byte_end":563959,"line_start":137,"line_end":137,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":564345,"byte_end":564360,"line_start":149,"line_end":149,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":564819,"byte_end":564834,"line_start":165,"line_end":165,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":565007,"byte_end":565022,"line_start":174,"line_end":174,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":565299,"byte_end":565314,"line_start":184,"line_end":184,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":565713,"byte_end":565728,"line_start":196,"line_end":196,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","byte_start":2122,"byte_end":2128,"line_start":66,"line_end":66,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":17}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","byte_start":2196,"byte_end":2206,"line_start":69,"line_end":69,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":195}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","byte_start":2271,"byte_end":2278,"line_start":72,"line_end":72,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":250}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","byte_start":2332,"byte_end":2341,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":418}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","byte_start":2400,"byte_end":2409,"line_start":78,"line_end":78,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":594}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/lib.rs","byte_start":2455,"byte_end":2461,"line_start":81,"line_end":81,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":608}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":13067,"byte_end":13073,"line_start":202,"line_end":202,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":14881,"byte_end":14887,"line_start":255,"line_end":255,"column_start":16,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":15049,"byte_end":15055,"line_start":261,"line_end":261,"column_start":13,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":15078,"byte_end":15084,"line_start":262,"line_end":262,"column_start":20,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":15206,"byte_end":15212,"line_start":268,"line_end":268,"column_start":25,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1080},"to":{"krate":28,"index":40}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":15331,"byte_end":15337,"line_start":274,"line_end":274,"column_start":23,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":2352}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":15574,"byte_end":15580,"line_start":283,"line_end":283,"column_start":36,"column_end":42},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":16073,"byte_end":16079,"line_start":300,"line_end":300,"column_start":36,"column_end":42},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":17024,"byte_end":17030,"line_start":326,"line_end":326,"column_start":36,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":18377,"byte_end":18383,"line_start":363,"line_end":363,"column_start":18,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":18498,"byte_end":18504,"line_start":370,"line_end":370,"column_start":34,"column_end":40},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1080},"to":{"krate":28,"index":48}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":20447,"byte_end":20453,"line_start":432,"line_end":432,"column_start":24,"column_end":30},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":5405}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":20659,"byte_end":20665,"line_start":444,"line_end":444,"column_start":20,"column_end":26},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":20866,"byte_end":20872,"line_start":456,"line_end":456,"column_start":18,"column_end":24},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":20954,"byte_end":20960,"line_start":462,"line_end":462,"column_start":19,"column_end":25},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":21116,"byte_end":21122,"line_start":470,"line_end":470,"column_start":20,"column_end":26},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":21355,"byte_end":21361,"line_start":479,"line_end":479,"column_start":20,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":21594,"byte_end":21600,"line_start":488,"line_end":488,"column_start":20,"column_end":26},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22332,"byte_end":22338,"line_start":518,"line_end":518,"column_start":21,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22571,"byte_end":22577,"line_start":527,"line_end":527,"column_start":18,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1080},"to":{"krate":26,"index":21}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":22652,"byte_end":22658,"line_start":533,"line_end":533,"column_start":6,"column_end":12},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/scalar.rs","byte_start":44062,"byte_end":44076,"line_start":1119,"line_end":1119,"column_start":6,"column_end":20},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":49},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":68971,"byte_end":68986,"line_start":73,"line_end":73,"column_start":25,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1129},"to":{"krate":28,"index":40}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69222,"byte_end":69237,"line_start":82,"line_end":82,"column_start":18,"column_end":33},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1129},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69341,"byte_end":69356,"line_start":88,"line_end":88,"column_start":20,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1129},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69477,"byte_end":69492,"line_start":94,"line_end":94,"column_start":13,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1129},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69514,"byte_end":69529,"line_start":96,"line_end":96,"column_start":18,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1129},"to":{"krate":26,"index":21}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":69600,"byte_end":69615,"line_start":102,"line_end":102,"column_start":6,"column_end":21},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":71736,"byte_end":71751,"line_start":168,"line_end":168,"column_start":19,"column_end":34},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1142},"to":{"krate":0,"index":612}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":71928,"byte_end":71943,"line_start":177,"line_end":177,"column_start":18,"column_end":33},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1142},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":72062,"byte_end":72077,"line_start":183,"line_end":183,"column_start":34,"column_end":49},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1142},"to":{"krate":28,"index":48}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":72404,"byte_end":72419,"line_start":196,"line_end":196,"column_start":6,"column_end":21},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/montgomery.rs","byte_start":75886,"byte_end":75901,"line_start":298,"line_end":298,"column_start":36,"column_end":51},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1129},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84574,"byte_end":84592,"line_start":156,"line_end":156,"column_start":25,"column_end":43},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1174},"to":{"krate":28,"index":40}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84727,"byte_end":84745,"line_start":162,"line_end":162,"column_start":16,"column_end":34},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1174},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":84900,"byte_end":84918,"line_start":168,"line_end":168,"column_start":6,"column_end":24},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90281,"byte_end":90299,"line_start":323,"line_end":323,"column_start":19,"column_end":37},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1174},"to":{"krate":0,"index":612}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90579,"byte_end":90597,"line_start":332,"line_end":332,"column_start":18,"column_end":36},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1174},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":90694,"byte_end":90712,"line_start":338,"line_end":338,"column_start":6,"column_end":24},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":91067,"byte_end":91079,"line_start":353,"line_end":353,"column_start":19,"column_end":31},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1193},"to":{"krate":0,"index":612}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":91323,"byte_end":91335,"line_start":364,"line_end":364,"column_start":18,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1193},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":91634,"byte_end":91646,"line_start":374,"line_end":374,"column_start":24,"column_end":36},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1193},"to":{"krate":0,"index":649}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":92082,"byte_end":92094,"line_start":387,"line_end":387,"column_start":34,"column_end":46},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1193},"to":{"krate":28,"index":48}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":92700,"byte_end":92712,"line_start":402,"line_end":402,"column_start":25,"column_end":37},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1193},"to":{"krate":28,"index":40}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":93275,"byte_end":93287,"line_start":415,"line_end":415,"column_start":20,"column_end":32},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1193},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":93405,"byte_end":93417,"line_start":421,"line_end":421,"column_start":13,"column_end":25},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1193},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":93601,"byte_end":93613,"line_start":427,"line_end":427,"column_start":6,"column_end":18},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":96088,"byte_end":96100,"line_start":502,"line_end":502,"column_start":6,"column_end":18},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":96775,"byte_end":96787,"line_start":522,"line_end":522,"column_start":42,"column_end":54},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1193},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":97318,"byte_end":97330,"line_start":539,"line_end":539,"column_start":42,"column_end":54},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1193},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":97534,"byte_end":97546,"line_start":547,"line_end":547,"column_start":20,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1193},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":98172,"byte_end":98184,"line_start":577,"line_end":577,"column_start":14,"column_end":26},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1193},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":98492,"byte_end":98504,"line_start":589,"line_end":589,"column_start":36,"column_end":48},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1193},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":99947,"byte_end":99959,"line_start":632,"line_end":632,"column_start":25,"column_end":37},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1193},"to":{"krate":0,"index":619}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":100938,"byte_end":100950,"line_start":664,"line_end":664,"column_start":32,"column_end":44},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1193},"to":{"krate":0,"index":624}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":102448,"byte_end":102476,"line_start":706,"line_end":706,"column_start":43,"column_end":71},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":378},"to":{"krate":0,"index":633}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103209,"byte_end":103221,"line_start":735,"line_end":735,"column_start":6,"column_end":18},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":103904,"byte_end":103925,"line_start":755,"line_end":755,"column_start":6,"column_end":27},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":106459,"byte_end":106480,"line_start":824,"line_end":824,"column_start":6,"column_end":27},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":107250,"byte_end":107262,"line_start":846,"line_end":846,"column_start":6,"column_end":18},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":109785,"byte_end":109797,"line_start":926,"line_end":926,"column_start":16,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1193},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/edwards.rs","byte_start":110037,"byte_end":110058,"line_start":933,"line_end":933,"column_start":16,"column_end":37},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1251},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136662,"byte_end":136681,"line_start":214,"line_end":214,"column_start":25,"column_end":44},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1257},"to":{"krate":28,"index":40}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":136807,"byte_end":136826,"line_start":220,"line_end":220,"column_start":6,"column_end":25},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":139766,"byte_end":139785,"line_start":307,"line_end":307,"column_start":19,"column_end":38},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1257},"to":{"krate":0,"index":612}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":139896,"byte_end":139915,"line_start":313,"line_end":313,"column_start":18,"column_end":37},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1257},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":144353,"byte_end":144367,"line_start":440,"line_end":440,"column_start":6,"column_end":20},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":147160,"byte_end":147178,"line_start":519,"line_end":519,"column_start":14,"column_end":32},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":147333,"byte_end":147351,"line_start":525,"line_end":525,"column_start":47,"column_end":65},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1282},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":155127,"byte_end":155141,"line_start":740,"line_end":740,"column_start":19,"column_end":33},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1276},"to":{"krate":0,"index":612}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":155257,"byte_end":155271,"line_start":746,"line_end":746,"column_start":18,"column_end":32},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1276},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":155539,"byte_end":155553,"line_start":756,"line_end":756,"column_start":20,"column_end":34},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1276},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":155685,"byte_end":155699,"line_start":762,"line_end":762,"column_start":25,"column_end":39},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1276},"to":{"krate":28,"index":40}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":156180,"byte_end":156194,"line_start":779,"line_end":779,"column_start":13,"column_end":27},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1276},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":156714,"byte_end":156728,"line_start":795,"line_end":795,"column_start":44,"column_end":58},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1276},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":157266,"byte_end":157280,"line_start":813,"line_end":813,"column_start":44,"column_end":58},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1276},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":157489,"byte_end":157503,"line_start":821,"line_end":821,"column_start":20,"column_end":34},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1276},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":157872,"byte_end":157886,"line_start":841,"line_end":841,"column_start":14,"column_end":28},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1276},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":158020,"byte_end":158034,"line_start":849,"line_end":849,"column_start":36,"column_end":50},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1276},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":159276,"byte_end":159290,"line_start":886,"line_end":886,"column_start":25,"column_end":39},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1276},"to":{"krate":0,"index":619}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":159777,"byte_end":159791,"line_start":904,"line_end":904,"column_start":32,"column_end":46},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1276},"to":{"krate":0,"index":624}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":160675,"byte_end":160705,"line_start":927,"line_end":927,"column_start":43,"column_end":73},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":559},"to":{"krate":0,"index":633}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":161668,"byte_end":161682,"line_start":965,"line_end":965,"column_start":6,"column_end":20},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":162985,"byte_end":163008,"line_start":1010,"line_end":1010,"column_start":6,"column_end":29},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":163633,"byte_end":163647,"line_start":1026,"line_end":1026,"column_start":34,"column_end":48},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1276},"to":{"krate":28,"index":48}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":164862,"byte_end":164881,"line_start":1067,"line_end":1067,"column_start":16,"column_end":35},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1257},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/ristretto.rs","byte_start":165047,"byte_end":165061,"line_start":1073,"line_end":1073,"column_start":16,"column_end":30},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1276},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":188724,"byte_end":188725,"line_start":41,"line_end":41,"column_start":24,"column_end":25},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":617},"to":{"krate":0,"index":614}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/traits.rs","byte_start":196407,"byte_end":196412,"line_start":255,"line_end":255,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":2076},"to":{"krate":0,"index":633}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":202499,"byte_end":202511,"line_start":55,"line_end":55,"column_start":13,"column_end":25},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":662},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":202535,"byte_end":202547,"line_start":57,"line_end":57,"column_start":20,"column_end":32},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":662},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":202677,"byte_end":202689,"line_start":63,"line_end":63,"column_start":25,"column_end":37},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":662},"to":{"krate":28,"index":40}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/field.rs","byte_start":202997,"byte_end":203009,"line_start":72,"line_end":72,"column_start":6,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":223148,"byte_end":223162,"line_start":43,"line_end":43,"column_start":16,"column_end":30},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1349},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":223321,"byte_end":223335,"line_start":49,"line_end":49,"column_start":18,"column_end":32},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1349},"to":{"krate":26,"index":21}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":223444,"byte_end":223458,"line_start":55,"line_end":55,"column_start":44,"column_end":58},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1349},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":223879,"byte_end":223893,"line_start":72,"line_end":72,"column_start":44,"column_end":58},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1349},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":225073,"byte_end":225087,"line_start":101,"line_end":101,"column_start":44,"column_end":58},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1349},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":229441,"byte_end":229455,"line_start":220,"line_end":220,"column_start":34,"column_end":48},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1349},"to":{"krate":28,"index":48}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/field.rs","byte_start":230759,"byte_end":230773,"line_start":252,"line_end":252,"column_start":6,"column_end":20},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/scalar.rs","byte_start":242640,"byte_end":242648,"line_start":26,"line_end":26,"column_start":16,"column_end":24},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1357},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/scalar.rs","byte_start":242801,"byte_end":242809,"line_start":32,"line_end":32,"column_start":18,"column_end":26},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1357},"to":{"krate":26,"index":21}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/scalar.rs","byte_start":242897,"byte_end":242905,"line_start":38,"line_end":38,"column_start":23,"column_end":31},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1357},"to":{"krate":1,"index":2352}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/scalar.rs","byte_start":243036,"byte_end":243044,"line_start":45,"line_end":45,"column_start":26,"column_end":34},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1357},"to":{"krate":1,"index":2356}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/u64/scalar.rs","byte_start":243267,"byte_end":243275,"line_start":57,"line_end":57,"column_start":6,"column_end":14},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525239,"byte_end":525255,"line_start":187,"line_end":187,"column_start":18,"column_end":34},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1380},"to":{"krate":26,"index":21}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":525872,"byte_end":525892,"line_start":208,"line_end":208,"column_start":18,"column_end":38},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1394},"to":{"krate":26,"index":21}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":526263,"byte_end":526278,"line_start":223,"line_end":223,"column_start":19,"column_end":34},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1365},"to":{"krate":0,"index":612}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":526492,"byte_end":526512,"line_start":233,"line_end":233,"column_start":19,"column_end":39},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1394},"to":{"krate":0,"index":612}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":526802,"byte_end":526822,"line_start":244,"line_end":244,"column_start":18,"column_end":38},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1394},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":526936,"byte_end":526952,"line_start":250,"line_end":250,"column_start":19,"column_end":35},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1380},"to":{"krate":0,"index":612}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":527190,"byte_end":527206,"line_start":260,"line_end":260,"column_start":18,"column_end":34},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1380},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":527513,"byte_end":527528,"line_start":270,"line_end":270,"column_start":24,"column_end":39},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1365},"to":{"krate":0,"index":649}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":528167,"byte_end":528187,"line_start":289,"line_end":289,"column_start":34,"column_end":54},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1394},"to":{"krate":28,"index":48}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":528994,"byte_end":529010,"line_start":307,"line_end":307,"column_start":34,"column_end":50},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1380},"to":{"krate":28,"index":48}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":529842,"byte_end":529857,"line_start":327,"line_end":327,"column_start":6,"column_end":21},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":530255,"byte_end":530269,"line_start":342,"line_end":342,"column_start":6,"column_end":20},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":531212,"byte_end":531227,"line_start":373,"line_end":373,"column_start":6,"column_end":21},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":535740,"byte_end":535755,"line_start":522,"line_end":522,"column_start":16,"column_end":31},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1365},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":535977,"byte_end":535991,"line_start":529,"line_end":529,"column_start":16,"column_end":30},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1372},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":536233,"byte_end":536249,"line_start":536,"line_end":536,"column_start":16,"column_end":32},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1380},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/curve_models/mod.rs","byte_start":536508,"byte_end":536528,"line_start":543,"line_end":543,"column_start":16,"column_end":36},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1394},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/scalar_mul/straus.rs","byte_start":542894,"byte_end":542900,"line_start":48,"line_end":48,"column_start":25,"column_end":31},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":619}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/scalar_mul/straus.rs","byte_start":546897,"byte_end":546903,"line_start":145,"line_end":145,"column_start":32,"column_end":38},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":624}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/scalar_mul/precomputed_straus.rs","byte_start":549466,"byte_end":549490,"line_start":32,"line_end":32,"column_start":43,"column_end":67},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":981},"to":{"krate":0,"index":633}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/backend/serial/scalar_mul/pippenger.rs","byte_start":554676,"byte_end":554685,"line_start":65,"line_end":65,"column_start":32,"column_end":41},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1002},"to":{"krate":0,"index":624}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":561357,"byte_end":561368,"line_start":45,"line_end":45,"column_start":9,"column_end":20},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":562223,"byte_end":562234,"line_start":75,"line_end":75,"column_start":37,"column_end":48},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1402},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":562350,"byte_end":562361,"line_start":81,"line_end":81,"column_start":26,"column_end":37},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1402},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":562534,"byte_end":562545,"line_start":87,"line_end":87,"column_start":37,"column_end":48},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1402},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":562857,"byte_end":562868,"line_start":97,"line_end":97,"column_start":37,"column_end":48},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1402},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":563218,"byte_end":563229,"line_start":108,"line_end":108,"column_start":21,"column_end":32},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1402},"to":{"krate":26,"index":21}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":563486,"byte_end":563501,"line_start":121,"line_end":121,"column_start":15,"column_end":30},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":563752,"byte_end":563767,"line_start":131,"line_end":131,"column_start":26,"column_end":41},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1412},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":563944,"byte_end":563959,"line_start":137,"line_end":137,"column_start":37,"column_end":52},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1412},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":564345,"byte_end":564360,"line_start":149,"line_end":149,"column_start":37,"column_end":52},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1412},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":564819,"byte_end":564834,"line_start":165,"line_end":165,"column_start":15,"column_end":30},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":565007,"byte_end":565022,"line_start":174,"line_end":174,"column_start":26,"column_end":41},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1422},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":565299,"byte_end":565314,"line_start":184,"line_end":184,"column_start":37,"column_end":52},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1422},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/curve25519-dalek-3.0.2/src/window.rs","byte_start":565713,"byte_end":565728,"line_start":196,"line_end":196,"column_start":37,"column_end":52},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1422},"to":{"krate":1,"index":1989}}]}