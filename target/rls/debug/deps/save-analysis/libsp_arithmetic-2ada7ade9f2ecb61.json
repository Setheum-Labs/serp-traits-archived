{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0","program":"/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","sp_arithmetic","--edition=2018","/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=2ada7ade9f2ecb61","-C","extra-filename=-2ada7ade9f2ecb61","--out-dir","/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","-L","dependency=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps","--extern","integer_sqrt=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libinteger_sqrt-6bcd68775466dd9c.rmeta","--extern","num_traits=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libnum_traits-7944ee15958dbfe1.rmeta","--extern","codec=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libparity_scale_codec-b38ed3f0a4e0f6cc.rmeta","--extern","serde=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libserde-c1d0451fd273a165.rmeta","--extern","sp_debug_derive=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_debug_derive-4bb80bd719205d46.so","--extern","sp_std=/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_std-0142de4e2fb49a91.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/iamkhalifaMBA/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/iamkhalifaMBA/Documents/GitHub/serp-traits/target/rls/debug/deps/libsp_arithmetic-2ada7ade9f2ecb61.rmeta"},"prelude":{"crate_id":{"name":"sp_arithmetic","disambiguator":[6212385222009708574,6862010849189890576]},"crate_root":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src","external_crates":[{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","num":2,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","num":18,"id":{"name":"num_traits","disambiguator":[12449281939908862398,945796103035123006]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","num":19,"id":{"name":"sp_std","disambiguator":[9770677728196279493,12510806215599864837]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","num":20,"id":{"name":"parity_scale_codec","disambiguator":[8513279373943582847,10751956381400254447]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","num":21,"id":{"name":"parity_scale_codec_derive","disambiguator":[3988632595002997288,5128307631409362997]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","num":22,"id":{"name":"arrayvec","disambiguator":[1943503948824698767,8928204549588057885]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","num":23,"id":{"name":"byte_slice_cast","disambiguator":[11971851078352766489,17994270080533667189]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","num":24,"id":{"name":"serde","disambiguator":[9329802083187344169,15516913349122290357]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","num":25,"id":{"name":"serde_derive","disambiguator":[9132577773600900999,13098957011468639310]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","num":26,"id":{"name":"integer_sqrt","disambiguator":[16829217331349863768,1347948894207436676]}},{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","num":27,"id":{"name":"sp_debug_derive","disambiguator":[1127781656639809926,12270005864681690604]}}],"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":686,"byte_end":15687,"line_start":18,"line_end":514,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":26,"index":4},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42473,"byte_end":42490,"line_start":22,"line_end":22,"column_start":23,"column_end":40},"alias_span":null,"name":"IntegerSquareRoot","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":301},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42515,"byte_end":42519,"line_start":24,"line_end":24,"column_start":2,"column_end":6},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":311},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42521,"byte_end":42524,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":92},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42526,"byte_end":42533,"line_start":24,"line_end":24,"column_start":13,"column_end":20},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":366},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42535,"byte_end":42545,"line_start":24,"line_end":24,"column_start":22,"column_end":32},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":369},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42547,"byte_end":42557,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":371},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42559,"byte_end":42569,"line_start":24,"line_end":24,"column_start":46,"column_end":56},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":373},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42571,"byte_end":42581,"line_start":24,"line_end":24,"column_start":58,"column_end":68},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":378},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42583,"byte_end":42593,"line_start":24,"line_end":24,"column_start":70,"column_end":80},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":380},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42596,"byte_end":42606,"line_start":25,"line_end":25,"column_start":2,"column_end":12},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":383},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42608,"byte_end":42618,"line_start":25,"line_end":25,"column_start":14,"column_end":24},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":526},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42620,"byte_end":42631,"line_start":25,"line_end":25,"column_start":26,"column_end":37},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":590},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42633,"byte_end":42639,"line_start":25,"line_end":25,"column_start":39,"column_end":45},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":18,"index":611},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42641,"byte_end":42649,"line_start":25,"line_end":25,"column_start":47,"column_end":55},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":94}},{"kind":"Use","ref_id":{"krate":0,"index":292},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1235,"byte_end":1251,"line_start":43,"line_end":43,"column_start":23,"column_end":39},"alias_span":null,"name":"FixedPointNumber","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":281},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1253,"byte_end":1270,"line_start":43,"line_end":43,"column_start":41,"column_end":58},"alias_span":null,"name":"FixedPointOperand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1156},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1272,"byte_end":1280,"line_start":43,"line_end":43,"column_start":60,"column_end":68},"alias_span":null,"name":"FixedI64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1274},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1282,"byte_end":1291,"line_start":43,"line_end":43,"column_start":70,"column_end":79},"alias_span":null,"name":"FixedI128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1392},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1293,"byte_end":1302,"line_start":43,"line_end":43,"column_start":81,"column_end":90},"alias_span":null,"name":"FixedU128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":200},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1326,"byte_end":1334,"line_start":44,"line_end":44,"column_start":22,"column_end":30},"alias_span":null,"name":"PerThing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":196},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1336,"byte_end":1343,"line_start":44,"line_end":44,"column_start":32,"column_end":39},"alias_span":null,"name":"InnerOf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":198},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1345,"byte_end":1352,"line_start":44,"line_end":44,"column_start":41,"column_end":48},"alias_span":null,"name":"UpperOf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":546},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1354,"byte_end":1361,"line_start":44,"line_end":44,"column_start":50,"column_end":57},"alias_span":null,"name":"Percent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":666},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1363,"byte_end":1369,"line_start":44,"line_end":44,"column_start":59,"column_end":65},"alias_span":null,"name":"PerU16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":786},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1371,"byte_end":1378,"line_start":44,"line_end":44,"column_start":67,"column_end":74},"alias_span":null,"name":"Permill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":906},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1380,"byte_end":1387,"line_start":44,"line_end":44,"column_start":76,"column_end":83},"alias_span":null,"name":"Perbill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1026},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1389,"byte_end":1400,"line_start":44,"line_end":44,"column_start":85,"column_end":96},"alias_span":null,"name":"Perquintill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1449},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1422,"byte_end":1433,"line_start":45,"line_end":45,"column_start":20,"column_end":31},"alias_span":null,"name":"Rational128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1438},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1435,"byte_end":1451,"line_start":45,"line_end":45,"column_start":33,"column_end":49},"alias_span":null,"name":"RationalInfinite","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":686,"byte_end":15687,"line_start":18,"line_end":514,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":80},{"krate":0,"index":94},{"krate":0,"index":174},{"krate":0,"index":243},{"krate":0,"index":358},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":1698},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":1461},{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1467},{"krate":0,"index":1469},{"krate":0,"index":456},{"krate":0,"index":461}],"decl_id":null,"docs":" Minimal fixed point arithmetic primitives and types for runtime.\n","sig":null,"attributes":[{"value":"/ Minimal fixed point arithmetic primitives and types for runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":686,"byte_end":754,"line_start":18,"line_end":18,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"biguint","qualname":"::biguint","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":1480},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":468},{"krate":0,"index":472},{"krate":0,"index":470},{"krate":0,"index":23},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":76},{"krate":0,"index":78}],"decl_id":null,"docs":" Infinite precision unsigned integer for substrate runtime.\n","sig":null,"attributes":[{"value":"/ Infinite precision unsigned integer for substrate runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":16374,"byte_end":16436,"line_start":18,"line_end":18,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":15},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":16825,"byte_end":16831,"line_start":28,"line_end":28,"column_start":10,"column_end":16},"name":"Single","qualname":"::biguint::Single","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Representation of a single limb.\n","sig":null,"attributes":[{"value":"/ Representation of a single limb.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":16779,"byte_end":16815,"line_start":27,"line_end":27,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":16},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":16881,"byte_end":16887,"line_start":30,"line_end":30,"column_start":10,"column_end":16},"name":"Double","qualname":"::biguint::Double","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Representation of two limbs.\n","sig":null,"attributes":[{"value":"/ Representation of two limbs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":16839,"byte_end":16871,"line_start":29,"line_end":29,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":19},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":17209,"byte_end":17214,"line_start":37,"line_end":37,"column_start":8,"column_end":13},"name":"split","qualname":"::biguint::split","value":"pub fn split(Double) -> (Single, Single)","parent":null,"children":[],"decl_id":null,"docs":" Splits a [`Double`] limb number into a tuple of two [`Single`] limb numbers.\n","sig":null,"attributes":[{"value":"/ Splits a [`Double`] limb number into a tuple of two [`Single`] limb numbers.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":17121,"byte_end":17201,"line_start":36,"line_end":36,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":17429,"byte_end":17439,"line_start":46,"line_end":46,"column_start":8,"column_end":18},"name":"mul_single","qualname":"::biguint::mul_single","value":"pub fn mul_single(Single, Single) -> Double","parent":null,"children":[],"decl_id":null,"docs":" Assumed as a given primitive.","sig":null,"attributes":[{"value":"/ Assumed as a given primitive.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":17318,"byte_end":17351,"line_start":43,"line_end":43,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":17352,"byte_end":17355,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Multiplication of two singles, which at most yields 1 double.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":17356,"byte_end":17421,"line_start":45,"line_end":45,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":21},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":17707,"byte_end":17717,"line_start":56,"line_end":56,"column_start":8,"column_end":18},"name":"add_single","qualname":"::biguint::add_single","value":"pub fn add_single(Single, Single) -> (Single, Single)","parent":null,"children":[],"decl_id":null,"docs":" Assumed as a given primitive.","sig":null,"attributes":[{"value":"/ Assumed as a given primitive.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":17538,"byte_end":17571,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":17572,"byte_end":17575,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Addition of two singles, which at most takes a single limb of result and a carry,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":17576,"byte_end":17661,"line_start":54,"line_end":54,"column_start":1,"column_end":86}},{"value":"/ returned as a tuple respectively.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":17662,"byte_end":17699,"line_start":55,"line_end":55,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18338,"byte_end":18345,"line_start":78,"line_end":78,"column_start":12,"column_end":19},"name":"BigUint","qualname":"::biguint::BigUint","value":"BigUint {  }","parent":null,"children":[{"krate":0,"index":469}],"decl_id":null,"docs":" Simple wrapper around an infinitely large integer, represented as limbs of [`Single`].\n","sig":null,"attributes":[{"value":"/ Simple wrapper around an infinitely large integer, represented as limbs of [`Single`].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18210,"byte_end":18300,"line_start":76,"line_end":76,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18638,"byte_end":18651,"line_start":88,"line_end":88,"column_start":9,"column_end":22},"name":"with_capacity","qualname":"<BigUint>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance with `size` limbs. This prevents any number with zero limbs to be\n created.","sig":null,"attributes":[{"value":"/ Create a new instance with `size` limbs. This prevents any number with zero limbs to be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18459,"byte_end":18550,"line_start":84,"line_end":84,"column_start":2,"column_end":93}},{"value":"/ created.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18552,"byte_end":18564,"line_start":85,"line_end":85,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18566,"byte_end":18569,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ The behavior of the type is undefined with zero limbs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18571,"byte_end":18629,"line_start":87,"line_end":87,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18832,"byte_end":18842,"line_start":94,"line_end":94,"column_start":9,"column_end":19},"name":"from_limbs","qualname":"<BigUint>::from_limbs","value":"pub fn from_limbs(&[Single]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Raw constructor from custom limbs. If `limbs` is empty, `Zero::zero()` implementation is\n used.\n","sig":null,"attributes":[{"value":"/ Raw constructor from custom limbs. If `limbs` is empty, `Zero::zero()` implementation is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18720,"byte_end":18812,"line_start":92,"line_end":92,"column_start":2,"column_end":94}},{"value":"/ used.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18814,"byte_end":18823,"line_start":93,"line_end":93,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18996,"byte_end":18999,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"name":"len","qualname":"<BigUint>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of limbs.\n","sig":null,"attributes":[{"value":"/ Number of limbs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18967,"byte_end":18987,"line_start":102,"line_end":102,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19193,"byte_end":19196,"line_start":110,"line_end":110,"column_start":9,"column_end":12},"name":"get","qualname":"<BigUint>::get","value":"pub fn get(&Self, usize) -> Single","parent":null,"children":[],"decl_id":null,"docs":" A naive getter for limb at `index`. Note that the order is lsb -> msb.","sig":null,"attributes":[{"value":"/ A naive getter for limb at `index`. Note that the order is lsb -> msb.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19040,"byte_end":19114,"line_start":105,"line_end":105,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19116,"byte_end":19119,"line_start":106,"line_end":106,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19121,"byte_end":19136,"line_start":107,"line_end":107,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19138,"byte_end":19141,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ This panics if index is out of range.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19143,"byte_end":19184,"line_start":109,"line_end":109,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19356,"byte_end":19367,"line_start":115,"line_end":115,"column_start":9,"column_end":20},"name":"checked_get","qualname":"<BigUint>::checked_get","value":"pub fn checked_get(&Self, usize) -> Option<Single>","parent":null,"children":[],"decl_id":null,"docs":" A naive getter for limb at `index`. Note that the order is lsb -> msb.\n","sig":null,"attributes":[{"value":"/ A naive getter for limb at `index`. Note that the order is lsb -> msb.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19273,"byte_end":19347,"line_start":114,"line_end":114,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19668,"byte_end":19671,"line_start":126,"line_end":126,"column_start":9,"column_end":12},"name":"set","qualname":"<BigUint>::set","value":"pub fn set(&mut Self, usize, Single)","parent":null,"children":[],"decl_id":null,"docs":" A naive setter for limb at `index`. Note that the order is lsb -> msb.","sig":null,"attributes":[{"value":"/ A naive setter for limb at `index`. Note that the order is lsb -> msb.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19515,"byte_end":19589,"line_start":121,"line_end":121,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19591,"byte_end":19594,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19596,"byte_end":19611,"line_start":123,"line_end":123,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19613,"byte_end":19616,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ This panics if index is out of range.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19618,"byte_end":19659,"line_start":125,"line_end":125,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19973,"byte_end":19976,"line_start":136,"line_end":136,"column_start":9,"column_end":12},"name":"lsb","qualname":"<BigUint>::lsb","value":"pub fn lsb(&Self) -> Single","parent":null,"children":[],"decl_id":null,"docs":" returns the least significant limb of the number.","sig":null,"attributes":[{"value":"/ returns the least significant limb of the number.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19790,"byte_end":19843,"line_start":131,"line_end":131,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19845,"byte_end":19848,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19850,"byte_end":19865,"line_start":133,"line_end":133,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19867,"byte_end":19870,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ While the constructor of the type prevents this, this can panic if `self` has no digits.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":19872,"byte_end":19964,"line_start":135,"line_end":135,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":20213,"byte_end":20216,"line_start":145,"line_end":145,"column_start":9,"column_end":12},"name":"msb","qualname":"<BigUint>::msb","value":"pub fn msb(&Self) -> Single","parent":null,"children":[],"decl_id":null,"docs":" returns the most significant limb of the number.","sig":null,"attributes":[{"value":"/ returns the most significant limb of the number.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":20031,"byte_end":20083,"line_start":140,"line_end":140,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":20085,"byte_end":20088,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":20090,"byte_end":20105,"line_start":142,"line_end":142,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":20107,"byte_end":20110,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ While the constructor of the type prevents this, this can panic if `self` has no digits.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":20112,"byte_end":20204,"line_start":144,"line_end":144,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":20350,"byte_end":20356,"line_start":150,"line_end":150,"column_start":9,"column_end":15},"name":"lstrip","qualname":"<BigUint>::lstrip","value":"pub fn lstrip(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Strips zeros from the left side (the most significant limbs) of `self`, if any.\n","sig":null,"attributes":[{"value":"/ Strips zeros from the left side (the most significant limbs) of `self`, if any.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":20258,"byte_end":20341,"line_start":149,"line_end":149,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":20930,"byte_end":20934,"line_start":164,"line_end":164,"column_start":9,"column_end":13},"name":"lpad","qualname":"<BigUint>::lpad","value":"pub fn lpad(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Zero-pad `self` from left to reach `size` limbs. Will not make any difference if `self`\n is already bigger than `size` limbs.\n","sig":null,"attributes":[{"value":"/ Zero-pad `self` from left to reach `size` limbs. Will not make any difference if `self`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":20788,"byte_end":20879,"line_start":162,"line_end":162,"column_start":2,"column_end":93}},{"value":"/ is already bigger than `size` limbs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":20881,"byte_end":20921,"line_start":163,"line_end":163,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":21612,"byte_end":21615,"line_start":181,"line_end":181,"column_start":9,"column_end":12},"name":"add","qualname":"<BigUint>::add","value":"pub fn add(Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds `self` with `other`. self and other do not have to have any particular size. Given\n that the `n = max{size(self), size(other)}`, it will produce a number with `n + 1`\n limbs.","sig":null,"attributes":[{"value":"/ Adds `self` with `other`. self and other do not have to have any particular size. Given","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":21175,"byte_end":21266,"line_start":173,"line_end":173,"column_start":2,"column_end":93}},{"value":"/ that the `n = max{size(self), size(other)}`, it will produce a number with `n + 1`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":21268,"byte_end":21354,"line_start":174,"line_end":174,"column_start":2,"column_end":88}},{"value":"/ limbs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":21356,"byte_end":21366,"line_start":175,"line_end":175,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":21368,"byte_end":21371,"line_start":176,"line_end":176,"column_start":2,"column_end":5}},{"value":"/ This function does not strip the output and returns the original allocated `n + 1`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":21373,"byte_end":21459,"line_start":177,"line_end":177,"column_start":2,"column_end":88}},{"value":"/ limbs. The caller may strip the output if desired.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":21461,"byte_end":21515,"line_start":178,"line_end":178,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":21517,"byte_end":21520,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":21522,"byte_end":21603,"line_start":180,"line_end":180,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":22377,"byte_end":22380,"line_start":204,"line_end":204,"column_start":9,"column_end":12},"name":"sub","qualname":"<BigUint>::sub","value":"pub fn sub(Self, &Self) -> Result<Self, Self>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts `other` from `self`. self and other do not have to have any particular size.\n Given that the `n = max{size(self), size(other)}`, it will produce a number of size `n`.","sig":null,"attributes":[{"value":"/ Subtracts `other` from `self`. self and other do not have to have any particular size.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":22021,"byte_end":22111,"line_start":198,"line_end":198,"column_start":2,"column_end":92}},{"value":"/ Given that the `n = max{size(self), size(other)}`, it will produce a number of size `n`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":22113,"byte_end":22205,"line_start":199,"line_end":199,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":22207,"byte_end":22210,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ If `other` is bigger than `self`, `Err(B - borrow)` is returned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":22212,"byte_end":22280,"line_start":201,"line_end":201,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":22282,"byte_end":22285,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":22287,"byte_end":22368,"line_start":203,"line_end":203,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":23700,"byte_end":23703,"line_start":252,"line_end":252,"column_start":9,"column_end":12},"name":"mul","qualname":"<BigUint>::mul","value":"pub fn mul(Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies n-limb number `self` with m-limb number `other`.","sig":null,"attributes":[{"value":"/ Multiplies n-limb number `self` with m-limb number `other`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":23328,"byte_end":23391,"line_start":244,"line_end":244,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":23393,"byte_end":23396,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ The resulting number will always have `n + m` limbs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":23398,"byte_end":23454,"line_start":246,"line_end":246,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":23456,"byte_end":23459,"line_start":247,"line_end":247,"column_start":2,"column_end":5}},{"value":"/ This function does not strip the output and returns the original allocated `n + m`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":23461,"byte_end":23547,"line_start":248,"line_end":248,"column_start":2,"column_end":88}},{"value":"/ limbs. The caller may strip the output if desired.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":23549,"byte_end":23603,"line_start":249,"line_end":249,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":23605,"byte_end":23608,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":23610,"byte_end":23691,"line_start":251,"line_end":251,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":24597,"byte_end":24605,"line_start":284,"line_end":284,"column_start":9,"column_end":17},"name":"div_unit","qualname":"<BigUint>::div_unit","value":"pub fn div_unit(Self, Single) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Divides `self` by a single limb `other`. This can be used in cases where the original\n division cannot work due to the divisor (`other`) being just one limb.","sig":null,"attributes":[{"value":"/ Divides `self` by a single limb `other`. This can be used in cases where the original","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":24378,"byte_end":24467,"line_start":280,"line_end":280,"column_start":2,"column_end":91}},{"value":"/ division cannot work due to the divisor (`other`) being just one limb.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":24469,"byte_end":24543,"line_start":281,"line_end":281,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":24545,"byte_end":24548,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ Invariant: `other` cannot be zero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":24550,"byte_end":24588,"line_start":283,"line_end":283,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25733,"byte_end":25736,"line_start":312,"line_end":312,"column_start":9,"column_end":12},"name":"div","qualname":"<BigUint>::div","value":"pub fn div(Self, &Self, bool) -> Option<(Self, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Divides an `n + m` limb self by a `n` limb `other`. The result is a `m + 1` limb\n quotient and a `n` limb remainder, if enabled by passing `true` in `rem` argument, both\n in the form of an option's `Ok`.","sig":null,"attributes":[{"value":"/ Divides an `n + m` limb self by a `n` limb `other`. The result is a `m + 1` limb","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25025,"byte_end":25109,"line_start":299,"line_end":299,"column_start":2,"column_end":86}},{"value":"/ quotient and a `n` limb remainder, if enabled by passing `true` in `rem` argument, both","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25111,"byte_end":25202,"line_start":300,"line_end":300,"column_start":2,"column_end":93}},{"value":"/ in the form of an option's `Ok`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25204,"byte_end":25240,"line_start":301,"line_end":301,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25242,"byte_end":25245,"line_start":302,"line_end":302,"column_start":2,"column_end":5}},{"value":"/ - requires `other` to be stripped and have no leading zeros.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25247,"byte_end":25311,"line_start":303,"line_end":303,"column_start":2,"column_end":66}},{"value":"/ - requires `self` to be stripped and have no leading zeros.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25313,"byte_end":25376,"line_start":304,"line_end":304,"column_start":2,"column_end":65}},{"value":"/ - requires `other` to have at least two limbs.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25378,"byte_end":25428,"line_start":305,"line_end":305,"column_start":2,"column_end":52}},{"value":"/ - requires `self` to have a greater length compared to `other`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25430,"byte_end":25497,"line_start":306,"line_end":306,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25499,"byte_end":25502,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ All arguments are examined without being stripped for the above conditions. If any of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25504,"byte_end":25593,"line_start":308,"line_end":308,"column_start":2,"column_end":91}},{"value":"/ the above fails, `None` is returned.`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25595,"byte_end":25636,"line_start":309,"line_end":309,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25638,"byte_end":25641,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":25643,"byte_end":25724,"line_start":311,"line_end":311,"column_start":2,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":80},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"helpers_128bit","qualname":"::helpers_128bit","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" Some helper functions to work with 128bit numbers. Note that the functionality provided here is\n only sensible to use with 128bit numbers because for smaller sizes, you can always rely on\n assumptions of a bigger type (u128) being available, or simply create a per-thing and use the\n multiplication implementation provided there.\n","sig":null,"attributes":[{"value":"/ Some helper functions to work with 128bit numbers. Note that the functionality provided here is","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":38457,"byte_end":38556,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/ only sensible to use with 128bit numbers because for smaller sizes, you can always rely on","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":38557,"byte_end":38651,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/ assumptions of a bigger type (u128) being available, or simply create a per-thing and use the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":38652,"byte_end":38749,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ multiplication implementation provided there.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":38750,"byte_end":38799,"line_start":21,"line_end":21,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":38965,"byte_end":38968,"line_start":28,"line_end":28,"column_start":8,"column_end":11},"name":"gcd","qualname":"::helpers_128bit::gcd","value":"pub fn gcd(u128, u128) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Helper gcd function used in Rational128 implementation.\n","sig":null,"attributes":[{"value":"/ Helper gcd function used in Rational128 implementation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":38898,"byte_end":38957,"line_start":27,"line_end":27,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":39365,"byte_end":39370,"line_start":43,"line_end":43,"column_start":8,"column_end":13},"name":"split","qualname":"::helpers_128bit::split","value":"pub fn split(u128) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" split a u128 into two u64 limbs\n","sig":null,"attributes":[{"value":"/ split a u128 into two u64 limbs","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":39322,"byte_end":39357,"line_start":42,"line_end":42,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":91},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":39507,"byte_end":39518,"line_start":50,"line_end":50,"column_start":8,"column_end":19},"name":"to_big_uint","qualname":"::helpers_128bit::to_big_uint","value":"pub fn to_big_uint(u128) -> biguint::BigUint","parent":null,"children":[],"decl_id":null,"docs":" Convert a u128 to a u32 based biguint.\n","sig":null,"attributes":[{"value":"/ Convert a u128 to a u32 based biguint.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":39457,"byte_end":39499,"line_start":49,"line_end":49,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":40036,"byte_end":40056,"line_start":65,"line_end":65,"column_start":8,"column_end":28},"name":"multiply_by_rational","qualname":"::helpers_128bit::multiply_by_rational","value":"pub fn multiply_by_rational(u128, u128, u128) -> Result<u128, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Safely and accurately compute `a * b / c`. The approach is:\n   - Simply try `a * b / c`.\n   - Else, convert them both into big numbers and re-try. `Err` is returned if the result\n     cannot be safely casted back to u128.","sig":null,"attributes":[{"value":"/ Safely and accurately compute `a * b / c`. The approach is:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":39737,"byte_end":39800,"line_start":59,"line_end":59,"column_start":1,"column_end":64}},{"value":"/   - Simply try `a * b / c`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":39801,"byte_end":39832,"line_start":60,"line_end":60,"column_start":1,"column_end":32}},{"value":"/   - Else, convert them both into big numbers and re-try. `Err` is returned if the result","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":39833,"byte_end":39925,"line_start":61,"line_end":61,"column_start":1,"column_end":93}},{"value":"/     cannot be safely casted back to u128.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":39926,"byte_end":39971,"line_start":62,"line_end":62,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":39972,"byte_end":39975,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Invariant: c must be greater than or equal to 1.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/helpers_128bit.rs","byte_start":39976,"byte_end":40028,"line_start":64,"line_end":64,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":94},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"traits","qualname":"::traits","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":149},{"krate":0,"index":154},{"krate":0,"index":159},{"krate":0,"index":167},{"krate":0,"index":172}],"decl_id":null,"docs":" Primitive traits for the runtime arithmetic.\n","sig":null,"attributes":[{"value":"/ Primitive traits for the runtime arithmetic.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42329,"byte_end":42377,"line_start":18,"line_end":18,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":129},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42865,"byte_end":42879,"line_start":33,"line_end":33,"column_start":11,"column_end":25},"name":"BaseArithmetic","qualname":"::traits::BaseArithmetic","value":"BaseArithmetic: From<u8> + Zero + One + IntegerSquareRoot + Add<Self, Output = Self> +\nAddAssign<Self> + Sub<Self, Output = Self> + SubAssign<Self> + Mul<Self,\nOutput = Self> + MulAssign<Self> + Div<Self, Output = Self> +\nDivAssign<Self> + Rem<Self, Output = Self> + RemAssign<Self> + Shl<u32, Output\n= Self> + Shr<u32, Output = Self> + CheckedShl + CheckedShr + CheckedAdd +\nCheckedSub + CheckedMul + CheckedDiv + Saturating + PartialOrd<Self> + Ord +\nBounded + HasCompact + Sized + TryFrom<u8> + TryInto<u8> + TryFrom<u16> +\nTryInto<u16> + TryFrom<u32> + TryInto<u32> + TryFrom<u64> + TryInto<u64> +\nTryFrom<u128> + TryInto<u128> + TryFrom<usize> + TryInto<usize> +\nUniqueSaturatedFrom<u8> + UniqueSaturatedInto<u8> + UniqueSaturatedFrom<u16> +\nUniqueSaturatedInto<u16> + UniqueSaturatedFrom<u32> +\nUniqueSaturatedInto<u32> + UniqueSaturatedFrom<u64> +\nUniqueSaturatedInto<u64> + UniqueSaturatedFrom<u128> +\nUniqueSaturatedInto<u128>","parent":null,"children":[],"decl_id":null,"docs":" A meta trait for arithmetic type operations, regardless of any limitation on size.\n","sig":null,"attributes":[{"value":"/ A meta trait for arithmetic type operations, regardless of any limitation on size.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42768,"byte_end":42854,"line_start":32,"line_end":32,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":132},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45095,"byte_end":45107,"line_start":78,"line_end":78,"column_start":11,"column_end":23},"name":"AtLeast32Bit","qualname":"::traits::AtLeast32Bit","value":"AtLeast32Bit: BaseArithmetic + From<u16> + From<u32>","parent":null,"children":[],"decl_id":null,"docs":" A meta trait for arithmetic.","sig":null,"attributes":[{"value":"/ A meta trait for arithmetic.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":44794,"byte_end":44826,"line_start":73,"line_end":73,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":44827,"byte_end":44830,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Arithmetic types do all the usual stuff you'd expect numbers to do. They are guaranteed to","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":44831,"byte_end":44925,"line_start":75,"line_end":75,"column_start":1,"column_end":95}},{"value":"/ be able to represent at least `u32` values without loss, hence the trait implies `From<u32>`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":44926,"byte_end":45022,"line_start":76,"line_end":76,"column_start":1,"column_end":97}},{"value":"/ and smaller integers. All other conversions are fallible.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45023,"byte_end":45084,"line_start":77,"line_end":77,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":135},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45327,"byte_end":45347,"line_start":83,"line_end":83,"column_start":11,"column_end":31},"name":"AtLeast32BitUnsigned","qualname":"::traits::AtLeast32BitUnsigned","value":"AtLeast32BitUnsigned: AtLeast32Bit + Unsigned","parent":null,"children":[],"decl_id":null,"docs":" A meta trait for arithmetic.  Same as [`AtLeast32Bit `], but also bounded to be unsigned.\n","sig":null,"attributes":[{"value":"/ A meta trait for arithmetic.  Same as [`AtLeast32Bit `], but also bounded to be unsigned.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45223,"byte_end":45316,"line_start":82,"line_end":82,"column_start":1,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":138},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45589,"byte_end":45608,"line_start":89,"line_end":89,"column_start":11,"column_end":30},"name":"UniqueSaturatedFrom","qualname":"::traits::UniqueSaturatedFrom","value":"UniqueSaturatedFrom<T: Sized>: Sized","parent":null,"children":[{"krate":0,"index":140}],"decl_id":null,"docs":" Just like `From` except that if the source value is too big to fit into the destination type\n then it'll saturate the destination.\n","sig":null,"attributes":[{"value":"/ Just like `From` except that if the source value is too big to fit into the destination type","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45441,"byte_end":45537,"line_start":87,"line_end":87,"column_start":1,"column_end":97}},{"value":"/ then it'll saturate the destination.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45538,"byte_end":45578,"line_start":88,"line_end":88,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45704,"byte_end":45725,"line_start":91,"line_end":91,"column_start":5,"column_end":26},"name":"unique_saturated_from","qualname":"::traits::UniqueSaturatedFrom::unique_saturated_from","value":"pub fn unique_saturated_from(T) -> Self","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" Convert from a value of `T` into an equivalent instance of `Self`.\n","sig":null,"attributes":[{"value":"/ Convert from a value of `T` into an equivalent instance of `Self`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45629,"byte_end":45699,"line_start":90,"line_end":90,"column_start":2,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":141},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45892,"byte_end":45911,"line_start":96,"line_end":96,"column_start":11,"column_end":30},"name":"UniqueSaturatedInto","qualname":"::traits::UniqueSaturatedInto","value":"UniqueSaturatedInto<T: Sized>: Sized","parent":null,"children":[{"krate":0,"index":143}],"decl_id":null,"docs":" Just like `Into` except that if the source value is too big to fit into the destination type\n then it'll saturate the destination.\n","sig":null,"attributes":[{"value":"/ Just like `Into` except that if the source value is too big to fit into the destination type","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45744,"byte_end":45840,"line_start":94,"line_end":94,"column_start":1,"column_end":97}},{"value":"/ then it'll saturate the destination.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45841,"byte_end":45881,"line_start":95,"line_end":95,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45991,"byte_end":46012,"line_start":98,"line_end":98,"column_start":5,"column_end":26},"name":"unique_saturated_into","qualname":"::traits::UniqueSaturatedInto::unique_saturated_into","value":"pub fn unique_saturated_into(Self) -> T","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Consume self to return an equivalent value of `T`.\n","sig":null,"attributes":[{"value":"/ Consume self to return an equivalent value of `T`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45932,"byte_end":45986,"line_start":97,"line_end":97,"column_start":2,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":154},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46504,"byte_end":46514,"line_start":114,"line_end":114,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::traits::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"decl_id":null,"docs":" Saturating arithmetic operations, returning maximum or minimum values instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating arithmetic operations, returning maximum or minimum values instead of overflowing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46396,"byte_end":46493,"line_start":113,"line_end":113,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46631,"byte_end":46645,"line_start":117,"line_end":117,"column_start":5,"column_end":19},"name":"saturating_add","qualname":"::traits::Saturating::saturating_add","value":"pub fn saturating_add(Self, Self) -> Self","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Saturating addition. Compute `self + rhs`, saturating at the numeric bounds instead of\n overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating addition. Compute `self + rhs`, saturating at the numeric bounds instead of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46518,"byte_end":46608,"line_start":115,"line_end":115,"column_start":2,"column_end":92}},{"value":"/ overflowing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46610,"byte_end":46626,"line_start":116,"line_end":116,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46790,"byte_end":46804,"line_start":121,"line_end":121,"column_start":5,"column_end":19},"name":"saturating_sub","qualname":"::traits::Saturating::saturating_sub","value":"pub fn saturating_sub(Self, Self) -> Self","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Saturating subtraction. Compute `self - rhs`, saturating at the numeric bounds instead of\n overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating subtraction. Compute `self - rhs`, saturating at the numeric bounds instead of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46674,"byte_end":46767,"line_start":119,"line_end":119,"column_start":2,"column_end":95}},{"value":"/ overflowing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46769,"byte_end":46785,"line_start":120,"line_end":120,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46946,"byte_end":46960,"line_start":125,"line_end":125,"column_start":5,"column_end":19},"name":"saturating_mul","qualname":"::traits::Saturating::saturating_mul","value":"pub fn saturating_mul(Self, Self) -> Self","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Saturating multiply. Compute `self * rhs`, saturating at the numeric bounds instead of\n overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating multiply. Compute `self * rhs`, saturating at the numeric bounds instead of","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46833,"byte_end":46923,"line_start":123,"line_end":123,"column_start":2,"column_end":92}},{"value":"/ overflowing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46925,"byte_end":46941,"line_start":124,"line_end":124,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":47111,"byte_end":47125,"line_start":129,"line_end":129,"column_start":5,"column_end":19},"name":"saturating_pow","qualname":"::traits::Saturating::saturating_pow","value":"pub fn saturating_pow(Self, usize) -> Self","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Saturating exponentiation. Compute `self.pow(exp)`, saturating at the numeric bounds\n instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating exponentiation. Compute `self.pow(exp)`, saturating at the numeric bounds","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46989,"byte_end":47077,"line_start":127,"line_end":127,"column_start":2,"column_end":90}},{"value":"/ instead of overflowing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":47079,"byte_end":47106,"line_start":128,"line_end":128,"column_start":2,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":167},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48126,"byte_end":48145,"line_start":168,"line_end":168,"column_start":11,"column_end":30},"name":"SaturatedConversion","qualname":"::traits::SaturatedConversion","value":"SaturatedConversion","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":170}],"decl_id":null,"docs":" Convenience type to work around the highly unergonomic syntax needed\n to invoke the functions of overloaded generic traits, in this case\n `SaturatedFrom` and `SaturatedInto`.\n","sig":null,"attributes":[{"value":"/ Convenience type to work around the highly unergonomic syntax needed","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":47931,"byte_end":48003,"line_start":165,"line_end":165,"column_start":1,"column_end":73}},{"value":"/ to invoke the functions of overloaded generic traits, in this case","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48004,"byte_end":48074,"line_start":166,"line_end":166,"column_start":1,"column_end":71}},{"value":"/ `SaturatedFrom` and `SaturatedInto`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48075,"byte_end":48115,"line_start":167,"line_end":167,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48427,"byte_end":48441,"line_start":174,"line_end":174,"column_start":5,"column_end":19},"name":"saturated_from","qualname":"::traits::SaturatedConversion::saturated_from","value":"pub fn saturated_from<T>(T) -> Self where Self: UniqueSaturatedFrom<T>","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Convert from a value of `T` into an equivalent instance of `Self`.","sig":null,"attributes":[{"value":"/ Convert from a value of `T` into an equivalent instance of `Self`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48149,"byte_end":48219,"line_start":169,"line_end":169,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48221,"byte_end":48224,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ This just uses `UniqueSaturatedFrom` internally but with this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48226,"byte_end":48291,"line_start":171,"line_end":171,"column_start":2,"column_end":67}},{"value":"/ variant you can provide the destination type using turbofish syntax","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48293,"byte_end":48364,"line_start":172,"line_end":172,"column_start":2,"column_end":73}},{"value":"/ in case Rust happens not to assume the correct type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48366,"byte_end":48422,"line_start":173,"line_end":173,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48824,"byte_end":48838,"line_start":183,"line_end":183,"column_start":5,"column_end":19},"name":"saturated_into","qualname":"::traits::SaturatedConversion::saturated_into","value":"pub fn saturated_into<T>(Self) -> T where Self: UniqueSaturatedInto<T>","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Consume self to return an equivalent value of `T`.","sig":null,"attributes":[{"value":"/ Consume self to return an equivalent value of `T`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48562,"byte_end":48616,"line_start":178,"line_end":178,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48618,"byte_end":48621,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ This just uses `UniqueSaturatedInto` internally but with this","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48623,"byte_end":48688,"line_start":180,"line_end":180,"column_start":2,"column_end":67}},{"value":"/ variant you can provide the destination type using turbofish syntax","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48690,"byte_end":48761,"line_start":181,"line_end":181,"column_start":2,"column_end":73}},{"value":"/ in case Rust happens not to assume the correct type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48763,"byte_end":48819,"line_start":182,"line_end":182,"column_start":2,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":174},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"per_things","qualname":"::per_things","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":1558},{"krate":0,"index":177},{"krate":0,"index":1560},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":1568},{"krate":0,"index":185},{"krate":0,"index":1570},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":225},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":546},{"krate":0,"index":598},{"krate":0,"index":579},{"krate":0,"index":569},{"krate":0,"index":568},{"krate":0,"index":566},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":553},{"krate":0,"index":551},{"krate":0,"index":549},{"krate":0,"index":486},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":504},{"krate":0,"index":526},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":666},{"krate":0,"index":718},{"krate":0,"index":699},{"krate":0,"index":689},{"krate":0,"index":688},{"krate":0,"index":686},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":673},{"krate":0,"index":671},{"krate":0,"index":669},{"krate":0,"index":606},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":624},{"krate":0,"index":646},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":604},{"krate":0,"index":786},{"krate":0,"index":838},{"krate":0,"index":819},{"krate":0,"index":809},{"krate":0,"index":808},{"krate":0,"index":806},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":793},{"krate":0,"index":791},{"krate":0,"index":789},{"krate":0,"index":726},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":744},{"krate":0,"index":766},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":724},{"krate":0,"index":906},{"krate":0,"index":958},{"krate":0,"index":939},{"krate":0,"index":929},{"krate":0,"index":928},{"krate":0,"index":926},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":913},{"krate":0,"index":911},{"krate":0,"index":909},{"krate":0,"index":846},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":864},{"krate":0,"index":886},{"krate":0,"index":891},{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":844},{"krate":0,"index":1026},{"krate":0,"index":1078},{"krate":0,"index":1059},{"krate":0,"index":1049},{"krate":0,"index":1048},{"krate":0,"index":1046},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1033},{"krate":0,"index":1031},{"krate":0,"index":1029},{"krate":0,"index":966},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":984},{"krate":0,"index":1006},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":964}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":196},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50049,"byte_end":50056,"line_start":30,"line_end":30,"column_start":10,"column_end":17},"name":"InnerOf","qualname":"::per_things::InnerOf","value":"<P as PerThing>::Inner","parent":null,"children":[],"decl_id":null,"docs":" Get the inner type of a `PerThing`.\n","sig":null,"attributes":[{"value":"/ Get the inner type of a `PerThing`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50000,"byte_end":50039,"line_start":29,"line_end":29,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":198},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50136,"byte_end":50143,"line_start":33,"line_end":33,"column_start":10,"column_end":17},"name":"UpperOf","qualname":"::per_things::UpperOf","value":"<P as PerThing>::Upper","parent":null,"children":[],"decl_id":null,"docs":" Get the upper type of a `PerThing`.\n","sig":null,"attributes":[{"value":"/ Get the upper type of a `PerThing`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50087,"byte_end":50126,"line_start":32,"line_end":32,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":200},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50294,"byte_end":50302,"line_start":37,"line_end":37,"column_start":11,"column_end":19},"name":"PerThing","qualname":"::per_things::PerThing","value":"PerThing: Sized + Saturating + Copy + Default + Eq + PartialEq + Ord + PartialOrd +\nBounded + fmt::Debug","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"decl_id":null,"docs":" Something that implements a fixed point ration with an arbitrary granularity `X`, as _parts per\n `X`_.\n","sig":null,"attributes":[{"value":"/ Something that implements a fixed point ration with an arbitrary granularity `X`, as _parts per","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50174,"byte_end":50273,"line_start":35,"line_end":35,"column_start":1,"column_end":100}},{"value":"/ `X`_.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50274,"byte_end":50283,"line_start":36,"line_end":36,"column_start":1,"column_end":10}}]},{"kind":"Type","id":{"krate":0,"index":201},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50458,"byte_end":50463,"line_start":41,"line_end":41,"column_start":7,"column_end":12},"name":"Inner","qualname":"::per_things::PerThing::Inner","value":"type Inner: BaseArithmetic + Unsigned + Copy + Into<u128> + fmt::Debug;","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" The data type used to build this per-thingy.\n","sig":null,"attributes":[{"value":"/ The data type used to build this per-thingy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50403,"byte_end":50451,"line_start":40,"line_end":40,"column_start":2,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":202},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50667,"byte_end":50672,"line_start":45,"line_end":45,"column_start":7,"column_end":12},"name":"Upper","qualname":"::per_things::PerThing::Upper","value":"type Upper: BaseArithmetic\n\t\t+ Copy\n\t\t+ From<Self::Inner>\n\t\t+ TryInto<Self::Inner>\n\t\t+ UniqueSaturatedInto<Self::Inner>\n\t\t+ Unsigned\n\t\t+ fmt::Debug;","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" A data type larger than `Self::Inner`, used to avoid overflow in some computations.\n It must be able to compute `ACCURACY^2`.\n","sig":null,"attributes":[{"value":"/ A data type larger than `Self::Inner`, used to avoid overflow in some computations.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50527,"byte_end":50614,"line_start":43,"line_end":43,"column_start":2,"column_end":89}},{"value":"/ It must be able to compute `ACCURACY^2`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50616,"byte_end":50660,"line_start":44,"line_end":44,"column_start":2,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":203},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50851,"byte_end":50859,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"ACCURACY","qualname":"::per_things::PerThing::ACCURACY","value":"Self::Inner","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" The accuracy of this type.\n","sig":null,"attributes":[{"value":"/ The accuracy of this type.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50813,"byte_end":50843,"line_start":53,"line_end":53,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50921,"byte_end":50925,"line_start":57,"line_end":57,"column_start":5,"column_end":9},"name":"zero","qualname":"::per_things::PerThing::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Equivalent to `Self::from_parts(0)`.\n","sig":null,"attributes":[{"value":"/ Equivalent to `Self::from_parts(0)`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50876,"byte_end":50916,"line_start":56,"line_end":56,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":51022,"byte_end":51029,"line_start":60,"line_end":60,"column_start":5,"column_end":12},"name":"is_zero","qualname":"::per_things::PerThing::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Return `true` if this is nothing.\n","sig":null,"attributes":[{"value":"/ Return `true` if this is nothing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50980,"byte_end":51017,"line_start":59,"line_end":59,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":51151,"byte_end":51154,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"one","qualname":"::per_things::PerThing::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Equivalent to `Self::from_parts(Self::ACCURACY)`.\n","sig":null,"attributes":[{"value":"/ Equivalent to `Self::from_parts(Self::ACCURACY)`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":51093,"byte_end":51146,"line_start":62,"line_end":62,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":51242,"byte_end":51248,"line_start":66,"line_end":66,"column_start":5,"column_end":11},"name":"is_one","qualname":"::per_things::PerThing::is_one","value":"pub fn is_one(&Self) -> bool","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Return `true` if this is one.\n","sig":null,"attributes":[{"value":"/ Return `true` if this is one.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":51204,"byte_end":51237,"line_start":65,"line_end":65,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":51473,"byte_end":51485,"line_start":70,"line_end":70,"column_start":5,"column_end":17},"name":"from_percent","qualname":"::per_things::PerThing::from_percent","value":"pub fn from_percent(Self::Inner) -> Self","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Build this type from a percent. Equivalent to `Self::from_parts(x * Self::ACCURACY / 100)`\n but more accurate and can cope with potential type overflows.\n","sig":null,"attributes":[{"value":"/ Build this type from a percent. Equivalent to `Self::from_parts(x * Self::ACCURACY / 100)`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":51307,"byte_end":51401,"line_start":68,"line_end":68,"column_start":2,"column_end":96}},{"value":"/ but more accurate and can cope with potential type overflows.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":51403,"byte_end":51468,"line_start":69,"line_end":69,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":51721,"byte_end":51727,"line_start":77,"line_end":77,"column_start":5,"column_end":11},"name":"square","qualname":"::per_things::PerThing::square","value":"pub fn square(Self) -> Self","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Return the product of multiplication of this value by itself.\n","sig":null,"attributes":[{"value":"/ Return the product of multiplication of this value by itself.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":51651,"byte_end":51716,"line_start":76,"line_end":76,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52424,"byte_end":52433,"line_start":98,"line_end":98,"column_start":5,"column_end":14},"name":"mul_floor","qualname":"::per_things::PerThing::mul_floor","value":"pub fn mul_floor<N>(Self, N) -> N where N: Clone +\nUniqueSaturatedInto<Self::Inner> + ops::Rem<N, Output = N> + ops::Div<N,\nOutput = N> + ops::Mul<N, Output = N> + ops::Add<N, Output = N> + Unsigned,\nSelf::Inner: Into<N>","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Multiplication that always rounds down to a whole number. The standard `Mul` rounds to the\n nearest whole number.","sig":null,"attributes":[{"value":"/ Multiplication that always rounds down to a whole number. The standard `Mul` rounds to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":51908,"byte_end":52002,"line_start":83,"line_end":83,"column_start":2,"column_end":96}},{"value":"/ nearest whole number.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52004,"byte_end":52029,"line_start":84,"line_end":84,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52031,"byte_end":52034,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52036,"byte_end":52047,"line_start":86,"line_end":86,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52049,"byte_end":52094,"line_start":87,"line_end":87,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52096,"byte_end":52114,"line_start":88,"line_end":88,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52116,"byte_end":52139,"line_start":89,"line_end":89,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(34) * 10u64, 3);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52141,"byte_end":52194,"line_start":90,"line_end":90,"column_start":2,"column_end":55}},{"value":"/ assert_eq!(Percent::from_percent(36) * 10u64, 4);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52196,"byte_end":52249,"line_start":91,"line_end":91,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52251,"byte_end":52254,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ // round down","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52256,"byte_end":52273,"line_start":93,"line_end":93,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(Percent::from_percent(34).mul_floor(10u64), 3);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52275,"byte_end":52337,"line_start":94,"line_end":94,"column_start":2,"column_end":64}},{"value":"/ assert_eq!(Percent::from_percent(36).mul_floor(10u64), 3);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52339,"byte_end":52401,"line_start":95,"line_end":95,"column_start":2,"column_end":64}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52403,"byte_end":52410,"line_start":96,"line_end":96,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52412,"byte_end":52419,"line_start":97,"line_end":97,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53242,"byte_end":53250,"line_start":122,"line_end":122,"column_start":5,"column_end":13},"name":"mul_ceil","qualname":"::per_things::PerThing::mul_ceil","value":"pub fn mul_ceil<N>(Self, N) -> N where N: Clone +\nUniqueSaturatedInto<Self::Inner> + ops::Rem<N, Output = N> + ops::Div<N,\nOutput = N> + ops::Mul<N, Output = N> + ops::Add<N, Output = N> + Unsigned,\nSelf::Inner: Into<N>","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Multiplication that always rounds the result up to a whole number. The standard `Mul`\n rounds to the nearest whole number.","sig":null,"attributes":[{"value":"/ Multiplication that always rounds the result up to a whole number. The standard `Mul`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52721,"byte_end":52810,"line_start":107,"line_end":107,"column_start":2,"column_end":91}},{"value":"/ rounds to the nearest whole number.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52812,"byte_end":52851,"line_start":108,"line_end":108,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52853,"byte_end":52856,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52858,"byte_end":52869,"line_start":110,"line_end":110,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52871,"byte_end":52916,"line_start":111,"line_end":111,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52918,"byte_end":52936,"line_start":112,"line_end":112,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52938,"byte_end":52961,"line_start":113,"line_end":113,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(34) * 10u64, 3);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":52963,"byte_end":53016,"line_start":114,"line_end":114,"column_start":2,"column_end":55}},{"value":"/ assert_eq!(Percent::from_percent(36) * 10u64, 4);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53018,"byte_end":53071,"line_start":115,"line_end":115,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53073,"byte_end":53076,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ // round up","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53078,"byte_end":53093,"line_start":117,"line_end":117,"column_start":2,"column_end":17}},{"value":"/ assert_eq!(Percent::from_percent(34).mul_ceil(10u64), 4);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53095,"byte_end":53156,"line_start":118,"line_end":118,"column_start":2,"column_end":63}},{"value":"/ assert_eq!(Percent::from_percent(36).mul_ceil(10u64), 4);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53158,"byte_end":53219,"line_start":119,"line_end":119,"column_start":2,"column_end":63}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53221,"byte_end":53228,"line_start":120,"line_end":120,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53230,"byte_end":53237,"line_start":121,"line_end":121,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53897,"byte_end":53922,"line_start":140,"line_end":140,"column_start":5,"column_end":30},"name":"saturating_reciprocal_mul","qualname":"::per_things::PerThing::saturating_reciprocal_mul","value":"pub fn saturating_reciprocal_mul<N>(Self, N) -> N where N: Clone +\nUniqueSaturatedInto<Self::Inner> + ops::Rem<N, Output = N> + ops::Div<N,\nOutput = N> + ops::Mul<N, Output = N> + ops::Add<N, Output = N> + Saturating +\nUnsigned, Self::Inner: Into<N>","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Saturating multiplication by the reciprocal of `self`.\tThe result is rounded to the\n nearest whole number and saturates at the numeric bounds instead of overflowing.","sig":null,"attributes":[{"value":"/ Saturating multiplication by the reciprocal of `self`.\tThe result is rounded to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53535,"byte_end":53622,"line_start":131,"line_end":131,"column_start":2,"column_end":89}},{"value":"/ nearest whole number and saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53624,"byte_end":53708,"line_start":132,"line_end":132,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53710,"byte_end":53713,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53715,"byte_end":53726,"line_start":134,"line_end":134,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53728,"byte_end":53773,"line_start":135,"line_end":135,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53775,"byte_end":53793,"line_start":136,"line_end":136,"column_start":2,"column_end":20}},{"value":"/ assert_eq!(Percent::from_percent(50).saturating_reciprocal_mul(10u64), 20);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53795,"byte_end":53874,"line_start":137,"line_end":137,"column_start":2,"column_end":81}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53876,"byte_end":53883,"line_start":138,"line_end":138,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":53885,"byte_end":53892,"line_start":139,"line_end":139,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54734,"byte_end":54765,"line_start":162,"line_end":162,"column_start":5,"column_end":36},"name":"saturating_reciprocal_mul_floor","qualname":"::per_things::PerThing::saturating_reciprocal_mul_floor","value":"pub fn saturating_reciprocal_mul_floor<N>(Self, N) -> N where N: Clone +\nUniqueSaturatedInto<Self::Inner> + ops::Rem<N, Output = N> + ops::Div<N,\nOutput = N> + ops::Mul<N, Output = N> + ops::Add<N, Output = N> + Saturating +\nUnsigned, Self::Inner: Into<N>","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Saturating multiplication by the reciprocal of `self`.\tThe result is rounded down to the\n nearest whole number and saturates at the numeric bounds instead of overflowing.","sig":null,"attributes":[{"value":"/ Saturating multiplication by the reciprocal of `self`.\tThe result is rounded down to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54236,"byte_end":54328,"line_start":150,"line_end":150,"column_start":2,"column_end":94}},{"value":"/ nearest whole number and saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54330,"byte_end":54414,"line_start":151,"line_end":151,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54416,"byte_end":54419,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54421,"byte_end":54432,"line_start":153,"line_end":153,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54434,"byte_end":54479,"line_start":154,"line_end":154,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54481,"byte_end":54499,"line_start":155,"line_end":155,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54501,"byte_end":54524,"line_start":156,"line_end":156,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(60).saturating_reciprocal_mul(10u64), 17);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54526,"byte_end":54605,"line_start":157,"line_end":157,"column_start":2,"column_end":81}},{"value":"/ // round down","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54607,"byte_end":54624,"line_start":158,"line_end":158,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(Percent::from_percent(60).saturating_reciprocal_mul_floor(10u64), 16);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54626,"byte_end":54711,"line_start":159,"line_end":159,"column_start":2,"column_end":87}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54713,"byte_end":54720,"line_start":160,"line_end":160,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":54722,"byte_end":54729,"line_start":161,"line_end":161,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55569,"byte_end":55599,"line_start":184,"line_end":184,"column_start":5,"column_end":35},"name":"saturating_reciprocal_mul_ceil","qualname":"::per_things::PerThing::saturating_reciprocal_mul_ceil","value":"pub fn saturating_reciprocal_mul_ceil<N>(Self, N) -> N where N: Clone +\nUniqueSaturatedInto<Self::Inner> + ops::Rem<N, Output = N> + ops::Div<N,\nOutput = N> + ops::Mul<N, Output = N> + ops::Add<N, Output = N> + Saturating +\nUnsigned, Self::Inner: Into<N>","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Saturating multiplication by the reciprocal of `self`.\tThe result is rounded up to the\n nearest whole number and saturates at the numeric bounds instead of overflowing.","sig":null,"attributes":[{"value":"/ Saturating multiplication by the reciprocal of `self`.\tThe result is rounded up to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55076,"byte_end":55166,"line_start":172,"line_end":172,"column_start":2,"column_end":92}},{"value":"/ nearest whole number and saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55168,"byte_end":55252,"line_start":173,"line_end":173,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55254,"byte_end":55257,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55259,"byte_end":55270,"line_start":175,"line_end":175,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55272,"byte_end":55317,"line_start":176,"line_end":176,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55319,"byte_end":55337,"line_start":177,"line_end":177,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55339,"byte_end":55362,"line_start":178,"line_end":178,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(61).saturating_reciprocal_mul(10u64), 16);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55364,"byte_end":55443,"line_start":179,"line_end":179,"column_start":2,"column_end":81}},{"value":"/ // round up","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55445,"byte_end":55460,"line_start":180,"line_end":180,"column_start":2,"column_end":17}},{"value":"/ assert_eq!(Percent::from_percent(61).saturating_reciprocal_mul_ceil(10u64), 17);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55462,"byte_end":55546,"line_start":181,"line_end":181,"column_start":2,"column_end":86}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55548,"byte_end":55555,"line_start":182,"line_end":182,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55557,"byte_end":55564,"line_start":183,"line_end":183,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55971,"byte_end":55982,"line_start":195,"line_end":195,"column_start":5,"column_end":16},"name":"deconstruct","qualname":"::per_things::PerThing::deconstruct","value":"pub fn deconstruct(Self) -> Self::Inner","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Consume self and return the number of parts per thing.\n","sig":null,"attributes":[{"value":"/ Consume self and return the number of parts per thing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":55908,"byte_end":55966,"line_start":194,"line_end":194,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56065,"byte_end":56075,"line_start":198,"line_end":198,"column_start":5,"column_end":15},"name":"from_parts","qualname":"::per_things::PerThing::from_parts","value":"pub fn from_parts(Self::Inner) -> Self","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Build this type from a number of parts per thing.\n","sig":null,"attributes":[{"value":"/ Build this type from a number of parts per thing.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56007,"byte_end":56060,"line_start":197,"line_end":197,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56173,"byte_end":56186,"line_start":202,"line_end":202,"column_start":5,"column_end":18},"name":"from_fraction","qualname":"::per_things::PerThing::from_fraction","value":"pub fn from_fraction(f64) -> Self","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Converts a fraction into `Self`.\n","sig":null,"attributes":[{"value":"/ Converts a fraction into `Self`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56107,"byte_end":56143,"line_start":200,"line_end":200,"column_start":2,"column_end":38}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56145,"byte_end":56168,"line_start":201,"line_end":201,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56874,"byte_end":56901,"line_start":222,"line_end":222,"column_start":5,"column_end":32},"name":"from_rational_approximation","qualname":"::per_things::PerThing::from_rational_approximation","value":"pub fn from_rational_approximation<N>(N, N) -> Self where N: Clone + Ord +\nTryInto<Self::Inner> + TryInto<Self::Upper> + ops::Div<N, Output = N> +\nops::Rem<N, Output = N> + ops::Add<N, Output = N> + Unsigned,\nSelf::Inner: Into<N>","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Approximate the fraction `p/q` into a per-thing fraction. This will never overflow.","sig":null,"attributes":[{"value":"/ Approximate the fraction `p/q` into a per-thing fraction. This will never overflow.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56206,"byte_end":56293,"line_start":204,"line_end":204,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56295,"byte_end":56298,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ The computation of this approximation is performed in the generic type `N`. Given","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56300,"byte_end":56385,"line_start":206,"line_end":206,"column_start":2,"column_end":87}},{"value":"/ `M` as the data type that can hold the maximum value of this per-thing (e.g. u32 for","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56387,"byte_end":56475,"line_start":207,"line_end":207,"column_start":2,"column_end":90}},{"value":"/ perbill), this can only work if `N == M` or `N: From<M> + TryInto<M>`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56477,"byte_end":56551,"line_start":208,"line_end":208,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56553,"byte_end":56556,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ Note that this always rounds _down_, i.e.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56558,"byte_end":56603,"line_start":210,"line_end":210,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56605,"byte_end":56608,"line_start":211,"line_end":211,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56610,"byte_end":56621,"line_start":212,"line_end":212,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56623,"byte_end":56668,"line_start":213,"line_end":213,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56670,"byte_end":56688,"line_start":214,"line_end":214,"column_start":2,"column_end":20}},{"value":"/ // 989/100 is technically closer to 99%.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56690,"byte_end":56734,"line_start":215,"line_end":215,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56736,"byte_end":56751,"line_start":216,"line_end":216,"column_start":2,"column_end":17}},{"value":"/ \t\tPercent::from_rational_approximation(989u64, 1000),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56753,"byte_end":56810,"line_start":217,"line_end":217,"column_start":2,"column_end":59}},{"value":"/ \t\tPercent::from_parts(98),","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56812,"byte_end":56842,"line_start":218,"line_end":218,"column_start":2,"column_end":32}},{"value":"/ \t);","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56844,"byte_end":56851,"line_start":219,"line_end":219,"column_start":2,"column_end":9}},{"value":"/ # }","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56853,"byte_end":56860,"line_start":220,"line_end":220,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":56862,"byte_end":56869,"line_start":221,"line_end":221,"column_start":2,"column_end":9}}]},{"kind":"Struct","id":{"krate":0,"index":546},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":88537,"byte_end":88544,"line_start":1280,"line_end":1280,"column_start":2,"column_end":9},"name":"Percent","qualname":"::per_things::Percent","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":60457,"byte_end":60522,"line_start":327,"line_end":327,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":60525,"byte_end":60528,"line_start":328,"line_end":328,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":666},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":88657,"byte_end":88663,"line_start":1289,"line_end":1289,"column_start":2,"column_end":8},"name":"PerU16","qualname":"::per_things::PerU16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":60457,"byte_end":60522,"line_start":327,"line_end":327,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":60525,"byte_end":60528,"line_start":328,"line_end":328,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":786},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":88807,"byte_end":88814,"line_start":1299,"line_end":1299,"column_start":2,"column_end":9},"name":"Permill","qualname":"::per_things::Permill","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":60457,"byte_end":60522,"line_start":327,"line_end":327,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":60525,"byte_end":60528,"line_start":328,"line_end":328,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":906},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":88965,"byte_end":88972,"line_start":1309,"line_end":1309,"column_start":2,"column_end":9},"name":"Perbill","qualname":"::per_things::Perbill","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":60457,"byte_end":60522,"line_start":327,"line_end":327,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":60525,"byte_end":60528,"line_start":328,"line_end":328,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":1026},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":89127,"byte_end":89138,"line_start":1319,"line_end":1319,"column_start":2,"column_end":13},"name":"Perquintill","qualname":"::per_things::Perquintill","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":60457,"byte_end":60522,"line_start":327,"line_end":327,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":60525,"byte_end":60528,"line_start":328,"line_end":328,"column_start":3,"column_end":6}}]},{"kind":"Mod","id":{"krate":0,"index":243},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fixed_point","qualname":"::fixed_point","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":1600},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":1606},{"krate":0,"index":258},{"krate":0,"index":1608},{"krate":0,"index":259},{"krate":0,"index":1610},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":1640},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":1644},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":351},{"krate":0,"index":353},{"krate":0,"index":1156},{"krate":0,"index":1192},{"krate":0,"index":1187},{"krate":0,"index":1179},{"krate":0,"index":1177},{"krate":0,"index":1176},{"krate":0,"index":1174},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1161},{"krate":0,"index":1159},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1090},{"krate":0,"index":1096},{"krate":0,"index":1100},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":1115},{"krate":0,"index":1119},{"krate":0,"index":1123},{"krate":0,"index":1125},{"krate":0,"index":1127},{"krate":0,"index":1130},{"krate":0,"index":1133},{"krate":0,"index":1136},{"krate":0,"index":1138},{"krate":0,"index":1141},{"krate":0,"index":1143},{"krate":0,"index":1147},{"krate":0,"index":1150},{"krate":0,"index":1274},{"krate":0,"index":1310},{"krate":0,"index":1305},{"krate":0,"index":1297},{"krate":0,"index":1295},{"krate":0,"index":1294},{"krate":0,"index":1292},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1279},{"krate":0,"index":1277},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1208},{"krate":0,"index":1214},{"krate":0,"index":1218},{"krate":0,"index":1224},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1233},{"krate":0,"index":1237},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1248},{"krate":0,"index":1251},{"krate":0,"index":1254},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1265},{"krate":0,"index":1268},{"krate":0,"index":1392},{"krate":0,"index":1428},{"krate":0,"index":1423},{"krate":0,"index":1415},{"krate":0,"index":1413},{"krate":0,"index":1412},{"krate":0,"index":1410},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1397},{"krate":0,"index":1395},{"krate":0,"index":1320},{"krate":0,"index":1322},{"krate":0,"index":1326},{"krate":0,"index":1332},{"krate":0,"index":1336},{"krate":0,"index":1342},{"krate":0,"index":1345},{"krate":0,"index":1348},{"krate":0,"index":1351},{"krate":0,"index":1355},{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1363},{"krate":0,"index":1366},{"krate":0,"index":1369},{"krate":0,"index":1372},{"krate":0,"index":1374},{"krate":0,"index":1377},{"krate":0,"index":1379},{"krate":0,"index":1383},{"krate":0,"index":1386}],"decl_id":null,"docs":" Decimal Fixed Point implementations for Substrate runtime.\n","sig":null,"attributes":[{"value":"/ Decimal Fixed Point implementations for Substrate runtime.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":89960,"byte_end":90022,"line_start":18,"line_end":18,"column_start":1,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":281},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":90572,"byte_end":90589,"line_start":34,"line_end":34,"column_start":11,"column_end":28},"name":"FixedPointOperand","qualname":"::fixed_point::FixedPointOperand","value":"FixedPointOperand: Copy + Clone + Bounded + Zero + Saturating + PartialOrd +\nUniqueSaturatedInto<u128> + TryFrom<u128> + CheckedNeg","parent":null,"children":[],"decl_id":null,"docs":" Integer types that can be used to interact with `FixedPointNumber` implementations.\n","sig":null,"attributes":[{"value":"/ Integer types that can be used to interact with `FixedPointNumber` implementations.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":90474,"byte_end":90561,"line_start":33,"line_end":33,"column_start":1,"column_end":88}}]},{"kind":"Trait","id":{"krate":0,"index":292},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91410,"byte_end":91426,"line_start":55,"line_end":55,"column_start":11,"column_end":27},"name":"FixedPointNumber","qualname":"::fixed_point::FixedPointNumber","value":"FixedPointNumber: Sized + Copy + Default + Debug + Saturating + Bounded + Eq + PartialEq + Ord +\nPartialOrd + CheckedSub + CheckedAdd + CheckedMul + CheckedDiv + Add + Sub +\nDiv + Mul","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":308},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342}],"decl_id":null,"docs":" Something that implements a decimal fixed point number.","sig":null,"attributes":[{"value":"/ Something that implements a decimal fixed point number.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91050,"byte_end":91109,"line_start":48,"line_end":48,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91110,"byte_end":91113,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ The precision is given by `Self::DIV`, i.e. `1 / DIV` can be represented.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91114,"byte_end":91191,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91192,"byte_end":91195,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Each type can store numbers from `Self::Inner::min_value() / Self::DIV`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91196,"byte_end":91271,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/ to `Self::Inner::max_value() / Self::DIV`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91272,"byte_end":91318,"line_start":53,"line_end":53,"column_start":1,"column_end":47}},{"value":"/ This is also referred to as the _accuracy_ of the type in the documentation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91319,"byte_end":91399,"line_start":54,"line_end":54,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":293},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91671,"byte_end":91676,"line_start":63,"line_end":63,"column_start":7,"column_end":12},"name":"Inner","qualname":"::fixed_point::FixedPointNumber::Inner","value":"type Inner: Debug + One + CheckedMul + CheckedDiv + FixedPointOperand;","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" The underlying data type used for this fixed point number.\n","sig":null,"attributes":[{"value":"/ The underlying data type used for this fixed point number.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91602,"byte_end":91664,"line_start":62,"line_end":62,"column_start":2,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":294},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91826,"byte_end":91829,"line_start":66,"line_end":66,"column_start":8,"column_end":11},"name":"DIV","qualname":"::fixed_point::FixedPointNumber::DIV","value":"Self::Inner","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Precision of this fixed point implementation. It should be a power of `10`.\n","sig":null,"attributes":[{"value":"/ Precision of this fixed point implementation. It should be a power of `10`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91739,"byte_end":91818,"line_start":65,"line_end":65,"column_start":2,"column_end":81}}]},{"kind":"Const","id":{"krate":0,"index":295},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91920,"byte_end":91926,"line_start":69,"line_end":69,"column_start":8,"column_end":14},"name":"SIGNED","qualname":"::fixed_point::FixedPointNumber::SIGNED","value":"bool","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Indicates if this fixed point implementation is signed or not.\n","sig":null,"attributes":[{"value":"/ Indicates if this fixed point implementation is signed or not.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91846,"byte_end":91912,"line_start":68,"line_end":68,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91990,"byte_end":91998,"line_start":72,"line_end":72,"column_start":5,"column_end":13},"name":"accuracy","qualname":"::fixed_point::FixedPointNumber::accuracy","value":"pub fn accuracy() -> Self::Inner","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Precision of this fixed point implementation.\n","sig":null,"attributes":[{"value":"/ Precision of this fixed point implementation.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91936,"byte_end":91985,"line_start":71,"line_end":71,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92084,"byte_end":92094,"line_start":77,"line_end":77,"column_start":5,"column_end":15},"name":"from_inner","qualname":"::fixed_point::FixedPointNumber::from_inner","value":"pub fn from_inner(Self::Inner) -> Self","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Builds this type from an integer number.\n","sig":null,"attributes":[{"value":"/ Builds this type from an integer number.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92035,"byte_end":92079,"line_start":76,"line_end":76,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92181,"byte_end":92191,"line_start":80,"line_end":80,"column_start":5,"column_end":15},"name":"into_inner","qualname":"::fixed_point::FixedPointNumber::into_inner","value":"pub fn into_inner(Self) -> Self::Inner","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Consumes `self` and returns the inner raw value.\n","sig":null,"attributes":[{"value":"/ Consumes `self` and returns the inner raw value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92124,"byte_end":92176,"line_start":79,"line_end":79,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92339,"byte_end":92362,"line_start":85,"line_end":85,"column_start":5,"column_end":28},"name":"saturating_from_integer","qualname":"::fixed_point::FixedPointNumber::saturating_from_integer","value":"pub fn saturating_from_integer<N: FixedPointOperand>(N) -> Self","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Creates self from an integer number `int`.","sig":null,"attributes":[{"value":"/ Creates self from an integer number `int`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92216,"byte_end":92262,"line_start":82,"line_end":82,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92264,"byte_end":92267,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ Returns `Self::max` or `Self::min` if `int` exceeds accuracy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92269,"byte_end":92334,"line_start":84,"line_end":84,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92678,"byte_end":92698,"line_start":94,"line_end":94,"column_start":5,"column_end":25},"name":"checked_from_integer","qualname":"::fixed_point::FixedPointNumber::checked_from_integer","value":"pub fn checked_from_integer(Self::Inner) -> Option<Self>","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Creates `self` from an integer number `int`.","sig":null,"attributes":[{"value":"/ Creates `self` from an integer number `int`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92573,"byte_end":92621,"line_start":91,"line_end":91,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92623,"byte_end":92626,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if `int` exceeds accuracy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92628,"byte_end":92673,"line_start":93,"line_end":93,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92965,"byte_end":92989,"line_start":101,"line_end":101,"column_start":5,"column_end":29},"name":"saturating_from_rational","qualname":"::fixed_point::FixedPointNumber::saturating_from_rational","value":"pub fn saturating_from_rational<N: FixedPointOperand,\n                                D: FixedPointOperand>(N, D) -> Self","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Creates `self` from a rational number. Equal to `n / d`.","sig":null,"attributes":[{"value":"/ Creates `self` from a rational number. Equal to `n / d`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92807,"byte_end":92867,"line_start":98,"line_end":98,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92869,"byte_end":92872,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ Panics if `d = 0`. Returns `Self::max` or `Self::min` if `n / d` exceeds accuracy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":92874,"byte_end":92960,"line_start":100,"line_end":100,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":93327,"byte_end":93348,"line_start":111,"line_end":111,"column_start":5,"column_end":26},"name":"checked_from_rational","qualname":"::fixed_point::FixedPointNumber::checked_from_rational","value":"pub fn checked_from_rational<N: FixedPointOperand, D: FixedPointOperand>(N, D)\n-> Option<Self>","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Creates `self` from a rational number. Equal to `n / d`.","sig":null,"attributes":[{"value":"/ Creates `self` from a rational number. Equal to `n / d`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":93196,"byte_end":93256,"line_start":108,"line_end":108,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":93258,"byte_end":93261,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if `d == 0` or `n / d` exceeds accuracy.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":93263,"byte_end":93322,"line_start":110,"line_end":110,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":93880,"byte_end":93895,"line_start":128,"line_end":128,"column_start":5,"column_end":20},"name":"checked_mul_int","qualname":"::fixed_point::FixedPointNumber::checked_mul_int","value":"pub fn checked_mul_int<N: FixedPointOperand>(Self, N) -> Option<N>","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Checked multiplication for integer type `N`. Equal to `self * n`.","sig":null,"attributes":[{"value":"/ Checked multiplication for integer type `N`. Equal to `self * n`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":93746,"byte_end":93815,"line_start":125,"line_end":125,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":93817,"byte_end":93820,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the result does not fit in `N`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":93822,"byte_end":93875,"line_start":127,"line_end":127,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":94364,"byte_end":94382,"line_start":140,"line_end":140,"column_start":5,"column_end":23},"name":"saturating_mul_int","qualname":"::fixed_point::FixedPointNumber::saturating_mul_int","value":"pub fn saturating_mul_int<N: FixedPointOperand>(Self, N) -> N","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Saturating multiplication for integer type `N`. Equal to `self * n`.","sig":null,"attributes":[{"value":"/ Saturating multiplication for integer type `N`. Equal to `self * n`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":94213,"byte_end":94285,"line_start":137,"line_end":137,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":94287,"byte_end":94290,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ Returns `N::min` or `N::max` if the result does not fit in `N`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":94292,"byte_end":94359,"line_start":139,"line_end":139,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":94645,"byte_end":94660,"line_start":147,"line_end":147,"column_start":5,"column_end":20},"name":"checked_div_int","qualname":"::fixed_point::FixedPointNumber::checked_div_int","value":"pub fn checked_div_int<N: FixedPointOperand>(Self, N) -> Option<N>","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Checked division for integer type `N`. Equal to `self / d`.","sig":null,"attributes":[{"value":"/ Checked division for integer type `N`. Equal to `self / d`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":94505,"byte_end":94568,"line_start":144,"line_end":144,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":94570,"byte_end":94573,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the result does not fit in `N` or `d == 0`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":94575,"byte_end":94640,"line_start":146,"line_end":146,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95160,"byte_end":95178,"line_start":160,"line_end":160,"column_start":5,"column_end":23},"name":"saturating_div_int","qualname":"::fixed_point::FixedPointNumber::saturating_div_int","value":"pub fn saturating_div_int<N: FixedPointOperand>(Self, N) -> N","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Saturating division for integer type `N`. Equal to `self / d`.","sig":null,"attributes":[{"value":"/ Saturating division for integer type `N`. Equal to `self / d`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":94995,"byte_end":95061,"line_start":157,"line_end":157,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95063,"byte_end":95066,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ Panics if `d == 0`. Returns `N::min` or `N::max` if the result does not fit in `N`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95068,"byte_end":95155,"line_start":159,"line_end":159,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95574,"byte_end":95596,"line_start":171,"line_end":171,"column_start":5,"column_end":27},"name":"saturating_mul_acc_int","qualname":"::fixed_point::FixedPointNumber::saturating_mul_acc_int","value":"pub fn saturating_mul_acc_int<N: FixedPointOperand>(Self, N) -> N","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Saturating multiplication for integer type `N`, adding the result back.\n Equal to `self * n + n`.","sig":null,"attributes":[{"value":"/ Saturating multiplication for integer type `N`, adding the result back.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95366,"byte_end":95441,"line_start":167,"line_end":167,"column_start":2,"column_end":77}},{"value":"/ Equal to `self * n + n`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95443,"byte_end":95471,"line_start":168,"line_end":168,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95473,"byte_end":95476,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ Returns `N::min` or `N::max` if the multiplication or final result does not fit in `N`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95478,"byte_end":95569,"line_start":170,"line_end":170,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95915,"byte_end":95929,"line_start":182,"line_end":182,"column_start":5,"column_end":19},"name":"saturating_abs","qualname":"::fixed_point::FixedPointNumber::saturating_abs","value":"pub fn saturating_abs(Self) -> Self","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Saturating absolute value.","sig":null,"attributes":[{"value":"/ Saturating absolute value.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95826,"byte_end":95856,"line_start":179,"line_end":179,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95858,"byte_end":95861,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ Returns `Self::max` if `self == Self::min`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":95863,"byte_end":95910,"line_start":181,"line_end":181,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96229,"byte_end":96239,"line_start":194,"line_end":194,"column_start":5,"column_end":15},"name":"reciprocal","qualname":"::fixed_point::FixedPointNumber::reciprocal","value":"pub fn reciprocal(Self) -> Option<Self>","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Takes the reciprocal (inverse). Equal to `1 / self`.","sig":null,"attributes":[{"value":"/ Takes the reciprocal (inverse). Equal to `1 / self`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96128,"byte_end":96184,"line_start":191,"line_end":191,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96186,"byte_end":96189,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if `self = 0`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96191,"byte_end":96224,"line_start":193,"line_end":193,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96324,"byte_end":96328,"line_start":199,"line_end":199,"column_start":5,"column_end":9},"name":"zero","qualname":"::fixed_point::FixedPointNumber::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Returns zero.\n","sig":null,"attributes":[{"value":"/ Returns zero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96302,"byte_end":96319,"line_start":198,"line_end":198,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96424,"byte_end":96431,"line_start":204,"line_end":204,"column_start":5,"column_end":12},"name":"is_zero","qualname":"::fixed_point::FixedPointNumber::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Checks if the number is zero.\n","sig":null,"attributes":[{"value":"/ Checks if the number is zero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96386,"byte_end":96419,"line_start":203,"line_end":203,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96518,"byte_end":96521,"line_start":209,"line_end":209,"column_start":5,"column_end":8},"name":"one","qualname":"::fixed_point::FixedPointNumber::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Returns one.\n","sig":null,"attributes":[{"value":"/ Returns one.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96497,"byte_end":96513,"line_start":208,"line_end":208,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96606,"byte_end":96612,"line_start":214,"line_end":214,"column_start":5,"column_end":11},"name":"is_one","qualname":"::fixed_point::FixedPointNumber::is_one","value":"pub fn is_one(&Self) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Checks if the number is one.\n","sig":null,"attributes":[{"value":"/ Checks if the number is one.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96569,"byte_end":96601,"line_start":213,"line_end":213,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96769,"byte_end":96780,"line_start":219,"line_end":219,"column_start":5,"column_end":16},"name":"is_positive","qualname":"::fixed_point::FixedPointNumber::is_positive","value":"pub fn is_positive(Self) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive and `false` if the number is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is positive and `false` if the number is zero or negative.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96677,"byte_end":96764,"line_start":218,"line_end":218,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96936,"byte_end":96947,"line_start":224,"line_end":224,"column_start":5,"column_end":16},"name":"is_negative","qualname":"::fixed_point::FixedPointNumber::is_negative","value":"pub fn is_negative(Self) -> bool","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative and `false` if the number is zero or positive.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is negative and `false` if the number is zero or positive.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":96844,"byte_end":96931,"line_start":223,"line_end":223,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":97045,"byte_end":97050,"line_start":229,"line_end":229,"column_start":5,"column_end":10},"name":"trunc","qualname":"::fixed_point::FixedPointNumber::trunc","value":"pub fn trunc(Self) -> Self","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Returns the integer part.\n","sig":null,"attributes":[{"value":"/ Returns the integer part.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":97011,"byte_end":97040,"line_start":228,"line_end":228,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":97491,"byte_end":97495,"line_start":241,"line_end":241,"column_start":5,"column_end":9},"name":"frac","qualname":"::fixed_point::FixedPointNumber::frac","value":"pub fn frac(Self) -> Self","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Returns the fractional part.","sig":null,"attributes":[{"value":"/ Returns the fractional part.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":97317,"byte_end":97349,"line_start":237,"line_end":237,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":97351,"byte_end":97354,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ Note: the returned fraction will be non-negative for negative numbers,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":97356,"byte_end":97430,"line_start":239,"line_end":239,"column_start":2,"column_end":76}},{"value":"/ except in the case where the integer part is zero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":97432,"byte_end":97486,"line_start":240,"line_end":240,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":97834,"byte_end":97838,"line_start":254,"line_end":254,"column_start":5,"column_end":9},"name":"ceil","qualname":"::fixed_point::FixedPointNumber::ceil","value":"pub fn ceil(Self) -> Self","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the smallest integer greater than or equal to a number.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":97687,"byte_end":97754,"line_start":251,"line_end":251,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":97756,"byte_end":97759,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ Saturates to `Self::max` (truncated) if the result does not fit.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":97761,"byte_end":97829,"line_start":253,"line_end":253,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":98167,"byte_end":98172,"line_start":269,"line_end":269,"column_start":5,"column_end":10},"name":"floor","qualname":"::fixed_point::FixedPointNumber::floor","value":"pub fn floor(Self) -> Self","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the largest integer less than or equal to a number.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":98024,"byte_end":98087,"line_start":266,"line_end":266,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":98089,"byte_end":98092,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ Saturates to `Self::min` (truncated) if the result does not fit.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":98094,"byte_end":98162,"line_start":268,"line_end":268,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":98481,"byte_end":98486,"line_start":280,"line_end":280,"column_start":5,"column_end":10},"name":"round","qualname":"::fixed_point::FixedPointNumber::round","value":"pub fn round(Self) -> Self","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Returns the number rounded to the nearest integer. Rounds half-way cases away from 0.0.","sig":null,"attributes":[{"value":"/ Returns the number rounded to the nearest integer. Rounds half-way cases away from 0.0.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":98295,"byte_end":98386,"line_start":277,"line_end":277,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":98388,"byte_end":98391,"line_start":278,"line_end":278,"column_start":2,"column_end":5}},{"value":"/ Saturates to `Self::min` or `Self::max` (truncated) if the result does not fit.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":98393,"byte_end":98476,"line_start":279,"line_end":279,"column_start":2,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1156},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":140255,"byte_end":140263,"line_start":1597,"line_end":1597,"column_start":2,"column_end":10},"name":"FixedI64","qualname":"::fixed_point::FixedI64","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point number representation in the range.","sig":null,"attributes":[{"value":"/ A fixed point number representation in the range.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":100146,"byte_end":100199,"line_start":343,"line_end":343,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":100202,"byte_end":100205,"line_start":344,"line_end":344,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":1274},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":140422,"byte_end":140431,"line_start":1606,"line_end":1606,"column_start":2,"column_end":11},"name":"FixedI128","qualname":"::fixed_point::FixedI128","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point number representation in the range.","sig":null,"attributes":[{"value":"/ A fixed point number representation in the range.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":100146,"byte_end":100199,"line_start":343,"line_end":343,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":100202,"byte_end":100205,"line_start":344,"line_end":344,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":1392},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":140649,"byte_end":140658,"line_start":1616,"line_end":1616,"column_start":2,"column_end":11},"name":"FixedU128","qualname":"::fixed_point::FixedU128","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point number representation in the range.","sig":null,"attributes":[{"value":"/ A fixed point number representation in the range.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":100146,"byte_end":100199,"line_start":343,"line_end":343,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":100202,"byte_end":100205,"line_start":344,"line_end":344,"column_start":3,"column_end":6}}]},{"kind":"Mod","id":{"krate":0,"index":358},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rational","qualname":"::rational","value":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":1438},{"krate":0,"index":1447},{"krate":0,"index":1445},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":368},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":1449},{"krate":0,"index":1459},{"krate":0,"index":1458},{"krate":0,"index":1456},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":415}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1438},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":141913,"byte_end":141929,"line_start":28,"line_end":28,"column_start":12,"column_end":28},"name":"RationalInfinite","qualname":"::rational::RationalInfinite","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper for any rational number with infinitely large numerator and denominator.","sig":null,"attributes":[{"value":"/ A wrapper for any rational number with infinitely large numerator and denominator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":141661,"byte_end":141747,"line_start":23,"line_end":23,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":141748,"byte_end":141751,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This type exists to facilitate `cmp` operation","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":141752,"byte_end":141802,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/ on values like `a/b < c/d` where `a, b, c, d` are all `BigUint`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":141803,"byte_end":141871,"line_start":26,"line_end":26,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142019,"byte_end":142020,"line_start":32,"line_end":32,"column_start":9,"column_end":10},"name":"n","qualname":"<RationalInfinite>::n","value":"pub fn n(&Self) -> &BigUint","parent":null,"children":[],"decl_id":null,"docs":" Return the numerator reference.\n","sig":null,"attributes":[{"value":"/ Return the numerator reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":141975,"byte_end":142010,"line_start":31,"line_end":31,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142103,"byte_end":142104,"line_start":37,"line_end":37,"column_start":9,"column_end":10},"name":"d","qualname":"<RationalInfinite>::d","value":"pub fn d(&Self) -> &BigUint","parent":null,"children":[],"decl_id":null,"docs":" Return the denominator reference.\n","sig":null,"attributes":[{"value":"/ Return the denominator reference.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142057,"byte_end":142094,"line_start":36,"line_end":36,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142177,"byte_end":142181,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"name":"from","qualname":"<RationalInfinite>::from","value":"pub fn from(BigUint, BigUint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build from a raw `n/d`.\n","sig":null,"attributes":[{"value":"/ Build from a raw `n/d`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142141,"byte_end":142168,"line_start":41,"line_end":41,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142272,"byte_end":142276,"line_start":47,"line_end":47,"column_start":9,"column_end":13},"name":"zero","qualname":"<RationalInfinite>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Zero.\n","sig":null,"attributes":[{"value":"/ Zero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142254,"byte_end":142263,"line_start":46,"line_end":46,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142351,"byte_end":142354,"line_start":52,"line_end":52,"column_start":9,"column_end":12},"name":"one","qualname":"<RationalInfinite>::one","value":"pub fn one() -> Self","parent":null,"children":[],"decl_id":null,"docs":" One.\n","sig":null,"attributes":[{"value":"/ One.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142334,"byte_end":142342,"line_start":51,"line_end":51,"column_start":2,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1449},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143308,"byte_end":143319,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"name":"Rational128","qualname":"::rational::Rational128","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper for any rational number with a 128 bit numerator and denominator.\n","sig":null,"attributes":[{"value":"/ A wrapper for any rational number with a 128 bit numerator and denominator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143181,"byte_end":143260,"line_start":91,"line_end":91,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143769,"byte_end":143773,"line_start":111,"line_end":111,"column_start":9,"column_end":13},"name":"zero","qualname":"<Rational128>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Zero.\n","sig":null,"attributes":[{"value":"/ Zero.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143751,"byte_end":143760,"line_start":110,"line_end":110,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143820,"byte_end":143823,"line_start":116,"line_end":116,"column_start":9,"column_end":12},"name":"one","qualname":"<Rational128>::one","value":"pub fn one() -> Self","parent":null,"children":[],"decl_id":null,"docs":" One\n","sig":null,"attributes":[{"value":"/ One","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143804,"byte_end":143811,"line_start":115,"line_end":115,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143887,"byte_end":143894,"line_start":121,"line_end":121,"column_start":9,"column_end":16},"name":"is_zero","qualname":"<Rational128>::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If it is zero or not\n","sig":null,"attributes":[{"value":"/ If it is zero or not","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143854,"byte_end":143878,"line_start":120,"line_end":120,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143972,"byte_end":143976,"line_start":126,"line_end":126,"column_start":9,"column_end":13},"name":"from","qualname":"<Rational128>::from","value":"pub fn from(u128, u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build from a raw `n/d`.\n","sig":null,"attributes":[{"value":"/ Build from a raw `n/d`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143936,"byte_end":143963,"line_start":125,"line_end":125,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144114,"byte_end":144128,"line_start":131,"line_end":131,"column_start":9,"column_end":23},"name":"from_unchecked","qualname":"<Rational128>::from_unchecked","value":"pub fn from_unchecked(u128, u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build from a raw `n/d`. This could lead to / 0 if not properly handled.\n","sig":null,"attributes":[{"value":"/ Build from a raw `n/d`. This could lead to / 0 if not properly handled.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144030,"byte_end":144105,"line_start":130,"line_end":130,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144209,"byte_end":144210,"line_start":136,"line_end":136,"column_start":9,"column_end":10},"name":"n","qualname":"<Rational128>::n","value":"pub fn n(&Self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Return the numerator.\n","sig":null,"attributes":[{"value":"/ Return the numerator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144175,"byte_end":144200,"line_start":135,"line_end":135,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144278,"byte_end":144279,"line_start":141,"line_end":141,"column_start":9,"column_end":10},"name":"d","qualname":"<Rational128>::d","value":"pub fn d(&Self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Return the denominator.\n","sig":null,"attributes":[{"value":"/ Return the denominator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144242,"byte_end":144269,"line_start":140,"line_end":140,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144529,"byte_end":144535,"line_start":149,"line_end":149,"column_start":9,"column_end":15},"name":"to_den","qualname":"<Rational128>::to_den","value":"pub fn to_den(Self, u128) -> Result<Self, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Convert `self` to a similar rational number where denominator is the given `den`.\n This only returns if the result is accurate. `Err` is returned if the result cannot be\n accurately calculated.\n","sig":null,"attributes":[{"value":"/ Convert `self` to a similar rational number where denominator is the given `den`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144311,"byte_end":144396,"line_start":145,"line_end":145,"column_start":2,"column_end":87}},{"value":"/ This only returns if the result is accurate. `Err` is returned if the result cannot be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144402,"byte_end":144492,"line_start":147,"line_end":147,"column_start":2,"column_end":92}},{"value":"/ accurately calculated.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144494,"byte_end":144520,"line_start":148,"line_end":148,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144910,"byte_end":144913,"line_start":161,"line_end":161,"column_start":9,"column_end":12},"name":"lcm","qualname":"<Rational128>::lcm","value":"pub fn lcm(&Self, &Self) -> Result<u128, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Get the least common divisor of `self` and `other`.","sig":null,"attributes":[{"value":"/ Get the least common divisor of `self` and `other`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144721,"byte_end":144776,"line_start":157,"line_end":157,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144778,"byte_end":144781,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ This only returns if the result is accurate. `Err` is returned if the result cannot be","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144783,"byte_end":144873,"line_start":159,"line_end":159,"column_start":2,"column_end":92}},{"value":"/ accurately calculated.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":144875,"byte_end":144901,"line_start":160,"line_end":160,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":145292,"byte_end":145311,"line_start":169,"line_end":169,"column_start":9,"column_end":28},"name":"lazy_saturating_add","qualname":"<Rational128>::lazy_saturating_add","value":"pub fn lazy_saturating_add(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A saturating add that assumes `self` and `other` have the same denominator.\n","sig":null,"attributes":[{"value":"/ A saturating add that assumes `self` and `other` have the same denominator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":145204,"byte_end":145283,"line_start":168,"line_end":168,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":145536,"byte_end":145555,"line_start":178,"line_end":178,"column_start":9,"column_end":28},"name":"lazy_saturating_sub","qualname":"<Rational128>::lazy_saturating_sub","value":"pub fn lazy_saturating_sub(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A saturating subtraction that assumes `self` and `other` have the same denominator.\n","sig":null,"attributes":[{"value":"/ A saturating subtraction that assumes `self` and `other` have the same denominator.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":145440,"byte_end":145527,"line_start":177,"line_end":177,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":145859,"byte_end":145870,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"name":"checked_add","qualname":"<Rational128>::checked_add","value":"pub fn checked_add(Self, Self) -> Result<Self, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Addition. Simply tries to unify the denominators and add the numerators.","sig":null,"attributes":[{"value":"/ Addition. Simply tries to unify the denominators and add the numerators.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":145684,"byte_end":145760,"line_start":186,"line_end":186,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":145762,"byte_end":145765,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ Overflow might happen during any of the steps. Error is returned in such cases.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":145767,"byte_end":145850,"line_start":188,"line_end":188,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":146487,"byte_end":146498,"line_start":201,"line_end":201,"column_start":9,"column_end":20},"name":"checked_sub","qualname":"<Rational128>::checked_sub","value":"pub fn checked_sub(Self, Self) -> Result<Self, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Subtraction. Simply tries to unify the denominators and subtract the numerators.","sig":null,"attributes":[{"value":"/ Subtraction. Simply tries to unify the denominators and subtract the numerators.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":146305,"byte_end":146389,"line_start":198,"line_end":198,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":146391,"byte_end":146394,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ Overflow might happen during any of the steps. None is returned in such cases.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":146396,"byte_end":146478,"line_start":200,"line_end":200,"column_start":2,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":446},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1856,"byte_end":1868,"line_start":56,"line_end":56,"column_start":11,"column_end":23},"name":"ThresholdOrd","qualname":"::ThresholdOrd","value":"ThresholdOrd<T>","parent":null,"children":[{"krate":0,"index":448}],"decl_id":null,"docs":" Trait for comparing two numbers with an threshold.","sig":null,"attributes":[{"value":"/ Trait for comparing two numbers with an threshold.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1599,"byte_end":1653,"line_start":50,"line_end":50,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1654,"byte_end":1657,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Returns:","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1658,"byte_end":1670,"line_start":52,"line_end":52,"column_start":1,"column_end":13}},{"value":"/ - `Ordering::Greater` if `self` is greater than `other + threshold`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1671,"byte_end":1743,"line_start":53,"line_end":53,"column_start":1,"column_end":73}},{"value":"/ - `Ordering::Less` if `self` is less than `other - threshold`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1744,"byte_end":1810,"line_start":54,"line_end":54,"column_start":1,"column_end":67}},{"value":"/ - `Ordering::Equal` otherwise.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1811,"byte_end":1845,"line_start":55,"line_end":55,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1946,"byte_end":1950,"line_start":58,"line_end":58,"column_start":5,"column_end":9},"name":"tcmp","qualname":"::ThresholdOrd::tcmp","value":"pub fn tcmp(&Self, &T, T) -> Ordering","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Compare if `self` is `threshold` greater or less than `other`.\n","sig":null,"attributes":[{"value":"/ Compare if `self` is `threshold` greater or less than `other`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1875,"byte_end":1941,"line_start":57,"line_end":57,"column_start":2,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":452},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":2955,"byte_end":2967,"line_start":93,"line_end":93,"column_start":11,"column_end":23},"name":"Normalizable","qualname":"::Normalizable","value":"Normalizable<T>","parent":null,"children":[{"krate":0,"index":454}],"decl_id":null,"docs":" A collection-like object that is made of values of type `T` and can normalize its individual\n values around a centric point.","sig":null,"attributes":[{"value":"/ A collection-like object that is made of values of type `T` and can normalize its individual","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":2735,"byte_end":2831,"line_start":89,"line_end":89,"column_start":1,"column_end":97}},{"value":"/ values around a centric point.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":2832,"byte_end":2866,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":2867,"byte_end":2870,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Note that the order of items in the collection may affect the result.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":2871,"byte_end":2944,"line_start":92,"line_end":92,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":3182,"byte_end":3191,"line_start":98,"line_end":98,"column_start":5,"column_end":14},"name":"normalize","qualname":"::Normalizable::normalize","value":"pub fn normalize(&Self, T) -> Result<Vec<T>, &'static str>","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" Normalize self around `targeted_sum`.","sig":null,"attributes":[{"value":"/ Normalize self around `targeted_sum`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":2974,"byte_end":3015,"line_start":94,"line_end":94,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":3017,"byte_end":3020,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ Only returns `Ok` if the new sum of results is guaranteed to be equal to `targeted_sum`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":3022,"byte_end":3114,"line_start":96,"line_end":96,"column_start":2,"column_end":94}},{"value":"/ Else, returns an error explaining why it failed to do so.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":3116,"byte_end":3177,"line_start":97,"line_end":97,"column_start":2,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":461},"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5882,"byte_end":5891,"line_start":159,"line_end":159,"column_start":8,"column_end":17},"name":"normalize","qualname":"::normalize","value":"pub fn normalize<T>(&[T], T) -> Result<Vec<T>, &'static str> where T: Clone +\nCopy + Ord + BaseArithmetic + Unsigned + Debug","parent":null,"children":[],"decl_id":null,"docs":" Normalize `input` so that the sum of all elements reaches `targeted_sum`.","sig":null,"attributes":[{"value":"/ Normalize `input` so that the sum of all elements reaches `targeted_sum`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4034,"byte_end":4111,"line_start":130,"line_end":130,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4112,"byte_end":4115,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ This implementation is currently in a balanced position between being performant and accurate.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4116,"byte_end":4214,"line_start":132,"line_end":132,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4215,"byte_end":4218,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ 1. We prefer storing original indices, and sorting the `input` only once. This will save the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4219,"byte_end":4315,"line_start":134,"line_end":134,"column_start":1,"column_end":97}},{"value":"/    cost of sorting per round at the cost of a little bit of memory.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4316,"byte_end":4387,"line_start":135,"line_end":135,"column_start":1,"column_end":72}},{"value":"/ 2. The granularity of increment/decrements is determined by the number of elements in `input`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4388,"byte_end":4485,"line_start":136,"line_end":136,"column_start":1,"column_end":98}},{"value":"/    and their sum difference with `targeted_sum`, namely `diff = diff(sum(input), target_sum)`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4486,"byte_end":4584,"line_start":137,"line_end":137,"column_start":1,"column_end":99}},{"value":"/    This value is then distributed into `per_round = diff / input.len()` and `leftover = diff %","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4585,"byte_end":4683,"line_start":138,"line_end":138,"column_start":1,"column_end":99}},{"value":"/    round`. First, per_round is applied to all elements of input, and then we move to leftover,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4684,"byte_end":4782,"line_start":139,"line_end":139,"column_start":1,"column_end":99}},{"value":"/    in which case we add/subtract 1 by 1 until `leftover` is depleted.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4783,"byte_end":4856,"line_start":140,"line_end":140,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4857,"byte_end":4860,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ When the sum is less than the target, the above approach always holds. In this case, then each","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4861,"byte_end":4959,"line_start":142,"line_end":142,"column_start":1,"column_end":99}},{"value":"/ individual element is also less than target. Thus, by adding `per_round` to each item, neither","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":4960,"byte_end":5058,"line_start":143,"line_end":143,"column_start":1,"column_end":99}},{"value":"/ of them can overflow the numeric bound of `T`. In fact, neither of the can go beyond","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5059,"byte_end":5147,"line_start":144,"line_end":144,"column_start":1,"column_end":89}},{"value":"/ `target_sum`*.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5148,"byte_end":5166,"line_start":145,"line_end":145,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5167,"byte_end":5170,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ If sum is more than target, there is small twist. The subtraction of `per_round`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5171,"byte_end":5255,"line_start":147,"line_end":147,"column_start":1,"column_end":85}},{"value":"/ form each element might go below zero. In this case, we saturate and add the error to the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5256,"byte_end":5349,"line_start":148,"line_end":148,"column_start":1,"column_end":94}},{"value":"/ `leftover` value. This ensures that the result will always stay accurate, yet it might cause the","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5350,"byte_end":5450,"line_start":149,"line_end":149,"column_start":1,"column_end":101}},{"value":"/ execution to become increasingly slow, since leftovers are applied one by one.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5451,"byte_end":5533,"line_start":150,"line_end":150,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5534,"byte_end":5537,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ All in all, the complicated case above is rare to happen in most use cases within this repo ,","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5538,"byte_end":5635,"line_start":152,"line_end":152,"column_start":1,"column_end":98}},{"value":"/ hence we opt for it due to its simplicity.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5636,"byte_end":5682,"line_start":153,"line_end":153,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5683,"byte_end":5686,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This function will return an error is if length of `input` cannot fit in `T`, or if `sum(input)`","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5687,"byte_end":5787,"line_start":155,"line_end":155,"column_start":1,"column_end":101}},{"value":"/ cannot fit inside `T`.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5788,"byte_end":5814,"line_start":156,"line_end":156,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5815,"byte_end":5818,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ * This proof is used in the implementation as well.","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":5819,"byte_end":5874,"line_start":158,"line_end":158,"column_start":1,"column_end":56}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18448,"byte_end":18455,"line_start":83,"line_end":83,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":29211,"byte_end":29218,"line_start":432,"line_end":432,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":29580,"byte_end":29587,"line_start":450,"line_end":450,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":29683,"byte_end":29690,"line_start":456,"line_end":456,"column_start":13,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":29708,"byte_end":29715,"line_start":458,"line_end":458,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":30408,"byte_end":30415,"line_start":482,"line_end":482,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":30525,"byte_end":30532,"line_start":488,"line_end":488,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":30640,"byte_end":30647,"line_start":495,"line_end":495,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":30777,"byte_end":30784,"line_start":502,"line_end":502,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":30888,"byte_end":30895,"line_start":509,"line_end":509,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":31051,"byte_end":31058,"line_start":519,"line_end":519,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":32113,"byte_end":32120,"line_start":562,"line_end":562,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":32238,"byte_end":32245,"line_start":569,"line_end":569,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":44788,"byte_end":44789,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45217,"byte_end":45218,"line_start":80,"line_end":80,"column_start":66,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45435,"byte_end":45436,"line_start":85,"line_end":85,"column_start":59,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46103,"byte_end":46104,"line_start":101,"line_end":101,"column_start":76,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46288,"byte_end":46289,"line_start":107,"line_end":107,"column_start":76,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":47260,"byte_end":47261,"line_start":132,"line_end":132,"column_start":105,"column_end":106},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48998,"byte_end":48999,"line_start":187,"line_end":187,"column_start":40,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":98961,"byte_end":98965,"line_start":300,"line_end":300,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":141955,"byte_end":141971,"line_start":30,"line_end":30,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142432,"byte_end":142448,"line_start":57,"line_end":57,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142553,"byte_end":142569,"line_start":63,"line_end":63,"column_start":14,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142963,"byte_end":142979,"line_start":79,"line_end":79,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143090,"byte_end":143106,"line_start":85,"line_end":85,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143386,"byte_end":143397,"line_start":96,"line_end":96,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143736,"byte_end":143747,"line_start":109,"line_end":109,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":146957,"byte_end":146968,"line_start":212,"line_end":212,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":147110,"byte_end":147121,"line_start":222,"line_end":222,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":147201,"byte_end":147212,"line_start":228,"line_end":228,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":147317,"byte_end":147328,"line_start":234,"line_end":234,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":147833,"byte_end":147844,"line_start":252,"line_end":252,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":2025,"byte_end":2026,"line_start":61,"line_end":61,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":3624,"byte_end":3627,"line_start":115,"line_end":115,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1104,"byte_end":1111,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1121,"byte_end":1135,"line_start":37,"line_end":37,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":80}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1145,"byte_end":1151,"line_start":38,"line_end":38,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":94}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1161,"byte_end":1171,"line_start":39,"line_end":39,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":174}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1181,"byte_end":1192,"line_start":40,"line_end":40,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":243}},{"kind":"Mod","span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":1202,"byte_end":1210,"line_start":41,"line_end":41,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":358}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":18448,"byte_end":18455,"line_start":83,"line_end":83,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":29211,"byte_end":29218,"line_start":432,"line_end":432,"column_start":29,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":468},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":29580,"byte_end":29587,"line_start":450,"line_end":450,"column_start":20,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":468},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":29683,"byte_end":29690,"line_start":456,"line_end":456,"column_start":13,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":468},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":29708,"byte_end":29715,"line_start":458,"line_end":458,"column_start":14,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":468},"to":{"krate":2,"index":1822}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":30408,"byte_end":30415,"line_start":482,"line_end":482,"column_start":21,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":468},"to":{"krate":2,"index":1833}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":30525,"byte_end":30532,"line_start":488,"line_end":488,"column_start":19,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":468},"to":{"krate":2,"index":2136}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":30640,"byte_end":30647,"line_start":495,"line_end":495,"column_start":19,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":468},"to":{"krate":2,"index":2141}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":30777,"byte_end":30784,"line_start":502,"line_end":502,"column_start":19,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":468},"to":{"krate":2,"index":2146}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":30888,"byte_end":30895,"line_start":509,"line_end":509,"column_start":15,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":468},"to":{"krate":18,"index":301}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":31051,"byte_end":31058,"line_start":519,"line_end":519,"column_start":14,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":468},"to":{"krate":18,"index":311}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":32113,"byte_end":32120,"line_start":562,"line_end":562,"column_start":20,"column_end":27},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":468},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/biguint.rs","byte_start":32238,"byte_end":32245,"line_start":569,"line_end":569,"column_start":21,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":468},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42882,"byte_end":42886,"line_start":34,"line_end":34,"column_start":2,"column_end":6},"kind":"SuperTrait","from":{"krate":2,"index":1989},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42894,"byte_end":42898,"line_start":35,"line_end":35,"column_start":2,"column_end":6},"kind":"SuperTrait","from":{"krate":18,"index":301},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42901,"byte_end":42904,"line_start":35,"line_end":35,"column_start":9,"column_end":12},"kind":"SuperTrait","from":{"krate":18,"index":311},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42907,"byte_end":42924,"line_start":35,"line_end":35,"column_start":15,"column_end":32},"kind":"SuperTrait","from":{"krate":26,"index":4},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42928,"byte_end":42931,"line_start":36,"line_end":36,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2136},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42955,"byte_end":42964,"line_start":36,"line_end":36,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2167},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":42974,"byte_end":42977,"line_start":37,"line_end":37,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2141},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43001,"byte_end":43010,"line_start":37,"line_end":37,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2171},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43020,"byte_end":43023,"line_start":38,"line_end":38,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2146},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43047,"byte_end":43056,"line_start":38,"line_end":38,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2175},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43066,"byte_end":43069,"line_start":39,"line_end":39,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2151},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43093,"byte_end":43102,"line_start":39,"line_end":39,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43112,"byte_end":43115,"line_start":40,"line_end":40,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2157},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43139,"byte_end":43148,"line_start":40,"line_end":40,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2183},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43158,"byte_end":43161,"line_start":41,"line_end":41,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2207},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43184,"byte_end":43187,"line_start":41,"line_end":41,"column_start":28,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2213},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43211,"byte_end":43221,"line_start":42,"line_end":42,"column_start":2,"column_end":12},"kind":"SuperTrait","from":{"krate":18,"index":380},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43224,"byte_end":43234,"line_start":42,"line_end":42,"column_start":15,"column_end":25},"kind":"SuperTrait","from":{"krate":18,"index":383},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43237,"byte_end":43247,"line_start":42,"line_end":42,"column_start":28,"column_end":38},"kind":"SuperTrait","from":{"krate":18,"index":366},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43250,"byte_end":43260,"line_start":42,"line_end":42,"column_start":41,"column_end":51},"kind":"SuperTrait","from":{"krate":18,"index":369},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43263,"byte_end":43273,"line_start":42,"line_end":42,"column_start":54,"column_end":64},"kind":"SuperTrait","from":{"krate":18,"index":371},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43276,"byte_end":43286,"line_start":42,"line_end":42,"column_start":67,"column_end":77},"kind":"SuperTrait","from":{"krate":18,"index":373},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43289,"byte_end":43299,"line_start":42,"line_end":42,"column_start":80,"column_end":90},"kind":"SuperTrait","from":{"krate":0,"index":154},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43303,"byte_end":43313,"line_start":43,"line_end":43,"column_start":2,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":1833},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43322,"byte_end":43325,"line_start":43,"line_end":43,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1822},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43328,"byte_end":43335,"line_start":43,"line_end":43,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":18,"index":92},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43338,"byte_end":43348,"line_start":43,"line_end":43,"column_start":37,"column_end":47},"kind":"SuperTrait","from":{"krate":20,"index":501},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43351,"byte_end":43356,"line_start":43,"line_end":43,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43360,"byte_end":43367,"line_start":44,"line_end":44,"column_start":2,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1996},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43374,"byte_end":43381,"line_start":44,"line_end":44,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":1992},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43388,"byte_end":43395,"line_start":44,"line_end":44,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1996},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43403,"byte_end":43410,"line_start":44,"line_end":44,"column_start":45,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":1992},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43418,"byte_end":43425,"line_start":44,"line_end":44,"column_start":60,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":1996},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43433,"byte_end":43440,"line_start":44,"line_end":44,"column_start":75,"column_end":82},"kind":"SuperTrait","from":{"krate":2,"index":1992},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43449,"byte_end":43456,"line_start":45,"line_end":45,"column_start":2,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1996},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43464,"byte_end":43471,"line_start":45,"line_end":45,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1992},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43479,"byte_end":43486,"line_start":45,"line_end":45,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1996},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43495,"byte_end":43502,"line_start":45,"line_end":45,"column_start":48,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1992},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43511,"byte_end":43518,"line_start":45,"line_end":45,"column_start":64,"column_end":71},"kind":"SuperTrait","from":{"krate":2,"index":1996},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43528,"byte_end":43535,"line_start":45,"line_end":45,"column_start":81,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":1992},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43546,"byte_end":43565,"line_start":46,"line_end":46,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":138},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43572,"byte_end":43591,"line_start":46,"line_end":46,"column_start":28,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43599,"byte_end":43618,"line_start":47,"line_end":47,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":138},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43626,"byte_end":43645,"line_start":47,"line_end":47,"column_start":29,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43654,"byte_end":43673,"line_start":48,"line_end":48,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":138},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43681,"byte_end":43700,"line_start":48,"line_end":48,"column_start":29,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43709,"byte_end":43728,"line_start":49,"line_end":49,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":138},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43736,"byte_end":43755,"line_start":49,"line_end":49,"column_start":29,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43764,"byte_end":43783,"line_start":50,"line_end":50,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":138},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":43792,"byte_end":43811,"line_start":50,"line_end":50,"column_start":30,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":44788,"byte_end":44789,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":131},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45109,"byte_end":45123,"line_start":78,"line_end":78,"column_start":25,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":129},"to":{"krate":0,"index":132}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45126,"byte_end":45130,"line_start":78,"line_end":78,"column_start":42,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":1989},"to":{"krate":0,"index":132}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45138,"byte_end":45142,"line_start":78,"line_end":78,"column_start":54,"column_end":58},"kind":"SuperTrait","from":{"krate":2,"index":1989},"to":{"krate":0,"index":132}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45217,"byte_end":45218,"line_start":80,"line_end":80,"column_start":66,"column_end":67},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":134},"to":{"krate":0,"index":132}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45349,"byte_end":45361,"line_start":83,"line_end":83,"column_start":33,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":132},"to":{"krate":0,"index":135}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45364,"byte_end":45372,"line_start":83,"line_end":83,"column_start":48,"column_end":56},"kind":"SuperTrait","from":{"krate":18,"index":611},"to":{"krate":0,"index":135}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45435,"byte_end":45436,"line_start":85,"line_end":85,"column_start":59,"column_end":60},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":137},"to":{"krate":0,"index":135}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45620,"byte_end":45625,"line_start":89,"line_end":89,"column_start":42,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":138}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":45923,"byte_end":45928,"line_start":96,"line_end":96,"column_start":42,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46103,"byte_end":46104,"line_start":101,"line_end":101,"column_start":76,"column_end":77},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":146},"to":{"krate":0,"index":138}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":46288,"byte_end":46289,"line_start":107,"line_end":107,"column_start":76,"column_end":77},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":151},"to":{"krate":0,"index":141}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":47260,"byte_end":47261,"line_start":132,"line_end":132,"column_start":105,"column_end":106},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":160},"to":{"krate":0,"index":154}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/traits.rs","byte_start":48998,"byte_end":48999,"line_start":187,"line_end":187,"column_start":40,"column_end":41},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":173},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50305,"byte_end":50310,"line_start":38,"line_end":38,"column_start":2,"column_end":7},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50313,"byte_end":50323,"line_start":38,"line_end":38,"column_start":10,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":154},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50326,"byte_end":50330,"line_start":38,"line_end":38,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2081},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50333,"byte_end":50340,"line_start":38,"line_end":38,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2059},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50343,"byte_end":50345,"line_start":38,"line_end":38,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1795},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50348,"byte_end":50357,"line_start":38,"line_end":38,"column_start":45,"column_end":54},"kind":"SuperTrait","from":{"krate":2,"index":1790},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50360,"byte_end":50363,"line_start":38,"line_end":38,"column_start":57,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":1822},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50366,"byte_end":50376,"line_start":38,"line_end":38,"column_start":63,"column_end":73},"kind":"SuperTrait","from":{"krate":2,"index":1833},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50379,"byte_end":50386,"line_start":38,"line_end":38,"column_start":76,"column_end":83},"kind":"SuperTrait","from":{"krate":18,"index":92},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/per_things.rs","byte_start":50394,"byte_end":50399,"line_start":38,"line_end":38,"column_start":91,"column_end":96},"kind":"SuperTrait","from":{"krate":2,"index":6831},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":90591,"byte_end":90595,"line_start":34,"line_end":34,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2081},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":90598,"byte_end":90603,"line_start":34,"line_end":34,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1762},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":90606,"byte_end":90613,"line_start":34,"line_end":34,"column_start":45,"column_end":52},"kind":"SuperTrait","from":{"krate":18,"index":92},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":90616,"byte_end":90620,"line_start":34,"line_end":34,"column_start":55,"column_end":59},"kind":"SuperTrait","from":{"krate":18,"index":301},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":90623,"byte_end":90633,"line_start":34,"line_end":34,"column_start":62,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":154},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":90637,"byte_end":90647,"line_start":35,"line_end":35,"column_start":4,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":1833},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":90650,"byte_end":90669,"line_start":35,"line_end":35,"column_start":17,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":141},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":90678,"byte_end":90685,"line_start":35,"line_end":35,"column_start":45,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":1996},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":90694,"byte_end":90704,"line_start":35,"line_end":35,"column_start":61,"column_end":71},"kind":"SuperTrait","from":{"krate":18,"index":378},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91429,"byte_end":91434,"line_start":56,"line_end":56,"column_start":2,"column_end":7},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91437,"byte_end":91441,"line_start":56,"line_end":56,"column_start":10,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":2081},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91444,"byte_end":91451,"line_start":56,"line_end":56,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":2059},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91454,"byte_end":91459,"line_start":56,"line_end":56,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":6831},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91463,"byte_end":91473,"line_start":57,"line_end":57,"column_start":4,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":154},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91476,"byte_end":91483,"line_start":57,"line_end":57,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":18,"index":92},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91487,"byte_end":91489,"line_start":58,"line_end":58,"column_start":4,"column_end":6},"kind":"SuperTrait","from":{"krate":2,"index":1795},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91492,"byte_end":91501,"line_start":58,"line_end":58,"column_start":9,"column_end":18},"kind":"SuperTrait","from":{"krate":2,"index":1790},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91504,"byte_end":91507,"line_start":58,"line_end":58,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1822},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91510,"byte_end":91520,"line_start":58,"line_end":58,"column_start":27,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1833},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91524,"byte_end":91534,"line_start":59,"line_end":59,"column_start":4,"column_end":14},"kind":"SuperTrait","from":{"krate":18,"index":369},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91537,"byte_end":91547,"line_start":59,"line_end":59,"column_start":17,"column_end":27},"kind":"SuperTrait","from":{"krate":18,"index":366},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91550,"byte_end":91560,"line_start":59,"line_end":59,"column_start":30,"column_end":40},"kind":"SuperTrait","from":{"krate":18,"index":371},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91563,"byte_end":91573,"line_start":59,"line_end":59,"column_start":43,"column_end":53},"kind":"SuperTrait","from":{"krate":18,"index":373},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91577,"byte_end":91580,"line_start":60,"line_end":60,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":2,"index":2136},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91583,"byte_end":91586,"line_start":60,"line_end":60,"column_start":10,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":2141},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91589,"byte_end":91592,"line_start":60,"line_end":60,"column_start":16,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":2151},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":91595,"byte_end":91598,"line_start":60,"line_end":60,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2146},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/fixed_point.rs","byte_start":98961,"byte_end":98965,"line_start":300,"line_end":300,"column_start":40,"column_end":44},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":141955,"byte_end":141971,"line_start":30,"line_end":30,"column_start":6,"column_end":22},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142432,"byte_end":142448,"line_start":57,"line_end":57,"column_start":21,"column_end":37},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":1833}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142553,"byte_end":142569,"line_start":63,"line_end":63,"column_start":14,"column_end":30},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":1822}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":142963,"byte_end":142979,"line_start":79,"line_end":79,"column_start":20,"column_end":36},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143090,"byte_end":143106,"line_start":85,"line_end":85,"column_start":28,"column_end":44},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143386,"byte_end":143397,"line_start":96,"line_end":96,"column_start":29,"column_end":40},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1449},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":143736,"byte_end":143747,"line_start":109,"line_end":109,"column_start":6,"column_end":17},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":146957,"byte_end":146968,"line_start":212,"line_end":212,"column_start":18,"column_end":29},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1449},"to":{"krate":18,"index":92}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":147110,"byte_end":147121,"line_start":222,"line_end":222,"column_start":33,"column_end":44},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1449},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":147201,"byte_end":147212,"line_start":228,"line_end":228,"column_start":21,"column_end":32},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1449},"to":{"krate":2,"index":1833}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":147317,"byte_end":147328,"line_start":234,"line_end":234,"column_start":14,"column_end":25},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1449},"to":{"krate":2,"index":1822}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/rational.rs","byte_start":147833,"byte_end":147844,"line_start":252,"line_end":252,"column_start":20,"column_end":31},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1449},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":2025,"byte_end":2026,"line_start":61,"line_end":61,"column_start":29,"column_end":30},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":450},"to":{"krate":0,"index":446}},{"span":{"file_name":"/home/iamkhalifaMBA/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-3.0.0/src/lib.rs","byte_start":3624,"byte_end":3627,"line_start":115,"line_end":115,"column_start":39,"column_end":42},"kind":{"Impl":{"id":86}},"from":{"krate":5,"index":4841},"to":{"krate":0,"index":452}}]}